
var VireoCreateCoreModule = (function() {
  var _scriptDir = typeof document !== 'undefined' && document.currentScript ? document.currentScript.src : undefined;
  return (
function(VireoCreateCoreModule) {
  VireoCreateCoreModule = VireoCreateCoreModule || {};

var Module = typeof VireoCreateCoreModule !== "undefined" ? VireoCreateCoreModule : {};

Module.vireoprejs = function() {};

var moduleOverrides = {};

var key;

for (key in Module) {
 if (Module.hasOwnProperty(key)) {
  moduleOverrides[key] = Module[key];
 }
}

Module["arguments"] = [];

Module["thisProgram"] = "./this.program";

Module["quit"] = function(status, toThrow) {
 throw toThrow;
};

Module["preRun"] = [];

Module["postRun"] = [];

var ENVIRONMENT_IS_WEB = false;

var ENVIRONMENT_IS_WORKER = false;

var ENVIRONMENT_IS_NODE = false;

var ENVIRONMENT_IS_SHELL = false;

ENVIRONMENT_IS_WEB = typeof window === "object";

ENVIRONMENT_IS_WORKER = typeof importScripts === "function";

ENVIRONMENT_IS_NODE = typeof process === "object" && typeof require === "function" && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;

ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

var scriptDirectory = "";

function locateFile(path) {
 if (Module["locateFile"]) {
  return Module["locateFile"](path, scriptDirectory);
 } else {
  return scriptDirectory + path;
 }
}

if (ENVIRONMENT_IS_NODE) {
 scriptDirectory = __dirname + "/";
 var nodeFS;
 var nodePath;
 Module["read"] = function shell_read(filename, binary) {
  var ret;
  if (!nodeFS) nodeFS = require("fs");
  if (!nodePath) nodePath = require("path");
  filename = nodePath["normalize"](filename);
  ret = nodeFS["readFileSync"](filename);
  return binary ? ret : ret.toString();
 };
 Module["readBinary"] = function readBinary(filename) {
  var ret = Module["read"](filename, true);
  if (!ret.buffer) {
   ret = new Uint8Array(ret);
  }
  assert(ret.buffer);
  return ret;
 };
 if (process["argv"].length > 1) {
  Module["thisProgram"] = process["argv"][1].replace(/\\/g, "/");
 }
 Module["arguments"] = process["argv"].slice(2);
 process["on"]("uncaughtException", function(ex) {
  if (!(ex instanceof ExitStatus)) {
   throw ex;
  }
 });
 process["on"]("unhandledRejection", abort);
 Module["quit"] = function(status) {
  process["exit"](status);
 };
 Module["inspect"] = function() {
  return "[Emscripten Module object]";
 };
} else if (ENVIRONMENT_IS_SHELL) {
 if (typeof read != "undefined") {
  Module["read"] = function shell_read(f) {
   return read(f);
  };
 }
 Module["readBinary"] = function readBinary(f) {
  var data;
  if (typeof readbuffer === "function") {
   return new Uint8Array(readbuffer(f));
  }
  data = read(f, "binary");
  assert(typeof data === "object");
  return data;
 };
 if (typeof scriptArgs != "undefined") {
  Module["arguments"] = scriptArgs;
 } else if (typeof arguments != "undefined") {
  Module["arguments"] = arguments;
 }
 if (typeof quit === "function") {
  Module["quit"] = function(status) {
   quit(status);
  };
 }
} else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
 if (ENVIRONMENT_IS_WORKER) {
  scriptDirectory = self.location.href;
 } else if (document.currentScript) {
  scriptDirectory = document.currentScript.src;
 }
 if (_scriptDir) {
  scriptDirectory = _scriptDir;
 }
 if (scriptDirectory.indexOf("blob:") !== 0) {
  scriptDirectory = scriptDirectory.substr(0, scriptDirectory.lastIndexOf("/") + 1);
 } else {
  scriptDirectory = "";
 }
 Module["read"] = function shell_read(url) {
  var xhr = new XMLHttpRequest();
  xhr.open("GET", url, false);
  xhr.send(null);
  return xhr.responseText;
 };
 if (ENVIRONMENT_IS_WORKER) {
  Module["readBinary"] = function readBinary(url) {
   var xhr = new XMLHttpRequest();
   xhr.open("GET", url, false);
   xhr.responseType = "arraybuffer";
   xhr.send(null);
   return new Uint8Array(xhr.response);
  };
 }
 Module["readAsync"] = function readAsync(url, onload, onerror) {
  var xhr = new XMLHttpRequest();
  xhr.open("GET", url, true);
  xhr.responseType = "arraybuffer";
  xhr.onload = function xhr_onload() {
   if (xhr.status == 200 || xhr.status == 0 && xhr.response) {
    onload(xhr.response);
    return;
   }
   onerror();
  };
  xhr.onerror = onerror;
  xhr.send(null);
 };
 Module["setWindowTitle"] = function(title) {
  document.title = title;
 };
} else {}

var out = Module["print"] || (typeof console !== "undefined" ? console.log.bind(console) : typeof print !== "undefined" ? print : null);

var err = Module["printErr"] || (typeof printErr !== "undefined" ? printErr : typeof console !== "undefined" && console.warn.bind(console) || out);

for (key in moduleOverrides) {
 if (moduleOverrides.hasOwnProperty(key)) {
  Module[key] = moduleOverrides[key];
 }
}

moduleOverrides = undefined;

function dynamicAlloc(size) {
 var ret = HEAP32[DYNAMICTOP_PTR >> 2];
 var end = ret + size + 15 & -16;
 if (end <= _emscripten_get_heap_size()) {
  HEAP32[DYNAMICTOP_PTR >> 2] = end;
 } else {
  var success = _emscripten_resize_heap(end);
  if (!success) return 0;
 }
 return ret;
}

function getNativeTypeSize(type) {
 switch (type) {
 case "i1":
 case "i8":
  return 1;

 case "i16":
  return 2;

 case "i32":
  return 4;

 case "i64":
  return 8;

 case "float":
  return 4;

 case "double":
  return 8;

 default:
  {
   if (type[type.length - 1] === "*") {
    return 4;
   } else if (type[0] === "i") {
    var bits = parseInt(type.substr(1));
    assert(bits % 8 === 0, "getNativeTypeSize invalid bits " + bits + ", type " + type);
    return bits / 8;
   } else {
    return 0;
   }
  }
 }
}

var asm2wasmImports = {
 "f64-rem": function(x, y) {
  return x % y;
 },
 "debugger": function() {
  debugger;
 },
 "f64-to-int": function(x) {
  return x | 0;
 },
 "i32s-div": function(x, y) {
  return (x | 0) / (y | 0) | 0;
 },
 "i32u-div": function(x, y) {
  return (x >>> 0) / (y >>> 0) >>> 0;
 },
 "i32s-rem": function(x, y) {
  return (x | 0) % (y | 0) | 0;
 },
 "i32u-rem": function(x, y) {
  return (x >>> 0) % (y >>> 0) >>> 0;
 }
};

var functionPointers = new Array(0);

if (typeof WebAssembly !== "object") {
 err("no native wasm support detected");
}

function getValue(ptr, type, noSafe) {
 type = type || "i8";
 if (type.charAt(type.length - 1) === "*") type = "i32";
 switch (type) {
 case "i1":
  return HEAP8[ptr >> 0];

 case "i8":
  return HEAP8[ptr >> 0];

 case "i16":
  return HEAP16[ptr >> 1];

 case "i32":
  return HEAP32[ptr >> 2];

 case "i64":
  return HEAP32[ptr >> 2];

 case "float":
  return HEAPF32[ptr >> 2];

 case "double":
  return HEAPF64[ptr >> 3];

 default:
  abort("invalid type for getValue: " + type);
 }
 return null;
}

var wasmMemory;

var wasmTable;

var ABORT = false;

var EXITSTATUS = 0;

function assert(condition, text) {
 if (!condition) {
  abort("Assertion failed: " + text);
 }
}

function setValue(ptr, value, type, noSafe) {
 type = type || "i8";
 if (type.charAt(type.length - 1) === "*") type = "i32";
 switch (type) {
 case "i1":
  HEAP8[ptr >> 0] = value;
  break;

 case "i8":
  HEAP8[ptr >> 0] = value;
  break;

 case "i16":
  HEAP16[ptr >> 1] = value;
  break;

 case "i32":
  HEAP32[ptr >> 2] = value;
  break;

 case "i64":
  tempI64 = [ value >>> 0, (tempDouble = value, +Math_abs(tempDouble) >= 1 ? tempDouble > 0 ? (Math_min(+Math_floor(tempDouble / 4294967296), 4294967295) | 0) >>> 0 : ~~+Math_ceil((tempDouble - +(~~tempDouble >>> 0)) / 4294967296) >>> 0 : 0) ], 
  HEAP32[ptr >> 2] = tempI64[0], HEAP32[ptr + 4 >> 2] = tempI64[1];
  break;

 case "float":
  HEAPF32[ptr >> 2] = value;
  break;

 case "double":
  HEAPF64[ptr >> 3] = value;
  break;

 default:
  abort("invalid type for setValue: " + type);
 }
}

var ALLOC_NORMAL = 0;

var ALLOC_NONE = 3;

function allocate(slab, types, allocator, ptr) {
 var zeroinit, size;
 if (typeof slab === "number") {
  zeroinit = true;
  size = slab;
 } else {
  zeroinit = false;
  size = slab.length;
 }
 var singleType = typeof types === "string" ? types : null;
 var ret;
 if (allocator == ALLOC_NONE) {
  ret = ptr;
 } else {
  ret = [ _malloc, stackAlloc, dynamicAlloc ][allocator](Math.max(size, singleType ? 1 : types.length));
 }
 if (zeroinit) {
  var stop;
  ptr = ret;
  assert((ret & 3) == 0);
  stop = ret + (size & ~3);
  for (;ptr < stop; ptr += 4) {
   HEAP32[ptr >> 2] = 0;
  }
  stop = ret + size;
  while (ptr < stop) {
   HEAP8[ptr++ >> 0] = 0;
  }
  return ret;
 }
 if (singleType === "i8") {
  if (slab.subarray || slab.slice) {
   HEAPU8.set(slab, ret);
  } else {
   HEAPU8.set(new Uint8Array(slab), ret);
  }
  return ret;
 }
 var i = 0, type, typeSize, previousType;
 while (i < size) {
  var curr = slab[i];
  type = singleType || types[i];
  if (type === 0) {
   i++;
   continue;
  }
  if (type == "i64") type = "i32";
  setValue(ret + i, curr, type);
  if (previousType !== type) {
   typeSize = getNativeTypeSize(type);
   previousType = type;
  }
  i += typeSize;
 }
 return ret;
}

function getMemory(size) {
 if (!runtimeInitialized) return dynamicAlloc(size);
 return _malloc(size);
}

var UTF8Decoder = typeof TextDecoder !== "undefined" ? new TextDecoder("utf8") : undefined;

function UTF8ArrayToString(u8Array, idx, maxBytesToRead) {
 var endIdx = idx + maxBytesToRead;
 var endPtr = idx;
 while (u8Array[endPtr] && !(endPtr >= endIdx)) ++endPtr;
 if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {
  return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));
 } else {
  var str = "";
  while (idx < endPtr) {
   var u0 = u8Array[idx++];
   if (!(u0 & 128)) {
    str += String.fromCharCode(u0);
    continue;
   }
   var u1 = u8Array[idx++] & 63;
   if ((u0 & 224) == 192) {
    str += String.fromCharCode((u0 & 31) << 6 | u1);
    continue;
   }
   var u2 = u8Array[idx++] & 63;
   if ((u0 & 240) == 224) {
    u0 = (u0 & 15) << 12 | u1 << 6 | u2;
   } else {
    u0 = (u0 & 7) << 18 | u1 << 12 | u2 << 6 | u8Array[idx++] & 63;
   }
   if (u0 < 65536) {
    str += String.fromCharCode(u0);
   } else {
    var ch = u0 - 65536;
    str += String.fromCharCode(55296 | ch >> 10, 56320 | ch & 1023);
   }
  }
 }
 return str;
}

function UTF8ToString(ptr, maxBytesToRead) {
 return ptr ? UTF8ArrayToString(HEAPU8, ptr, maxBytesToRead) : "";
}

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
 if (!(maxBytesToWrite > 0)) return 0;
 var startIdx = outIdx;
 var endIdx = outIdx + maxBytesToWrite - 1;
 for (var i = 0; i < str.length; ++i) {
  var u = str.charCodeAt(i);
  if (u >= 55296 && u <= 57343) {
   var u1 = str.charCodeAt(++i);
   u = 65536 + ((u & 1023) << 10) | u1 & 1023;
  }
  if (u <= 127) {
   if (outIdx >= endIdx) break;
   outU8Array[outIdx++] = u;
  } else if (u <= 2047) {
   if (outIdx + 1 >= endIdx) break;
   outU8Array[outIdx++] = 192 | u >> 6;
   outU8Array[outIdx++] = 128 | u & 63;
  } else if (u <= 65535) {
   if (outIdx + 2 >= endIdx) break;
   outU8Array[outIdx++] = 224 | u >> 12;
   outU8Array[outIdx++] = 128 | u >> 6 & 63;
   outU8Array[outIdx++] = 128 | u & 63;
  } else {
   if (outIdx + 3 >= endIdx) break;
   outU8Array[outIdx++] = 240 | u >> 18;
   outU8Array[outIdx++] = 128 | u >> 12 & 63;
   outU8Array[outIdx++] = 128 | u >> 6 & 63;
   outU8Array[outIdx++] = 128 | u & 63;
  }
 }
 outU8Array[outIdx] = 0;
 return outIdx - startIdx;
}

function stringToUTF8(str, outPtr, maxBytesToWrite) {
 return stringToUTF8Array(str, HEAPU8, outPtr, maxBytesToWrite);
}

function lengthBytesUTF8(str) {
 var len = 0;
 for (var i = 0; i < str.length; ++i) {
  var u = str.charCodeAt(i);
  if (u >= 55296 && u <= 57343) u = 65536 + ((u & 1023) << 10) | str.charCodeAt(++i) & 1023;
  if (u <= 127) ++len; else if (u <= 2047) len += 2; else if (u <= 65535) len += 3; else len += 4;
 }
 return len;
}

var UTF16Decoder = typeof TextDecoder !== "undefined" ? new TextDecoder("utf-16le") : undefined;

function writeAsciiToMemory(str, buffer, dontAddNull) {
 for (var i = 0; i < str.length; ++i) {
  HEAP8[buffer++ >> 0] = str.charCodeAt(i);
 }
 if (!dontAddNull) HEAP8[buffer >> 0] = 0;
}

var WASM_PAGE_SIZE = 65536;

function alignUp(x, multiple) {
 if (x % multiple > 0) {
  x += multiple - x % multiple;
 }
 return x;
}

var buffer, HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

function updateGlobalBufferViews() {
 Module["HEAP8"] = HEAP8 = new Int8Array(buffer);
 Module["HEAP16"] = HEAP16 = new Int16Array(buffer);
 Module["HEAP32"] = HEAP32 = new Int32Array(buffer);
 Module["HEAPU8"] = HEAPU8 = new Uint8Array(buffer);
 Module["HEAPU16"] = HEAPU16 = new Uint16Array(buffer);
 Module["HEAPU32"] = HEAPU32 = new Uint32Array(buffer);
 Module["HEAPF32"] = HEAPF32 = new Float32Array(buffer);
 Module["HEAPF64"] = HEAPF64 = new Float64Array(buffer);
}

var DYNAMIC_BASE = 5306496, DYNAMICTOP_PTR = 63360;

var TOTAL_STACK = 5242880;

var INITIAL_TOTAL_MEMORY = Module["TOTAL_MEMORY"] || 16777216;

if (INITIAL_TOTAL_MEMORY < TOTAL_STACK) err("TOTAL_MEMORY should be larger than TOTAL_STACK, was " + INITIAL_TOTAL_MEMORY + "! (TOTAL_STACK=" + TOTAL_STACK + ")");

if (Module["buffer"]) {
 buffer = Module["buffer"];
} else {
 if (typeof WebAssembly === "object" && typeof WebAssembly.Memory === "function") {
  wasmMemory = new WebAssembly.Memory({
   "initial": INITIAL_TOTAL_MEMORY / WASM_PAGE_SIZE
  });
  buffer = wasmMemory.buffer;
 } else {
  buffer = new ArrayBuffer(INITIAL_TOTAL_MEMORY);
 }
}

updateGlobalBufferViews();

HEAP32[DYNAMICTOP_PTR >> 2] = DYNAMIC_BASE;

function callRuntimeCallbacks(callbacks) {
 while (callbacks.length > 0) {
  var callback = callbacks.shift();
  if (typeof callback == "function") {
   callback();
   continue;
  }
  var func = callback.func;
  if (typeof func === "number") {
   if (callback.arg === undefined) {
    Module["dynCall_v"](func);
   } else {
    Module["dynCall_vi"](func, callback.arg);
   }
  } else {
   func(callback.arg === undefined ? null : callback.arg);
  }
 }
}

var __ATPRERUN__ = [];

var __ATINIT__ = [];

var __ATMAIN__ = [];

var __ATPOSTRUN__ = [];

var runtimeInitialized = false;

var runtimeExited = false;

function preRun() {
 if (Module["preRun"]) {
  if (typeof Module["preRun"] == "function") Module["preRun"] = [ Module["preRun"] ];
  while (Module["preRun"].length) {
   addOnPreRun(Module["preRun"].shift());
  }
 }
 callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
 if (runtimeInitialized) return;
 runtimeInitialized = true;
 callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
 callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
 runtimeExited = true;
}

function postRun() {
 if (Module["postRun"]) {
  if (typeof Module["postRun"] == "function") Module["postRun"] = [ Module["postRun"] ];
  while (Module["postRun"].length) {
   addOnPostRun(Module["postRun"].shift());
  }
 }
 callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
 __ATPRERUN__.unshift(cb);
}

function addOnPostRun(cb) {
 __ATPOSTRUN__.unshift(cb);
}

var Math_abs = Math.abs;

var Math_ceil = Math.ceil;

var Math_floor = Math.floor;

var Math_min = Math.min;

var Math_trunc = Math.trunc;

var runDependencies = 0;

var runDependencyWatcher = null;

var dependenciesFulfilled = null;

function addRunDependency(id) {
 runDependencies++;
 if (Module["monitorRunDependencies"]) {
  Module["monitorRunDependencies"](runDependencies);
 }
}

function removeRunDependency(id) {
 runDependencies--;
 if (Module["monitorRunDependencies"]) {
  Module["monitorRunDependencies"](runDependencies);
 }
 if (runDependencies == 0) {
  if (runDependencyWatcher !== null) {
   clearInterval(runDependencyWatcher);
   runDependencyWatcher = null;
  }
  if (dependenciesFulfilled) {
   var callback = dependenciesFulfilled;
   dependenciesFulfilled = null;
   callback();
  }
 }
}

Module["preloadedImages"] = {};

Module["preloadedAudios"] = {};

var dataURIPrefix = "data:application/octet-stream;base64,";

function isDataURI(filename) {
 return String.prototype.startsWith ? filename.startsWith(dataURIPrefix) : filename.indexOf(dataURIPrefix) === 0;
}

var wasmBinaryFile = "vireo.core.wasm";

if (!isDataURI(wasmBinaryFile)) {
 wasmBinaryFile = locateFile(wasmBinaryFile);
}

function getBinary() {
 try {
  if (Module["wasmBinary"]) {
   return new Uint8Array(Module["wasmBinary"]);
  }
  if (Module["readBinary"]) {
   return Module["readBinary"](wasmBinaryFile);
  } else {
   throw "both async and sync fetching of the wasm failed";
  }
 } catch (err) {
  abort(err);
 }
}

function getBinaryPromise() {
 if (!Module["wasmBinary"] && (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) && typeof fetch === "function") {
  return fetch(wasmBinaryFile, {
   credentials: "same-origin"
  }).then(function(response) {
   if (!response["ok"]) {
    throw "failed to load wasm binary file at '" + wasmBinaryFile + "'";
   }
   return response["arrayBuffer"]();
  }).catch(function() {
   return getBinary();
  });
 }
 return new Promise(function(resolve, reject) {
  resolve(getBinary());
 });
}

function createWasm(env) {
 var info = {
  "env": env,
  "global": {
   "NaN": NaN,
   Infinity: Infinity
  },
  "global.Math": Math,
  "asm2wasm": asm2wasmImports
 };
 function receiveInstance(instance, module) {
  var exports = instance.exports;
  Module["asm"] = exports;
  removeRunDependency("wasm-instantiate");
 }
 addRunDependency("wasm-instantiate");
 if (Module["instantiateWasm"]) {
  try {
   return Module["instantiateWasm"](info, receiveInstance);
  } catch (e) {
   err("Module.instantiateWasm callback failed with error: " + e);
   return false;
  }
 }
 function receiveInstantiatedSource(output) {
  receiveInstance(output["instance"]);
 }
 function instantiateArrayBuffer(receiver) {
  getBinaryPromise().then(function(binary) {
   return WebAssembly.instantiate(binary, info);
  }).then(receiver, function(reason) {
   err("failed to asynchronously prepare wasm: " + reason);
   abort(reason);
  });
 }
 if (!Module["wasmBinary"] && typeof WebAssembly.instantiateStreaming === "function" && !isDataURI(wasmBinaryFile) && typeof fetch === "function") {
  WebAssembly.instantiateStreaming(fetch(wasmBinaryFile, {
   credentials: "same-origin"
  }), info).then(receiveInstantiatedSource, function(reason) {
   err("wasm streaming compile failed: " + reason);
   err("falling back to ArrayBuffer instantiation");
   instantiateArrayBuffer(receiveInstantiatedSource);
  });
 } else {
  instantiateArrayBuffer(receiveInstantiatedSource);
 }
 return {};
}

Module["asm"] = function(global, env, providedBuffer) {
 env["memory"] = wasmMemory;
 env["table"] = wasmTable = new WebAssembly.Table({
  "initial": 2414,
  "maximum": 2414,
  "element": "anyfunc"
 });
 env["__memory_base"] = 1024;
 env["__table_base"] = 0;
 var exports = createWasm(env);
 return exports;
};

__ATINIT__.push({
 func: function() {
  globalCtors();
 }
});

var ENV = {};

function ___buildEnvironment(environ) {
 var MAX_ENV_VALUES = 64;
 var TOTAL_ENV_SIZE = 1024;
 var poolPtr;
 var envPtr;
 if (!___buildEnvironment.called) {
  ___buildEnvironment.called = true;
  ENV["USER"] = ENV["LOGNAME"] = "web_user";
  ENV["PATH"] = "/";
  ENV["PWD"] = "/";
  ENV["HOME"] = "/home/web_user";
  ENV["LANG"] = "C.UTF-8";
  ENV["_"] = Module["thisProgram"];
  poolPtr = getMemory(TOTAL_ENV_SIZE);
  envPtr = getMemory(MAX_ENV_VALUES * 4);
  HEAP32[envPtr >> 2] = poolPtr;
  HEAP32[environ >> 2] = envPtr;
 } else {
  envPtr = HEAP32[environ >> 2];
  poolPtr = HEAP32[envPtr >> 2];
 }
 var strings = [];
 var totalSize = 0;
 for (var key in ENV) {
  if (typeof ENV[key] === "string") {
   var line = key + "=" + ENV[key];
   strings.push(line);
   totalSize += line.length;
  }
 }
 if (totalSize > TOTAL_ENV_SIZE) {
  throw new Error("Environment size exceeded TOTAL_ENV_SIZE!");
 }
 var ptrSize = 4;
 for (var i = 0; i < strings.length; i++) {
  var line = strings[i];
  writeAsciiToMemory(line, poolPtr);
  HEAP32[envPtr + i * ptrSize >> 2] = poolPtr;
  poolPtr += line.length + 1;
 }
 HEAP32[envPtr + strings.length * ptrSize >> 2] = 0;
}

function ___cxa_pure_virtual() {
 ABORT = true;
 throw "Pure virtual function called!";
}

function ___lock() {}

var SYSCALLS = {
 buffers: [ null, [], [] ],
 printChar: function(stream, curr) {
  var buffer = SYSCALLS.buffers[stream];
  if (curr === 0 || curr === 10) {
   (stream === 1 ? out : err)(UTF8ArrayToString(buffer, 0));
   buffer.length = 0;
  } else {
   buffer.push(curr);
  }
 },
 varargs: 0,
 get: function(varargs) {
  SYSCALLS.varargs += 4;
  var ret = HEAP32[SYSCALLS.varargs - 4 >> 2];
  return ret;
 },
 getStr: function() {
  var ret = UTF8ToString(SYSCALLS.get());
  return ret;
 },
 get64: function() {
  var low = SYSCALLS.get(), high = SYSCALLS.get();
  return low;
 },
 getZero: function() {
  SYSCALLS.get();
 }
};

function ___syscall140(which, varargs) {
 SYSCALLS.varargs = varargs;
 try {
  var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
  var offset = offset_low;
  FS.llseek(stream, offset, whence);
  HEAP32[result >> 2] = stream.position;
  if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null;
  return 0;
 } catch (e) {
  if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError)) abort(e);
  return -e.errno;
 }
}

function ___syscall146(which, varargs) {
 SYSCALLS.varargs = varargs;
 try {
  var stream = SYSCALLS.get(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
  var ret = 0;
  for (var i = 0; i < iovcnt; i++) {
   var ptr = HEAP32[iov + i * 8 >> 2];
   var len = HEAP32[iov + (i * 8 + 4) >> 2];
   for (var j = 0; j < len; j++) {
    SYSCALLS.printChar(stream, HEAPU8[ptr + j]);
   }
   ret += len;
  }
  return ret;
 } catch (e) {
  if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError)) abort(e);
  return -e.errno;
 }
}

function ___syscall195(which, varargs) {
 SYSCALLS.varargs = varargs;
 try {
  var path = SYSCALLS.getStr(), buf = SYSCALLS.get();
  return SYSCALLS.doStat(FS.stat, path, buf);
 } catch (e) {
  if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError)) abort(e);
  return -e.errno;
 }
}

function ___syscall197(which, varargs) {
 SYSCALLS.varargs = varargs;
 try {
  var stream = SYSCALLS.getStreamFromFD(), buf = SYSCALLS.get();
  return SYSCALLS.doStat(FS.stat, stream.path, buf);
 } catch (e) {
  if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError)) abort(e);
  return -e.errno;
 }
}

function ___setErrNo(value) {
 if (Module["___errno_location"]) HEAP32[Module["___errno_location"]() >> 2] = value;
 return value;
}

function ___syscall221(which, varargs) {
 SYSCALLS.varargs = varargs;
 try {
  return 0;
 } catch (e) {
  if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError)) abort(e);
  return -e.errno;
 }
}

function ___syscall3(which, varargs) {
 SYSCALLS.varargs = varargs;
 try {
  var stream = SYSCALLS.getStreamFromFD(), buf = SYSCALLS.get(), count = SYSCALLS.get();
  return FS.read(stream, HEAP8, buf, count);
 } catch (e) {
  if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError)) abort(e);
  return -e.errno;
 }
}

function ___syscall4(which, varargs) {
 SYSCALLS.varargs = varargs;
 try {
  var stream = SYSCALLS.get(), buf = SYSCALLS.get(), count = SYSCALLS.get();
  for (var i = 0; i < count; i++) {
   SYSCALLS.printChar(stream, HEAPU8[buf + i]);
  }
  return count;
 } catch (e) {
  if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError)) abort(e);
  return -e.errno;
 }
}

function ___syscall54(which, varargs) {
 SYSCALLS.varargs = varargs;
 try {
  return 0;
 } catch (e) {
  if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError)) abort(e);
  return -e.errno;
 }
}

function ___syscall6(which, varargs) {
 SYSCALLS.varargs = varargs;
 try {
  var stream = SYSCALLS.getStreamFromFD();
  FS.close(stream);
  return 0;
 } catch (e) {
  if (typeof FS === "undefined" || !(e instanceof FS.ErrnoError)) abort(e);
  return -e.errno;
 }
}

function ___unlock() {}

function _abort() {
 Module["abort"]();
}

function _emscripten_get_heap_size() {
 return HEAP8.length;
}

function _emscripten_get_now() {
 abort();
}

function emscripten_realloc_buffer(size) {
 var PAGE_MULTIPLE = 65536;
 size = alignUp(size, PAGE_MULTIPLE);
 var oldSize = buffer.byteLength;
 try {
  var result = wasmMemory.grow((size - oldSize) / 65536);
  if (result !== (-1 | 0)) {
   return buffer = wasmMemory.buffer;
  } else {
   return null;
  }
 } catch (e) {
  return null;
 }
}

function _emscripten_resize_heap(requestedSize) {
 var oldSize = _emscripten_get_heap_size();
 var PAGE_MULTIPLE = 65536;
 var LIMIT = 2147483648 - PAGE_MULTIPLE;
 if (requestedSize > LIMIT) {
  return false;
 }
 var MIN_TOTAL_MEMORY = 16777216;
 var newSize = Math.max(oldSize, MIN_TOTAL_MEMORY);
 while (newSize < requestedSize) {
  if (newSize <= 536870912) {
   newSize = alignUp(2 * newSize, PAGE_MULTIPLE);
  } else {
   newSize = Math.min(alignUp((3 * newSize + 2147483648) / 4, PAGE_MULTIPLE), LIMIT);
  }
 }
 var replacement = emscripten_realloc_buffer(newSize);
 if (!replacement || replacement.byteLength != newSize) {
  return false;
 }
 updateGlobalBufferViews();
 return true;
}

function _exit(status) {
 exit(status);
}

function _gettimeofday(ptr) {
 var now = Date.now();
 HEAP32[ptr >> 2] = now / 1e3 | 0;
 HEAP32[ptr + 4 >> 2] = now % 1e3 * 1e3 | 0;
 return 0;
}

var ___tm_timezone = (stringToUTF8("GMT", 63504, 4), 63504);

function _gmtime_r(time, tmPtr) {
 var date = new Date(HEAP32[time >> 2] * 1e3);
 HEAP32[tmPtr >> 2] = date.getUTCSeconds();
 HEAP32[tmPtr + 4 >> 2] = date.getUTCMinutes();
 HEAP32[tmPtr + 8 >> 2] = date.getUTCHours();
 HEAP32[tmPtr + 12 >> 2] = date.getUTCDate();
 HEAP32[tmPtr + 16 >> 2] = date.getUTCMonth();
 HEAP32[tmPtr + 20 >> 2] = date.getUTCFullYear() - 1900;
 HEAP32[tmPtr + 24 >> 2] = date.getUTCDay();
 HEAP32[tmPtr + 36 >> 2] = 0;
 HEAP32[tmPtr + 32 >> 2] = 0;
 var start = Date.UTC(date.getUTCFullYear(), 0, 1, 0, 0, 0, 0);
 var yday = (date.getTime() - start) / (1e3 * 60 * 60 * 24) | 0;
 HEAP32[tmPtr + 28 >> 2] = yday;
 HEAP32[tmPtr + 40 >> 2] = ___tm_timezone;
 return tmPtr;
}

function _jsExecutionContextFPSync() {
 Module.coreHelpers.jsExecutionContextFPSync.apply(undefined, arguments);
}

function _jsHttpClientAddHeader() {
 Module.httpClient.jsHttpClientAddHeader.apply(undefined, arguments);
}

function _jsHttpClientClose() {
 Module.httpClient.jsHttpClientClose.apply(undefined, arguments);
}

function _jsHttpClientConfigCORS() {
 Module.httpClient.jsHttpClientConfigCORS.apply(undefined, arguments);
}

function _jsHttpClientGetHeader() {
 Module.httpClient.jsHttpClientGetHeader.apply(undefined, arguments);
}

function _jsHttpClientHeaderExists() {
 Module.httpClient.jsHttpClientHeaderExists.apply(undefined, arguments);
}

function _jsHttpClientListHeaders() {
 Module.httpClient.jsHttpClientListHeaders.apply(undefined, arguments);
}

function _jsHttpClientMethod() {
 Module.httpClient.jsHttpClientMethod.apply(undefined, arguments);
}

function _jsHttpClientOpen() {
 Module.httpClient.jsHttpClientOpen.apply(undefined, arguments);
}

function _jsHttpClientRemoveHeader() {
 Module.httpClient.jsHttpClientRemoveHeader.apply(undefined, arguments);
}

function _jsIsNotAJavaScriptRefnum() {
 Module.javaScriptInvoke.jsIsNotAJavaScriptRefnum.apply(undefined, arguments);
}

function _jsJavaScriptInvoke() {
 Module.javaScriptInvoke.jsJavaScriptInvoke.apply(undefined, arguments);
}

function _jsPropertyNodeRead() {
 Module.propertyNode.jsPropertyNodeRead.apply(undefined, arguments);
}

function _jsPropertyNodeWrite() {
 Module.propertyNode.jsPropertyNodeWrite.apply(undefined, arguments);
}

function _jsRegisterForControlEvent() {
 Module.eventHelpers.jsRegisterForControlEvent.apply(undefined, arguments);
}

function _jsSystemLogging_WriteMessageUTF8() {
 Module.coreHelpers.jsSystemLogging_WriteMessageUTF8.apply(undefined, arguments);
}

function _jsUnRegisterForControlEvent() {
 Module.eventHelpers.jsUnRegisterForControlEvent.apply(undefined, arguments);
}

function _llvm_log10_f32(x) {
 return Math.log(x) / Math.LN10;
}

function _llvm_log10_f64(a0) {
 return _llvm_log10_f32(a0);
}

function _llvm_log2_f32(x) {
 return Math.log(x) / Math.LN2;
}

function _llvm_log2_f64(a0) {
 return _llvm_log2_f32(a0);
}

function _llvm_trap() {
 abort("trap!");
}

var _llvm_trunc_f32 = Math_trunc;

var _llvm_trunc_f64 = Math_trunc;

function _tzset() {
 if (_tzset.called) return;
 _tzset.called = true;
 HEAP32[__get_timezone() >> 2] = new Date().getTimezoneOffset() * 60;
 var winter = new Date(2e3, 0, 1);
 var summer = new Date(2e3, 6, 1);
 HEAP32[__get_daylight() >> 2] = Number(winter.getTimezoneOffset() != summer.getTimezoneOffset());
 function extractZone(date) {
  var match = date.toTimeString().match(/\(([A-Za-z ]+)\)$/);
  return match ? match[1] : "GMT";
 }
 var winterName = extractZone(winter);
 var summerName = extractZone(summer);
 var winterNamePtr = allocate(intArrayFromString(winterName), "i8", ALLOC_NORMAL);
 var summerNamePtr = allocate(intArrayFromString(summerName), "i8", ALLOC_NORMAL);
 if (summer.getTimezoneOffset() < winter.getTimezoneOffset()) {
  HEAP32[__get_tzname() >> 2] = winterNamePtr;
  HEAP32[__get_tzname() + 4 >> 2] = summerNamePtr;
 } else {
  HEAP32[__get_tzname() >> 2] = summerNamePtr;
  HEAP32[__get_tzname() + 4 >> 2] = winterNamePtr;
 }
}

function _localtime_r(time, tmPtr) {
 _tzset();
 var date = new Date(HEAP32[time >> 2] * 1e3);
 HEAP32[tmPtr >> 2] = date.getSeconds();
 HEAP32[tmPtr + 4 >> 2] = date.getMinutes();
 HEAP32[tmPtr + 8 >> 2] = date.getHours();
 HEAP32[tmPtr + 12 >> 2] = date.getDate();
 HEAP32[tmPtr + 16 >> 2] = date.getMonth();
 HEAP32[tmPtr + 20 >> 2] = date.getFullYear() - 1900;
 HEAP32[tmPtr + 24 >> 2] = date.getDay();
 var start = new Date(date.getFullYear(), 0, 1);
 var yday = (date.getTime() - start.getTime()) / (1e3 * 60 * 60 * 24) | 0;
 HEAP32[tmPtr + 28 >> 2] = yday;
 HEAP32[tmPtr + 36 >> 2] = -(date.getTimezoneOffset() * 60);
 var summerOffset = new Date(2e3, 6, 1).getTimezoneOffset();
 var winterOffset = start.getTimezoneOffset();
 var dst = (summerOffset != winterOffset && date.getTimezoneOffset() == Math.min(winterOffset, summerOffset)) | 0;
 HEAP32[tmPtr + 32 >> 2] = dst;
 var zonePtr = HEAP32[__get_tzname() + (dst ? 4 : 0) >> 2];
 HEAP32[tmPtr + 40 >> 2] = zonePtr;
 return tmPtr;
}

function _emscripten_memcpy_big(dest, src, num) {
 HEAPU8.set(HEAPU8.subarray(src, src + num), dest);
}

if (ENVIRONMENT_IS_NODE) {
 _emscripten_get_now = function _emscripten_get_now_actual() {
  var t = process["hrtime"]();
  return t[0] * 1e3 + t[1] / 1e6;
 };
} else if (typeof dateNow !== "undefined") {
 _emscripten_get_now = dateNow;
} else if (typeof performance === "object" && performance && typeof performance["now"] === "function") {
 _emscripten_get_now = function() {
  return performance["now"]();
 };
} else {
 _emscripten_get_now = Date.now;
}

function intArrayFromString(stringy, dontAddNull, length) {
 var len = length > 0 ? length : lengthBytesUTF8(stringy) + 1;
 var u8array = new Array(len);
 var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
 if (dontAddNull) u8array.length = numBytesWritten;
 return u8array;
}

var asmGlobalArg = {};

var asmLibraryArg = {
 "c": abort,
 "W": ___buildEnvironment,
 "N": ___cxa_pure_virtual,
 "C": ___lock,
 "j": ___setErrNo,
 "i": ___syscall140,
 "h": ___syscall146,
 "o": ___syscall195,
 "n": ___syscall197,
 "m": ___syscall221,
 "V": ___syscall3,
 "U": ___syscall4,
 "T": ___syscall54,
 "S": ___syscall6,
 "R": ___unlock,
 "b": _abort,
 "Q": _emscripten_get_heap_size,
 "g": _emscripten_get_now,
 "P": _emscripten_memcpy_big,
 "O": _emscripten_resize_heap,
 "M": _exit,
 "L": _gettimeofday,
 "K": _gmtime_r,
 "J": _jsExecutionContextFPSync,
 "I": _jsHttpClientAddHeader,
 "H": _jsHttpClientClose,
 "G": _jsHttpClientConfigCORS,
 "F": _jsHttpClientGetHeader,
 "E": _jsHttpClientHeaderExists,
 "D": _jsHttpClientListHeaders,
 "d": _jsHttpClientMethod,
 "B": _jsHttpClientOpen,
 "A": _jsHttpClientRemoveHeader,
 "l": _jsIsNotAJavaScriptRefnum,
 "z": _jsJavaScriptInvoke,
 "y": _jsPropertyNodeRead,
 "x": _jsPropertyNodeWrite,
 "k": _jsRegisterForControlEvent,
 "w": _jsSystemLogging_WriteMessageUTF8,
 "v": _jsUnRegisterForControlEvent,
 "u": _llvm_log10_f32,
 "e": _llvm_log10_f64,
 "t": _llvm_log2_f32,
 "s": _llvm_log2_f64,
 "r": _llvm_trap,
 "q": _llvm_trunc_f32,
 "p": _llvm_trunc_f64,
 "f": _localtime_r,
 "a": DYNAMICTOP_PTR
};

var asm = Module["asm"](asmGlobalArg, asmLibraryArg, buffer);

Module["asm"] = asm;

var _Data_GetArrayBegin = Module["_Data_GetArrayBegin"] = function() {
 return Module["asm"]["X"].apply(null, arguments);
};

var _Data_GetArrayDimensions = Module["_Data_GetArrayDimensions"] = function() {
 return Module["asm"]["Y"].apply(null, arguments);
};

var _Data_GetArrayLength = Module["_Data_GetArrayLength"] = function() {
 return Module["asm"]["Z"].apply(null, arguments);
};

var _Data_GetLength = Module["_Data_GetLength"] = function() {
 return Module["asm"]["_"].apply(null, arguments);
};

var _Data_GetStringBegin = Module["_Data_GetStringBegin"] = function() {
 return Module["asm"]["$"].apply(null, arguments);
};

var _Data_GetStringLength = Module["_Data_GetStringLength"] = function() {
 return Module["asm"]["aa"].apply(null, arguments);
};

var _Data_Length = Module["_Data_Length"] = function() {
 return Module["asm"]["ba"].apply(null, arguments);
};

var _Data_RawBlockSize = Module["_Data_RawBlockSize"] = function() {
 return Module["asm"]["ca"].apply(null, arguments);
};

var _Data_RawPointerFromOffset = Module["_Data_RawPointerFromOffset"] = function() {
 return Module["asm"]["da"].apply(null, arguments);
};

var _Data_Read1Byte = Module["_Data_Read1Byte"] = function() {
 return Module["asm"]["ea"].apply(null, arguments);
};

var _Data_Read2Bytes = Module["_Data_Read2Bytes"] = function() {
 return Module["asm"]["fa"].apply(null, arguments);
};

var _Data_Read4Bytes = Module["_Data_Read4Bytes"] = function() {
 return Module["asm"]["ga"].apply(null, arguments);
};

var _Data_Read8Bytes = Module["_Data_Read8Bytes"] = function() {
 return Module["asm"]["ha"].apply(null, arguments);
};

var _Data_ReadBytes = Module["_Data_ReadBytes"] = function() {
 return Module["asm"]["ia"].apply(null, arguments);
};

var _Data_ReadPointer = Module["_Data_ReadPointer"] = function() {
 return Module["asm"]["ja"].apply(null, arguments);
};

var _Data_Resize1D = Module["_Data_Resize1D"] = function() {
 return Module["asm"]["ka"].apply(null, arguments);
};

var _Data_ResizeDimensions = Module["_Data_ResizeDimensions"] = function() {
 return Module["asm"]["la"].apply(null, arguments);
};

var _Data_Type = Module["_Data_Type"] = function() {
 return Module["asm"]["ma"].apply(null, arguments);
};

var _Data_Write1Byte = Module["_Data_Write1Byte"] = function() {
 return Module["asm"]["na"].apply(null, arguments);
};

var _Data_Write2Bytes = Module["_Data_Write2Bytes"] = function() {
 return Module["asm"]["oa"].apply(null, arguments);
};

var _Data_Write4Bytes = Module["_Data_Write4Bytes"] = function() {
 return Module["asm"]["pa"].apply(null, arguments);
};

var _Data_Write8Bytes = Module["_Data_Write8Bytes"] = function() {
 return Module["asm"]["qa"].apply(null, arguments);
};

var _Data_WriteBytes = Module["_Data_WriteBytes"] = function() {
 return Module["asm"]["ra"].apply(null, arguments);
};

var _Data_WritePointer = Module["_Data_WritePointer"] = function() {
 return Module["asm"]["sa"].apply(null, arguments);
};

var _EggShell_AllocateData = Module["_EggShell_AllocateData"] = function() {
 return Module["asm"]["ta"].apply(null, arguments);
};

var _EggShell_Create = Module["_EggShell_Create"] = function() {
 return Module["asm"]["ua"].apply(null, arguments);
};

var _EggShell_DeallocateData = Module["_EggShell_DeallocateData"] = function() {
 return Module["asm"]["va"].apply(null, arguments);
};

var _EggShell_Delete = Module["_EggShell_Delete"] = function() {
 return Module["asm"]["wa"].apply(null, arguments);
};

var _EggShell_DeleteVariantAttribute = Module["_EggShell_DeleteVariantAttribute"] = function() {
 return Module["asm"]["xa"].apply(null, arguments);
};

var _EggShell_ExecuteSlices = Module["_EggShell_ExecuteSlices"] = function() {
 return Module["asm"]["ya"].apply(null, arguments);
};

var _EggShell_FindSubValue = Module["_EggShell_FindSubValue"] = function() {
 return Module["asm"]["za"].apply(null, arguments);
};

var _EggShell_FindValue = Module["_EggShell_FindValue"] = function() {
 return Module["asm"]["Aa"].apply(null, arguments);
};

var _EggShell_GetTypeList = Module["_EggShell_GetTypeList"] = function() {
 return Module["asm"]["Ba"].apply(null, arguments);
};

var _EggShell_GetVariantAttribute = Module["_EggShell_GetVariantAttribute"] = function() {
 return Module["asm"]["Ca"].apply(null, arguments);
};

var _EggShell_PeekMemory = Module["_EggShell_PeekMemory"] = function() {
 return Module["asm"]["Da"].apply(null, arguments);
};

var _EggShell_PokeMemory = Module["_EggShell_PokeMemory"] = function() {
 return Module["asm"]["Ea"].apply(null, arguments);
};

var _EggShell_REPL = Module["_EggShell_REPL"] = function() {
 return Module["asm"]["Fa"].apply(null, arguments);
};

var _EggShell_ReadDouble = Module["_EggShell_ReadDouble"] = function() {
 return Module["asm"]["Ga"].apply(null, arguments);
};

var _EggShell_ReadValueString = Module["_EggShell_ReadValueString"] = function() {
 return Module["asm"]["Ha"].apply(null, arguments);
};

var _EggShell_ReinitializeToDefault = Module["_EggShell_ReinitializeToDefault"] = function() {
 return Module["asm"]["Ia"].apply(null, arguments);
};

var _EggShell_ResizeArray = Module["_EggShell_ResizeArray"] = function() {
 return Module["asm"]["Ja"].apply(null, arguments);
};

var _EggShell_SetVariantAttribute = Module["_EggShell_SetVariantAttribute"] = function() {
 return Module["asm"]["Ka"].apply(null, arguments);
};

var _EggShell_WriteDouble = Module["_EggShell_WriteDouble"] = function() {
 return Module["asm"]["La"].apply(null, arguments);
};

var _EggShell_WriteValueString = Module["_EggShell_WriteValueString"] = function() {
 return Module["asm"]["Ma"].apply(null, arguments);
};

var _JavaScriptInvoke_GetParameterDataRef = Module["_JavaScriptInvoke_GetParameterDataRef"] = function() {
 return Module["asm"]["Na"].apply(null, arguments);
};

var _JavaScriptInvoke_GetParameterTypeRef = Module["_JavaScriptInvoke_GetParameterTypeRef"] = function() {
 return Module["asm"]["Oa"].apply(null, arguments);
};

var _OccurEvent = Module["_OccurEvent"] = function() {
 return Module["asm"]["Pa"].apply(null, arguments);
};

var _Occurrence_Set = Module["_Occurrence_Set"] = function() {
 return Module["asm"]["Qa"].apply(null, arguments);
};

var _TypeManager_Define = Module["_TypeManager_Define"] = function() {
 return Module["asm"]["Ra"].apply(null, arguments);
};

var _TypeManager_FindType = Module["_TypeManager_FindType"] = function() {
 return Module["asm"]["Sa"].apply(null, arguments);
};

var _TypeRef_Alignment = Module["_TypeRef_Alignment"] = function() {
 return Module["asm"]["Ta"].apply(null, arguments);
};

var _TypeRef_BitEncoding = Module["_TypeRef_BitEncoding"] = function() {
 return Module["asm"]["Ua"].apply(null, arguments);
};

var _TypeRef_ElementName = Module["_TypeRef_ElementName"] = function() {
 return Module["asm"]["Va"].apply(null, arguments);
};

var _TypeRef_ElementOffset = Module["_TypeRef_ElementOffset"] = function() {
 return Module["asm"]["Wa"].apply(null, arguments);
};

var _TypeRef_ElementUsageType = Module["_TypeRef_ElementUsageType"] = function() {
 return Module["asm"]["Xa"].apply(null, arguments);
};

var _TypeRef_GetSubElementByIndex = Module["_TypeRef_GetSubElementByIndex"] = function() {
 return Module["asm"]["Ya"].apply(null, arguments);
};

var _TypeRef_HasCustomDefault = Module["_TypeRef_HasCustomDefault"] = function() {
 return Module["asm"]["Za"].apply(null, arguments);
};

var _TypeRef_IsAnalogWaveform = Module["_TypeRef_IsAnalogWaveform"] = function() {
 return Module["asm"]["_a"].apply(null, arguments);
};

var _TypeRef_IsArray = Module["_TypeRef_IsArray"] = function() {
 return Module["asm"]["$a"].apply(null, arguments);
};

var _TypeRef_IsBoolean = Module["_TypeRef_IsBoolean"] = function() {
 return Module["asm"]["ab"].apply(null, arguments);
};

var _TypeRef_IsCluster = Module["_TypeRef_IsCluster"] = function() {
 return Module["asm"]["bb"].apply(null, arguments);
};

var _TypeRef_IsComplex = Module["_TypeRef_IsComplex"] = function() {
 return Module["asm"]["cb"].apply(null, arguments);
};

var _TypeRef_IsEnum = Module["_TypeRef_IsEnum"] = function() {
 return Module["asm"]["db"].apply(null, arguments);
};

var _TypeRef_IsFlat = Module["_TypeRef_IsFlat"] = function() {
 return Module["asm"]["eb"].apply(null, arguments);
};

var _TypeRef_IsFloat = Module["_TypeRef_IsFloat"] = function() {
 return Module["asm"]["fb"].apply(null, arguments);
};

var _TypeRef_IsInteger = Module["_TypeRef_IsInteger"] = function() {
 return Module["asm"]["gb"].apply(null, arguments);
};

var _TypeRef_IsJavaScriptDynamicRefNum = Module["_TypeRef_IsJavaScriptDynamicRefNum"] = function() {
 return Module["asm"]["hb"].apply(null, arguments);
};

var _TypeRef_IsJavaScriptStaticRefNum = Module["_TypeRef_IsJavaScriptStaticRefNum"] = function() {
 return Module["asm"]["ib"].apply(null, arguments);
};

var _TypeRef_IsPath = Module["_TypeRef_IsPath"] = function() {
 return Module["asm"]["jb"].apply(null, arguments);
};

var _TypeRef_IsSigned = Module["_TypeRef_IsSigned"] = function() {
 return Module["asm"]["kb"].apply(null, arguments);
};

var _TypeRef_IsString = Module["_TypeRef_IsString"] = function() {
 return Module["asm"]["lb"].apply(null, arguments);
};

var _TypeRef_IsTimestamp = Module["_TypeRef_IsTimestamp"] = function() {
 return Module["asm"]["mb"].apply(null, arguments);
};

var _TypeRef_IsValid = Module["_TypeRef_IsValid"] = function() {
 return Module["asm"]["nb"].apply(null, arguments);
};

var _TypeRef_Name = Module["_TypeRef_Name"] = function() {
 return Module["asm"]["ob"].apply(null, arguments);
};

var _TypeRef_Next = Module["_TypeRef_Next"] = function() {
 return Module["asm"]["pb"].apply(null, arguments);
};

var _TypeRef_PointerType = Module["_TypeRef_PointerType"] = function() {
 return Module["asm"]["qb"].apply(null, arguments);
};

var _TypeRef_Rank = Module["_TypeRef_Rank"] = function() {
 return Module["asm"]["rb"].apply(null, arguments);
};

var _TypeRef_SubElementCount = Module["_TypeRef_SubElementCount"] = function() {
 return Module["asm"]["sb"].apply(null, arguments);
};

var _TypeRef_TopAQSize = Module["_TypeRef_TopAQSize"] = function() {
 return Module["asm"]["tb"].apply(null, arguments);
};

var _Vireo_MaxExecWakeUpTime = Module["_Vireo_MaxExecWakeUpTime"] = function() {
 return Module["asm"]["ub"].apply(null, arguments);
};

var __get_daylight = Module["__get_daylight"] = function() {
 return Module["asm"]["vb"].apply(null, arguments);
};

var __get_timezone = Module["__get_timezone"] = function() {
 return Module["asm"]["wb"].apply(null, arguments);
};

var __get_tzname = Module["__get_tzname"] = function() {
 return Module["asm"]["xb"].apply(null, arguments);
};

var _free = Module["_free"] = function() {
 return Module["asm"]["yb"].apply(null, arguments);
};

var _malloc = Module["_malloc"] = function() {
 return Module["asm"]["zb"].apply(null, arguments);
};

var globalCtors = Module["globalCtors"] = function() {
 return Module["asm"]["Cb"].apply(null, arguments);
};

var stackAlloc = Module["stackAlloc"] = function() {
 return Module["asm"]["Db"].apply(null, arguments);
};

var stackRestore = Module["stackRestore"] = function() {
 return Module["asm"]["Eb"].apply(null, arguments);
};

var stackSave = Module["stackSave"] = function() {
 return Module["asm"]["Fb"].apply(null, arguments);
};

var dynCall_v = Module["dynCall_v"] = function() {
 return Module["asm"]["Ab"].apply(null, arguments);
};

var dynCall_vi = Module["dynCall_vi"] = function() {
 return Module["asm"]["Bb"].apply(null, arguments);
};

Module["asm"] = asm;

Module["setValue"] = setValue;

Module["getValue"] = getValue;

Module["stringToUTF8"] = stringToUTF8;

Module["lengthBytesUTF8"] = lengthBytesUTF8;

Module["stackSave"] = stackSave;

Module["stackRestore"] = stackRestore;

Module["stackAlloc"] = stackAlloc;

Module["then"] = function(func) {
 if (Module["calledRun"]) {
  func(Module);
 } else {
  var old = Module["onRuntimeInitialized"];
  Module["onRuntimeInitialized"] = function() {
   if (old) old();
   func(Module);
  };
 }
 return Module;
};

function ExitStatus(status) {
 this.name = "ExitStatus";
 this.message = "Program terminated with exit(" + status + ")";
 this.status = status;
}

ExitStatus.prototype = new Error();

ExitStatus.prototype.constructor = ExitStatus;

dependenciesFulfilled = function runCaller() {
 if (!Module["calledRun"]) run();
 if (!Module["calledRun"]) dependenciesFulfilled = runCaller;
};

function run(args) {
 args = args || Module["arguments"];
 if (runDependencies > 0) {
  return;
 }
 preRun();
 if (runDependencies > 0) return;
 if (Module["calledRun"]) return;
 function doRun() {
  if (Module["calledRun"]) return;
  Module["calledRun"] = true;
  if (ABORT) return;
  ensureInitRuntime();
  preMain();
  if (Module["onRuntimeInitialized"]) Module["onRuntimeInitialized"]();
  postRun();
 }
 if (Module["setStatus"]) {
  Module["setStatus"]("Running...");
  setTimeout(function() {
   setTimeout(function() {
    Module["setStatus"]("");
   }, 1);
   doRun();
  }, 1);
 } else {
  doRun();
 }
}

Module["run"] = run;

function exit(status, implicit) {
 if (implicit && Module["noExitRuntime"] && status === 0) {
  return;
 }
 if (Module["noExitRuntime"]) {} else {
  ABORT = true;
  EXITSTATUS = status;
  exitRuntime();
  if (Module["onExit"]) Module["onExit"](status);
 }
 Module["quit"](status, new ExitStatus(status));
}

function abort(what) {
 if (Module["onAbort"]) {
  Module["onAbort"](what);
 }
 if (what !== undefined) {
  out(what);
  err(what);
  what = JSON.stringify(what);
 } else {
  what = "";
 }
 ABORT = true;
 EXITSTATUS = 1;
 throw "abort(" + what + "). Build with -s ASSERTIONS=1 for more info.";
}

Module["abort"] = abort;

if (Module["preInit"]) {
 if (typeof Module["preInit"] == "function") Module["preInit"] = [ Module["preInit"] ];
 while (Module["preInit"].length > 0) {
  Module["preInit"].pop()();
 }
}

Module["noExitRuntime"] = true;

run();

Module.vireopostjs = function() {};


  return VireoCreateCoreModule
}
);
})();
export default VireoCreateCoreModule;