'use strict';

/**
* RadioButton custom element.
*/
JQX('jqx-radio-button', function (_JQX$ToggleButton) {
    babelHelpers.inherits(RadioButton, _JQX$ToggleButton);

    function RadioButton() {
        babelHelpers.classCallCheck(this, RadioButton);
        return babelHelpers.possibleConstructorReturn(this, (RadioButton.__proto__ || Object.getPrototypeOf(RadioButton)).apply(this, arguments));
    }

    babelHelpers.createClass(RadioButton, [{
        key: 'template',


        /** RadioButton's Html template. */
        value: function template() {
            return '<div  id=\'container\' class=\'jqx-container\'>\n                 <div class =\'jqx-overlay\'></div>\n                 <span id=\'radioButtonInput\' class =\'jqx-input\'></span>\n                 <span id=\'radioButtonLabel\' inner-h-t-m-l=\'[[innerHTML]]\' class =\'jqx-label\'><content></content></span>\n                 <input id=\'hiddenInput\' class =\'jqx-hidden-input\' type=\'hidden\'>\n               </div>';
        }
    }, {
        key: '_radioMouseEnterHandler',
        value: function _radioMouseEnterHandler() {
            var that = this;

            that.$.setAttributeValue('hover', true);
        }
    }, {
        key: '_radioMouseLeaveHandler',
        value: function _radioMouseLeaveHandler() {
            var that = this;

            that.$.setAttributeValue('hover', false);
        }
    }, {
        key: '_focusHandler',
        value: function _focusHandler() {
            var that = this;

            that.$.setAttributeValue('focus', true);
        }
    }, {
        key: '_blurHandler',
        value: function _blurHandler() {
            var that = this;

            that.$.setAttributeValue('focus', false);
        }
    }, {
        key: '_mouseEnterHandler',
        value: function _mouseEnterHandler() {
            var that = this;

            that.$.setAttributeValue('hover', true);
        }
    }, {
        key: '_mouseLeaveHandler',
        value: function _mouseLeaveHandler() {
            var that = this;

            that.$.setAttributeValue('hover', false);
        }

        /** Called when the element is ready. Used for one-time configuration of the RadioButton. */

    }, {
        key: 'ready',
        value: function ready() {
            var that = this;

            babelHelpers.get(RadioButton.prototype.__proto__ || Object.getPrototypeOf(RadioButton.prototype), 'ready', this).call(this);
            that._handleMultipleCheckedInstances();
            that._updateHidenInputNameAndValue();
        }

        /**
         * Radio button down handler.
         */

    }, {
        key: '_downHandler',
        value: function _downHandler(event) {
            var that = this,
                target = that.enableShadowDOM ? event.originalEvent.composedPath()[0] : event.originalEvent.target;

            if (that.disabled || that.readonly || that.checkMode === 'input' && target !== that.$.radioButtonInput || that.checkMode === 'label' && target !== that.$.radioButtonLabel) {
                return;
            }

            that.$.setAttributeValue('active', true);

            if (that.hasRippleAnimation) {
                var rect = that.$.radioButtonInput.getBoundingClientRect(),
                    windowScrollX = window.scrollX || window.pageXOffset,
                    windowScrollY = window.scrollY || window.pageYOffset;

                JQX.Utilities.Animation.Ripple.animate(that.$.radioButtonInput, rect.left + rect.width / 2 + windowScrollX, rect.top + rect.height / 2 + windowScrollY);
            }

            if (that._preventAction) {
                that._preventAction = false;
                return;
            }

            if (that.clickMode === 'release' || that.clickMode === 'pressAndRelease') {
                that._pressed = true;
            }

            if (that.clickMode === 'press' || that.clickMode === 'pressAndRelease') {
                if (that.clickMode === 'pressAndRelease') {
                    if (that.groupName === '') {
                        that._checkedBeforeChange = that.parentNode.querySelector('jqx-radio-button[checked]');
                    } else {
                        that._checkedBeforeChange = document.querySelector('jqx-radio-button[group-name="' + that.groupName + '"][checked]');
                    }
                }

                that._handleMouseInteraction();
            }
        }

        /**
         * Radio button mouseenter handler.
         */

    }, {
        key: '_elementMouseEnterHandler',
        value: function _elementMouseEnterHandler() {
            var that = this;

            if (that.clickMode === 'hover' && !that.disabled && !that.readonly) {
                that._handleMouseInteraction();
            }
        }

        /**
         * Document up handler.
         */

    }, {
        key: '_documentUpHandler',
        value: function _documentUpHandler(event) {
            var that = this,
                target = that.enableShadowDOM ? event.originalEvent.composedPath()[0] : event.originalEvent.target;

            if (!that._pressed || that.disabled || that.readonly || that.checkMode === 'input' && target !== that.$.radioButtonInput || that.checkMode === 'label' && target !== that.$.radioButtonLabel) {
                return;
            }

            if (that.clickMode === 'release') {
                that._handleMouseInteraction();
            } else {
                // clickMode: 'pressAndRelease'
                if (that._checkedBeforeChange === null) {
                    that.$.fireEvent('change', { 'value': false, 'oldValue': true, 'changeType': 'pointer' });
                    that.checked = false;
                } else {
                    that._checkedBeforeChange._changeCheckState('pointer');
                }

                that.focus();
                that._updateHidenInputNameAndValue();
            }

            that.$.setAttributeValue('active', false);

            that._pressed = false;
        }

        /**
         * Handles interaction with the mouse.
         */

    }, {
        key: '_handleMouseInteraction',
        value: function _handleMouseInteraction() {
            var that = this;

            that._handleTextSelection();

            that._changeCheckState('pointer');
            that.focus();
            that._updateHidenInputNameAndValue();
        }

        /**
         * Reduce checked items in group to 1(latest selected item)
         */

    }, {
        key: '_handleMultipleCheckedInstances',
        value: function _handleMultipleCheckedInstances() {
            var that = this,
                checkedRadioButtons = Array.from(document.querySelectorAll('jqx-radio-button[group-name="' + that.groupName + '"][checked]')),
                count = checkedRadioButtons.length;

            if (count < 2) {
                return;
            }

            checkedRadioButtons.forEach(function (item, i) {
                return i < count - 1 && (item.checked = false);
            });
        }

        /** Changes the check state. */

    }, {
        key: '_changeCheckState',
        value: function _changeCheckState(changeType) {
            var that = this;

            var radioButtonsGroup = document.querySelectorAll('jqx-radio-button[group-name="' + that.groupName + '"]');

            if (that.checked === true && changeType === 'api' || that.checked === false) {
                if (radioButtonsGroup.length > 0) {
                    that._changeCheckStateInGroup(radioButtonsGroup, changeType);
                } else {
                    var parent = that.parentNode;
                    radioButtonsGroup = parent.querySelectorAll('jqx-radio-button:not([group-name])');
                    that._changeCheckStateInGroup(radioButtonsGroup, changeType);
                }
            }
        }

        /** Changes the check states in group of radio buttons. */

    }, {
        key: '_changeCheckStateInGroup',
        value: function _changeCheckStateInGroup(elements, changeType) {
            var that = this;

            for (var i = 0; i < elements.length; i++) {
                elements[i]._isUpdating = true;

                if (elements[i] === that) {
                    that.checked = true;
                    that.$.fireEvent('change', { 'value': true, 'oldValue': false, 'changeType': changeType });
                } else if (elements[i].checked) {
                    elements[i].checked = false;
                }

                elements[i]._isUpdating = false;
            }
        }

        /**
        * Updates the radio button/radio group when checked property is changed.
        * @param {string} propertyName The name of the property.
        * @param {number/string} oldValue The previously entered value. Max, min and value are of type Number. The rest are of type String.
        * @param {number/string} newValue The new entered value. Max, min and value are of type Number. The rest are of type String.
        */

    }, {
        key: 'propertyChangedHandler',
        value: function propertyChangedHandler(propertyName, oldValue, newValue) {
            var that = this;

            switch (propertyName) {
                case 'value':
                    that._updateHidenInputNameAndValue();
                    break;
                case 'checked':
                    if (!that._isUpdating) {
                        that._changeCheckState('api');
                    }
                    that._updateHidenInputNameAndValue();
                    break;
                case 'name':
                    that._updateHidenInputName();
                    break;
                default:
                    babelHelpers.get(RadioButton.prototype.__proto__ || Object.getPrototypeOf(RadioButton.prototype), 'propertyChangedHandler', this).call(this, propertyName, oldValue, newValue);
                    break;
            }
        }
    }], [{
        key: 'properties',

        // RadioButton's properties.
        get: function get() {
            return {
                'checkMode': {
                    value: 'both',
                    allowedValues: ['both', 'input', 'label'],
                    type: 'string'
                },
                'type': {
                    value: 'radio',
                    type: 'string',
                    defaultReflectToAttribute: true,
                    readonly: true
                },
                'groupName': {
                    value: '',
                    type: 'string'
                }
            };
        }
    }, {
        key: 'listeners',
        get: function get() {
            return {
                'down': '_downHandler',
                'document.up': '_documentUpHandler',
                'mouseenter': '_elementMouseEnterHandler',
                'radioButtonInput.mouseenter': '_radioMouseEnterHandler',
                'radioButtonInput.mouseleave': '_radioMouseLeaveHandler',
                'focus': '_focusHandler',
                'blur': '_blurHandler'

            };
        }
    }, {
        key: 'styleUrls',
        get: function get() {
            return ['jqx.radiobutton.css'];
        }
    }]);
    return RadioButton;
}(JQX.ToggleButton));