'use strict';

/**
 * A class for instantiating a complex number object.
 */
JQX.Utilities.Assign('Complex', function () {
    function JQXComplex(value, imag) {
        babelHelpers.classCallCheck(this, JQXComplex);

        if (typeof value === 'string') {
            this.complexNumber = this.parseComplexNumber(value);
            this.realPart = this.complexNumber.realPart;
            this.imaginaryPart = this.complexNumber.imaginaryPart;
        } else if (typeof value === 'number') {
            this.realPart = value;
            if (typeof imag === 'number') {
                this.imaginaryPart = imag;
            } else if (typeof imag === 'undefined') {
                this.imaginaryPart = 0;
            } else {
                throw new Error('Can\'t create complex number: invalid imaginary part');
            }

            this.complexNumber = this.parseComplexNumber(this.realPart, this.imaginaryPart);
        } else {
            throw new Error('Can\'t create complex number');
        }
    }

    babelHelpers.createClass(JQXComplex, [{
        key: 'valueOf',
        value: function valueOf() {
            if (this.imaginaryPart === 0) {
                return this.realPart;
            }
            return null;
        }
    }, {
        key: 'isNaN',
        value: function (_isNaN) {
            function isNaN() {
                return _isNaN.apply(this, arguments);
            }

            isNaN.toString = function () {
                return _isNaN.toString();
            };

            return isNaN;
        }(function () {
            return isNaN(this.realPart) || isNaN(this.imaginaryPart);
        })
    }, {
        key: 'isZero',
        value: function isZero() {
            return (this.realPart === 0 || this.realPart === -0) && (this.imaginaryPart === 0 || this.imaginaryPart === -0);
        }
    }, {
        key: 'isFinite',
        value: function (_isFinite) {
            function isFinite() {
                return _isFinite.apply(this, arguments);
            }

            isFinite.toString = function () {
                return _isFinite.toString();
            };

            return isFinite;
        }(function () {
            return isFinite(this.realPart) && isFinite(this.imaginaryPart);
        })
    }, {
        key: 'isInfinite',
        value: function isInfinite() {
            return !(this.isNaN() || this.isFinite());
        }
    }, {
        key: 'parseComplexNumber',
        value: function parseComplexNumber(value, imaginaryPart) {
            var complexNumber = { realPart: 0, imaginaryPart: 0 };

            if (value === undefined || value === null) {
                complexNumber.realPart = complexNumber.imaginaryPart = 0;
            } else if (imaginaryPart !== undefined) {
                complexNumber.realPart = value;
                complexNumber.imaginaryPart = imaginaryPart;
            } else switch (typeof value === 'undefined' ? 'undefined' : babelHelpers.typeof(value)) {
                case 'object':
                    if ('imaginaryPart' in value && 'realPart' in value) {
                        complexNumber.realPart = value.realPart;
                        complexNumber.imaginaryPart = value.imaginaryPart;
                    } else if (value.length === 2) {
                        complexNumber.realPart = value[0];
                        complexNumber.imaginaryPart = value[1];
                    } else {
                        throw SyntaxError('Invalid Complex Number Parameter');
                    }
                    break;

                case 'string':
                    {
                        complexNumber.imaginaryPart = complexNumber.realPart = 0;

                        var tokens = value.match(/\d+\.?\d*e[+-]?\d+|\d+\.?\d*|\.\d+|./g);

                        var plus = 1;
                        var minus = 0;

                        if (tokens === null) {
                            throw SyntaxError('Invalid Complex Number Parameter');
                        }

                        for (var i = 0; i < tokens.length; i++) {
                            var token = tokens[i];

                            if (token === ' ' || token === '\t' || token === '\n') {
                                /* void */
                            } else if (token === '+') {
                                plus++;
                            } else if (token === '-') {
                                minus++;
                            } else if (token === 'i' || token === 'I') {

                                if (plus + minus === 0) {
                                    throw SyntaxError('Invalid Complex Number Parameter');
                                }

                                if (tokens[i + 1] !== ' ' && !isNaN(tokens[i + 1])) {
                                    complexNumber.imaginaryPart += parseFloat((minus % 2 ? '-' : '') + tokens[i + 1]);
                                    i++;
                                } else {
                                    complexNumber.imaginaryPart += parseFloat((minus % 2 ? '-' : '') + '1');
                                }
                                plus = minus = 0;
                            } else {
                                if (plus + minus === 0 || isNaN(token)) {
                                    throw SyntaxError('Invalid Complex Number Parameter');
                                }

                                if (tokens[i + 1] === 'i' || tokens[i + 1] === 'I') {
                                    complexNumber.imaginaryPart += parseFloat((minus % 2 ? '-' : '') + token);
                                    i++;
                                } else {
                                    complexNumber.realPart += parseFloat((minus % 2 ? '-' : '') + token);
                                }
                                plus = minus = 0;
                            }
                        }

                        if (plus + minus > 0) {
                            throw SyntaxError('Invalid Complex Number Parameter');
                        }
                        break;
                    }
                case 'number':
                    complexNumber.imaginaryPart = 0;
                    complexNumber.realPart = value;
                    break;

                default:
                    throw SyntaxError('Invalid Complex Number Parameter');
            }

            return complexNumber;
        }
    }, {
        key: 'compare',
        value: function compare(value, imaginaryPart) {
            var complexNumber = this.parseComplexNumber(value, imaginaryPart);
            var epsilon = this.parseComplexNumber('1e-16');

            return Math.abs(complexNumber.realPart - this.realPart) <= epsilon && Math.abs(complexNumber.imaginaryPart - this.imaginaryPart) <= epsilon;
        }
    }, {
        key: 'toString',
        value: function toString() {
            var realPart = this.realPart;
            var imaginaryPart = this.imaginaryPart;
            var complexNumberAsString = '';

            if (this.isNaN()) {
                return 'NaN';
            }

            if (this.isZero()) {
                return '0';
            }

            if (this.isInfinite()) {
                return 'Infinity';
            }

            if (realPart !== 0) {
                complexNumberAsString += realPart;
            }

            if (imaginaryPart !== 0) {
                if (realPart !== 0) {
                    complexNumberAsString += imaginaryPart < 0 ? ' - ' : ' + ';
                } else if (imaginaryPart < 0) {
                    complexNumberAsString += '-';
                }

                imaginaryPart = Math.abs(imaginaryPart);

                if (1 !== imaginaryPart) {
                    complexNumberAsString += imaginaryPart;
                }

                complexNumberAsString += 'i';
            }

            if (!complexNumberAsString) {
                return '0';
            }

            return complexNumberAsString;
        }
    }]);
    return JQXComplex;
}());