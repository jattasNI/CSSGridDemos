'use strict';

/**
 * Card item custom element.
 */
JQX('jqx-card', function (_JQX$ContentElement) {
    babelHelpers.inherits(Card, _JQX$ContentElement);

    function Card() {
        babelHelpers.classCallCheck(this, Card);
        return babelHelpers.possibleConstructorReturn(this, (Card.__proto__ || Object.getPrototypeOf(Card)).apply(this, arguments));
    }

    babelHelpers.createClass(Card, [{
        key: 'template',


        /**
         * Card's HTML template.
         */
        value: function template() {
            return '<div id="container" inner-h-t-m-l="[[innerHTML]]">\n                <content></content>\n            </div>';
        }

        /**
        * Updates the Card when a property is changed.
        * @param {string} propertyName The name of the property.
        * @param {number/string} oldValue The previously entered value.
        * @param {number/string} newValue The new entered value.
        */

    }, {
        key: 'propertyChangedHandler',
        value: function propertyChangedHandler(propertyName, oldValue, newValue) {
            babelHelpers.get(Card.prototype.__proto__ || Object.getPrototypeOf(Card.prototype), 'propertyChangedHandler', this).call(this, propertyName, oldValue, newValue);
            var that = this;

            switch (propertyName) {
                case 'itemTemplate':
                    that._template = that._handleTemplate();
                    that.innerHTML = that._processTemplate();
                    if (that.contentHandler) {
                        that.contentHandler(that);
                    }
                    break;
                case 'dataSource':
                    that.innerHTML = that._processTemplate();
                    if (that.contentHandler) {
                        that.contentHandler(that);
                    }
                    break;
                case 'contentHandler':
                    if (that.contentHandler) {
                        that.contentHandler(that);
                    }
                    break;
            }
        }

        /**
        * Called when the element is ready. Used for one-time configuration of the Accordion.
        */

    }, {
        key: 'ready',
        value: function ready() {
            babelHelpers.get(Card.prototype.__proto__ || Object.getPrototypeOf(Card.prototype), 'ready', this).call(this);
            var that = this;

            that._template = that._handleTemplate();

            if (that._template.hasBindings) {
                that.innerHTML = that._processTemplate();
            } else if (that.itemTemplate) {
                that.innerHTML = that._template.content;
            }

            if (that.contentHandler) {
                that.contentHandler(that);
            }
        }
    }, {
        key: '_handleTemplate',
        value: function _handleTemplate() {
            var that = this;
            var template = that.itemTemplate,
                templateContent = '',
                hasBindings = false,
                regex = /{{\w+}}/g;

            if (that.itemTemplate) {
                if (template instanceof HTMLElement) {
                    templateContent = template.innerHTML;
                } else {
                    template = document.getElementById(template);
                    templateContent = template ? template.innerHTML : '';
                }
            } else {
                templateContent = that.innerHTML;
            }

            if (regex.exec(templateContent)) {
                hasBindings = true;
            }

            return { content: templateContent, hasBindings: hasBindings };
        }
    }, {
        key: '_processTemplate',
        value: function _processTemplate() {
            var that = this,
                regex = /{{\w+}}/g,
                bindings = that._template.content.match(regex),
                dataSource = that.dataSource || {};
            var processedTemplate = that._template.content;

            if (!bindings || bindings.length === 0) {
                return processedTemplate;
            }

            bindings.forEach(function (binding) {
                var propertyName = binding.replace('{{', '').replace('}}', '');
                var data = dataSource[propertyName];

                if (data === undefined) {
                    data = '';
                }

                processedTemplate = processedTemplate.replace(binding, data);
            });

            return processedTemplate;
        }

        /**
        * Swipe events handler.
        **/

    }, {
        key: '_swipeHandler',
        value: function _swipeHandler() {}
    }], [{
        key: 'properties',

        // Card item's properties.
        get: function get() {
            return {
                'dataSource': {
                    value: null,
                    type: 'object?',
                    reflectToAttribute: false
                },
                'itemTemplate': {
                    value: null,
                    type: 'any?',
                    reflectToAttribute: false
                },
                'contentHandler': {
                    value: null,
                    type: 'function?',
                    reflectToAttribute: false
                }
            };
        }

        /**
         * Card item's event listeners.
         */

    }, {
        key: 'listeners',
        get: function get() {
            return {
                'mouseenter': '_mouseEnterHandler',
                'mouseleave': '_mouseLeaveHandler',
                'container.swipeleft': '_swipeHandler',
                'container.swiperight': '_swipeHandler',
                'container.swipetop': '_swipeHandler',
                'container.swipebottom': '_swipeHandler'
            };
        }
    }, {
        key: 'styleUrls',
        get: function get() {
            return ['jqx.card.css'];
        }
    }]);
    return Card;
}(JQX.ContentElement));