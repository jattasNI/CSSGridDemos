'use strict';

/**
* jqxFileUpload custom element.
*/
JQX('jqx-file-upload', function (_JQX$BaseElement) {
    babelHelpers.inherits(FileUpload, _JQX$BaseElement);

    function FileUpload() {
        babelHelpers.classCallCheck(this, FileUpload);
        return babelHelpers.possibleConstructorReturn(this, (FileUpload.__proto__ || Object.getPrototypeOf(FileUpload)).apply(this, arguments));
    }

    babelHelpers.createClass(FileUpload, [{
        key: 'template',


        /**
        * Element's HTML template.
        */
        value: function template() {
            return '<div id="container">\n                    <div id="fileUploadHeader" class ="jqx-file-upload-header">\n                        <jqx-button class ="jqx-browse-button" id="browseButton" disabled="[[disabled]]" theme="[[theme]]"></jqx-button>\n                        <input type="file" class ="jqx-browse-input" id="browseInput" name="[[name]]" animation="[[animation]]" disabled="[[disabled]]" unfocusable="[[unfocusable]]" multiple="[[multiple]]" webkitdirectory="[[directory]]" mozdirectory="[[directory]]" />\n                    </div>\n                    <div id="fileUploadContainer" class ="jqx-file-upload-container">\n                        <div id="dropZone" class ="jqx-drop-zone"></div>\n                        <div id="selectedFiles" class ="jqx-selected-files"></div>\n                    </div>\n                    <div id="totalFiles" class ="jqx-total-files jqx-hidden">Total flies: 0</div>\n                    <div id="fileUploadFooter" class ="jqx-file-upload-footer jqx-hidden">\n                        <jqx-button class ="jqx-upload-all-button success" id="uploadAllButton" animation="[[animation]]" disabled="[[disabled]]" unfocusable="[[unfocusable]]"" theme="[[theme]]"></jqx-button>\n                        <jqx-button class ="jqx-cancel-all-button error" id="cancelAllButton" animation="[[animation]]" disabled="[[disabled]]" unfocusable="[[unfocusable]]" theme="[[theme]]"></jqx-button>\n                        <jqx-button class ="jqx-pause-all-button primary" id="pauseAllButton" animation="[[animation]]" disabled="[[disabled]]" unfocusable="[[unfocusable]]" theme="[[theme]]"></jqx-button>\n                    </div>\n                </div>';
        }

        /**
        * Updates the element when a property is changed.
        * @param {string} propertyName The name of the property.
        * @param {number/string} oldValue The previously entered value. Max, min and value are of type Number. The rest are of type String.
        * @param {number/string} newValue The new entered value. Max, min and value are of type Number. The rest are of type String.
        */

    }, {
        key: 'propertyChangedHandler',
        value: function propertyChangedHandler(propertyName, oldValue, newValue) {
            var that = this;

            babelHelpers.get(FileUpload.prototype.__proto__ || Object.getPrototypeOf(FileUpload.prototype), 'propertyChangedHandler', this).call(this, propertyName, oldValue, newValue);

            switch (propertyName) {
                case 'accept':
                    that.$.browseInput.accept = newValue;
                    break;
                case 'dropZone':
                case 'appendTo':
                    that._handleContainers();
                    break;
                case 'messages':
                case 'locale':
                    that._updateTextValues();
                    break;
                case 'multiple':
                    that.$.browseButton.disabled = !that.multiple && that._selectedFiles.length > 0 || that.disabled ? true : false;

                    if (!newValue && that._selectedFiles.length > 1) {
                        that._selectedFiles.splice(1);
                        that._renderSelectedFiles();
                    }
                    break;
                case 'itemTemplate':
                    if (that._items.length > 0) {
                        that._renderSelectedFiles();

                        that._handleComponentsByAvailableHeight();
                    }
                    break;
            }
        }

        /**
        * Called when the element is attached to the DOM.
        */

    }, {
        key: 'attached',
        value: function attached() {
            babelHelpers.get(FileUpload.prototype.__proto__ || Object.getPrototypeOf(FileUpload.prototype), 'attached', this).call(this);
            var that = this;

            that._handleContainers();
        }

        /**
        * Called when the element is detached from the DOM.
        */

    }, {
        key: 'detached',
        value: function detached() {
            babelHelpers.get(FileUpload.prototype.__proto__ || Object.getPrototypeOf(FileUpload.prototype), 'detached', this).call(this);
            var that = this;

            if (!that.$.fileUploadContainer.contains(that.$.dropZone)) {
                that.$.fileUploadContainer.insertBefore(that.$.dropZone, that.$.fileUploadContainer.firstChild);
            }

            if (!that.$.fileUploadContainer.contains(that.$.selectedFiles)) {
                that.$.fileUploadContainer.appendChild(that.$.selectedFiles);
            }
        }

        /**
        * Element's ready method.
        */

    }, {
        key: 'ready',
        value: function ready() {
            babelHelpers.get(FileUpload.prototype.__proto__ || Object.getPrototypeOf(FileUpload.prototype), 'ready', this).call(this);
            var that = this;

            that._setInitialValues();
            that._updateTextValues();
            that._handleContainers();
            that._handleComponentsByAvailableHeight();
        }

        /**
        * Browses for a file
        */

    }, {
        key: 'browse',
        value: function browse() {
            var that = this;

            if (that.disabled || !that.multiple && that._selectedFiles.length > 0) {
                return;
            }

            that.$.browseInput.click();
        }

        /**
        * Cancels all selected files
        */

    }, {
        key: 'cancelAll',
        value: function cancelAll() {
            var that = this;

            if (that.disabled || that._items.length === 0) {
                return;
            }

            for (var i = that._items.length - 1; i >= 0; i--) {
                that.cancelFile(that._items[i].index);
            }

            that.$.browseButton.disabled = !that.multiple && that._selectedFiles.length > 0 || that.disabled ? true : false;
        }

        /**
        * Cancels single file.
        * @param {number/string} index - File index.
        */

    }, {
        key: 'cancelFile',
        value: function cancelFile(index) {
            var that = this;

            if (!(typeof index === 'number') || that.disabled || that._selectedFiles.length === 0) {
                return;
            }

            var item = that._getFileItem(index, true);

            if (!item) {
                that.error(that.localize('wrongItemIndex', { elementType: that.nodeName.toLowerCase() }));
                return;
            }

            var itemIndexInArray = that._items.indexOf(item);

            that.$.selectedFiles.removeChild(item);

            if (item && item.xhr) {
                item.xhr.abort();
            }

            that._selectedFiles.splice(itemIndexInArray, 1);
            that._items.splice(itemIndexInArray, 1);

            that.$.fireEvent('uploadCanceled', {
                'filename': item.file.name,
                'type': item.file.type,
                'size': item.file.size,
                'index': item.index
            });

            that.$.browseButton.disabled = !that.multiple && that._selectedFiles.length > 0 || that.disabled ? true : false;

            if (that._selectedFiles.length === 0) {
                that.$.fileUploadFooter.classList.add('jqx-hidden');
            }

            that._handleComponentsByAvailableHeight();
        }

        /**
        * Pauses upload of all files
        */

    }, {
        key: 'pauseAll',
        value: function pauseAll() {
            var that = this;

            if (that.disabled || that._items.length === 0) {
                return;
            }

            for (var i = that._items.length - 1; i >= 0; i--) {
                var item = that._items[i];

                if (item.xhr) {
                    item.xhr.abort();
                }
            }
        }

        /**
        * Pauses particular file upload
        * @param {number/string} index - File index.
        */

    }, {
        key: 'pauseFile',
        value: function pauseFile(index) {
            var that = this;

            if (typeof index !== 'number' && typeof index !== 'string' || that.disabled || that._items.length === 0) {
                return;
            }

            var item = that._getFileItem(index, true);

            if (!item) {
                that.error(that.localize('wrongItemIndex', { elementType: that.nodeName.toLowerCase() }));
                return;
            }

            item.classList.remove('jqx-uploading-start');

            if (item && item.xhr) {
                item.xhr.abort();
            }

            that.$.fireEvent('uploadPaused', {
                'filename': item.file.name,
                'type': item.file.type,
                'size': item.file.size,
                'index': item.index
            });
        }

        /**
        * Uploads all selected files
        */

    }, {
        key: 'uploadAll',
        value: function uploadAll() {
            var that = this;

            if (that.disabled || that._items.length === 0) {
                return;
            }

            for (var i = that._items.length - 1; i >= 0; i--) {
                if (!that._items[i].uploading) {
                    that.uploadFile(that._items[i].index);
                }
            }
        }

        /**
        * Uploads single file. Selection by index
        * @param {number/string} index - File index.
        */

    }, {
        key: 'uploadFile',
        value: function uploadFile(index) {
            var that = this;
            var isOnProgress = false;

            if (!(typeof index === 'number') || that.disabled || that._selectedFiles.length === 0) {
                return;
            }

            var selectedItem = that._getFileItem(index, true);

            if (!selectedItem) {
                return;
            }

            var formData = new FormData(),
                progressBar = that.showProgress ? selectedItem.getElementsByTagName('jqx-progress-bar')[0] : null,
                // to be handled case with custom template
            selectedFile = selectedItem.file;

            selectedItem.classList.remove('jqx-pause', 'jqx-error');
            selectedItem.classList.add('jqx-uploading-start');
            formData.append('userfile[]', selectedFile);

            var request = new XMLHttpRequest();

            request.open('POST', that.uploadUrl);

            if (that.setHeaders && typeof that.setHeaders === 'function') {
                that.setHeaders(request, selectedFile);
            }

            that.$.fireEvent('uploadStarted', {
                'filename': selectedItem.file.name,
                'type': selectedItem.file.type,
                'size': selectedItem.file.size,
                'index': selectedItem.index
            });

            request.upload.onprogress = function (event) {
                if (!isOnProgress) {
                    isOnProgress = true;
                    selectedItem.classList.remove('jqx-uploading-start');
                    selectedItem.classList.add('jqx-uploading');
                    selectedItem.uploading = true;
                    selectedItem.xhr = request;
                }

                if (progressBar) {
                    progressBar.value = Math.round(event.loaded / event.total * 100);
                }

                selectedItem.classList.remove('jqx-pause', 'jqx-error');
            };

            request.onabort = function () {
                selectedItem.classList.remove('jqx-uploading-start', 'jqx-uploading');
                selectedItem.classList.add('jqx-pause');

                selectedItem.addEventListener('animationend', function () {
                    selectedItem.classList.remove('jqx-pause', 'jqx-error');
                });
            };

            request.onerror = function () {
                selectedItem.classList.remove('jqx-uploading-start', 'jqx-uploading');
                selectedItem.classList.add('jqx-error');

                selectedItem.addEventListener('animationend', function () {
                    selectedItem.classList.remove('jqx-pause', 'jqx-error');
                });
            };

            request.onload = function () {
                isOnProgress = false;
                selectedItem.classList.remove('jqx-uploading-start', 'jqx-uploading');

                if (request.status >= 200 && request.status <= 299) {
                    var actualIndex = that._items.indexOf(selectedItem);

                    that.$.selectedFiles.removeChild(selectedItem);
                    that._selectedFiles.splice(that._selectedFiles.indexOf(selectedFile), 1);
                    that._items.splice(actualIndex, 1);
                    that.$.browseButton.disabled = !that.multiple && that._selectedFiles.length > 0 || that.disabled ? true : false;

                    that.$.fireEvent('uploadCompleted', {
                        'filename': selectedItem.file.name,
                        'type': selectedItem.file.type,
                        'size': selectedItem.file.size,
                        'status': request.status,
                        'index': selectedItem.index
                    });

                    if (that._selectedFiles.length === 0) {
                        that.$.fileUploadFooter.classList.add('jqx-hidden');
                    }
                } else {
                    selectedItem.classList.add('jqx-error');
                    selectedItem.classList.remove('jqx-uploading');

                    that.$.fireEvent('uploadError', {
                        'filename': selectedItem.file.name,
                        'type': selectedItem.file.type,
                        'size': selectedItem.file.size,
                        'status': request.status,
                        'index': selectedItem.index
                    });
                }
            };

            request.onreadystatechange = function () {
                if (!that.responseHandler || typeof that.responseHandler !== 'function') {
                    return;
                }

                that.responseHandler(request);
            };

            request.send(formData);
        }

        /**
         * Click handler about "selectedFiles" container
         */

    }, {
        key: '_selectedFilesClickHandler',
        value: function _selectedFilesClickHandler(event) {
            var that = this;

            if (that.disabled) {
                return;
            }

            var target = event.target,
                isItemUploadClicked = target.closest('.jqx-item-upload-button'),
                isItemCancelClicked = target.closest('.jqx-item-cancel-button'),
                isItemAbortClicked = target.closest('.jqx-item-pause-button'),
                clickedItem = target.closest('.jqx-file');

            if (isItemUploadClicked) {
                that.uploadFile(clickedItem.index);
            } else if (isItemCancelClicked) {
                that.cancelFile(clickedItem.index);
            } else if (isItemAbortClicked) {
                that.pauseFile(clickedItem.index);
            }
        }

        /**
        * Change handler of the browse input. When files are selected, they are updated into files array and rendered in the file list
        **/

    }, {
        key: '_browseInputChangeHandler',
        value: function _browseInputChangeHandler() {
            var that = this,
                selectedFiles = that._filterNewFiles(Array.from(that.$.browseInput.files));
            var validNewFiles = [];

            if (that.disabled || selectedFiles.length === 0) {
                return;
            }

            if (that.validateFile && typeof that.validateFile === 'function') {
                validNewFiles = selectedFiles.filter(function (file) {
                    if (that.validateFile(file)) {
                        return true;
                    }

                    that.$.fireEvent('validationError', {
                        'filename': file.name,
                        'type': file.type,
                        'size': file.size
                    });

                    return false;
                });
            } else {
                validNewFiles = selectedFiles;
            }

            that._selectedFiles = that._selectedFiles.concat(validNewFiles);

            if (that._selectedFiles.length === 0) {
                return;
            }

            that._renderSelectedFiles(validNewFiles);
            that.$.browseButton.disabled = !that.multiple && that._selectedFiles.length > 0 || that.disabled ? true : false;
            that.$.browseInput.value = '';

            if (that.autoUpload) {
                that.uploadAll();
            }
        }

        /**
        * Returns the default item template
        * @param {string} fileName
        */

    }, {
        key: '_defaultItemTemplate',
        value: function _defaultItemTemplate(fileName) {
            var that = this,
                uploadString = that.localize('uploadFile'),
                cancelString = that.localize('cancelFile'),
                pauseString = that.localize('pauseFile');

            return '<span class ="jqx-item-name">' + fileName + '</span>\n                <span class ="jqx-item-upload-button" title="' + uploadString + '"></span>\n                <span class ="jqx-item-cancel-button" title="' + cancelString + '"></span>\n                <span class ="jqx-item-pause-button" title="' + pauseString + '"></span>\n                <jqx-progress-bar></jqx-progress-bar>';
        }

        /**
         * dropZone event handler
         */

    }, {
        key: '_dropZoneHandler',
        value: function _dropZoneHandler(event) {
            var that = this;

            event.preventDefault();
            event.stopPropagation();

            if (that.disabled) {
                return;
            }

            if (event.type === 'dragenter' || event.type === 'dragleave') {
                event.type === 'dragenter' ? that.$.dropZone.classList.add('jqx-drag-over') : that.$.dropZone.classList.remove('jqx-drag-over');
                return;
            }

            if (event.type === 'drop') {
                that.$.dropZone.classList.remove('jqx-drag-over');

                if (!that.multiple && that._selectedFiles.length > 0) {
                    return;
                }

                if (event.dataTransfer && event.dataTransfer.files && event.dataTransfer.files.length) {
                    var droppedFiles = that._filterNewFiles(Array.from(event.dataTransfer.files));

                    if (droppedFiles.length === 0) {
                        return;
                    }

                    if (!that.multiple) {
                        droppedFiles.splice(1);
                    }

                    that._selectedFiles = that._selectedFiles.concat(droppedFiles);
                    that._renderSelectedFiles(droppedFiles);
                }

                that.$.browseButton.disabled = !that.multiple && that._selectedFiles.length > 0 || that.disabled ? true : false;
            }
        }

        /**
        * Check for duplicated items during selection and add only new items in the selection list
        * @param {array} newSelection - an array with selected files
        **/

    }, {
        key: '_filterNewFiles',
        value: function _filterNewFiles(newSelection) {
            var that = this;
            var newFiles = [];

            for (var i = 0; i < newSelection.length; i++) {
                var notYetSelected = true;

                for (var j = 0; j < that._selectedFiles.length; j++) {
                    var oldFile = that._selectedFiles[j],
                        newFile = newSelection[i];

                    if (newFile.name === oldFile.name && newFile.size === oldFile.size && newFile.type === oldFile.type && newFile.lastModified === oldFile.lastModified) {
                        notYetSelected = false;
                        break;
                    }
                }

                if (notYetSelected) {
                    newFiles.push(newSelection[i]);
                }
            }

            return newFiles;
        }

        /**
         * Gets an item from the array with files if it matches particular file name or index
         */

    }, {
        key: '_getFileItem',
        value: function _getFileItem(value, byIndex) {
            var that = this;
            var match = null;

            if (!value || typeof value !== 'string' && typeof value !== 'number') {
                return;
            }

            if (!that._items || that._items.length === 0) {
                return null;
            }

            for (var i = 0; i < that._items.length; i++) {
                var item = that._items[i];

                if (byIndex && item.index === parseInt(value) || item.file.name === value) {
                    match = item;
                }
            }

            return match;
        }

        /**
         * Handles "dropZone" and "selectedFiles" contaners if they are append to external elements
         */

    }, {
        key: '_handleContainers',
        value: function _handleContainers() {
            var that = this,
                dropZone = that._validateDOMElement(that.dropZone),
                appendTo = that._validateDOMElement(that.appendTo);

            if (dropZone) {
                dropZone.appendChild(that.$.dropZone);
            } else {
                that.$.fileUploadContainer.insertBefore(that.$.dropZone, that.$.fileUploadContainer.firstChild);
            }

            if (appendTo) {
                appendTo.appendChild(that.$.selectedFiles);
            } else {
                that.$.fileUploadContainer.appendChild(that.$.selectedFiles);
            }
        }

        /**
        * Applies the item template
        * @param {string} fileName
        */

    }, {
        key: '_handleItemTemplate',
        value: function _handleItemTemplate(filename) {
            var that = this;
            var template = that.itemTemplate;

            if (!('content' in document.createElement('template'))) {
                that.error(that.localize('htmlTemplateNotSuported', { elementType: that.nodeName.toLowerCase() }));
                return;
            }

            if (!template) {
                return that._defaultItemTemplate(filename);
            }

            if (typeof template === 'string') {
                template = document.getElementById(template);
            }

            if (template === null || !('content' in template)) {
                that.error(that.localize('invalidTemplate', { elementType: that.nodeName.toLowerCase(), property: 'template' }));
                return;
            }

            var content = template.innerHTML,
                regex = /{{\w+}}/g;

            return content.replace(regex, filename);
        }

        /**
        * Renders selected files - by defauld file name, upload button, cancel button
        * @param {array} files - Array with all selected files.
        **/

    }, {
        key: '_renderSelectedFiles',
        value: function _renderSelectedFiles(files) {
            var that = this,
                itemsFragment = document.createDocumentFragment(),
                filesToRender = files || that._selectedFiles;

            if (!files) {
                that._items = [];
                that.$.selectedFiles.innerHTML = '';
            }

            for (var i = 0; i < filesToRender.length; i++) {
                var fileName = that.directory ? filesToRender[i].webkitRelativePath : filesToRender[i].name,
                    item = document.createElement('div');

                that._incrementIndex++;
                item.className = 'jqx-file';
                item.index = that._incrementIndex;
                item.setAttribute('item-id', that._incrementIndex);
                item.innerHTML = that.itemTemplate ? that._handleItemTemplate(fileName) : that._defaultItemTemplate(fileName);
                item.file = filesToRender[i];
                item.uploading = false;
                item.xhr = null;

                itemsFragment.appendChild(item);
                that._items.push(item);

                that.$.fireEvent('fileSelected', {
                    'filename': filesToRender[i].name,
                    'type': filesToRender[i].type,
                    'size': filesToRender[i].size,
                    'index': item.index
                });
            }

            that.$.selectedFiles.appendChild(itemsFragment);
            that.$.fileUploadFooter.classList.remove('jqx-hidden');

            that._handleComponentsByAvailableHeight(); // flag about cancel all to prevent recalculations every time when file is canceled
        }

        /**
        * Sets values on initialization
        **/

    }, {
        key: '_setInitialValues',
        value: function _setInitialValues() {
            var that = this;

            that.$.browseInput.accept = that.accept;
            that._selectedFiles = [];
            that._items = [];
            that._incrementIndex = 0;
        }

        /**
        * Updates the values of all file uploads buttons an popups
        **/

    }, {
        key: '_updateTextValues',
        value: function _updateTextValues() {
            var that = this,
                buttons = ['browse', 'uploadAll', 'cancelAll', 'pauseAll'];

            for (var i = 0; i < buttons.length; i++) {
                var localizationString = buttons[i],
                    buttonName = localizationString + 'Button';

                that.$[buttonName].innerHTML = that.localize(localizationString);
            }

            for (var _i = 0; _i < that._selectedFiles.length; _i++) {
                var item = that._items[_i];

                item.querySelector('.jqx-item-upload-button').title = that.localize('uploadFile');
                item.querySelector('.jqx-item-cancel-button').title = that.localize('cancelFile');
                item.querySelector('.jqx-item-pause-button').title = that.localize('pauseFile');
            }
        }

        /**
        * Validates if an element exists in DOM
        * @param {string} fileName
        **/

    }, {
        key: '_validateDOMElement',
        value: function _validateDOMElement(element) {
            if (!element) {
                return;
            }

            if (typeof element === 'string') {
                return document.getElementById(element);
            } else if (element instanceof HTMLElement) {
                return element;
            }
        }

        /**
        * Validates element's height
        **/

    }, {
        key: '_handleComponentsByAvailableHeight',
        value: function _handleComponentsByAvailableHeight() {
            var that = this;

            that._calculateAvailableContainerHeight();

            if (that._elementsAutoHeight > that.offsetHeight) {
                that.$.container.classList.add('jqx-overflow');
                that._containerOverflows = true;

                if (that._rowHeight) {
                    var remainingFiles = parseInt(that._availableHeight / that._rowHeight);

                    for (var i = 0; i < that._items.length; i++) {
                        var item = that._items[i];
                        i < remainingFiles ? item.classList.remove('jqx-hidden') : item.classList.add('jqx-hidden');
                    }

                    if (that._items.length > remainingFiles) {
                        that.$.totalFiles.innerHTML = that.localize('totalFiles') + that._items.length;
                        that.$.totalFiles.classList.remove('jqx-hidden');
                    } else {
                        that.$.totalFiles.classList.add('jqx-hidden');
                    }
                }
            } else if (that.dropZone === '' && that._elementsAutoHeight < that.offsetHeight) {
                that.$.container.classList.remove('jqx-overflow');
                that._containerOverflows = false;
            }
        }

        /**
        * Calculates available container height
        **/

    }, {
        key: '_calculateAvailableContainerHeight',
        value: function _calculateAvailableContainerHeight() {
            var that = this,
                containerStyles = window.getComputedStyle(that.$.fileUploadContainer, null),
                fileUploadContainerOffset = parseInt(containerStyles.getPropertyValue('margin-top')) + parseInt(containerStyles.getPropertyValue('margin-bottom')) + parseInt(containerStyles.getPropertyValue('padding-top')) + parseInt(containerStyles.getPropertyValue('padding-bottom')),
                fileRow = that.$.container.querySelector('.jqx-file'),
                headersHeight = that.$.fileUploadHeader.offsetHeight,
                footersHeight = that.$.fileUploadFooter.offsetHeight,
                inlineHeight = that.style.height;
            var totalFilesContainerHeight = 0;

            if (fileRow) {
                that._rowHeight = fileRow.offsetHeight;
            }

            that.style.height = 'auto';

            if (that._containerOverflows) {
                that.$.container.classList.remove('jqx-overflow');
            }

            that._elementsAutoHeight = that.offsetHeight;
            that.style.height = inlineHeight;

            if (that._containerOverflows) {
                that.$.container.classList.add('jqx-overflow');
            }

            if (that.$.totalFiles.classList.contains('jqx-hidden') > -1) {
                that.$.totalFiles.classList.remove('jqx-hidden');
                totalFilesContainerHeight = that.$.totalFiles.offsetHeight;
                that.$.totalFiles.classList.add('jqx-hidden');
            }

            that._availableHeight = that.offsetHeight - (headersHeight + footersHeight) - fileUploadContainerOffset - totalFilesContainerHeight;
        }
    }], [{
        key: 'properties',

        /**
        * Element's properties
        */
        get: function get() {
            return {
                'accept': {
                    value: null,
                    type: 'string?'
                },
                'appendTo': {
                    value: null,
                    type: 'any'
                },
                'autoUpload': {
                    value: false,
                    type: 'boolean'
                },
                'directory': {
                    value: false,
                    type: 'boolean'
                },
                'dropZone': {
                    value: null,
                    type: 'any'
                },
                'hideFooter': {
                    value: false,
                    type: 'boolean'
                },
                'itemTemplate': {
                    value: null,
                    type: 'any'
                },
                'messages': {
                    value: {
                        'en': {
                            'browse': 'Browse',
                            'uploadFile': 'Upload File',
                            'cancelFile': 'Cancel File',
                            'pauseFile': 'Pause File',
                            'uploadAll': 'Upload All',
                            'cancelAll': 'Cancel All',
                            'pauseAll': 'Pause All',
                            'totalFiles': 'Total files: ',
                            'connectionError': '{{elementType}}: File Upload requires connection to the server.',
                            'wrongItemIndex': '{{elementType}}: There is no file with such an index in the list of uploaded files.',
                            'tooLongFileName': '{{elementType}}: File name is too long.'
                        }
                    },
                    type: 'object',
                    extend: true
                },
                'multiple': {
                    value: false,
                    type: 'boolean'
                },
                'name': {
                    value: '',
                    type: 'string'
                },
                'responseHandler': {
                    value: null,
                    type: 'function?',
                    reflectToAttribute: false
                },
                'setHeaders': {
                    value: null,
                    type: 'function?',
                    reflectToAttribute: false
                },
                'showProgress': {
                    value: false,
                    type: 'boolean'
                },
                'validateFile': {
                    value: null,
                    type: 'function?',
                    reflectToAttribute: false
                },
                'uploadUrl': {
                    value: '',
                    type: 'string',
                    reflectToAttribute: false
                }
            };
        }

        /**
        * Element's event listeners.
        */

    }, {
        key: 'listeners',
        get: function get() {
            return {
                'browseButton.click': 'browse',
                'browseInput.change': '_browseInputChangeHandler',
                'selectedFiles.click': '_selectedFilesClickHandler',
                'uploadAllButton.click': 'uploadAll',
                'cancelAllButton.click': 'cancelAll',
                'pauseAllButton.click': 'pauseAll',
                'dropZone.dragenter': '_dropZoneHandler',
                'dropZone.dragleave': '_dropZoneHandler',
                'dropZone.dragover': '_dropZoneHandler',
                'dropZone.drop': '_dropZoneHandler',

                'resize': '_handleComponentsByAvailableHeight'
            };
        }

        /**
        * Checks for missing modules.
        */

    }, {
        key: 'requires',
        get: function get() {
            return {
                'JQX.Button': 'jqxbutton.js',
                'JQX.ProgressBar': 'jqxprogressbar.js'
            };
        }
    }]);
    return FileUpload;
}(JQX.BaseElement));