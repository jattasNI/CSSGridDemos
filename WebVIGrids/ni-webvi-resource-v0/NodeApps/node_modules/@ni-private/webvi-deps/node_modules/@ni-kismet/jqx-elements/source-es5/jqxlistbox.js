'use strict';

/**
* List Item custom element.
*/
JQX('jqx-list-item', function (_JQX$ContentElement) {
    babelHelpers.inherits(Item, _JQX$ContentElement);

    function Item() {
        babelHelpers.classCallCheck(this, Item);
        return babelHelpers.possibleConstructorReturn(this, (Item.__proto__ || Object.getPrototypeOf(Item)).apply(this, arguments));
    }

    babelHelpers.createClass(Item, [{
        key: 'template',

        /**
        * jqx-list-item's template.
        */
        value: function template() {
            return '<div id="container">\n                   <span id=\'itemInput\' class =\'jqx-input jqx-hidden\'></span>\n                    <span class ="jqx-overlay" id="overlay"></span>\n                    <div id="itemContainer" class ="jqx-content jqx-list-item-container"><span class="jqx-content-label" inner-h-t-m-l=\'[[innerHTML]]\'><content></content></span><span inner-h-t-m-l=\'[[details]]\' id="details" class="jqx-content-details"></span></div>\n                </div>';
        }
    }, {
        key: 'appendChild',
        value: function appendChild(node) {
            var that = this;

            if (!that.isCompleted || node.classList.contains('jqx-ripple')) {
                var args = Array.prototype.slice.call(arguments, 2);
                return HTMLElement.prototype.appendChild.apply(that, args.concat(Array.prototype.slice.call(arguments)));
            }

            that.$.itemContainer.innerHTML = '';

            if (node instanceof HTMLElement) {
                that.$.itemContainer.appendChild(node);
            }
        }
    }, {
        key: 'insertBefore',
        value: function insertBefore(newNode, referenceNode) {
            var that = this;

            if (!that.isCompleted) {
                var args = Array.prototype.slice.call(arguments, 2);
                return HTMLElement.prototype.insertBefore.apply(that, args.concat(Array.prototype.slice.call(arguments)));
            }

            referenceNode.parentNode.insertBefore(newNode, referenceNode);
        }
    }, {
        key: 'removeChild',
        value: function removeChild(node) {
            var that = this;

            if (!that.isCompleted || node.classList.contains('jqx-ripple')) {
                var args = Array.prototype.slice.call(arguments, 2);
                return HTMLElement.prototype.removeChild.apply(that, args.concat(Array.prototype.slice.call(arguments)));
            }

            if (node instanceof HTMLElement) {
                that.$.itemContainer.removeChild(node);
            }
        }
    }, {
        key: 'attached',
        value: function attached() {
            var that = this;

            babelHelpers.get(Item.prototype.__proto__ || Object.getPrototypeOf(Item.prototype), 'attached', this).call(this);

            that.ownerListBox = that.getListBox();
        }

        /**
        * jqx-list-item's event listeners.
        **/

    }, {
        key: 'ready',


        /**
        * Called when the element is ready. Used for one-time configuration of the Item.
        */
        value: function ready() {
            babelHelpers.get(Item.prototype.__proto__ || Object.getPrototypeOf(Item.prototype), 'ready', this).call(this);

            var that = this;

            if (that.label !== '') {
                that.innerHTML = that.label;
            } else if (that.innerHTML !== '') {
                that.label = that.innerHTML;
            }

            that._setDisplayMode(that.displayMode);
            that._setItemColor();

            that.$.container.noRipple = true;
        }

        /**
        * Called when a property is changed.
        */

    }, {
        key: 'propertyChangedHandler',
        value: function propertyChangedHandler(propertyName, oldValue, newValue) {
            var that = this;

            babelHelpers.get(Item.prototype.__proto__ || Object.getPrototypeOf(Item.prototype), 'propertyChangedHandler', this).call(this, propertyName, oldValue, newValue);

            if (propertyName === 'hidden') {
                if (!newValue) {
                    that.$.removeClass('jqx-hidden');
                } else {
                    that.$.addClass('jqx-hidden');
                }
            } else if (propertyName === 'color') {
                that._setItemColor();
            } else if (propertyName === 'displayMode') {
                that._setDisplayMode(newValue);
            } else if (propertyName === 'label') {
                var context = that.context;
                that.context = document;
                that.innerHTML = newValue;

                var listBox = that.getListBox();
                listBox.onItemUpdated(that);
                that.context = context;
            } else if (propertyName === 'details') {
                var _context = that.context;
                that.context = document;
                that.$.details.innerHTML = newValue;

                var _listBox = that.getListBox();
                _listBox.onItemUpdated(that);
                that.context = _context;
            } else if (propertyName === 'innerHTML') {
                var _listBox2 = that.getListBox();
                _listBox2.onItemUpdated(that);
            }
        }
    }, {
        key: 'getListBox',
        value: function getListBox() {
            var that = this;

            var parent = that.parentNode;
            while (parent instanceof JQX.ListBox === false && parent !== null) {
                parent = parent.parentNode;
            }

            if (!parent && JQX.EnableShadowDOM) {
                return that.getRootNode().host;
            }

            return parent;
        }

        /**
        * Item onMouseEnter event handler.
        */

    }, {
        key: '_itemOnMouseEnter',
        value: function _itemOnMouseEnter() {
            var that = this;

            if (that.disabled || !that.ownerListBox) {
                return;
            }

            if (JQX.ListBox.DragDrop.Dragging && that.ownerListBox.allowDrop) {
                JQX.ListBox.DragDrop.DropDetails = { item: that, position: 'bottom' };
            }

            if (that.ownerListBox.$.verticalScrollBar.thumbCapture || that.ownerListBox.$.horizontalScrollBar.thumbCapture) {
                return;
            }

            that.setAttribute('hover', '');
        }

        /**
         * Item onMouseMove event handler.
        */

    }, {
        key: '_itemOnMouseMove',
        value: function _itemOnMouseMove(event) {
            var that = this;

            if (!that.ownerListBox) {
                return;
            }

            if (JQX.ListBox.DragDrop.Dragging && that.ownerListBox.allowDrop && !JQX.Utilities.Core.isMobile) {
                var itemsWithFeedback = [].slice.call(that.ownerListBox.getElementsByClassName('jqx-list-item-bottom-line-feedback'));

                for (var i = 0; i < itemsWithFeedback.length; i++) {
                    itemsWithFeedback[i].$.removeClass('jqx-list-item-line-feedback');
                    itemsWithFeedback[i].$.removeClass('jqx-list-item-bottom-line-feedback');
                }

                JQX.ListBox.DragDrop.DropDetails = { item: that, position: 'top' };
                if (!that.ownerListBox._areCSSVarsSupported) {
                    if (that.ownerListBox._indexOf(that) === that.ownerListBox._items.length - 1 || that.parentNode.lastElementChild === that) {
                        var rect = that.getBoundingClientRect();

                        if (event.pageY - window.pageYOffset > rect.top + rect.height / 2 - 1) {
                            JQX.ListBox.DragDrop.DropDetails = { item: that, position: 'bottom' };
                        }
                    }
                    return;
                }

                that.$.removeClass('jqx-list-item-line-feedback');
                that.$.removeClass('jqx-list-item-bottom-line-feedback');

                if (that.ownerListBox.sorted && that.ownerListBox.autoSort) {
                    return;
                }

                var visibleItems = that.ownerListBox._items.filter(function (item) {
                    return !item.hidden;
                });

                if (visibleItems.indexOf(that) === visibleItems.length - 1 || that.parentNode.lastElementChild === that) {
                    var _rect = that.getBoundingClientRect();

                    if (event.pageY - window.pageYOffset > _rect.top + _rect.height / 2 - 1) {
                        that.$.addClass('jqx-list-item-bottom-line-feedback');
                        JQX.ListBox.DragDrop.DropDetails = { item: that, position: 'bottom' };
                    } else if (!arguments[1]) {
                        that.$.addClass('jqx-list-item-line-feedback');
                    }
                } else if (!arguments[1]) {
                    that.$.addClass('jqx-list-item-line-feedback');
                }
            }
        }

        /**
        * Item onMouseLeave event handler.
        */

    }, {
        key: '_itemOnMouseLeave',
        value: function _itemOnMouseLeave() {
            var that = this;

            if (!that.ownerListBox) {
                return;
            }

            if (JQX.ListBox.DragDrop.Dragging) {
                that.$.removeClass('jqx-list-item-line-feedback');
                that.$.removeClass('jqx-list-item-bottom-line-feedback');
            }

            that.removeAttribute('hover');
        }
    }, {
        key: '_setDisplayMode',
        value: function _setDisplayMode(value) {
            var that = this;

            var listBox = that.getListBox();

            if (listBox) {
                var displayMode = listBox.selectionMode === 'checkBox' || listBox.selectionMode === 'radioButton' ? listBox.selectionMode : 'plain';

                that.displayMode = value = displayMode;
            }

            if (value === 'plain') {
                that.$itemInput.addClass('jqx-hidden');
                return;
            }

            that.$itemInput.removeClass('jqx-hidden');
        }

        /**
         * Set's the color property
         */

    }, {
        key: '_setItemColor',
        value: function _setItemColor() {
            var that = this,
                label = that.querySelector('.jqx-content-label'),
                color = /(^#[0-9A-F]{3}$)|(^#[0-9A-F]{6}$)|(^#[0-9A-F]{8}$)/i.test(that.color) ? that.color : ''; //HEX check

            label.style.backgroundColor = color;
            label.style.color = that._getContrastColor(color);
        }

        /**
        * Returns a contrasting color of the target color
        * @param {any} color - HEX
        */

    }, {
        key: '_getContrastColor',
        value: function _getContrastColor(color) {
            if (!color) {
                return '';
            }

            function hexToRgb(h, e, x) {
                return [parseInt(h, 16), parseInt(e, 16), parseInt(x, 16)];
            }

            var rgb = hexToRgb(color.slice(1, 3), color.slice(3, 5), color.slice(5, 7)),
                luminance = (0.299 * rgb[0] + 0.61 * rgb[1] + 0.114 * rgb[2]) / 255;

            if (parseFloat(luminance.toFixed(2)) > 0.65) {
                return '#000000';
            } else {
                return '#FFFFFF';
            }
        }
    }, {
        key: 'hasStyleObserver',
        get: function get() {
            return false;
        }
    }, {
        key: 'enableShadowDOM',
        get: function get() {
            return false;
        }
    }, {
        key: '_focused',
        get: function get() {
            var that = this;

            if (that.__focused === undefined) {
                that.__focused = false;
            }

            return that.__focused;
        },
        set: function set(value) {
            var that = this;

            that.__focused = value;

            if (value) {
                that.setAttribute('focus', '');
            } else {
                that.removeAttribute('focus');
            }
        }
    }], [{
        key: 'properties',

        // Item's properties.
        get: function get() {
            return {
                'alternationIndex': {
                    value: -1,
                    type: 'int'
                },
                'color': {
                    value: '',
                    type: 'string'
                },
                'displayMode': {
                    allowedValues: ['plain', 'checkBox', 'radioButton'],
                    value: 'plain',
                    type: 'string'
                },
                'grouped': {
                    value: false,
                    type: 'boolean'
                },
                'selected': {
                    value: false,
                    type: 'boolean'
                },
                'value': {
                    value: '',
                    type: 'string'
                },
                'label': {
                    value: '',
                    type: 'string'
                },
                'details': {
                    value: '',
                    type: 'string'
                },
                'group': {
                    value: '',
                    type: 'string'
                },
                'hidden': {
                    value: false,
                    type: 'boolean'
                },
                'readonly': {
                    value: false,
                    type: 'boolean'
                }
            };
        }
    }, {
        key: 'listeners',
        get: function get() {
            return {
                'mouseenter': '_itemOnMouseEnter',
                'mouseleave': '_itemOnMouseLeave'
            };
        }
    }]);
    return Item;
}(JQX.ContentElement));

/**
* List Items Group custom element.
*/
JQX('jqx-list-items-group', function (_JQX$ContentElement2) {
    babelHelpers.inherits(ListItemsGroup, _JQX$ContentElement2);

    function ListItemsGroup() {
        babelHelpers.classCallCheck(this, ListItemsGroup);
        return babelHelpers.possibleConstructorReturn(this, (ListItemsGroup.__proto__ || Object.getPrototypeOf(ListItemsGroup)).apply(this, arguments));
    }

    babelHelpers.createClass(ListItemsGroup, [{
        key: 'template',


        /**
        * jqx-list-items-group's template.
        */
        value: function template() {
            return '<div id="container">\n                 <span id="itemsLabel" class ="jqx-list-items-group-label">[[label]]</span>\n                 <div id="listItemsGroupContainer" inner-h-t-m-l=\'[[innerHTML]]\' class ="jqx-list-items-group-container">\n                    <content></content>\n                 </div>\n               </div>';
        }
    }, {
        key: 'appendChild',
        value: function appendChild(node) {
            var that = this;

            if (!that.isCompleted) {
                var args = Array.prototype.slice.call(arguments, 2);
                return HTMLElement.prototype.appendChild.apply(that, args.concat(Array.prototype.slice.call(arguments)));
            }

            if (node instanceof HTMLElement) {
                that.$.listItemsGroupContainer.appendChild(node);
            }
        }
    }, {
        key: 'removeChild',
        value: function removeChild(node) {
            var that = this;

            if (!that.isCompleted) {
                var args = Array.prototype.slice.call(arguments, 2);
                return HTMLElement.prototype.removeChild.apply(that, args.concat(Array.prototype.slice.call(arguments)));
            }

            if (node instanceof HTMLElement) {
                that.$.listItemsGroupContainer.removeChild(node);
            }
        }
    }, {
        key: 'getListBox',
        value: function getListBox() {
            var that = this;

            var parent = that.parentNode;
            while (parent instanceof JQX.ListBox === false && parent !== null) {
                parent = parent.parentNode;
            }

            return parent;
        }
    }, {
        key: 'attached',
        value: function attached() {
            var that = this;

            babelHelpers.get(ListItemsGroup.prototype.__proto__ || Object.getPrototypeOf(ListItemsGroup.prototype), 'attached', this).call(this);

            if (!that.ownerListBox) {
                that.ownerListBox = that.getListBox();
            }
        }
    }, {
        key: 'enableShadowDOM',
        get: function get() {
            return false;
        }
    }], [{
        key: 'properties',

        // Item's properties.
        get: function get() {
            return {
                'label': {
                    value: '',
                    type: 'string'
                }
            };
        }
    }]);
    return ListItemsGroup;
}(JQX.ContentElement));
/**
* List box custom element.
*/
JQX('jqx-list-box', function (_JQX$ScrollViewer) {
    babelHelpers.inherits(ListBox, _JQX$ScrollViewer);

    function ListBox() {
        babelHelpers.classCallCheck(this, ListBox);
        return babelHelpers.possibleConstructorReturn(this, (ListBox.__proto__ || Object.getPrototypeOf(ListBox)).apply(this, arguments));
    }

    babelHelpers.createClass(ListBox, [{
        key: 'template',


        /*
        * ListBox's HTML template.
        */
        value: function template() {
            return '<div id="container" class="jqx-container">\n                 <div class="jqx-list-box-filter-input-container jqx-hidden" id="filterInputContainer">\n                     <input id="filterInput" disabled="[[disabled]]" placeholder=\'[[filterInputPlaceholder]]\'>\n                 </div>\n                 <div id="itemsContainer" class="jqx-list-items-container">\n                      <div id="placeholder" class ="jqx-placeholder">[[placeholder]]</div>\n                      <div id="itemsInnerContainer" inner-h-t-m-l=\'[[innerHTML]]\' class ="jqx-list-items-inner-container">\n                          <content></content>\n                      </div>\n                      <input type="text" id="editInput" class= "jqx-hidden"/>\n                 </div>\n                 <jqx-scroll-bar wait id="verticalScrollBar" disabled="[[disabled]]" orientation="vertical"></jqx-scroll-bar>\n                 <jqx-scroll-bar wait id="horizontalScrollBar" disabled="[[disabled]]" ></jqx-scroll-bar>\n                 <div id="loadingIndicatorContainer" class ="jqx-loader-container">\n                    <span id="loadingIndicator" class="jqx-loader"></span>\n                    <span id="loadingIndicatorPlaceHolder" class ="jqx-loader-label jqx-hidden">[[loadingIndicatorPlaceholder]]</span>\n                 </div>\n                <input id="hiddenInput" type="hidden" name="[[name]]">\n                </div>';
        }
    }, {
        key: '_mouseLeaveHandler',
        value: function _mouseLeaveHandler() {
            var that = this,
                itemsWithFeedback = [].slice.call(that.getElementsByClassName('jqx-list-item-bottom-line-feedback'));

            //Remove Bottom Line feedbacks
            for (var i = 0; i < itemsWithFeedback.length; i++) {
                itemsWithFeedback[i].$.removeClass('jqx-list-item-line-feedback');
                itemsWithFeedback[i].$.removeClass('jqx-list-item-bottom-line-feedback');
            }
        }
    }, {
        key: '_downHandler',
        value: function _downHandler(event) {
            var that = this;

            if (that.disabled || that.displayLoadingIndicator || that.readonly) {
                return;
            }

            var target = event.originalEvent.target;
            var item = null;

            if (target instanceof JQX.ListItem && !target.disabled && !target.hidden && !(target instanceof JQX.ListItemsGroup)) {
                item = target.dataItem;
            } else {
                while (target.parentElement) {
                    if (target instanceof JQX.ListItem && !target.disabled && !target.hidden && !(target instanceof JQX.ListItemsGroup)) {

                        item = target.dataItem;
                        break;
                    }

                    target = target.parentElement;
                }
            }

            JQX.ListBox.DragDrop.StartTime = new Date();
            JQX.ListBox.DragDrop.StartPosition = { left: event.pageX, top: event.pageY };

            if (!item) {
                return;
            }

            event.stopPropagation();

            if (that.hasRippleAnimation) {
                if (!item.readonly && !item.disabled) {
                    JQX.Utilities.Animation.Ripple.animate(target.$.overlay, event.pageX, event.pageY);
                }
            }

            if (!JQX.Utilities.Core.isMobile && that.selectionChangeAction === 'press') {
                that._focus(item);
                that.select(item);
            }

            if (!JQX.ListBox.DragDrop.Feedback && that.allowDrag) {
                JQX.ListBox.DragDrop.DraggedFrom = that;
                JQX.ListBox.DragDrop.Feedback = document.createElement('span');

                if (that.dragFeedbackFormatFunction) {
                    JQX.ListBox.DragDrop.Feedback.innerHTML = that.dragFeedbackFormatFunction(item);
                } else {
                    JQX.ListBox.DragDrop.Feedback.appendChild(item.offsetHeight ? item.cloneNode(true) : that._createItem(item));
                }

                JQX.ListBox.DragDrop.Item = item;
                JQX.Utilities.Extend(JQX.ListBox.DragDrop.Feedback).addClass('jqx-popup jqx-list-item jqx-list-item-feedback');
            }
        }

        /**
         * Double click on itemsContainer event handler
         * @param {any} event
         */

    }, {
        key: '_dblclickEventHandler',
        value: function _dblclickEventHandler(event) {
            var that = this;

            if (!that.editable) {
                return;
            }

            var target = event.target.closest('jqx-list-item');

            if (!(target instanceof JQX.ListItem) || target.disabled || target.readonly) {
                that.$editInput.addClass('jqx-hidden');
                return;
            }

            that.$.editInput.owner = target;
            that.$.editInput.value = target.label;
            that.$.editInput.style.height = target.offsetHeight + 'px';
            that.$.editInput.style.top = target.offsetTop + 'px';

            if (that.$editInput.hasClass('jqx-hidden')) {
                that.$editInput.removeClass('jqx-hidden');
            }

            that.$.editInput.focus();
        }

        /**
         * List Item edit input change and blur event handler
         * @param {any} event
         */

    }, {
        key: '_editInputEventHandler',
        value: function _editInputEventHandler(event) {
            var that = this;

            if (event.type === 'blur' || event.type === 'keydown' && event.key === 'Escape') {
                !that.$editInput.hasClass('jqx-hidden') ? that.$editInput.addClass('jqx-hidden') : undefined;
                that.focus();
                return;
            }

            if (event.type === 'keydown' || that.$editInput.hasClass('jqx-hidden')) {
                return;
            }

            var target = event.target;

            event.stopPropagation(); //stop input's original change event

            if (target.owner.label !== target.value) {
                target.owner.label = target.value;

                if (that.itemTemplate) {
                    that._applyTemplate(target.owner);
                }

                if (that.dataSource) {
                    var index = target.owner.dataIndex;
                    var dataItem = that.dataSource[index];

                    if (dataItem) {
                        if (that.displayMember) {
                            dataItem[that.displayMember] = target.value;
                        } else {
                            dataItem.label = target.value;
                        }
                    }
                }
            }

            that.$editInput.addClass('jqx-hidden');
            that.$.fireEvent('itemLabelChange', {
                'selected': target.owner.selected,
                'disabled': target.owner.disabled,
                'index': that._indexOf(target.owner),
                'label': target.owner.label,
                'value': target.owner.value
            });
        }
    }, {
        key: '_pointerUpHandler',
        value: function _pointerUpHandler(customEvent) {
            var that = this;
            var event = customEvent.originalEvent;
            var target = event.target;

            var select = function select(item) {
                var listBox = item.ownerListBox;

                if (listBox.disabled || listBox !== that || listBox.displayLoadingIndicator || listBox.selectionMode === 'none' || item.grouped || item.readonly) {
                    return;
                }

                listBox._focus(item);
                listBox.select(item);
                customEvent.preventDefault();
                JQX.ListBox.DragDrop.StartPosition = null;
                that.$.fireEvent('itemClick', {
                    'selected': target.selected,
                    'disabled': target.disabled,
                    'index': that._indexOf(target),
                    'label': target.label,
                    'value': target.value
                });
            };

            if (event.target instanceof JQX.ListItem && !event.target.disabled && !(event.target instanceof JQX.ListItemsGroup)) {
                select(target.dataItem);
                return;
            }

            while (target.parentElement) {
                if (target instanceof JQX.ListItem && !target.disabled && !(target instanceof JQX.ListItemsGroup)) {
                    select(target.dataItem);
                    break;
                }

                target = target.parentElement;
            }

            if (this.enableShadowDOM && this.shadowDomMode === 'shadow') {
                var composedPath = event.composedPath();

                for (var i = 0; i < composedPath.length; i++) {
                    var htmlElement = composedPath[i];

                    if (htmlElement instanceof JQX.ListItem && !htmlElement.disabled) {
                        select(htmlElement.dataItem);
                    }
                }
            }
        }
    }, {
        key: '_upHandler',
        value: function _upHandler(event) {
            var that = this;

            if (that.disabled || that.readonly || !JQX.ListBox.DragDrop.StartPosition) {
                return;
            }

            if (JQX.Utilities.Core.isMobile && !JQX.ListBox.DragDrop.Dragging) {
                var left = Math.abs(event.pageX - JQX.ListBox.DragDrop.StartPosition.left);
                var top = Math.abs(event.pageY - JQX.ListBox.DragDrop.StartPosition.top);
                var canSelect = left >= 0 && left <= 3 && top >= 0 && top <= 3;

                if (JQX.Utilities.Core.isMobile) {
                    if (new Date() - JQX.ListBox.DragDrop.StartTime >= 300) {
                        canSelect = false;
                        JQX.ListBox.DragDrop.StartTime = null;
                    }
                }

                if (canSelect) {
                    var closestListBox = event.originalEvent.target.closest('jqx-list-box');

                    closestListBox ? closestListBox._pointerUpHandler(event) : that._pointerUpHandler(event);
                    JQX.ListBox.DragDrop.StartPosition = null;
                } else {
                    var target = event.originalEvent.target;
                    if (event.target instanceof JQX.ListItem && !target.readonly && !event.target.disabled && !(event.target instanceof JQX.ListItemsGroup)) {
                        event.preventDefault();
                        event.stopPropagation();
                    } else {
                        while (target.parentElement) {
                            if (target instanceof JQX.ListItem && !target.readonly && !target.disabled && !(target instanceof JQX.ListItemsGroup)) {
                                event.preventDefault();
                                event.stopPropagation();
                                break;
                            }

                            target = target.parentElement;
                        }
                    }
                }
            } else if (!JQX.Utilities.Core.isMobile && !JQX.ListBox.DragDrop.Dragging && that.selectionChangeAction === 'release') {
                var _closestListBox = event.originalEvent.target.closest('jqx-list-box');

                _closestListBox ? _closestListBox._pointerUpHandler(event) : that._pointerUpHandler(event);
            }

            if (JQX.ListBox.DragDrop.Feedback) {
                if (JQX.ListBox.DragDrop.Feedback.parentNode) {
                    JQX.ListBox.DragDrop.Feedback.parentNode.removeChild(JQX.ListBox.DragDrop.Feedback);
                }
                JQX.ListBox.DragDrop.Feedback = null;
                var dropTarget = void 0;

                if (JQX.Utilities.Core.isMobile && JQX.ListBox.DragDrop.Dragging) {
                    for (var j = 0; j < JQX.ListBox.DragDrop.ListBoxes.length; j++) {
                        var listBox = JQX.ListBox.DragDrop.ListBoxes[j];
                        var rect = listBox.getBoundingClientRect();

                        if (!listBox.allowDrop || listBox.closest('.jqx-visibility-hidden')) {
                            continue;
                        }

                        if (rect.left <= event.pageX && event.pageX <= rect.left + rect.width && rect.top <= event.pageY && event.pageY <= rect.top + rect.height) {
                            dropTarget = listBox;

                            var visibleItems = listBox._items.filter(function (item) {
                                return !item.hidden;
                            });

                            for (var i = 0; i < visibleItems.length; i++) {
                                var item = visibleItems[i];
                                var itemRect = item.getBoundingClientRect();

                                if (visibleItems.indexOf(item) === visibleItems.length - 1 || item.parentNode.lastElementChild === item) {
                                    if (event.pageY >= rect.top + item.offsetTop - listBox.scrollTop + itemRect.height / 2 && event.pageY <= rect.top - listBox.scrollTop + item.offsetTop + itemRect.height) {
                                        JQX.ListBox.DragDrop.DropDetails = { item: item, position: 'bottom' };
                                        break;
                                    }
                                }
                                if (event.pageY >= rect.top + item.offsetTop - listBox.scrollTop && event.pageY <= rect.top + item.offsetTop + itemRect.height - listBox.scrollTop) {
                                    JQX.ListBox.DragDrop.DropDetails = { item: item, position: 'top' };
                                    break;
                                }
                            }
                        }
                    }
                }

                if (JQX.ListBox.DragDrop.Dragging) {
                    if (JQX.ListBox.DragDrop.DropDetails) {
                        var dropItem = JQX.ListBox.DragDrop.DropDetails.item,
                            dragItem = JQX.ListBox.DragDrop.Item;
                        var dragItemListBox = dragItem.ownerListBox;

                        dropTarget = !dropTarget && event.originalEvent.target.closest ? event.originalEvent.target.closest('jqx-list-box') : dropTarget;

                        document.body.classList.remove('jqx-dragging');
                        dropItem.$.removeClass('jqx-list-item-line-feedback');
                        dropItem.$.removeClass('jqx-list-item-bottom-line-feedback');

                        if (dropTarget && dropItem.ownerListBox !== dropTarget && dropTarget.items.length > 0) {
                            dropItem = dropTarget.items[dropTarget.items.length - 1];
                        }

                        if (JQX.ListBox.DragDrop.Item !== dropItem && (dropTarget === dropItem.ownerListBox || JQX.Utilities.Core.isMobile)) {
                            if (dragItem.ownerListBox.dropAction !== 'none') {
                                if (dropItem.ownerListBox !== dragItem.ownerListBox && dragItem.ownerListBox.dropAction === 'move') {
                                    JQX.ListBox.DragDrop.Item.ownerListBox.removeChild(JQX.ListBox.DragDrop.Item);
                                }

                                if (dragItem.ownerListBox.dropAction === 'copy') {
                                    dragItem = dragItem.cloneNode(true);
                                }

                                JQX.ListBox.DragDrop.Item.group = dropItem.group;

                                var _listBox4 = dropItem.ownerListBox;

                                if (_listBox4.selectionMode !== 'checkBox' && _listBox4.selectionMode !== 'radioButton') {
                                    _listBox4.clearSelection();
                                }

                                if (JQX.ListBox.DragDrop.DropDetails.position === 'top') {
                                    _listBox4.insertBefore(dragItem, dropItem);
                                } else {
                                    if (dropItem.parentNode.lastElementChild === dropItem) {
                                        _listBox4.appendChild(dragItem);
                                    } else {
                                        _listBox4.appendChild(dragItem, dropItem);
                                    }
                                }

                                _listBox4.ensureVisible(dragItem);
                                if (_listBox4.selectionMode === 'checkBox' || _listBox4.selectionMode === 'radioButton') {
                                    _listBox4._focus(dragItem);
                                    _listBox4._refreshSelection();
                                } else {
                                    _listBox4.clearSelection();
                                    _listBox4.select(dragItem);
                                }
                            }
                        } else if (dropTarget && dropTarget._items.length === 0 && dropTarget.dropAction !== 'none') {
                            if (dropTarget.dropAction === 'move') {
                                JQX.ListBox.DragDrop.Item.ownerListBox.removeChild(JQX.ListBox.DragDrop.Item);
                            } else if (dropTarget.dropAction === 'copy') {
                                dragItem = dragItem.cloneNode(true);
                            }

                            dropTarget.appendChild(dragItem);
                        }

                        if (dragItem.selected && dropTarget !== dragItemListBox) {
                            dragItemListBox._refreshSelection();
                        }

                        var _item = JQX.ListBox.DragDrop.Item;
                        var _listBox3 = _item.ownerListBox;

                        _item.displayMode = _listBox3.selectionMode === 'checkBox' || _listBox3.selectionMode === 'radioButton' ? _listBox3.selectionMode : 'plain';

                        _listBox3.$.fireEvent('dragEnd', {
                            'item': _item,
                            'target': dropItem,
                            'data': JQX.ListBox.DragDrop,
                            'previousContainer': dragItemListBox,
                            'container': dropTarget,
                            'originalEvent': event
                        });

                        _listBox3._focus(_item);
                    } else {
                        var _item2 = JQX.ListBox.DragDrop.Item;
                        var _listBox5 = _item2.ownerListBox;

                        _item2.displayMode = _listBox5.selectionMode === 'checkBox' || _listBox5.selectionMode === 'radioButton' ? _listBox5.selectionMode : 'plain';

                        _listBox5.$.fireEvent('dragEnd', {
                            'item': _item2,
                            'target': null,
                            'data': JQX.ListBox.DragDrop,
                            'previousContainer': _listBox5,
                            'container': _listBox5,
                            'originalEvent': event
                        });

                        _listBox5._focus(_item2);
                    }

                    event.preventDefault();
                }

                delete JQX.ListBox.DragDrop.DraggedFrom;
                JQX.ListBox.DragDrop.Dragging = false;
                JQX.ListBox.DragDrop.Item = null;
                JQX.ListBox.DragDrop.DropDetails = null;
            }

            for (var _i = 0; _i < JQX.ListBox.DragDrop.ListBoxes.length; _i++) {
                var _listBox6 = JQX.ListBox.DragDrop.ListBoxes[_i];

                if (_listBox6._dragInterval) {
                    clearInterval(_listBox6._dragInterval);
                }
            }
        }
    }, {
        key: '_itemsContainerMoveHandler',
        value: function _itemsContainerMoveHandler(event) {
            var that = this;

            if (JQX.ListBox.DragDrop.Dragging) {
                that._applyItemFeedback(event);
                that._moveHandler(event);
                event.originalEvent.preventDefault();
                event.originalEvent.stopPropagation();
                return false;
            }
        }
    }, {
        key: '_applyItemFeedback',
        value: function _applyItemFeedback(event) {
            var that = this,
                target = event.originalEvent.target,
                targetItem = target.closest ? target.closest('jqx-list-item') : target;

            //Event.target doesn't work on Mobile. This is used just to the Drop logic inside upHandler
            if (JQX.Utilities.Core.isMobile) {
                JQX.ListBox.DragDrop.DropDetails = { item: JQX.ListBox.DragDrop.Item, position: 'bottom' };
                return;
            }

            if (that.items.length === 0) {
                return;
            }

            if (!targetItem) {
                that.items[that.items.length - 1]._itemOnMouseMove(event, true);
                return;
            }

            targetItem._itemOnMouseMove(event);
        }
    }, {
        key: '_moveHandler',
        value: function _moveHandler(event) {
            var that = this;

            if (!JQX.ListBox.DragDrop.Feedback || JQX.ListBox.DragDrop.DraggedFrom !== that) {
                return;
            }

            var dragOffset = that.dragOffset;

            if (!JQX.ListBox.DragDrop.Dragging) {
                var left = Math.abs(event.pageX - JQX.ListBox.DragDrop.StartPosition.left);
                var top = Math.abs(event.pageY - JQX.ListBox.DragDrop.StartPosition.top);
                var timeOut = new Date() - JQX.ListBox.DragDrop.StartTime;

                var canStartDrag = left >= 5 && left <= 15 || top >= 5 && top <= 15;

                if (JQX.Utilities.Core.isMobile) {
                    if (timeOut < 300 || timeOut > 1000) {
                        canStartDrag = false;
                    }
                }

                if (canStartDrag) {
                    JQX.ListBox.DragDrop.Dragging = true;
                    JQX.ListBox.DragDrop.Feedback.style.left = dragOffset[0] + event.pageX + 'px';
                    JQX.ListBox.DragDrop.Feedback.style.top = dragOffset[1] + event.pageY + 'px';

                    document.body.appendChild(JQX.ListBox.DragDrop.Feedback);
                    event.preventDefault();
                    event.stopPropagation();

                    event.originalEvent.preventDefault();
                    event.originalEvent.stopPropagation();

                    var item = JQX.ListBox.DragDrop.Item;
                    var listBox = item.ownerListBox;

                    listBox.$.fireEvent('dragStart', {
                        'item': item,
                        'data': JQX.ListBox.DragDrop,
                        'container': listBox,
                        'previousContainer': listBox,
                        'originalEvent': event.originalEvent
                    });

                    document.body.classList.add('jqx-dragging');
                }
            } else {
                JQX.ListBox.DragDrop.Feedback.style.left = dragOffset[0] + event.pageX + 'px';
                JQX.ListBox.DragDrop.Feedback.style.top = dragOffset[1] + event.pageY + 'px';

                that.$.fireEvent('dragging', {
                    'item': JQX.ListBox.DragDrop.Item,
                    'data': JQX.ListBox.DragDrop,
                    'originalEvent': event.originalEvent
                });

                var _loop = function _loop(i) {
                    var listBox = JQX.ListBox.DragDrop.ListBoxes[i];

                    if (listBox._dragInterval) {
                        clearInterval(listBox._dragInterval);
                    }

                    listBox._dragInterval = setInterval(function () {
                        var rect = listBox.getBoundingClientRect();

                        if (rect.left <= event.clientX && rect.left + rect.width >= event.clientX) {
                            if (event.clientY >= rect.top && event.clientY <= rect.top + 20) {
                                listBox.scrollTop -= 2;
                            } else if (event.clientY >= rect.top + rect.height - 20 && event.clientY <= rect.top + rect.height) {
                                listBox.scrollTop += 2;
                            }
                        }
                    }, 1);
                };

                for (var i = 0; i < JQX.ListBox.DragDrop.ListBoxes.length; i++) {
                    _loop(i);
                }

                event.preventDefault();
                event.stopPropagation();

                event.originalEvent.preventDefault();
                event.originalEvent.stopPropagation();

                return false;
            }
        }
    }, {
        key: '_focusHandler',
        value: function _focusHandler() {
            var that = this;
            that._focused = true;
            that.setAttribute('focus', '');
        }
    }, {
        key: '_blurHandler',
        value: function _blurHandler() {
            var that = this;
            that._focused = false;
            that.removeAttribute('focus');
        }
    }, {
        key: 'appendChild',
        value: function appendChild(node) {
            var that = this;

            if (!that.isCompleted) {
                var args = Array.prototype.slice.call(arguments, 2);
                return HTMLElement.prototype.appendChild.apply(that, args.concat(Array.prototype.slice.call(arguments)));
            }

            if (that.isVirtualized) {
                if (that._items.indexOf(node) > -1) {
                    that._items.splice(that._items.indexOf(node), 1);
                }
                that._items.push(node);
            } else {
                node.dataItem = node;

                if (that.enableShadowDOM && that.shadowDomMode === 'light') {
                    that.appendChild(node);
                } else {
                    that.$.itemsInnerContainer.appendChild(node);
                }

                if (that._items.indexOf(node) > -1) {
                    that._items.splice(that._items.indexOf(node), 1);
                }
                that._items.push(node);
            }
            that._refreshItems();
            that._refreshSelection();
        }
    }, {
        key: 'insertBefore',
        value: function insertBefore(newNode, referenceNode) {
            var that = this;

            if (!that.isCompleted) {
                var args = Array.prototype.slice.call(arguments, 2);
                return HTMLElement.prototype.insertBefore.apply(that, args.concat(Array.prototype.slice.call(arguments)));
            }

            if (that.isVirtualized) {
                if (that._items.indexOf(newNode) > -1) {
                    that._items.splice(that._items.indexOf(newNode), 1);
                }
                that._items.splice(that._indexOf(referenceNode), 0, newNode);
            } else {
                newNode.dataItem = newNode;
                referenceNode.parentNode.insertBefore(newNode, referenceNode);
                if (that._items.indexOf(newNode) > -1) {
                    that._items.splice(that._items.indexOf(newNode), 1);
                }
                that._items.splice(that._indexOf(referenceNode), 0, newNode);
            }
            that._refreshItems();
            that._refreshSelection();
        }
    }, {
        key: 'removeChild',
        value: function removeChild(node) {
            var that = this;

            if (!that.isCompleted) {
                var args = Array.prototype.slice.call(arguments, 2);
                return HTMLElement.prototype.removeChild.apply(that, args.concat(Array.prototype.slice.call(arguments)));
            }

            if (that.isVirtualized) {
                that._items.splice(that._indexOf(node), 1);
            } else {
                if (node.parentNode) {
                    var selectedIndexes = that.selectedIndexes.slice(0),
                        selectedValues = that.selectedValues.slice(0),
                        selectedItemIndex = selectedIndexes.indexOf(node.dataIndex);

                    node.parentNode.removeChild(node);

                    if (selectedItemIndex > -1) {
                        selectedIndexes.splice(selectedItemIndex, 1);
                        selectedValues.splice(selectedItemIndex, 1);

                        that.selectedIndexes = selectedIndexes;
                        that.selectedValues = selectedValues;
                    }
                }
            }
            that._refreshItems();
        }

        /**
        * Updates the listbox when a property is changed.
        * @param {string} propertyName The name of the property.
        * @param {number/string} oldValue The previously entered value. Max, min and value are of type Number. The rest are of type String.
        * @param {number/string} newValue The new entered value. Max, min and value are of type Number. The rest are of type String.
        */

    }, {
        key: 'propertyChangedHandler',
        value: function propertyChangedHandler(propertyName, oldValue, newValue) {
            babelHelpers.get(ListBox.prototype.__proto__ || Object.getPrototypeOf(ListBox.prototype), 'propertyChangedHandler', this).call(this, propertyName, oldValue, newValue);

            var that = this;

            switch (propertyName) {
                case 'innerHTML':
                    that.clearSelection();
                    that._dataBind();
                    that.innerHTML = that.content = JQX.Utilities.Core.html(that.$.content);
                    break;
                case 'dataSource':
                case 'valueMember':
                case 'groupMember':
                case 'displayMember':
                    {
                        that.clearSelection();
                        that._dataBind();
                        break;
                    }
                case 'disabled':
                case 'unfocusable':
                    that._setFocusable();
                    break;
                case 'displayLoadingIndicator':
                    {
                        that._setLoadingIndicatorVisibility();
                        break;
                    }
                case 'filterable':
                    {
                        that._refreshFilter();
                        that._refreshLayout();
                        break;
                    }
                case 'grouped':
                    {
                        if (newValue) {
                            that._group();
                        } else {
                            that._ungroup();
                        }

                        if (that.selectionMode === 'radioButton') {
                            if (that.selectedValues.length > 0) {
                                var selectedValues = that.selectedValues;

                                that.clearSelection();
                                that.select(selectedValues[0]);
                            }
                        } else {
                            that._refreshSelection();
                        }

                        that._refreshLayout();
                        break;
                    }
                case 'itemTemplate':
                    {
                        if (newValue === null || newValue === '') {
                            that._items.map(function (item) {
                                return item.innerHTML = item.label;
                            });
                            delete that._bindingDetails;
                            that._refreshLayout();
                            return;
                        }

                        var items = that.querySelectorAll('jqx-list-item');
                        var itemsReady = function itemsReady() {
                            if (that._handleItemTemplate(newValue)) {
                                that._items.map(function (item) {
                                    return that._applyTemplate(item);
                                });
                                that._refreshLayout();
                            }

                            if (that.ownerElement && that.ownerElement._setDropDownSize) {
                                that.ownerElement._setDropDownSize();
                            }

                            that.$.fireEvent('bindingComplete');
                        };

                        if (items.length === 0) {
                            itemsReady();
                        } else {
                            that._ensureItemsReady(items, itemsReady);
                        }

                        break;
                    }
                case 'selectedIndexes':
                case 'selectedValues':
                    {
                        var _selectedIndexes = that.selectedIndexes.slice(0);
                        var _selectedValues = that.selectedValues.slice(0);

                        if (!that._items || that._items.length === 0) {
                            that.selectedIndexes = [];
                            that.selectedValues = [];

                            //Update the hidden form input
                            that.$.hiddenInput.value = that.selectedValues.toString();
                            return;
                        }

                        that._propertyChanging = true;

                        if (propertyName === 'selectedIndexes') {
                            _selectedIndexes = oldValue.slice(0);
                            that.clearSelection();

                            for (var i = 0; i < newValue.length; i++) {
                                var index = newValue[i];
                                var item = that._items[index];

                                if (item) {
                                    if (that.selectionMode === 'oneOrManyExtended' || that.selectionMode === 'oneOrMany') {
                                        if (that.selectedIndexes.length > 0 && i === 0) {
                                            that.clearSelection();
                                        }
                                        that._select(item);
                                    } else {
                                        that.select(item);
                                    }
                                }
                            }
                        } else {
                            _selectedValues = oldValue.slice(0);
                            that.selectedValues = [];
                            that.clearSelection();

                            for (var _i2 = 0; _i2 < newValue.length; _i2++) {
                                var selectedValue = newValue[_i2];
                                var _item3 = that.getItem(selectedValue);

                                if (_item3) {
                                    if (that.selectionMode === 'oneOrManyExtended') {
                                        that._select(_item3);
                                    } else {
                                        that.select(_item3);
                                    }
                                }
                            }
                        }

                        if (that.selectedIndexes.length > 0) {
                            that._focus(that._items[that.selectedIndexes[0]]);
                        }

                        that._propertyChanging = false;

                        if (JSON.stringify(_selectedValues) !== JSON.stringify(that.selectedValues.slice(0))) {
                            var selectedItems = [],
                                unselectedItems = [];

                            // get all newly unselected items
                            for (var _i3 = 0; _i3 < _selectedIndexes.length; _i3++) {
                                if (that.selectedIndexes.indexOf(_selectedIndexes[_i3]) < 0) {
                                    unselectedItems.push(that._items[_selectedIndexes[_i3]]);
                                }
                            }

                            // get all newly selected items
                            for (var _i4 = 0; _i4 < that.selectedIndexes.length; _i4++) {
                                if (_selectedIndexes.indexOf(that.selectedIndexes[_i4]) < 0) {
                                    selectedItems.push(that._items[that.selectedIndexes[_i4]]);
                                }
                            }

                            var eventDetails = {
                                'addedItems': selectedItems,
                                'removedItems': unselectedItems
                            };

                            if (that.selectedIndexes.length > 0) {
                                var lastSelectedItem = that._items[that.selectedIndexes[that.selectedIndexes.length - 1]];

                                if (lastSelectedItem !== undefined) {
                                    eventDetails.selected = lastSelectedItem.selected;
                                    eventDetails.disabled = lastSelectedItem.disabled;
                                    eventDetails.index = that._indexOf(lastSelectedItem);
                                    eventDetails.label = lastSelectedItem.label;
                                    eventDetails.value = lastSelectedItem.value;
                                }
                            } else {
                                eventDetails.selected = false;
                                eventDetails.disabled = false;
                                eventDetails.index = -1;
                                eventDetails.label = '';
                                eventDetails.value = '';
                            }

                            that.$.fireEvent('change', eventDetails);
                        }

                        break;
                    }
                case 'selectionMode':
                    {
                        var displayMode = that.selectionMode === 'checkBox' || that.selectionMode === 'radioButton' ? that.selectionMode : 'plain';
                        var _selectedIndexes2 = that.selectedIndexes.slice(0);
                        var _selectedValues2 = that.selectedValues.slice(0);

                        that._propertyChanging = true;

                        var _selectedValues3 = that.selectedValues;

                        that.selectedValues = [];

                        that.clearSelection();
                        for (var _i5 = 0; _i5 < _selectedValues3.length; _i5++) {
                            var _selectedValue = _selectedValues3[_i5];
                            var _item4 = that.getItem(_selectedValue);

                            if (_item4) {
                                if (that.selectionMode === 'oneOrManyExtended') {
                                    that._select(_item4);
                                } else {
                                    that.select(_item4);
                                }
                            }
                        }

                        that._items.forEach(function (item) {
                            return item.displayMode = displayMode;
                        });
                        that._recycle();

                        that._propertyChanging = false;

                        if (JSON.stringify(_selectedValues2) !== JSON.stringify(that.selectedValues.slice(0))) {
                            var _selectedItems = [],
                                _unselectedItems = [];

                            // get all newly unselected items
                            for (var _i6 = 0; _i6 < _selectedIndexes2.length; _i6++) {
                                if (that.selectedIndexes.indexOf(_selectedIndexes2[_i6]) < 0) {
                                    _unselectedItems.push(that._items[_selectedIndexes2[_i6]]);
                                }
                            }

                            // get all newly selected items
                            for (var _i7 = 0; _i7 < that.selectedIndexes.length; _i7++) {
                                if (_selectedIndexes2.indexOf(that.selectedIndexes[_i7]) < 0) {
                                    _selectedItems.push(that._items[that.selectedIndexes[_i7]]);
                                }
                            }

                            var _eventDetails = {
                                'addedItems': _selectedItems,
                                'removedItems': _unselectedItems
                            };

                            if (_selectedIndexes2.length > 0) {
                                var lastSelectedIndex = that._items[_selectedIndexes2[_selectedIndexes2.length - 1]];

                                if (lastSelectedIndex) {
                                    _eventDetails.selected = lastSelectedIndex.selected;
                                    _eventDetails.disabled = lastSelectedIndex.disabled;
                                    _eventDetails.index = that._indexOf(lastSelectedIndex);
                                    _eventDetails.label = lastSelectedIndex.label;
                                    _eventDetails.value = lastSelectedIndex.value;
                                }
                            }

                            that.$.fireEvent('change', _eventDetails);
                        }

                        break;
                    }
                case 'topVisibleIndex':
                    that._setTopVisibleIndex(newValue);

                    break;
                case 'autoSort':
                    that._canSort = newValue;
                    break;
                case 'sortDirection':
                case 'sorted':
                    {
                        that._canSort = true;

                        if (newValue) {
                            that._sort();
                        } else {
                            that._unsort();
                        }

                        var _selectedValues4 = that.selectedValues;
                        that.selectedValues = [];
                        that._refreshSelection();
                        for (var _i8 = 0; _i8 < _selectedValues4.length; _i8++) {
                            var _selectedValue2 = _selectedValues4[_i8];
                            var _item5 = that.getItem(_selectedValue2);

                            if (_item5) {
                                if (that.selectionMode === 'oneOrManyExtended') {
                                    that._select(_item5);
                                } else {
                                    that.select(_item5);
                                }
                            }
                        }

                        that._refreshLayout();

                        that._canSort = that.autoSort;
                        break;
                    }
            }
        }

        /**
        * refreshes selection items.
        */

    }, {
        key: '_refreshSelection',
        value: function _refreshSelection() {
            var that = this;

            if (!that._items || that._items.length === 0) {
                return;
            }

            var selectedValues = that.selectedValues;

            that.selectedIndexes = [];
            that.selectedValues = [];

            for (var i = 0; i < that._items.length; i++) {
                var item = that._items[i];

                item.selected = false;

                if (selectedValues.indexOf(item.value) > -1) {
                    that.select(item);
                }
            }

            that._recycle();
        }

        /**
          * Unselects all items.
          */

    }, {
        key: 'clearSelection',
        value: function clearSelection() {
            var that = this;

            if (!that._items || that._items.length === 0) {
                return;
            }

            var removedItems = [];

            for (var i = 0; i < that._items.length; i++) {
                if (that._items[i].selected) {
                    removedItems.push(that._items[i]);
                }
            }

            that._items.map(function (item) {
                return item.selected = false;
            });

            var _selectedValues = that.selectedValues.slice(0);
            var _selectedIndexes = that.selectedIndexes.slice(0);

            that.selectedIndexes = [];
            that.selectedValues = [];

            //Update the hidden form input
            that.$.hiddenInput.value = that.selectedValues.toString();

            that._recycle();

            if (that.context !== that) {
                var eventDetails = {
                    'addedItems': [],
                    'removedItems': removedItems
                };

                if (_selectedIndexes.length > 0) {
                    var lastSelectedIndex = that._items[_selectedIndexes[_selectedIndexes.length - 1]];

                    if (lastSelectedIndex) {
                        eventDetails.selected = lastSelectedIndex.selected;
                        eventDetails.disabled = lastSelectedIndex.disabled;
                        eventDetails.index = that._indexOf(lastSelectedIndex);
                        eventDetails.label = lastSelectedIndex.label;
                        eventDetails.value = lastSelectedIndex.value;
                    }
                }

                that.$.fireEvent('change', eventDetails);
            }
        }
    }, {
        key: 'ensureVisible',
        value: function ensureVisible(item) {
            var that = this;

            if (!item) {
                return;
            }

            if (typeof item === 'string') {
                item = that.getItem(item);
                if (!item) {
                    return false;
                }
            }

            if (!that.isVirtualized && that.$.itemsContainer.scrollTop !== that.scrollTop) {
                that.scrollTop = that.$.itemsContainer.scrollTop;
            }

            if (item.top + item.height >= that.scrollTop + that.offsetHeight) {

                that.scrollTop = that.scrollTop + item.height;

                if (!that.isVirtualized) {
                    that.$.itemsContainer.scrollTop = that.scrollTop;
                }
            }

            if (item.top <= that.scrollTop || item.top >= that.scrollTop + that.$.itemsContainer.offsetHeight) {
                that.scrollTop = item.top;

                if (!that.isVirtualized) {
                    that.$.itemsContainer.scrollTop = that.scrollTop;
                }
            }

            if (that._indexOf(item) === 0 || that._indexOf(item) === 1 && that._items.length > 1 && that._items[0].grouped) {
                that.scrollTop = 0;
                if (!that.isVirtualized) {
                    that.$.itemsContainer.scrollTop = that.scrollTop;
                }
            } else if (that._indexOf(item) === that._items.length - 1) {
                that.scrollTop = that.scrollHeight;

                if (!that.isVirtualized) {
                    that.$.itemsContainer.scrollTop = that.scrollTop;
                }
            }

            return true;
        }
        /**
        * Returns an array with the items from the list.
        */

    }, {
        key: 'ready',


        /**
        * ListBox ready method.
        */
        value: function ready() {
            babelHelpers.get(ListBox.prototype.__proto__ || Object.getPrototypeOf(ListBox.prototype), 'ready', this).call(this);
            var that = this;

            //LightDom test
            if (that.enableShadowDOM && that.shadowDomMode === 'light') {
                var fragment = document.createDocumentFragment();

                [].slice.call(that.$.itemsInnerContainer.children).map(function (item) {
                    return fragment.appendChild(item);
                });

                that.appendChild(fragment);

                that.$.itemsInnerContainer.appendChild(document.createElement('slot'));
            }

            that._areCSSVarsSupported = JQX.Utilities.Core.CSSVariablesSupport();
            that._keysPressed = {};
            that._incrementalSearchQuery = '';
            that._incrementalSearchItems = [];
            that._canSort = true;
            that._previousEntry = '';
            that.isUpdating = 0;

            if (that._scrollView) {
                that._scrollView = new JQX.Utilities.Scroll(that, that.$.horizontalScrollBar, that.$.verticalScrollBar);
                that._scrollView.hScrollBar.$.addClass('jqx-hidden');
                that._scrollView.vScrollBar.$.addClass('jqx-hidden');
            }

            var vScrollBar = that._scrollView.vScrollBar;
            var hScrollBar = that._scrollView.hScrollBar;

            vScrollBar.hasStyleObserver = false;
            hScrollBar.hasStyleObserver = false;
            vScrollBar.hasResizeObserver = false;
            hScrollBar.hasResizeObserver = false;
            vScrollBar.wait = false;
            hScrollBar.wait = false;

            that._setFocusable();
            that._setLoadingIndicatorVisibility();
            that._refreshFilter();

            that._initializeInnerHTML();
            that._dataBind();
        }
    }, {
        key: 'attached',
        value: function attached() {
            var that = this;

            babelHelpers.get(ListBox.prototype.__proto__ || Object.getPrototypeOf(ListBox.prototype), 'attached', this).call(this);

            if (!JQX.ListBox.DragDrop) {
                JQX.ListBox.DragDrop = { ListBoxes: [] };
            }

            JQX.ListBox.DragDrop.ListBoxes.push(that);

            if (!that._scrollView) {
                that._scrollView = new JQX.Utilities.Scroll(that, that.$.horizontalScrollBar, that.$.verticalScrollBar);
            }

            if (that.selectedIndexes.length > 0) {
                that.ensureVisible(that._items[that.selectedIndexes[0]]);
            }
        }
    }, {
        key: 'detached',
        value: function detached() {
            var that = this;

            babelHelpers.get(ListBox.prototype.__proto__ || Object.getPrototypeOf(ListBox.prototype), 'detached', this).call(this);

            if (that._scrollView) {
                that._scrollView.unlisten();
                delete that._scrollView;
            }

            if (JQX.ListBox.DragDrop && JQX.ListBox.DragDrop.ListBoxes) {
                var index = JQX.ListBox.DragDrop.ListBoxes.indexOf(that);
                JQX.ListBox.DragDrop.ListBoxes.splice(index, 1);
            }
        }
    }, {
        key: '_createItem',
        value: function _createItem(item, index, recycling) {
            var that = this;

            var displayMode = that.selectionMode === 'checkBox' || that.selectionMode === 'radioButton' ? that.selectionMode : 'plain';
            var htmlItem = recycling ? {} : document.createElement('jqx-list-item');

            htmlItem.ownerListBox = that;

            if (typeof item === 'number') {
                item = '' + item;
            }

            var getMemberValue = function getMemberValue(memberName, defaultMemberName) {
                if (item[memberName] !== undefined) {
                    return '' + item[memberName];
                }

                return item[defaultMemberName];
            };

            var label = typeof item === 'string' ? item : getMemberValue(that.displayMember, 'label'),
                value = typeof item === 'string' ? item : getMemberValue(that.valueMember, 'value'),
                group = getMemberValue(that.groupMember, 'group');

            if (undefined === label) {
                if (index !== undefined) {
                    label = '' + index;
                } else {
                    label = '';
                }
            }

            htmlItem.label = htmlItem.innerHTML = '' + label;

            if (undefined === value) {
                if (index !== undefined) {
                    value = '' + index;
                } else {
                    value = label;
                }
            }

            if (item.color) {
                htmlItem.color = item.color;
            }

            htmlItem.value = '' + value;
            htmlItem.displayMode = displayMode;
            htmlItem.selected = item.selected ? item.selected : false;
            htmlItem.disabled = item.disabled ? item.disabled : false;
            htmlItem.dataItem = htmlItem;

            if (index !== undefined) {
                htmlItem.dataIndex = index;
            }

            that._alternateItem(htmlItem);

            if (item.title) {
                htmlItem.title = item.title;
            }

            if (group) {
                htmlItem.group = '' + group;
            }

            return htmlItem;
        }
    }, {
        key: '_alternateItem',
        value: function _alternateItem(item) {
            var that = this;
            var start = that.alternationStart;
            var end = that.alternationEnd > 0 ? that.alternationEnd : Infinity;

            if (that.alternationCount <= 0) {
                return;
            }

            if (that._alternationIndexCounter === undefined) {
                that._alternationIndexCounter = 0;
            }

            if (item.dataIndex >= start && item.dataIndex <= end) {
                item.alternationIndex = that._alternationIndexCounter++;
                if (that._alternationIndexCounter === that.alternationCount) {
                    that._alternationIndexCounter = 0;
                }
            }
        }
    }, {
        key: '_beginUpdate',
        value: function _beginUpdate() {
            var that = this;

            that.isUpdating++;
        }
    }, {
        key: '_isUpdating',
        value: function _isUpdating() {
            var that = this;

            return that.isUpdating > 0;
        }
    }, {
        key: '_endUpdate',
        value: function _endUpdate() {
            var that = this;

            that.isUpdating--;
        }
    }, {
        key: '_initializeRecyclingItems',
        value: function _initializeRecyclingItems() {
            var that = this;

            if (!that.dataSource || that.dataSource && that.dataSource.length === 0 || !that.isVirtualized) {
                return;
            }

            var itemsHeight = 0;
            var listBoxHeight = that.offsetHeight;

            that.$.itemsInnerContainer.innerHTML = '';
            that._recyclingItems = [];

            var createRecyclingItems = function createRecyclingItems() {
                for (var i = 0; i < that.dataSource.length; i++) {
                    var item = that.dataSource[i];
                    var htmlItem = that._createItem(item);

                    if (that.itemHeight && that.itemHeight !== 'auto') {
                        htmlItem.style.height = that.itemHeight + 'px';
                    }

                    that.$.itemsInnerContainer.appendChild(htmlItem);

                    itemsHeight += htmlItem.offsetHeight;

                    htmlItem.dataItem = that._items[i];
                    that._recyclingItems.push(htmlItem);

                    if (itemsHeight > 1.5 * listBoxHeight) {
                        break;
                    }
                }
            };

            createRecyclingItems();

            var maxIterations = 0;

            while (itemsHeight < 1.5 * listBoxHeight && ++maxIterations < 5) {
                createRecyclingItems();
            }
        }
    }, {
        key: '_dataBind',
        value: function _dataBind() {
            var that = this;

            if (!that._scrollView) {
                that._scrollView = new JQX.Utilities.Scroll(that, that.$.horizontalScrollBar, that.$.verticalScrollBar);
            }

            if (typeof that.dataSource === 'function') {
                that._items = [];
            }

            if (typeof that.dataSource === 'string') {
                that.dataSource = JSON.parse(that.dataSource);
            }

            if (that.dataSource !== null && Array.isArray(that.dataSource)) {
                that.isUpdating++;

                var initializeDataBoundItems = function initializeDataBoundItems(fragment) {
                    that._items = [];
                    that._groups = [];

                    var dataSource = that.dataSource;

                    for (var i = 0; i < dataSource.length; i++) {
                        var item = dataSource[i],
                            htmlItem = that._createItem(item, i, !fragment);

                        that._items[i] = htmlItem;

                        if (fragment) {
                            fragment.appendChild(htmlItem);
                        }
                    }
                };

                if (that.isVirtualized) {
                    initializeDataBoundItems();
                    that._initializeRecyclingItems();
                } else {
                    var fragment = document.createDocumentFragment();

                    that.$.itemsInnerContainer.innerHTML = '';

                    initializeDataBoundItems(fragment);
                    that.$.itemsInnerContainer.appendChild(fragment);
                }

                that.isUpdating--;
            }

            var items = that.enableShadowDOM ? that.shadowRoot.querySelectorAll('jqx-list-item') : that.querySelectorAll('jqx-list-item');
            var itemsReady = function itemsReady() {
                that.isUpdating++;

                if (!that.dataSource) {
                    that._initializeHtmlListItems();
                    that._initializeHtmlListGroups();
                }

                if (that.grouped) {
                    that._group();
                }

                if (that.sorted) {
                    that._sort();
                }

                that._refreshLayout();

                that._initializeSelection();
                that.isInitialized = true;
                that._canSort = that.autoSort;

                that.isUpdating--;

                if (that.itemTemplate) {
                    if (that._handleItemTemplate(that.itemTemplate)) {
                        that._items.map(function (item) {
                            return that._applyTemplate(item);
                        });
                        that._refreshLayout();
                    }
                }

                if (that.__onCompleted) {
                    that._onCompleted = that.__onCompleted;
                    that.__onCompleted = null;
                    that._onCompleted();
                }

                if (that.topVisibleIndex > -1) {
                    that._setTopVisibleIndex(that.topVisibleIndex);
                }

                that.$.fireEvent('bindingComplete');
                that._updateTopVisibleIndex();

                if (that._items.length === 0) {
                    that.clearItems();
                }
            };

            if (items.length === 0) {
                itemsReady();
            } else {
                if (that._onCompleted) {
                    that.__onCompleted = that._onCompleted;
                    that._onCompleted = null;
                }
                that._ensureItemsReady(items, itemsReady);
            }
        }
    }, {
        key: '_ensureItemsReady',
        value: function _ensureItemsReady(nodes, callback) {
            var that = this;

            var contextCallback = function contextCallback() {
                var setContext = function setContext(context) {
                    for (var i = 0; i < nodes.length; i++) {
                        nodes[i].context = context === 'node' ? nodes[i] : document;
                    }
                };

                setContext('node');
                callback();
                setContext();
            };

            if (nodes.length === 0) {
                contextCallback();
            } else {
                that._nodesReadyListeners = 0;

                for (var i = 0; i < nodes.length; i++) {
                    var node = nodes[i];

                    var readyEventHandler = function () {
                        that._nodesReadyListeners--;
                        if (that._nodesReadyListeners === 0) {
                            contextCallback();

                            delete that._nodesReadyListeners;
                        }
                    }.bind(that);

                    if (!node.isCompleted) {
                        that._nodesReadyListeners++;
                        node._onCompleted = readyEventHandler;
                    }
                }

                if (that._nodesReadyListeners === 0) {
                    contextCallback();
                }
            }
        }
    }, {
        key: '_initializeInnerHTML',
        value: function _initializeInnerHTML() {
            var that = this;

            if (that.$.itemsInnerContainer.innerHTML.indexOf('<option') >= 0) {
                that.$.itemsInnerContainer.innerHTML = that.$.itemsInnerContainer.innerHTML.replace(/<optgroup/ig, '<jqx-list-items-group').replace(/<\/optgroup/ig, '<\/jqx-list-items-group').replace(/<option/ig, '<jqx-list-item').replace(/<\/option/ig, '<\/jqx-list-item');
            } else if (that.$.itemsInnerContainer.innerHTML.indexOf('<ul') >= 0) {
                that.$.itemsInnerContainer.innerHTML = that.$.itemsInnerContainer.innerHTML.replace(/<ul/ig, '<jqx-list-items-group').replace(/<\/ul/ig, '<\/jqx-list-items-group').replace(/<li/ig, '<jqx-list-item').replace(/<\/li/ig, '<\/jqx-list-item');
            }
        }
    }, {
        key: '_initializeHtmlListItems',
        value: function _initializeHtmlListItems() {
            var that = this;

            var htmlItems = that.enableShadowDOM && that.shadowDomMode === 'shadow' ? that.shadowRoot.querySelectorAll('jqx-list-item') : that.querySelectorAll('jqx-list-item');
            var displayMode = that.selectionMode === 'checkBox' || that.selectionMode === 'radioButton' ? that.selectionMode : 'plain';

            var getMemberValue = function getMemberValue(item, memberName, defaultMemberName) {
                if (item[memberName] !== undefined) {
                    return '' + item[memberName];
                }

                return item[defaultMemberName];
            };

            that._items = [];

            var top = 0;

            for (var i = 0; i < htmlItems.length; i++) {
                var item = htmlItems[i];

                item.dataIndex = i;
                item.label = item.innerHTML;
                item.dataItem = item;

                if (!item.top) {
                    item.top = top;
                }

                if (!item.height) {
                    item.height = item.offsetHeight;
                }

                top += item.height;

                if (!item.value) {
                    item.value = '' + i;
                }

                var label = getMemberValue(item, that.displayMember, 'label');
                var value = getMemberValue(item, that.valueMember, 'value');
                var group = getMemberValue(item, that.groupMember, 'group');

                if (item.label !== label) {
                    item.label = label;
                }

                if (item.value !== value) {
                    item.value = value;
                }

                if (item.group !== group) {
                    item.group = group;
                }

                //NOTE: the context must be set to document in order for item._setDisplayMode() to get called
                var originalContext = item.context;

                item.context = document;
                item.displayMode = displayMode;
                item.context = originalContext;

                that._alternateItem(item);

                if (item.selected) {
                    that.selectedIndexes.push(i);
                    that.selectedValues.push(item.value);
                }

                that._items.push(item);
            }

            if (that.itemTemplate && that._handleItemTemplate(that.itemTemplate)) {
                that._items.map(function (item) {
                    return that._applyTemplate(item);
                });
            }
        }
    }, {
        key: '_group',
        value: function _group() {
            var that = this;

            that.isUpdating++;

            var groups = [];
            var items = [];

            if (that._canSort) {
                that._unsort();
            }

            for (var i = 0; i < that._items.length; i++) {
                var item = that._items[i];
                var label = item.group ? item.group.trim() : item.innerHTML.charAt(0) || item.label.charAt(0);
                label += ' ';

                if (!groups[label]) {
                    groups[groups.length++] = groups[label] = { items: [item], label: label };
                } else {
                    groups[label].items.push(item);
                }
            }

            if (!that.isVirtualized) {
                while (that.$.itemsInnerContainer.firstChild) {
                    that.$.itemsInnerContainer.removeChild(that.$.itemsInnerContainer.firstChild);
                }

                var fragment = document.createDocumentFragment();

                that._groups = [];

                for (var _i9 = 0; _i9 < groups.length; _i9++) {
                    var group = groups[_i9];
                    var groupElement = document.createElement('jqx-list-items-group');

                    groupElement.label = group.label;
                    groupElement.dataIndex = _i9;

                    for (var j = 0; j < groups[_i9].items.length; j++) {
                        var _item6 = group.items[j];

                        items.push(_item6);
                        _item6.group = group.label;

                        groupElement.appendChild(_item6);
                    }

                    that._groups.push(groupElement);

                    fragment.appendChild(groupElement);
                }

                that._items = items;

                var isIE = /Trident|Edge/.test(navigator.userAgent);
                if (isIE) {
                    setTimeout(function () {
                        that.$.itemsInnerContainer.appendChild(fragment);
                    }, 50);
                } else {
                    that.$.itemsInnerContainer.appendChild(fragment);
                }
            } else {
                that._groups = [];

                for (var _i10 = 0; _i10 < groups.length; _i10++) {
                    var _group2 = groups[_i10];
                    _group2.dataIndex = _i10;
                    _group2.grouped = true;
                    _group2.hidden = false;
                    _group2.displayMode = 'plain';

                    items.push(_group2);

                    for (var _j = 0; _j < groups[_i10].items.length; _j++) {
                        var _item7 = _group2.items[_j];

                        _item7.group = _group2;
                        items.push(_item7);
                    }
                }

                that._groups = groups;
                that._items = items;
            }

            if (that.sorted) {
                that._sort();
            }

            that.isUpdating--;
        }
    }, {
        key: '_ungroup',
        value: function _ungroup() {
            var that = this;

            that.isUpdating++;

            that._groups = [];
            if (that._canSort) {
                that._unsort();
            }

            var items = [];

            if (!that.isVirtualized) {
                var fragment = document.createDocumentFragment();

                for (var i = 0; i < that._items.length; i++) {
                    var item = that._items[i];

                    fragment.appendChild(item);
                    items.push(item);
                }

                if (items.length > 0) {
                    that.$.itemsInnerContainer.innerHTML = '';
                    that.$.itemsInnerContainer.appendChild(fragment);
                }
            } else {
                for (var _i11 = 0; _i11 < that._items.length; _i11++) {
                    var _item8 = that._items[_i11];

                    if (_item8.grouped) {
                        continue;
                    }

                    items.push(_item8);
                }
            }

            that._items = items;

            if (that.sorted) {
                that._sort();
            }

            that.isUpdating--;
        }
    }, {
        key: '_initializeHtmlListGroups',
        value: function _initializeHtmlListGroups() {
            var that = this;
            var htmlListItemsGroups = that.$.itemsInnerContainer.querySelectorAll('jqx-list-items-group');

            that._groups = [];

            for (var i = 0; i < htmlListItemsGroups.length; i++) {
                var group = htmlListItemsGroups[i];
                group.dataIndex = i;

                that._groups.push(group);
            }
        }
    }, {
        key: '_initializeSelection',
        value: function _initializeSelection() {
            var that = this;
            /*
                    if (that.selectionMode === 'one' || that.selectionMode === 'oneOrMany' || that.selectionMode === 'oneOrManyExtended') {
                        if (that.selectedIndexes.length === 0 && that.selectedValues.length === 0 && that._items.length > 0 && firstSelectableItem) {
                        }
                    }
            */
            var selectedIndexes = that.selectedIndexes.slice(0);
            var selectedValues = that.selectedValues.slice(0);

            that.clearSelection();

            if (that.selectionMode === 'oneOrManyExtended') {
                that._keysPressed['Control'] = true;
            }

            for (var i = 0; i < that._items.length; i++) {
                var item = that._items[i];

                if (selectedIndexes.indexOf(i) >= 0 || selectedValues.indexOf(item.value || item.label) >= 0) {
                    if (that._focusedItem) {
                        that._focusedItem._focused = false;
                    }
                    that._focusedItem = null;
                    that.select(item);
                }
            }

            if (that.selectionMode === 'oneOrManyExtended') {
                that._keysPressed['Control'] = false;
            }
        }
    }, {
        key: 'onItemUpdated',
        value: function onItemUpdated() {
            var that = this;

            if (!that.isInitialized || that._isUpdating()) {
                return;
            }

            that.isUpdating++;
            that._refreshLayout();
            that.isUpdating--;
        }
    }, {
        key: '_refreshItems',
        value: function _refreshItems() {
            var that = this;

            if (!that.isInitialized || that._isUpdating()) {
                return;
            }

            that.isUpdating++;

            if (that.grouped) {
                that._ungroup();
            } else if (that.sorted && that._canSort) {
                that._unsort();
            }

            if (!that.isVirtualized) {
                that._items = [];

                var items = that.enableShadowDOM ? that.shadowRoot.querySelectorAll('jqx-list-item') : that.querySelectorAll('jqx-list-item');

                for (var i = 0; i < items.length; i++) {
                    items[i].dataIndex = i;

                    that._alternateItem(items[i]);
                    that._items.push(items[i]);
                }
            }

            if (that.grouped) {
                that._group();
            } else if (that.sorted) {
                that._sort();
            }

            that._refreshLayout();
            that.isUpdating--;
        }

        /**
        * Incremental Search logic.
        */

    }, {
        key: '_applyIncrementalSearch',
        value: function _applyIncrementalSearch(key) {
            var that = this;
            if (that.incrementalSearchDelay === null || isNaN(that.incrementalSearchDelay)) {
                return;
            }

            if (['Shift', 'ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight', 'Control', 'Home', 'End', 'PageUp', 'PageDown'].indexOf(key) > -1) {
                return;
            }

            if (that._incrementalSearchQuery.indexOf(key) !== 0) {
                that._incrementalSearchQuery += key;
            }

            if (that._incrementalSearchTimer) {
                clearTimeout(that._incrementalSearchTimer);
            }

            that._incrementalSearch();
            that._incrementalSearchTimer = setTimeout(function () {
                that._incrementalSearchQuery = '';
            }, that.incrementalSearchDelay);
            return;
        }

        /**
        * Selects an item by its HTML Element or Value.
        */

    }, {
        key: 'select',
        value: function select(item) {
            var that = this;

            if (typeof item === 'string') {
                item = that.getItem(item);
                if (!item) {
                    return;
                }
            }
            if (typeof item === 'number') {
                item = that.getItem(item);
                if (!item) {
                    return;
                }
            }

            if (item.grouped || item.readonly) {
                return;
            }

            if (that.selectionMode === 'none') {
                that.selectedIndexes = [];
                that.selectedValues = [];
                return;
            }

            if (!that._focusedItem !== item && that.selectionMode !== 'none') {
                if (that._focusedItem) {
                    that._focusedItem._focused = false;
                }

                that._focusedItem = item;
                item._focused = true;
            }

            switch (that.selectionMode) {
                case 'one':
                    if (that.selectedIndexes.length === 1 && that.selectedIndexes[0] === that._indexOf(item)) {
                        return false;
                    }

                    that._previouslySelectedIndexes = that.selectedIndexes;

                    if (that.selectedIndexes.length >= 1) {
                        that.clearSelection();
                    }

                    that._select(item);
                    delete that._previouslySelectedIndexes;
                    return true;
                case 'zeroOrOne':
                    if (that.selectedIndexes.length === 1 && that.selectedIndexes[0] === that._indexOf(item)) {
                        that.unselect(item);
                        return true;
                    }

                    that._previouslySelectedIndexes = that.selectedIndexes;

                    if (that.selectedIndexes.length >= 1) {
                        that.clearSelection();
                    }

                    that._select(item);
                    delete that._previouslySelectedIndexes;
                    return true;
                case 'radioButton':
                    that._previouslySelectedIndexes = that.selectedIndexes;

                    if (that.$.itemsInnerContainer.querySelectorAll('jqx-list-items-group').length > 0) {
                        var group = item.parentNode;

                        if (!item.selected) {
                            for (var index in group.children) {
                                var _item9 = group.children[index];

                                if (_item9.selected) {
                                    that.unselect(_item9);
                                }
                            }

                            that._select(item);
                        }

                        delete that._previouslySelectedIndexes;
                        return true;
                    } else if (that.isVirtualized && that._groups.length > 0) {
                        var _group3 = item.group;

                        if (!item.selected) {
                            for (var _index in _group3.items) {
                                var _item10 = _group3.items[_index];

                                if (_item10.selected) {
                                    that.unselect(_item10);
                                }
                            }

                            that._select(item);
                        }

                        delete that._previouslySelectedIndexes;
                        return true;
                    }

                    if (!item.selected) {
                        if (that.selectedIndexes.length >= 1) {
                            that.clearSelection();
                        }

                        that._select(item);
                    }

                    delete that._previouslySelectedIndexes;
                    return true;
                case 'oneOrMany':
                    if (!item.selected) {
                        that._select(item);
                    } else if (that.selectedIndexes.length > 1) {
                        that.unselect(item);
                    }
                    return true;
                case 'zeroOrMany':
                case 'checkBox':
                    if (!item.selected) {
                        that._select(item);
                    } else {
                        that.unselect(item);
                    }
                    return true;
                case 'oneOrManyExtended':
                    {
                        var selectedValues = that.selectedValues;

                        if (that._keysPressed['Control']) {
                            if (that.selectedIndexes.length > 1) {
                                if (item.selected) {
                                    that.unselect(item);
                                    that._focus(that._items[that.selectedIndexes[0]]);
                                } else {
                                    that._select(item);
                                }
                            } else {
                                that._select(item);
                            }
                            return true;
                        }

                        if (that._keysPressed['Shift']) {
                            var selectedItem = that._items[that.selectedIndexes[0]];
                            var _index2 = void 0;

                            that.clearSelection();

                            var preventEvent = selectedValues.indexOf(selectedItem.value) >= 0 || selectedItem.selected;

                            that._select(selectedItem, preventEvent);

                            if (that._indexOf(selectedItem) > that._indexOf(item)) {
                                _index2 = that._indexOf(selectedItem) - 1;
                                while (_index2 >= that._indexOf(item)) {
                                    var _item11 = that._items[_index2];
                                    var _preventEvent = selectedValues.indexOf(_item11.value) >= 0 || _item11.selected;

                                    that._select(_item11, _preventEvent);
                                    _index2--;
                                }
                            } else {
                                _index2 = that._indexOf(selectedItem) + 1;
                                while (_index2 <= that._indexOf(item)) {
                                    var _item12 = that._items[_index2];
                                    var _preventEvent2 = selectedValues.indexOf(_item12.value) >= 0 || _item12.selected;

                                    that._select(_item12, _preventEvent2);
                                    _index2++;
                                }
                            }

                            var unselectedItems = [];

                            for (var i = 0; i < selectedValues.length; i++) {
                                unselectedItems.push(that.getItem(selectedValues[i]));
                            }

                            if (unselectedItems.length > 0 && !that._propertyChanging) {
                                var selectedItems = [];

                                for (var _i12 = 0; _i12 < that.selectedValues.length; _i12++) {
                                    var previousSelectedValue = that.selectedValues[_i12];

                                    if (selectedValues.indexOf(previousSelectedValue) < 0) {
                                        selectedItems.push(that.getItem(previousSelectedValue));
                                    }
                                }

                                that.$.fireEvent('change', {
                                    'addedItems': selectedItems,
                                    'removedItems': unselectedItems,
                                    'selected': item.selected,
                                    'disabled': item.disabled,
                                    'index': that._indexOf(item),
                                    'label': item.label,
                                    'value': item.value
                                });
                            }

                            return true;
                        }

                        for (var _i13 = 0; _i13 < selectedValues.length; _i13++) {
                            var value = selectedValues[_i13];
                            var _selectedItem = that.getItem(value);

                            if (item !== _selectedItem) {
                                that.unselect(_selectedItem);
                            }
                        }

                        that.clearSelection();
                        that._select(item, selectedValues.indexOf(item.value) >= 0);
                        return true;
                    }
            }

            return false;
        }

        /**
        * Returns the contents of the template with the new content applied.
        */

    }, {
        key: '_applyTemplate',
        value: function _applyTemplate(item, refreshLayout) {
            var that = this;

            if (that.itemTemplate === null) {
                return;
            }

            if (typeof that.itemTemplate === 'function') {
                that.itemTemplate(item, { label: item.label, value: item.value, index: that._items.indexOf(item) });
                return;
            }

            if (!that._bindingDetails || that._bindingDetails.length === 0) {
                return;
            }

            var bindingsCount = that._bindingDetails.length;
            var clone = document.importNode(that._template.content, true),
                bindingHolderElement = void 0,
                bindingStringsCount = void 0;

            for (var b = 0; b < bindingsCount; b++) {
                bindingHolderElement = clone.childNodes[that._bindingDetails[b].childNodeIndex];
                bindingStringsCount = that._bindingDetails[b].bindingString.length;
                for (var i = 0; i < bindingStringsCount; i++) {
                    var propertyName = that._bindingDetails[b].bindingString[i];
                    var propertyValue = propertyName.indexOf('label') >= 0 ? item.label : item.value;

                    bindingHolderElement.innerHTML = bindingHolderElement.innerHTML.replace(propertyName, propertyValue);
                }
            }

            item.innerHTML = '';
            for (var _i14 = 0; _i14 < clone.childNodes.length; _i14++) {
                if (clone.childNodes[_i14].outerHTML) {
                    item.innerHTML += clone.childNodes[_i14].outerHTML;
                }
            }

            if (refreshLayout === false) {
                return;
            }

            if (that._scrollHeightTimer) {
                clearInterval(that._scrollHeightTimer);
                that._scrollHeightCounter = 0;
            }

            that._scrollHeightTimer = setInterval(function () {
                if (that._lastScrollHeight !== that.$.itemsInnerContainer.scrollHeight || that._scrollHeightCounter === 10) {
                    that._refreshLayout();
                    clearInterval(that._scrollHeightTimer);
                }
                that._lastScrollHeight = that.$.itemsInnerContainer.scrollHeight;
                that._scrollHeightCounter++;
            }, 50);
        }

        /**
         * Filter items.
         */

    }, {
        key: '_filterItems',
        value: function _filterItems(noSelectionRefresh, callback, ignoreFilterQueryLength) {
            var that = this;
            var filterQuery = that.$.filterInput.value;
            var filteredItems = void 0,
                items = void 0;

            var updateListBox = function updateListBox() {
                if (items.length === 0) {
                    that._filteredItems = [];

                    if (callback) {
                        callback();
                    }

                    return;
                }

                filteredItems = that._queryItems(filterQuery, that.filterMode);

                for (var i = 0; i < items.length; i++) {
                    items[i].hidden = true;
                    items[i].$.addClass('jqx-hidden');
                }

                for (var _i15 = 0; _i15 < filteredItems.length; _i15++) {
                    var item = filteredItems[_i15];

                    item.hidden = false;
                    item.$.removeClass('jqx-hidden');
                }

                if (that.grouped && that.isVirtualized) {
                    for (var _i16 = 0; _i16 < that._groups.length; _i16++) {
                        var group = that._groups[_i16];
                        var _items = group.items;

                        var canHide = true;

                        for (var j = 0; j < _items.length; j++) {
                            if (!_items[j].hidden) {
                                canHide = false;
                            }
                        }

                        if (canHide) {
                            group.hidden = true;
                        }
                    }
                }

                if (that.grouped && !that.isVirtualized) {
                    for (var _i17 = 0; _i17 < that._groups.length; _i17++) {
                        var _ref;

                        var _group4 = that._groups[_i17];
                        var _items2 = (_ref = []).concat.apply(_ref, babelHelpers.toConsumableArray(_group4.querySelectorAll('jqx-list-item')));

                        var _canHide = true;

                        for (var _j2 = 0; _j2 < _items2.length; _j2++) {
                            if (!_items2[_j2].$.hasClass('jqx-hidden')) {
                                _canHide = false;
                            }
                        }

                        if (_canHide) {
                            _group4.$.addClass('jqx-hidden');
                        } else {
                            _group4.$.removeClass('jqx-hidden');
                        }
                    }
                }

                that._filteredItems = filteredItems;
                that._refreshLayout();

                if (callback) {
                    callback();
                }

                if (noSelectionRefresh) {
                    return;
                }

                that._refreshSelection();
            };

            if (typeof that.dataSource === 'function') {
                if (filterQuery || ignoreFilterQueryLength) {
                    var queryCallback = function queryCallback(response) {
                        if (!filterQuery && !ignoreFilterQueryLength || !that.isAttached) {
                            return;
                        }

                        that._updateListBoxAfterQuery = function () {
                            filteredItems = items = that._items;
                            updateListBox();
                        };

                        that.clearItems();
                        that.insert(0, response);
                    };

                    var response = that.dataSource(filterQuery, queryCallback);

                    if (response) {
                        if (!filterQuery && !ignoreFilterQueryLength) {
                            return;
                        }

                        that._updateListBoxAfterQuery = function () {
                            filteredItems = items = that._items;
                            updateListBox();
                        };

                        that.clearItems();
                        that.insert(0, response);
                    }
                } else {
                    that.clearItems();
                    filteredItems = items = that._items;
                    updateListBox();
                }
            } else {
                items = that._items;

                if (items.length === 0) {
                    return;
                }

                updateListBox();
            }
        }

        /**
        * Returns the next item in the list.
        */

    }, {
        key: '_getNextItem',
        value: function _getNextItem(activeItemIndex) {
            var that = this,
                items = that._items,
                itemsCount = that._items.length;
            var index = Math.max(activeItemIndex + 1, 0);

            while (index < itemsCount) {
                var item = items[index];

                if (!item.disabled && !item.hidden && !item.grouped && !item.readonly) {
                    return item;
                }

                index++;
            }

            return items[activeItemIndex];
        }

        /**
        * Returns the previous item in the list.
        */

    }, {
        key: '_getPreviousItem',
        value: function _getPreviousItem(activeItemIndex) {
            var that = this,
                items = that._items;
            var index = Math.max(activeItemIndex - 1, 0);

            while (index > -1) {
                var item = items[index];

                if (!item.disabled && !item.hidden && !item.grouped && !item.readonly) {
                    return item;
                }

                index--;
            }

            return items[activeItemIndex];
        }

        /**
        * Calculates the width/height of the items.
        */

    }, {
        key: 'update',
        value: function update(index, details) {
            var that = this;
            var htmlItem = that._items[index];

            if (htmlItem) {
                if (typeof details === 'string') {
                    htmlItem.label = details;
                    if (undefined === htmlItem.value) {
                        htmlItem.value = details;
                    }
                } else {
                    for (var detail in details) {
                        if (detail === 'selected' && htmlItem[detail] !== details[detail]) {
                            that.select(htmlItem);
                        } else {
                            htmlItem[detail] = details[detail];
                        }

                        if (detail === 'group') {
                            that._refreshItems();
                        }
                    }
                }

                if (that.sorted || that.grouped || that.isVirtualized) {
                    that._refreshItems();
                    that._refreshSelection();
                }
            } else {
                that.error(that.localize('indexOutOfBound', { elementType: that.nodeName.toLowerCase(), method: 'update' }));
            }
        }
    }, {
        key: 'insert',
        value: function insert(index, items) {
            var that = this;
            var htmlItems = [];

            function itemsReady() {
                that._refreshItems();

                if (that._items.length === 0) {
                    return;
                }

                if (that._updateListBoxAfterQuery) {
                    that._updateListBoxAfterQuery();
                    delete that._updateListBoxAfterQuery;
                }

                that._refreshSelection();

                that.$.fireEvent('bindingComplete');
            }

            if (!index) {
                index = 0;
            }

            if (Array.isArray(items)) {
                that.isUpdating++;
                for (var i = 0; i < items.length; i++) {
                    var item = items[i];
                    var htmlItem = that._createItem(item);

                    htmlItems.push(htmlItem);

                    if (index >= that._items.length || that._items.length === 0) {
                        that.appendChild(htmlItem);
                    } else {
                        that.insertBefore(htmlItem, that._items[index]);
                    }
                }
                that.isUpdating--;
            } else {
                var _htmlItem = that._createItem(items);

                htmlItems.push(_htmlItem);

                if (index >= that._items.length || that._items.length === 0) {
                    that.appendChild(_htmlItem);
                } else {
                    that.insertBefore(_htmlItem, that._items[index]);
                }
            }

            if (htmlItems.length > 0) {
                htmlItems.map(function (item) {
                    return that._applyTemplate(item);
                });
                that._ensureItemsReady(htmlItems, itemsReady);
            }
        }
    }, {
        key: 'remove',
        value: function remove(index) {
            var that = this;
            var htmlItem = that._items[index];

            if (htmlItem) {
                if (that.isVirtualized) {
                    that._items.splice(index, 1);
                } else {
                    htmlItem.parentNode.removeChild(htmlItem);
                }

                if (htmlItem.selected) {
                    that.unselect(htmlItem);
                }

                that._refreshItems();
                that._refreshSelection();
                if (that.selectedIndexes.length === 0 && that._items.length > 0) {
                    if (that.selectionMode === 'oneOrMany' || that.selectionMode === 'one' || that.selectionMode === 'oneOrManyExtended') {
                        that.select(that._items[0]);
                    }
                }
            } else {
                that.error(that.localize('indexOutOfBound', { elementType: that.nodeName.toLowerCase(), method: 'remove' }));
            }
        }

        /**
          * Update all matched cases from the filter input.
          */

    }, {
        key: '_queryItems',
        value: function _queryItems(searchQuery, searchMode) {
            var that = this;
            var result = [];
            var findItem = function findItem(item, filterQuery) {
                if (item.grouped) {
                    return item;
                }

                switch (searchMode) {
                    case 'startsWith':
                        if (item.label.indexOf(filterQuery) === 0) {
                            return item;
                        }
                        break;
                    case 'startsWithIgnoreCase':
                        if (item.label.toLowerCase().indexOf(filterQuery.toLowerCase()) === 0) {
                            return item;
                        }
                        break;
                    case 'doesNotContain':
                        if (item.label.indexOf(filterQuery) < 0) {
                            return item;
                        }
                        break;
                    case 'doesNotContainIgnoreCase':
                        if (item.label.toLowerCase().indexOf(filterQuery.toLowerCase()) < 0) {
                            return item;
                        }
                        break;
                    case 'contains':
                        if (item.label.indexOf(filterQuery) > -1) {
                            return item;
                        }
                        break;
                    case 'containsIgnoreCase':
                        if (item.label.toLowerCase().indexOf(filterQuery.toLowerCase()) > -1) {
                            return item;
                        }
                        break;
                    case 'equals':
                        if (item.label.localeCompare(filterQuery) === 0) {
                            return item;
                        }
                        break;
                    case 'equalsIgnoreCase':
                        if (item.label.toLowerCase().localeCompare(filterQuery.toLowerCase()) === 0) {
                            return item;
                        }
                        break;
                    case 'endsWith':
                        if (item.label.endsWith(filterQuery)) {
                            return item;
                        }
                        break;
                    case 'endsWithIgnoreCase':
                        if (item.label.toLowerCase().endsWith(filterQuery.toLowerCase())) {
                            return item;
                        }
                        break;
                    case 'custom':
                        if (that.filterCallback(item, searchQuery)) {
                            return item;
                        }

                        break;
                }

                return null;
            };

            if (searchQuery.length === 0) {
                return that._items;
            }

            for (var i = 0; i < that._items.length; i++) {
                var item = findItem(that._items[i], searchQuery);

                if (item) {
                    result.push(item);
                }
            }

            return result;
        }
    }, {
        key: '_select',
        value: function _select(item, preventEvent) {
            var that = this;
            var selectedIndex = that.selectedIndexes.indexOf(that._indexOf(item));
            var indexes = that.selectedIndexes.slice(0),
                values = that.selectedValues.slice(0);

            item.selected = true;

            if (selectedIndex === -1) {
                indexes.push(that._indexOf(item));
                values.push(item.value || item.label);
            } else {
                that._recycle();
                return false;
            }

            that.selectedIndexes = indexes;
            that.selectedValues = values;
            that._recycle();

            //Update the hidden form input
            that.$.hiddenInput.value = values.toString();

            if (!that.isCompleted || preventEvent || !that.isInitialized || that._propertyChanging) {
                return;
            }

            var previouslySelectedItems = [];

            if (that._previouslySelectedIndexes) {
                for (var i = 0; i < that._previouslySelectedIndexes.length; i++) {
                    if (that.selectedIndexes.indexOf(that._previouslySelectedIndexes[i]) < 0) {
                        previouslySelectedItems.push(that._items[that._previouslySelectedIndexes[i]]);
                    }
                }

                delete that._previouslySelectedIndexes;
            }

            that.$.fireEvent('change', {
                'addedItems': [item],
                'removedItems': previouslySelectedItems,
                'selected': item.selected,
                'disabled': item.disabled,
                'index': that._indexOf(item),
                'label': item.label,
                'value': item.value
            });

            return true;
        }

        /**
         * Handles the topVisibleIndex property. Sets an item always as first in the listBox view area
         * @param {any} item
         */

    }, {
        key: '_setTopVisibleIndex',
        value: function _setTopVisibleIndex(item) {
            var that = this;

            if (typeof item === 'number') {
                that.topVisibleIndex = Math.max(0, item);
                item = that._items[that.topVisibleIndex];
            }

            if (!item) {
                return false;
            }

            if (item.top !== that.scrollTop) {
                that.scrollTop = item.top;

                if (!that.isVirtualized) {
                    that.$.itemsContainer.scrollTop = that.scrollTop;
                }

                //Update topVisibleIndex to the first visible item
                if (that.scrollHeight === that.scrollTop) {
                    that._updateTopVisibleIndex();
                }
            }
        }

        /**
         * Updates the topVisibleIndex
         */

    }, {
        key: '_updateTopVisibleIndex',
        value: function _updateTopVisibleIndex() {
            var that = this,
                minScrollTop = that.scrollTop + that._scrollView.verticalScrollBar.offsetHeight - that.offsetHeight;
            var lastVisibleItem = void 0;

            if (that.scrollTop < that.scrollHeight / 2) {
                for (var i = 0; i < that._items.length; i++) {
                    if (that._items[i].top > minScrollTop) {
                        lastVisibleItem = that._items[i];
                        break;
                    }
                }
            } else {
                for (var _i18 = that._items.length - 1; _i18 >= 0; _i18--) {
                    if (that._items[_i18].top < minScrollTop) {
                        break;
                    }

                    lastVisibleItem = that._items[_i18];
                }
            }

            if (lastVisibleItem) {
                that.topVisibleIndex = lastVisibleItem.dataIndex;
            }
        }
    }, {
        key: 'unselect',
        value: function unselect(item) {
            var that = this;

            if (!item) {
                return;
            }

            if (typeof item === 'string') {
                item = that.getItem(item);
                if (!item) {
                    return;
                }
            }

            if (that.selectionMode === 'none') {
                that.clearSelection();
                return;
            }

            var selectedIndex = that.selectedIndexes.indexOf(that._indexOf(item));
            var indexes = that.selectedIndexes.slice(0),
                values = that.selectedValues.slice(0);

            item.selected = false;

            if (selectedIndex >= 0) {
                indexes.splice(selectedIndex, 1);
                values.splice(selectedIndex, 1);
            } else {
                return false;
            }

            that.selectedIndexes = indexes;
            that.selectedValues = values;

            //Update the hidden form input
            that.$.hiddenInput.value = values.toString();

            if (!that.isCompleted || that._propertyChanging) {
                return;
            }

            that.$.fireEvent('change', {
                'addedItems': [],
                'removedItems': [item],
                'selected': item.selected,
                'disabled': item.disabled,
                'index': that._indexOf(item),
                'label': item.label,
                'value': item.value
            });

            that._recycle();

            return true;
        }

        /**
        * Validates the template and if valid, returns an object with binding details.
        */

    }, {
        key: '_handleItemTemplate',
        value: function _handleItemTemplate(template) {

            if (template === null || !template) {
                return;
            }

            if (typeof template === 'function') {
                return template;
            }

            var that = this;

            if (!('content' in document.createElement('template'))) {
                that.error(that.localize('htmlTemplateNotSuported', { elementType: that.nodeName.toLowerCase() }));
                that.itemTemplate = null;
                return;
            }

            template = document.getElementById(template);
            if (template === null || !('content' in template)) {
                that.error(that.localize('invalidTemplate', { elementType: that.nodeName.toLowerCase(), property: 'itemTemplate' }));
                that.itemTemplate = null;
                return;
            }

            var templateContent = template.content,
                childrenCount = templateContent.childNodes.length,
                regex = /{{\w+}}/g;
            var bindingString = void 0,
                bindingsFound = void 0;

            that._bindingDetails = [];
            that._template = template;
            for (var i = 0; i < childrenCount; i++) {
                bindingsFound = [];
                while (bindingString = regex.exec(templateContent.childNodes[i].innerHTML)) {
                    bindingsFound.push(bindingString[0]);
                }

                if (bindingsFound.length > 0) {
                    that._bindingDetails.push({ childNodeIndex: i, bindingString: bindingsFound });
                }
            }

            return true;
        }

        /**
        * Handles pressed keys.
        */

    }, {
        key: '_handleKeyStrokes',
        value: function _handleKeyStrokes(key) {
            var that = this;
            var toFocus = that.selectionMode === 'radioButton' || that.selectionMode === 'checkBox' || that.selectionMode === 'zeroOrMany' || that.selectionMode === 'oneOrMany' || that.selectionMode === 'zeroOrOne';
            var items = that._items;

            if (that.filterable && that.$.filterInput.value.length > 0) {
                items = that._filteredItems;
            }

            if (that.disabled || that.readonly) {
                return;
            }

            switch (key) {
                case 'ArrowLeft':
                case 'ArrowUp':
                    that._handleArrowKeys(true);
                    break;
                case 'ArrowRight':
                case 'ArrowDown':
                    that._handleArrowKeys(false);
                    break;
                case ' ':
                    {
                        if (that.selectedIndexes.length < 1 && !that._focusedItem) {
                            return;
                        }

                        var focusedItem = that._focusedItem ? that._focusedItem : that._items[that.selectedIndexes[that.selectedIndexes.length - 1]];

                        var makeSelection = function makeSelection(item) {
                            if (item.selected && that.selectionMode !== 'radioButton') {
                                that.unselect(item);
                            } else {
                                that.select(item);
                            }
                        };

                        if (that.selectionMode === 'oneOrMany') {
                            if (focusedItem.selected && that.selectedIndexes.length > 1) {
                                makeSelection(focusedItem);
                            } else if (!focusedItem.selected) {
                                makeSelection(focusedItem);
                            }
                            return;
                        }

                        makeSelection(focusedItem);
                        break;
                    }
                case 'Home':
                    {
                        if (items.length === 0) {
                            return;
                        }

                        if (toFocus) {
                            that._focus(items[0]);
                        } else {
                            if (!that._keysPressed['Shift']) {
                                that.clearSelection();
                            }
                            that.select(items[0]);
                            that._focus(items[0]);
                        }
                        that.scrollTop = 0;
                        break;
                    }
                case 'End':
                    {
                        if (items.length === 0) {
                            return;
                        }

                        if (toFocus) {
                            that._focus(items[items.length - 1]);
                        } else {
                            if (!that._keysPressed['Shift']) {
                                that.clearSelection();
                            }
                            that.select(items[items.length - 1]);
                            that._focus(items[items.length - 1]);
                        }
                        that.scrollTop = that.scrollHeight;
                        break;
                    }
                case 'PageUp':
                    {
                        that._pageUpKeyHandler(items);
                        break;
                    }
                case 'PageDown':
                    {
                        that._pageDownKeyHandler(items);
                        break;
                    }
            }

            that._recycle();
        }
        /**
        * Horizontal Scroll Bar handler
        */

    }, {
        key: '_horizontalScrollbarHandler',
        value: function _horizontalScrollbarHandler(event) {
            var that = this;

            event.stopPropagation();

            if (that.isVirtualized) {
                that._recycle();
            } else {
                that.$.itemsContainer.scrollLeft = event.detail.value;
            }
        }
    }, {
        key: '_unsort',
        value: function _unsort() {
            var that = this;

            that.isUpdating++;

            var sortByIndex = function sortByIndex(a, b) {
                var indexA = a.dataIndex;
                var indexB = b.dataIndex;

                if (indexA < indexB) {
                    return -1;
                }
                if (indexA > indexB) {
                    return 1;
                }

                return 0;
            };

            if (!that.isVirtualized) {
                if (that._groups.length > 0) {
                    that._groups.sort(sortByIndex);

                    var sortedItems = [];

                    for (var i = 0; i < that._groups.length; i++) {
                        var _ref2;

                        var group = that._groups[i];
                        var items = (_ref2 = []).concat.apply(_ref2, babelHelpers.toConsumableArray(group.querySelectorAll('jqx-list-item')));

                        items.sort(sortByIndex);
                        sortedItems = sortedItems.concat(items);
                    }

                    that._items = sortedItems;
                } else {
                    that._items.sort(sortByIndex);
                }

                that._applySortOrder();
            } else {
                if (that._groups.length > 0) {
                    that._groups.sort(sortByIndex);

                    var _sortedItems = [];

                    for (var _i19 = 0; _i19 < that._groups.length; _i19++) {
                        var _ref3;

                        var _group5 = that._groups[_i19];
                        var _items3 = (_ref3 = []).concat.apply(_ref3, babelHelpers.toConsumableArray(_group5.items));

                        _items3.sort(sortByIndex);

                        _sortedItems.push(_group5);
                        _sortedItems = _sortedItems.concat(_items3);
                    }

                    that._items = _sortedItems;
                } else {
                    that._items.sort(sortByIndex);
                }
            }

            that.isUpdating--;
        }
    }, {
        key: '_applySortOrder',
        value: function _applySortOrder() {
            var that = this;

            var reorder = function reorder(items) {
                for (var i = 0; i < items.length; i++) {
                    var item = items[i];
                    var parentNode = item.parentNode;

                    if (!parentNode) {
                        continue;
                    }

                    parentNode.appendChild(item);
                }
            };

            reorder(that._items);
            reorder(that._groups);
        }
    }, {
        key: '_sort',
        value: function _sort() {
            var that = this;

            if (!that._canSort) {
                return;
            }

            that.isUpdating++;

            var sortByLabel = function sortByLabel(a, b) {
                var labelA = a.label;
                var labelB = b.label;

                if (that.sortDirection === 'asc') {
                    if (labelA < labelB) {
                        return -1;
                    }
                    if (labelA > labelB) {
                        return 1;
                    }
                } else {
                    if (labelA < labelB) {
                        return 1;
                    }
                    if (labelA > labelB) {
                        return -1;
                    }
                }

                return 0;
            };

            that._groups.sort(sortByLabel);

            if (!that.isVirtualized) {
                if (that._groups.length > 0) {
                    var sortedItems = [];
                    for (var i = 0; i < that._groups.length; i++) {
                        var _ref4;

                        var group = that._groups[i];
                        var items = (_ref4 = []).concat.apply(_ref4, babelHelpers.toConsumableArray(group.querySelectorAll('jqx-list-item')));

                        items.sort(sortByLabel);
                        sortedItems = sortedItems.concat(items);
                    }

                    that._items = sortedItems;
                } else {
                    that._items.sort(sortByLabel);
                }

                that._applySortOrder();
            } else {
                if (that._groups.length > 0) {
                    var _sortedItems2 = [];
                    for (var _i20 = 0; _i20 < that._groups.length; _i20++) {
                        var _ref5;

                        var _group6 = that._groups[_i20];
                        var _items4 = (_ref5 = []).concat.apply(_ref5, babelHelpers.toConsumableArray(_group6.items));

                        _sortedItems2.push(_group6);
                        _items4.sort(sortByLabel);
                        _sortedItems2 = _sortedItems2.concat(_items4);
                    }

                    that._items = _sortedItems2;
                } else {
                    that._items.sort(sortByLabel);
                }
            }

            that.isUpdating--;
        }
    }, {
        key: 'getItem',
        value: function getItem(value) {
            var that = this;

            for (var i = 0; i < that._items.length; i++) {
                if (that._items[i].value === value) {
                    return that._items[i];
                }
            }

            return null;
        }
    }, {
        key: '_focus',
        value: function _focus(item) {
            var that = this;

            if (!item || that.selectionMode === 'none' || that.disabled || that.readonly) {
                return;
            }

            if (that._focusedItem) {
                that._focusedItem._focused = false;
            }

            that._focusedItem = item;
            that._focusedItem._focused = true;
        }

        /**
         * KeyDown handler.
         */

    }, {
        key: '_keyDownHandler',
        value: function _keyDownHandler(event) {
            var that = this,
                activeElement = that.enableShadowDOM ? that.shadowRoot.activeElement : document.activeElement;

            var key = event.key;

            if (that.disabled || that.readonly) {
                return;
            }

            if (that.filterable && that.$.filterInput === activeElement) {
                return;
            }

            if (!that._focused) {
                return;
            }

            if (that._items.length === 0 || that.disabled || that.displayLoadingIndicator) {
                return;
            }

            if (that.editable) {
                if (key === 'F2') {
                    that._dblclickEventHandler({ target: that._focusedItem });
                    return;
                } else {
                    if (that.$.editInput === activeElement) {
                        return;
                    }
                }
            }

            if (that.selectionMode === 'none') {
                return;
            }

            event.stopPropagation();

            // Fix for not standartized event.key in Edge.
            switch (key) {
                case 'Down':
                case 'Right':
                case 'Left':
                case 'Up':
                    key = 'Arrow' + key;
                    break;
            }

            if (that.filterable) {
                switch (key) {
                    case 'ArrowLeft':
                    case 'ArrowRight':
                        return;
                    case 'ArrowUp':
                    case 'ArrowDown':
                        event.preventDefault();
                }
            }

            that._applyIncrementalSearch(key);
            if (['Shift', 'ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight', 'Control', ' ', 'Home', 'End', 'PageUp', 'PageDown'].indexOf(key) < 0) {
                return;
            }

            event.preventDefault(); //prevent window scrolling

            if (!that._focusedItem && that._items.length > 0) {

                if (that.selectionMode === 'one' || that.selectionMode === 'oneOrMany' || that.selectionMode === 'oneOrManyExtended') {
                    that.select(that._items[0]);
                } else {
                    that._focus(that._items[0]);
                }
                return;
            }

            switch (that.selectionMode) {
                case 'one':
                    if (key === 'Shift' || key === 'Control' || key === ' ') {
                        return;
                    }

                    that._handleKeyStrokes(key);
                    break;
                case 'oneOrMany':
                case 'zeroOrOne':
                case 'zeroOrMany':
                case 'radioButton':
                case 'checkBox':
                    if (key === 'Shift' || key === 'Control') {
                        return;
                    }

                    that._handleKeyStrokes(key);
                    break;
                case 'oneOrManyExtended':
                    if (key === ' ') {
                        return;
                    }

                    that._keysPressed[key] = event.type === 'keydown';
                    that._handleKeyStrokes(key);
                    break;
            }
        }

        /**
        * KeyUp handler.
        */

    }, {
        key: '_keyUpHandler',
        value: function _keyUpHandler(event) {
            var that = this,
                activeElement = that.enableShadowDOM ? that.shadowRoot.activeElement : document.activeElement;

            if (that.editable && that.$.editInput === activeElement) {
                return;
            }

            if (that.filterable && that.$.filterInput === activeElement) {
                if (that._filterTimer) {
                    clearTimeout(that._filterTimer);
                }

                that._filterTimer = setTimeout(function () {
                    var context = that.context;

                    that.context = that;
                    that._filterItems();
                    that.scrollTop = that.$.itemsContainer.scrollTop = 0;
                    that.scrollLeft = that.$.itemsContainer.scrollLeft = 0;
                    that.context = context;
                }, 300);
                return;
            }

            if (!that._focused) {
                return;
            }

            if (that._focusedItem && that._focusedItem.hidden) {
                if (that._filteredItems.length > 0) {
                    var itemToFocus = that._filteredItems[0];

                    if (itemToFocus.grouped && that._filteredItems.length > 1) {
                        itemToFocus = that._filteredItems[1];
                    }
                    that._focus(itemToFocus);
                    that._recycle();
                }
            }

            event.stopPropagation();
            event.preventDefault();

            if (that.disabled) {
                return;
            }

            if (['Shift', 'ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight', 'Control', ' ', 'PageUp', 'PageDown'].indexOf(event.key) < 0) {
                return;
            }

            that._keysPressed[event.key] = false;
        }

        /**
        * Container mousewheel event handler.
        */

    }, {
        key: '_mouseWheelHandler',
        value: function _mouseWheelHandler(event) {
            var that = this;

            if (!that.computedHorizontalScrollBarVisibility && !that.computedVerticalScrollBarVisibility) {
                return;
            }

            if (!that.disabled && that.computedVerticalScrollBarVisibility) {
                event.stopPropagation();
                event.preventDefault();
                that.scrollTo(that.scrollTop + that._getScrollCoefficient(event, that.offsetHeight));
            }
        }

        /**
        * Page Down key handler.
        */

    }, {
        key: '_pageDownKeyHandler',
        value: function _pageDownKeyHandler(items) {
            var that = this;

            if (items.length === 0) {
                return;
            }

            var selectedItem = that._items[that.selectedIndexes[that.selectedIndexes.length - 1]];
            if (that.selectionMode === 'checkBox' || that.selectionMode === 'radioButton' || that.selectionMode === 'zeroOrMany' || that.selectionMode === 'oneOrMany' || that.selectionMode === 'zeroOrOne') {
                if (that._focusedItem) {
                    selectedItem = that._focusedItem;
                }
            }

            var item = void 0;
            var selectedItemIndex = that._indexOf(selectedItem);
            var viewTop = selectedItem.top + that.$.itemsContainer.offsetHeight - selectedItem.height;

            for (var i = selectedItemIndex; i < items.length; i++) {
                if (items[i].top >= viewTop) {
                    item = items[i];
                    break;
                }
            }

            if (!item) {
                item = items[items.length - 1];
            }

            if (that.selectionMode === 'checkBox' || that.selectionMode === 'radioButton' || that.selectionMode === 'zeroOrMany' || that.selectionMode === 'oneOrMany' || that.selectionMode === 'zeroOrOne') {
                that._focus(item);
            } else {
                if (!item.selected) {
                    if (!that._keysPressed['Shift']) {
                        that.clearSelection();
                    }
                    that.select(item);
                    that._focus(item);
                }
            }

            if (item.height + item.top > that.$.itemsContainer.scrollTop + that.$.itemsContainer.offsetHeight || item.top < that.$.itemsContainer.scrollTop) {
                that.scrollTop = item.top - that.$.itemsContainer.offsetHeight + item.height;
            }
        }

        /**
        * Page Up key handler.
        */

    }, {
        key: '_pageUpKeyHandler',
        value: function _pageUpKeyHandler(items) {
            var that = this;

            if (items.length === 0) {
                return;
            }

            var selectedItem = that._items[that.selectedIndexes[that.selectedIndexes.length - 1]];

            if (that.selectionMode === 'checkBox' || that.selectionMode === 'radioButton' || that.selectionMode === 'zeroOrMany' || that.selectionMode === 'oneOrMany' || that.selectionMode === 'zeroOrOne') {
                if (that._focusedItem) {
                    selectedItem = that._focusedItem;
                }
            }

            var viewTop = selectedItem.top - that.$.itemsContainer.offsetHeight;
            var selectedItemIndex = that._indexOf(selectedItem);
            var item = void 0;

            for (var i = selectedItemIndex; i > 0; i--) {
                if (items[i].top <= viewTop) {
                    item = items[i];
                    break;
                }
            }

            if (!item) {
                item = items[0];
            }

            if (that.selectionMode === 'checkBox' || that.selectionMode === 'radioButton' || that.selectionMode === 'zeroOrMany' || that.selectionMode === 'oneOrMany' || that.selectionMode === 'zeroOrOne') {
                that._focus(item);
            } else {
                if (!item.selected) {
                    if (!that._keysPressed['Shift']) {
                        that.clearSelection();
                    }
                    that.select(item);
                    that._focus(item);
                }
            }

            that.scrollTop = item.top;

            var itemIndex = that._indexOf(item);

            if (itemIndex === 0) {
                that.scrollTop = 0;
            }
        }

        /**
        * Removes all items from DOM. 
        */

    }, {
        key: 'clearItems',
        value: function clearItems() {
            var that = this;

            that.$.itemsInnerContainer.innerHTML = '';
            that.clearSelection();
            that._items = [];
            that.$placeholder.removeClass('jqx-hidden');
        }

        /**
        * List Box resize handler.
        */

    }, {
        key: '_resizeHandler',
        value: function _resizeHandler(event) {
            var that = this;

            if (event.target === that && !that._isUpdatingScrollBars) {
                that._isUpdatingScrollBars = true;
                that._initializeRecyclingItems();
                that._refreshLayout();
                that._isUpdatingScrollBars = false;
            }
        }
    }, {
        key: '_indexOf',
        value: function _indexOf(item) {
            var that = this;

            if (!item) {
                return -1;
            }

            var index = that._items.indexOf(item);

            if (index === -1) {
                index = that._items.indexOf(that.getItem(item.value));
            }

            return index;
        }

        /**
        * Search items.
        */

    }, {
        key: '_incrementalSearch',
        value: function _incrementalSearch() {
            var that = this;
            var canSelect = that.selectionMode !== 'radioButton' && that.selectionMode !== 'checkBox' && that.selectionMode !== 'zeroOrMany' && that.selectionMode !== 'oneOrMany' && that.selectionMode !== 'zeroOrOne';

            var searchQuery = void 0;
            var i = 0;

            switch (that.incrementalSearchMode) {
                case 'containsIgnoreCase':
                case 'equalsIgnoreCase':
                case 'startsWithIgnoreCase':
                case 'endsWithIgnoreCase':
                    searchQuery = that._incrementalSearchQuery.toLowerCase();
                    break;
                default:
                    searchQuery = that._incrementalSearchQuery;
                    break;
            }

            var select = function select(item) {
                if (item.grouped || item.readonly) {
                    return;
                }

                if (canSelect) {
                    if (that.selectedIndexes.length > 0) {
                        that.clearSelection();
                    }
                    that._focus(item);
                    that.select(item);
                } else {
                    that._focus(item);
                }

                //Move the scrollBar when item is out of view
                if (item.height + item.top > that.$.itemsContainer.scrollTop + that.$.itemsContainer.offsetHeight || item.top < that.scrollTop) {
                    that.scrollTop = item.top;
                }
                if (that._indexOf(item) === 0) {
                    that.scrollTop = 0;
                }
                if (that._indexOf(item) === that._items.length - 1) {
                    that.scrollTop = that.scrollHeight;
                }
            };

            if (that._previousEntry.localeCompare(searchQuery) !== 0) {
                that._incrementalSearchItems = that._queryItems(that._incrementalSearchQuery, that.incrementalSearchMode);
                delete that._itemPosition;
            }

            //Previously entered string.
            that._previousEntry = searchQuery;

            var foundItemsCount = that._incrementalSearchItems.length;

            if (foundItemsCount === 0) {
                return;
            }

            if (foundItemsCount === 1) {
                select(that._incrementalSearchItems[0]);
                return;
            }

            if (that._itemPosition !== undefined) {
                if (that._itemPosition < foundItemsCount - 1) {
                    i = that._itemPosition;
                } else {
                    i = 0;
                    if (canSelect) {
                        that._incrementalSearchItems[that._itemPosition].selected = false;
                        that.selectedIndexes = [];
                        that.selectedValues = [];
                    } else {
                        that._incrementalSearchItems[that._itemPosition]._focused = false;
                    }
                }
            } else if (canSelect) {
                that.clearSelection();
            }

            for (i; i < foundItemsCount; i++) {
                if (that._incrementalSearchItems[i].selected && canSelect) {
                    that._incrementalSearchItems[i].selected = false;
                    that.selectedIndexes = [];
                    that.selectedValues = [];
                    continue;
                }
                if (!canSelect && that._incrementalSearchItems[i]._focused) {
                    that._incrementalSearchItems[i]._focused = false;
                    continue;
                }
                select(that._incrementalSearchItems[i]);
                that._itemPosition = i;
                return;
            }
        }

        /**
        * Document select start handler.
        */

    }, {
        key: '_selectStartHandler',
        value: function _selectStartHandler(event) {
            var that = this,
                activeElement = that.enableShadowDOM ? that.shadowRoot.activeElement : document.activeElement;

            if (that.$.filterInput === activeElement) {
                return;
            }

            if (that.$.editInput === activeElement) {
                return;
            }

            event.preventDefault();
        }

        /**
        * Sets an item active via Keyboard.
        */
        /**
        * Sets an item active via Keyboard.
        */

    }, {
        key: '_handleArrowKeys',
        value: function _handleArrowKeys(isArrowUp) {
            var that = this;
            var canSelect = that.selectionMode !== 'radioButton' && that.selectionMode !== 'checkBox' && that.selectionMode !== 'zeroOrMany' && that.selectionMode !== 'oneOrMany' && that.selectionMode !== 'zeroOrOne';

            if (that.disabled || that.readonly) {
                return;
            }

            var focusedItemIndex = void 0;

            if (that._focusedItem && !that._keysPressed['Shift']) {
                focusedItemIndex = that._indexOf(that._focusedItem);
                that._focusedItem._focused = false;
            } else if (that.selectedIndexes.length !== 0) {
                focusedItemIndex = that.selectedIndexes[that.selectedIndexes.length - 1];
            } else {
                return;
            }

            var focusedItem = isArrowUp ? that._getPreviousItem(focusedItemIndex) : that._getNextItem(focusedItemIndex);

            that._focus(focusedItem);

            if (canSelect) {
                if (that._keysPressed['Shift']) {
                    that.select(focusedItem);
                } else if (that._items[focusedItemIndex] !== focusedItem) {
                    that.clearSelection();
                    that.select(focusedItem);
                }
            }

            that.ensureVisible(focusedItem);
        }
        /**
        * Enable/Disable the filter input component.
        */

    }, {
        key: '_refreshFilter',
        value: function _refreshFilter() {
            var that = this;

            if (that.filterable) {
                that.$.filterInput.disabled = that.disabled || that.displayLoadingIndicator ? true : false;
                that.$filterInputContainer.removeClass('jqx-hidden');
                that.$itemsContainer.addClass('filter');
                return;
            }

            that.$.filterInput.disabled = true;
            that.$filterInputContainer.addClass('jqx-hidden');
            that.$itemsContainer.removeClass('filter');
        }

        /**
        * Set tabIndex.
        */

    }, {
        key: '_setFocusable',
        value: function _setFocusable() {
            var that = this;

            if (that.disabled || that.unfocusable) {
                that.removeAttribute('tabindex');
                return;
            }

            that.tabIndex = that.tabIndex > 0 ? that.tabIndex : 0;
        }

        /**
        * Set Loading Indicator Visibility
        */

    }, {
        key: '_setLoadingIndicatorVisibility',
        value: function _setLoadingIndicatorVisibility() {
            var that = this;

            if (that.displayLoadingIndicator) {
                that.$loadingIndicatorContainer.hasClass('jqx-visibility-hidden') ? that.$loadingIndicatorContainer.removeClass('jqx-visibility-hidden') : that.$loadingIndicatorContainer.removeClass('jqx-hidden');
                return;
            }

            //Check for old browsers.
            that._areCSSVarsSupported ? that.$loadingIndicatorContainer.addClass('jqx-hidden') : that.$loadingIndicatorContainer.addClass('jqx-visibility-hidden');
        }

        /**
        * Sets the initial scroll bar sizes.
        */

    }, {
        key: '_refreshLayout',
        value: function _refreshLayout() {
            var that = this;
            var source = that._items;

            that.__scrollHeight = null;
            that.__scrollWidth = null;
            that._height = null;

            if (!that._scrollView) {
                that._scrollView = new JQX.Utilities.Scroll(that, that.$.horizontalScrollBar, that.$.verticalScrollBar);
            }

            that.$itemsContainer.removeClass('hscroll');
            that.$itemsContainer.removeClass('vscroll');

            if (!source || source === null || source.length === 0) {
                that.scrollWidth = 0;
                that.scrollHeight = 0;
                that.$filterInputContainer.removeClass('vscroll');
                that.$placeholder.removeClass('jqx-hidden');

                if (that.isVirtualized) {
                    that._recycle();
                }

                return;
            }

            that.$placeholder.addClass('jqx-hidden');

            var horizontalOffset = 2 * (parseInt(getComputedStyle(that.$.itemsInnerContainer).getPropertyValue('--jqx-list-item-horizontal-offset')) || 0);

            var hScrollWidth = that._scrollWidth - that.$.itemsContainer.offsetWidth - horizontalOffset;
            var vScrollHeight = that._scrollHeight;

            that._refreshHorizontalScrollBarVisibility(hScrollWidth);
            that._refreshVerticalScrollBarVisibility(vScrollHeight);

            if (that.horizontalScrollBarVisibility === 'hidden') {
                that.$.itemsInnerContainer.style.width = that.$.itemsContainer.offsetWidth - horizontalOffset;
            } else {
                that.$.itemsInnerContainer.style.width = Math.max(that.$.itemsContainer.offsetWidth - horizontalOffset, -horizontalOffset + that.__scrollWidth) + 'px';
            }

            if (that.computedVerticalScrollBarVisibility) {
                hScrollWidth = that._scrollWidth - that.$.itemsContainer.offsetWidth - that._scrollView.vScrollBar.offsetWidth;
                that._refreshHorizontalScrollBarVisibility(hScrollWidth);

                if (that.horizontalScrollBarVisibility !== 'hidden') {
                    that.$.itemsInnerContainer.style.width = Math.max(that.$.itemsContainer.offsetWidth - horizontalOffset, -horizontalOffset + that.__scrollWidth - that._scrollView.vScrollBar.offsetWidth) + 'px';
                }

                if (that.computedHorizontalScrollBarVisibility) {
                    if (!(that.horizontalScrollBarVisibility === 'visible' && that.scrollWidth === 0)) {
                        that.__scrollHeight += that._scrollView.hScrollBar.offsetHeight;
                    } else if (that.horizontalScrollBarVisibility === 'visible') {
                        that.__scrollHeight += that._scrollView.hScrollBar.offsetHeight;
                    }

                    that.scrollHeight = that.__scrollHeight;
                }

                if (that.isVirtualized) {
                    that._recycle();
                }

                return;
            }

            hScrollWidth = that._scrollWidth - that.$.itemsContainer.offsetWidth - horizontalOffset;
            that._refreshHorizontalScrollBarVisibility(hScrollWidth);

            if (that.computedHorizontalScrollBarVisibility) {
                that.scrollHeight = that._scrollHeight;
                that._refreshVerticalScrollBarVisibility(that.scrollHeight);

                //Resize event not thrown after 'bottom-corner' is applied
                if (that._scrollView.vScrollBar.$.hasClass('bottom-corner')) {
                    that._scrollView.vScrollBar.refresh();
                }
            }

            if (that.isVirtualized) {
                that._recycle();
            }

            var isIE = /Trident|Edge/.test(navigator.userAgent);
            if (!that.isRefreshing && isIE) {
                setTimeout(function () {
                    that.isRefreshing = true;
                    that._refreshLayout();
                    that.isRefreshing = false;
                }, 50);
            }
        }

        /**
        * Style change event.
        */

    }, {
        key: '_styleChangedHandler',
        value: function _styleChangedHandler() {
            var that = this;

            that._refreshLayout();
        }

        /**
        * SwipeLeft event handler.
        **/

    }, {
        key: '_swipeLeftHandler',
        value: function _swipeLeftHandler() {}

        /**
        * SwipeRight event handler.
        */

    }, {
        key: '_swipeRightHandler',
        value: function _swipeRightHandler() {}

        /**
        * Enable/Disable Horizontal Scroll bar.
        */

    }, {
        key: '_refreshHorizontalScrollBarVisibility',
        value: function _refreshHorizontalScrollBarVisibility(scrollWidth) {
            var that = this;

            that.scrollWidth = scrollWidth;

            if (that.computedHorizontalScrollBarVisibility) {
                that.scrollLeft = that.$.itemsContainer.scrollLeft;
                that.$itemsContainer.addClass('hscroll');
            } else {
                that.$itemsContainer.removeClass('hscroll');
            }
        }

        /**
        * Enable/Disable Vertical Scroll bar.
        */

    }, {
        key: '_refreshVerticalScrollBarVisibility',
        value: function _refreshVerticalScrollBarVisibility(scrollHeight) {
            var that = this;

            that.scrollHeight = scrollHeight;

            if (that.computedVerticalScrollBarVisibility) {
                that.$itemsContainer.addClass('vscroll');
                that.$filterInputContainer.addClass('vscroll');
            } else {
                that.$itemsContainer.removeClass('vscroll');
                that.$filterInputContainer.removeClass('vscroll');
            }
        }

        /**
        * Validates Template properties.
        */

    }, {
        key: '_validateTemplate',
        value: function _validateTemplate(property, template) {
            if (template === null || !template) {
                return;
            }

            var that = this;

            if (!('content' in document.createElement('template'))) {
                that.error(that.localize('htmlTemplateNotSuported', { elementType: that.nodeName.toLowerCase() }));
                that[property] = null;
                return;
            }

            template = document.getElementById(template);
            if (template === null || !('content' in template)) {
                that.error(that.localize('invalidTemplate', { elementType: that.nodeName.toLowerCase(), property: property }));
                that[property] = null;
                return;
            }

            return template;
        }
    }, {
        key: '_getItemIndexByPosition',
        value: function _getItemIndexByPosition(position) {
            var that = this;

            var getItemIndex = function getItemIndex(items) {
                var bottomPointer = 0;
                var topPointer = items.length - 1;

                if (position <= 0) {
                    return 0;
                }

                var lastNode = items[items.length - 1];

                if (lastNode.top <= position) {
                    return items.length - 1;
                }

                var condition = true;

                while (condition) {
                    var midPointer = Math.floor((bottomPointer + topPointer) / 2);
                    var currentitem = items[midPointer];
                    if (that._isItemInPosition(currentitem, position)) {
                        return midPointer;
                    } else if (currentitem.top < position) {
                        bottomPointer = midPointer + 1;
                    } else if (currentitem.top > position) {
                        topPointer = midPointer - 1;
                    }
                }
            };

            var items = that.filterable && that.$.filterInput.value.length > 0 ? that._filteredItems : that._items;
            var index = getItemIndex(items);

            return index;
        }
    }, {
        key: '_isItemInPosition',
        value: function _isItemInPosition(item, position) {
            var topPixel = item.top;
            var bottomPixel = item.top + item.height;
            var pixelInRow = topPixel <= position && bottomPixel > position;

            return pixelInRow;
        }
    }, {
        key: '_recycle',
        value: function _recycle() {
            var that = this;

            if (!that._recyclingItems) {
                return;
            }

            var height = that._height;
            if (!that._height) {
                height = that._height = that.$.itemsContainer.offsetHeight;
            }

            var j = 0;

            var value = that.scrollTop;
            var itemIndex = that._getItemIndexByPosition(value);
            var items = that.filterable && that.$.filterInput.value.length > 0 ? that._filteredItems : that._items;
            var item = items[itemIndex];

            var itemTop = item ? item.top : 0;

            that.$.itemsInnerContainer.style.left = -that.scrollLeft + 'px';
            that.$.itemsInnerContainer.style.top = -value + itemTop + 'px';

            that.isUpdating++;

            if (itemIndex >= 0) {
                for (var i = itemIndex; i < items.length; i++) {
                    var _item13 = items[i];

                    if (_item13.height === 0) {

                        continue;
                    }

                    if (itemTop + _item13.height >= value && itemTop <= value + height) {
                        var listItem = that._recyclingItems[j++];

                        if (!listItem) {
                            break;
                        }

                        listItem.context = document;
                        listItem.dataItem = _item13;
                        listItem.label = _item13.label;
                        listItem.value = _item13.value;
                        listItem.selected = _item13.selected;
                        listItem._focused = _item13._focused;
                        listItem.hidden = _item13.hidden;
                        listItem.grouped = _item13.grouped;
                        listItem.readonly = _item13.readonly;
                        listItem.style.height = _item13.height + 'px';
                        that._alternateItem(listItem);

                        if (_item13.title) {
                            listItem.title = _item13.title;
                        } else {
                            listItem.title = '';
                        }

                        if (!_item13.grouped) {
                            listItem.displayMode = _item13.displayMode;
                        } else {
                            listItem.displayMode = 'plain';
                        }

                        if (that.scrollWidth > 0) {
                            listItem.style.width = that.$.itemsInnerContainer.offsetWidth + that.scrollWidth + 'px';
                        }

                        if (that.itemTemplate && that._handleItemTemplate(that.itemTemplate)) {
                            that._applyTemplate(listItem, false);
                        }
                    } else {
                        break;
                    }
                    itemTop += _item13.height;
                }
            }

            if (j < that._recyclingItems.length) {
                for (var _i21 = j; _i21 < that._recyclingItems.length; _i21++) {
                    var _listItem = that._recyclingItems[j++];
                    var context = _listItem.context;

                    _listItem.context = document;
                    _listItem.hidden = true;
                    _listItem.context = context;
                }
            }

            that.isUpdating--;
        }

        /**
        * Vertical Scroll Bar handler
        */

    }, {
        key: '_verticalScrollbarHandler',
        value: function _verticalScrollbarHandler(event) {
            var that = this;
            var value = event.detail.value;
            event.stopPropagation();

            if (that.isVirtualized) {
                that._recycle();
            } else {
                that.$.itemsContainer.scrollTop = value;
            }

            that._updateTopVisibleIndex();

            if (event.context.max === event.context.value) {
                that.$.fireEvent('scrollBottomReached');
                return;
            }

            if (event.context.min === event.context.value) {
                that.$.fireEvent('scrollTopReached');
            }
        }
    }, {
        key: 'enableShadowDOM',


        /**
        * ScrollViewer have it's shadowRoot set to false. So it needs to be predefined
        */
        get: function get() {
            return JQX.EnableShadowDOM;
        }

        /** 
        * ListBox's requires 
        */

    }, {
        key: 'items',
        get: function get() {
            var that = this;

            if (that._filteredItems) {
                return that._filteredItems;
            }

            return that._items;
        }
    }, {
        key: '_scrollHeight',
        get: function get() {
            var that = this;

            var scrollHeight = 0;

            if (that.isVirtualized) {
                if (that.__scrollHeight) {
                    return that.__scrollHeight;
                }

                if (that._items.length === 0) {
                    return 0;
                }

                that.isUpdating++;

                var measureItem = that._createItem(that.dataSource[0]);
                that.$.itemsInnerContainer.appendChild(measureItem);

                for (var i = 0; i < that._items.length; i++) {
                    var item = that._items[i];

                    if (item.hidden) {
                        item.height = 0;
                        item.top = scrollHeight;
                        continue;
                    }

                    if (!that.itemHeight) {
                        measureItem.label = item.label;
                        item.height = measureItem.offsetHeight;
                    } else {
                        if (that.itemHeight < 32) {
                            that.itemHeight = 32;
                        }

                        item.height = that.itemHeight;
                    }

                    item.top = scrollHeight;
                    scrollHeight += item.height;
                }

                that.$.itemsInnerContainer.removeChild(measureItem);
                that.__scrollHeight = scrollHeight - that.$.itemsInnerContainer.offsetHeight;
                if (that.filterable) {
                    that.__scrollHeight += that.$.filterInput.offsetHeight;
                }

                scrollHeight = that.__scrollHeight;
                that.isUpdating--;
            } else {
                for (var _i22 = 0; _i22 < that._items.length; _i22++) {
                    var _item14 = that._items[_i22];

                    if (_item14.hidden) {
                        _item14.height = 0;
                        _item14.top = scrollHeight;
                        continue;
                    }

                    if (!that.itemHeight) {
                        _item14.height = _item14.offsetHeight;
                    } else if (that.itemHeight !== 'auto') {
                        _item14.height = that.itemHeight;
                        _item14.style.height = _item14.height + 'px';
                    }

                    _item14.top = _item14.offsetTop;
                    scrollHeight += _item14.height;
                }

                scrollHeight = that.$.itemsInnerContainer.scrollHeight - that.$.itemsInnerContainer.offsetHeight;

                if (that.filterable && scrollHeight > 0) {
                    scrollHeight += that.$.filterInput.offsetHeight;
                }

                that.__scrollHeight = scrollHeight;
            }

            return scrollHeight;

            //Note: Incorrectly decreases the scrollHeight
            //let bottomOffset = 0;

            //if (scrollHeight) {
            //    bottomOffset = 2 * (parseInt(getComputedStyle(that.$.itemsInnerContainer).getPropertyValue('--jqx-list-item-vertical-offset')) || 0);
            //}

            //return scrollHeight - bottomOffset;
        }
    }, {
        key: '_scrollWidth',
        get: function get() {
            var _this4 = this;

            var that = this,
                items = that._items;

            if (that.__scrollWidth) {
                return that.__scrollWidth;
            }

            that.__scrollWidth = function () {
                var that = _this4;
                var longestItemWidth = void 0;

                var longestLabel = '';
                for (var i = 0; i < items.length; i++) {
                    if (items[i].hidden) {
                        continue;
                    }

                    var label = items[i].label;
                    if (label.length > longestLabel.length) {
                        longestLabel = label;
                    }
                }

                var measureItem = that._createItem({ label: longestLabel });

                that.$.itemsContainer.appendChild(measureItem);
                measureItem.label = longestLabel;

                //This setting is enough to make the item width to 'auto' and measure it's size
                measureItem.style.width = 'auto';

                //if not checked, fails in Karma because element is not Completed
                if (measureItem.isCompleted) {
                    measureItem.$.itemContainer.style.width = 'auto';
                }

                var measureItemStyle = getComputedStyle(measureItem);
                var padding = parseInt(measureItemStyle.paddingLeft) + parseInt(measureItemStyle.paddingRight);

                longestItemWidth = (measureItem.$.itemContainer || measureItem).offsetWidth + padding;

                measureItem.parentNode.removeChild(measureItem);

                return longestItemWidth;
            }();

            return that.__scrollWidth;
        }
    }, {
        key: 'isVirtualized',
        get: function get() {
            var that = this;

            return that.virtualized && that.dataSource && that.dataSource.length > 0;
        }
    }], [{
        key: 'properties',


        /** 
        * ListBox's properties 
        */
        get: function get() {
            return {
                'allowDrag': {
                    value: false,
                    type: 'boolean'
                },
                'allowDrop': {
                    value: false,
                    type: 'boolean'
                },
                'alternationStart': {
                    value: 0,
                    type: 'int'
                },
                'alternationEnd': {
                    value: 0,
                    type: 'int'
                },
                'alternationCount': {
                    value: 0,
                    type: 'int'
                },
                'autoSort': {
                    value: true,
                    type: 'boolean'
                },
                'dataSource': {
                    value: null,
                    type: 'any?',
                    reflectToAttribute: false
                },
                'dragFeedbackFormatFunction': {
                    value: null,
                    type: 'function?'
                },
                'dragOffset': {
                    value: [10, 10],
                    type: 'array'
                },
                'displayLoadingIndicator': {
                    value: false,
                    type: 'boolean'
                },
                'displayMember': {
                    value: '',
                    type: 'string'
                },
                'shadowDomMode': {
                    allowedValues: ['light', 'shadow'],
                    value: 'shadow',
                    type: 'string'
                },
                'dropAction': {
                    value: 'move',
                    type: 'string',
                    allowedValues: ['copy', 'move', 'none']
                },
                'editable': {
                    value: false,
                    type: 'boolean'
                },
                'filterable': {
                    value: false,
                    type: 'boolean'
                },
                'filterCallback': {
                    value: null,
                    type: 'function?'
                },
                'filterMode': {
                    value: 'containsIgnoreCase',
                    allowedValues: ['contains', 'containsIgnoreCase', 'doesNotContain', 'doesNotContainIgnoreCase', 'equals', 'equalsIgnoreCase', 'startsWith', 'startsWithIgnoreCase', 'endsWith', 'endsWithIgnoreCase', 'custom'],
                    type: 'string'
                },
                'filterInputPlaceholder': {
                    value: '',
                    type: 'string'
                },
                'grouped': {
                    value: false,
                    type: 'boolean'
                },
                'groupMember': {
                    value: '',
                    type: 'string'
                },
                'itemTemplate': {
                    value: null,
                    type: 'any'
                },
                'itemHeight': {
                    value: null,
                    type: 'number?'
                },
                'incrementalSearchDelay': {
                    value: 700,
                    type: 'number?'
                },
                'incrementalSearchMode': {
                    value: 'startsWithIgnoreCase',
                    allowedValues: ['contains', 'containsIgnoreCase', 'doesNotContain', 'doesNotContainIgnoreCase', 'equals', 'equalsIgnoreCase', 'startsWith', 'startsWithIgnoreCase', 'endsWith', 'endsWithIgnoreCase'],
                    type: 'string'
                },
                'loadingIndicatorPlaceholder': {
                    value: 'Loading...',
                    type: 'string'
                },
                'loadingIndicatorPosition': {
                    value: 'center',
                    allowedValues: ['bottom', 'center', 'top'],
                    type: 'string'
                },
                'messages': {
                    extend: true,
                    value: {
                        'en': {
                            'overridingProperties': '{{elementType}}: Overriding properties {{property1}} and {{property2}} applied. The "{{property1}}" property is used by default.',
                            'invalidIndex': '{{elementType}}: "{{method}}" method accepts an index of type number or an Array of numbers.',
                            'indexOutOfBound': '{{elementType}}: Out of bound index/indexes in "{{method}}" method.',
                            'invalidItem': '{{elementType}}: "{{method}}" method accepts an object or an array of objects as it\'s second parameter.',
                            'invalidSettings': '{{elementType}}: "{{method}}" method accepts a string or an object as it\'s second parameter.'
                        }
                    },
                    type: 'object'
                },
                'name': {
                    value: '',
                    type: 'string'
                },
                'placeholder': {
                    value: 'No Items',
                    type: 'string'
                },
                'selectedIndexes': {
                    value: [],
                    type: 'array'
                },
                'selectedValues': {
                    value: [],
                    type: 'array'
                },
                'selectionMode': {
                    value: 'oneOrManyExtended',
                    allowedValues: ['none', 'oneOrManyExtended', 'zeroOrMany', 'oneOrMany', 'zeroOrOne', 'one', 'checkBox', 'radioButton'],
                    type: 'string'
                },
                'selectionChangeAction': {
                    value: 'release',
                    allowedValues: ['press', 'release'],
                    type: 'string'
                },
                'sorted': {
                    value: false,
                    type: 'boolean'
                },
                'sortDirection': {
                    value: 'asc',
                    type: 'string'
                },
                'topVisibleIndex': {
                    value: -1,
                    type: 'int'
                },
                'type': {
                    value: 'list',
                    type: 'string',
                    defaultReflectToAttribute: true,
                    readonly: true
                },
                'valueMember': {
                    value: '',
                    type: 'string'
                },
                'virtualized': {
                    value: false,
                    type: 'boolean'
                }
            };
        }
    }, {
        key: 'requires',
        get: function get() {
            return {
                'JQX.ScrollBar': 'jqxscrollbar.js'
            };
        }
    }, {
        key: 'styleUrls',
        get: function get() {
            return ['jqx.listbox.css'];
        }

        /**
         * ListBox's event listeners.
         */

    }, {
        key: 'listeners',
        get: function get() {
            return {
                'focus': '_focusHandler',
                'blur': '_blurHandler',
                'container.wheel': '_mouseWheelHandler',
                'editInput.change': '_editInputEventHandler',
                'editInput.blur': '_editInputEventHandler',
                'editInput.keydown': '_editInputEventHandler',
                'horizontalScrollBar.change': '_horizontalScrollbarHandler',
                'itemsInnerContainer.down': '_downHandler',
                'itemsInnerContainer.dblclick': '_dblclickEventHandler',
                'itemsInnerContainer.move': '_itemsContainerMoveHandler',
                'itemsContainer.mouseleave': '_mouseLeaveHandler',
                'document.up': '_upHandler',
                'document.move': '_moveHandler',
                'keydown': '_keyDownHandler',
                'keyup': '_keyUpHandler',
                'resize': '_resizeHandler',
                'selectstart': '_selectStartHandler',
                'styleChanged': '_styleChangedHandler',
                'swipeleft': '_swipeLeftHandler',
                'swiperight': '_swipeRightHandler',
                'verticalScrollBar.change': '_verticalScrollbarHandler'
            };
        }
    }]);
    return ListBox;
}(JQX.ScrollViewer));