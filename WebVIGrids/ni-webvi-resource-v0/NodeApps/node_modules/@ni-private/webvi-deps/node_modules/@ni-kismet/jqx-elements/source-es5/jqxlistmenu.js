'use strict';

/**
 * List Menu custom element.
 */
JQX('jqx-list-menu', function (_JQX$Menu) {
    babelHelpers.inherits(ListMenu, _JQX$Menu);

    function ListMenu() {
        babelHelpers.classCallCheck(this, ListMenu);
        return babelHelpers.possibleConstructorReturn(this, (ListMenu.__proto__ || Object.getPrototypeOf(ListMenu)).apply(this, arguments));
    }

    babelHelpers.createClass(ListMenu, [{
        key: 'template',


        /**
         * List Menu's HTML template.
         */
        value: function template() {
            return '<div id="container">\n                    <div id="hamburgerIcon" class="jqx-hamburger-icon jqx-hidden">\n                        <div id="hamburgerIconLineTop" class="jqx-hamburger-icon-line jqx-hamburger-icon-line-top"></div>\n                        <div id="hamburgerIconLineCenter" class="jqx-hamburger-icon-line jqx-hamburger-icon-line-center"></div>\n                        <div id="hamburgerIconLineBottom" class="jqx-hamburger-icon-line jqx-hamburger-icon-line-bottom"></div>\n                        <div id="customIconContainer" class="jqx-hamburger-icon-custom-container jqx-hidden"></div>\n                    </div>\n                    <div id="view" class="jqx-list-menu-view">\n                        <div id="header" class="jqx-header jqx-hidden">\n                            <jqx-button id="backButton" animation="[[animation]]" disabled="[[disabled]]" unfocusable>\n                                <div class="jqx-arrow jqx-arrow-left"></div>\n                            </jqx-button>\n                            <div id="title" class="jqx-title"></div>\n                        </div>\n                        <div class="jqx-list-menu-filter-input-container jqx-hidden" id="filterInputContainer">\n                            <input id="filterInput" class="jqx-filter-input" disabled="[[disabled]]" placeholder="[[filterInputPlaceholder]]" type="text" />\n                        </div>\n                        <jqx-repeat-button id="scrollButtonNear" class="jqx-menu-scroll-button jqx-spin-button jqx-scroll-button-near jqx-hidden" animation="[[animation]]" unfocusable>\n                            <div id="arrowNear" class="jqx-arrow jqx-arrow-up"></div>\n                        </jqx-repeat-button>\n                        <div id="mainContainer" class="jqx-menu-main-container">\n                            <content></content>\n                        </div>\n                        <jqx-repeat-button id="scrollButtonFar" class="jqx-menu-scroll-button jqx-spin-button jqx-scroll-button-far jqx-hidden" animation="[[animation]]" unfocusable>\n                            <div id="arrowFar" class="jqx-arrow jqx-arrow-down"></div>\n                        </jqx-repeat-button>\n                        <div id="loadingIndicatorContainer" class="jqx-loader-container jqx-hidden">\n                            <span id="loadingIndicator" class="jqx-loader"></span>\n                            <span id="loadingIndicatorPlaceHolder" class="jqx-loader-label jqx-hidden">[[loadingIndicatorPlaceholder]]</span>\n                        </div>\n                    </div>\n                </div>';
        }

        /**
         * Called when the element is attached to the DOM.
         */

    }, {
        key: 'attached',
        value: function attached() {
            var that = this;

            babelHelpers.get(ListMenu.prototype.__proto__ || Object.getPrototypeOf(ListMenu.prototype), 'attached', this).call(this);

            if (that.isCompleted && that.dropDownAppendTo !== null && that._minimized) {
                that._dropDownParent.appendChild(that.$.view);
            }
        }

        /**
         * Called when the element is detached from the DOM.
         */

    }, {
        key: 'detached',
        value: function detached() {
            var that = this;

            babelHelpers.get(ListMenu.prototype.__proto__ || Object.getPrototypeOf(ListMenu.prototype), 'detached', this).call(this);

            that._close();

            if (that.dropDownAppendTo !== null && that._minimized) {
                that._dropDownParent.removeChild(that.$.view);
            }
        }

        /**
         * Adds an item.
         *
         * @param {HTMLElement} item A jqx-menu-item to add to the List Menu.
         * @param {HTMLElement/String} parent Optional The jqx-menu-items-group (or its id or numeric path) to add the item to.
         */

    }, {
        key: 'addItem',
        value: function addItem(item, parent) {
            var that = this;

            if (!(item instanceof JQX.MenuItem || item instanceof JQX.MenuItemsGroup)) {
                return;
            }

            var parentView = void 0,
                level = void 0,
                container = void 0,
                appliedFilter = void 0;

            if (parent === undefined) {
                parent = that.$.mainContainer;
                parentView = undefined;
                level = 1;
                container = parent;
                appliedFilter = that._topLevelFilter;
            } else {
                if (typeof parent === 'string') {
                    parent = that.getItem(parent);
                }

                if (parent === undefined || !(parent instanceof JQX.MenuItemsGroup && (that.contains(parent) || parent.closest('.jqx-list-menu-view') === that.$.view))) {
                    return;
                }

                parentView = parent;
                level = parent.level + 1;
                container = parent.itemContainer;
                appliedFilter = parent.filter;
            }

            that._createItemHTMLStructure(item, level, parent, that._getCurrentViewItems(parentView).length, 0);

            if (item instanceof JQX.MenuItemsGroup) {
                that._processHTML(item, level + 1);
            }

            if (that._view !== parent && !parent.$.hasClass('jqx-hidden') && parent.offsetHeight > 0 && parent.offsetWidth > 0 && (!that._view && !that.$.mainContainer.contains(parent) || that._view && !that._view.contains(parent))) {
                item.$.addClass('jqx-hidden');
            }

            if (that.grouped) {
                var children = Array.from(container.children);

                for (var i = children.length - 1; i >= 0; i--) {
                    if (children[i].$.hasClass('jqx-list-menu-group-label')) {
                        container.removeChild(children[i]);
                    }
                }

                that._unsortItems(parent, true);
            }

            container.appendChild(item);

            if (that.grouped) {
                var view = that._view;

                that._applyGrouping(parent, true);
                that._home();

                if (view) {
                    that.changePage(view.path);
                }
            }

            if (that.filterable && appliedFilter !== undefined && appliedFilter !== '' && that._findItem(item, appliedFilter) === null) {
                item.$.addClass('jqx-hidden');
                item.hidden = true;
            }

            that._toggleFilterInputGroupLabelVisibility();
            that._checkOverflow();
        }

        /**
         * Navigates to the previous page (jqx-menu-items-group).
         *
         * @param {Boolean} animation Optional If set to false, disables collapse animation even if animation is enabled for the element.
         */

    }, {
        key: 'back',
        value: function back(animation) {
            var that = this,
                animationType = that.animation,
                restoreAnimation = animation === false && animationType !== 'none';

            if (restoreAnimation) {
                that.animation = 'none';
            }

            that._backButtonClickHandler();

            if (restoreAnimation) {
                that.animation = animationType;
            }
        }

        /**
         * Navigates to a particular page (jqx-menu-items-group).
         *
         * @param {String} id The id or numeric path of a page (jqx-menu-items-group).
         */

    }, {
        key: 'changePage',
        value: function changePage(id) {
            var that = this,
                item = that.getItem(id);

            if (item === undefined || item instanceof JQX.MenuItem || item.hidden) {
                return;
            }

            var stack = [item];
            var stackItem = item.parentItem,
                start = 0;

            that._discardKeyboardHover();

            while (stackItem) {
                stack.unshift(stackItem);
                stackItem = stackItem.parentItem;
            }

            if (that._view) {
                var index = stack.indexOf(that._view);

                if (index === -1) {
                    that._home();
                } else {
                    start = index + 1;
                }
            }

            for (var i = start; i < stack.length; i++) {
                if (stack[i].disabled || stack[i].hidden) {
                    break;
                }

                that._menuItemsGroupSelectionHandler(stack[i], { type: 'expand' }, true);
            }
        }

        /**
         * Maximizes the List Menu.
         */

    }, {
        key: 'maximize',
        value: function maximize() {
            var that = this;

            if (!that._minimized) {
                return;
            }

            that._positionDetection.removeOverlay();
            that._minimized = false;

            if (that._minimizedDropDownOpened) {
                that.$hamburgerIcon.removeClass('jqx-close-button');
                that._minimizedDropDownOpened = false;
            }

            if (that.dropDownAppendTo !== null) {
                that._appendMinimizedContainerToMenu(that.$.view, null);
            }

            that.$view.removeClass('jqx-visibility-hidden');
            that.$view.removeClass('jqx-list-menu-view-minimized');
            that.$hamburgerIcon.addClass('jqx-hidden');

            that.removeAttribute('minimized');

            if (that.enableShadowDOM) {
                that.$.view.id = that.$.view.getAttribute('jqx-id');

                var templateElements = that.$.view.querySelectorAll('[jqx-id]');

                for (var i = 0; i < templateElements.length; i++) {
                    templateElements[i].id = templateElements[i].getAttribute('jqx-id');
                }
            }

            that.$.mainContainer.scrollTop = 0;
            that._checkOverflow();
        }

        /**
         * Minimizes the List Menu.
         */

    }, {
        key: 'minimize',
        value: function minimize() {
            var that = this;

            if (that._minimized) {
                return;
            }

            that.$view.addClass('jqx-visibility-hidden');

            if (that.enableShadowDOM) {
                that.$.view.removeAttribute('id');

                var templateElements = that.$.view.querySelectorAll('[jqx-id]');

                for (var i = 0; i < templateElements.length; i++) {
                    templateElements[i].removeAttribute('id');
                }
            }

            if (that._edgeMacFF) {
                that.$view.addClass('not-in-view');
            }

            that.$hamburgerIcon.removeClass('jqx-hidden');

            setTimeout(function () {
                if (that.dropDownAppendTo !== null) {
                    that._appendMinimizedContainerToExternalElement(that.$.view);
                }

                that.$view.addClass('jqx-list-menu-view-minimized');

                that.$.mainContainer.scrollTop = 0;
                that._checkOverflow();
            }, 0);

            that._minimized = true;
            that.setAttribute('minimized', '');
        }

        /**
         * Removes an item.
         *
         * @param {HTMLElement/String} item The jqx-menu-item/jqx-menu-items-group (or its id or numeric path) to remove.
         */

    }, {
        key: 'removeItem',
        value: function removeItem(item) {
            var that = this;

            if (typeof item === 'string') {
                item = that.getItem(item);
            }

            if (item === undefined || !(item instanceof JQX.MenuItem || item instanceof JQX.MenuItemsGroup) || !(that.contains(item) || item.closest('.jqx-list-menu-view') === that.$.view)) {
                return;
            }

            var itemParent = item.parentElement;

            while (item.contains(that._view)) {
                that._backButtonClickHandler(undefined, true);
            }

            var view = that._view;

            if (that.grouped) {
                that._home();
                that._discardGrouping();
            }

            itemParent.removeChild(item);
            that._menuItems = {};
            that._refreshItemPaths(that.$.mainContainer, true, function (item) {
                return that._getCurrentViewItems(item === that.$.mainContainer ? undefined : item);
            });

            if (that.grouped) {
                that._applyGrouping(that.$.mainContainer);

                if (view) {
                    that.changePage(view.path);
                }
            }

            that._toggleFilterInputGroupLabelVisibility();
            that._checkOverflow();
        }

        /**
         * Called when a property is changed.
         */

    }, {
        key: 'propertyChangedHandler',
        value: function propertyChangedHandler(propertyName, oldValue, newValue) {
            if (propertyName === 'disabled' || propertyName === 'dropDownOverlay' || propertyName === 'minimizeIconTemplate' || propertyName === 'minimizeWidth' || propertyName === 'overflow' || propertyName === 'unfocusable') {
                babelHelpers.get(ListMenu.prototype.__proto__ || Object.getPrototypeOf(ListMenu.prototype), 'propertyChangedHandler', this).call(this, propertyName, oldValue, newValue);
                return;
            }

            var that = this;

            switch (propertyName) {
                case 'animation':
                    that.$.view.setAttribute('animation', newValue);
                    break;
                case 'checkable':
                case 'checkboxes':
                    if (that._minimized && that.dropDownAppendTo !== null) {
                        if (newValue) {
                            that.$.view.setAttribute(propertyName, '');
                        } else {
                            that.$.view.removeAttribute(propertyName);
                        }
                    }

                    break;
                case 'checkMode':
                    that._changeToRadioButtonMode(newValue, that.$.mainContainer);

                    if (that._minimized && that.dropDownAppendTo !== null) {
                        that.$.view.setAttribute('check-mode', newValue);
                    }

                    break;
                case 'dataSource':
                    that.$header.addClass('jqx-hidden');
                    that.$mainContainer.removeClass('header-shown');
                    that._view = undefined;

                    that._menuItems = {};
                    that._topLevelFilter = '';
                    that._processDataSource();
                    that._toggleFilterInputGroupLabelVisibility();
                    that._checkOverflow();
                    break;
                case 'displayLoadingIndicator':
                    if (newValue) {
                        var hoveredItem = that.$.mainContainer.querySelector('[hover]');

                        if (hoveredItem) {
                            hoveredItem.removeAttribute('hover');
                        }

                        that._discardKeyboardHover();
                        that.$loadingIndicatorContainer.removeClass('jqx-hidden');
                    } else {
                        that.$loadingIndicatorContainer.addClass('jqx-hidden');
                    }

                    break;
                case 'dropDownAppendTo':
                    {
                        var oldDropDownParent = that._dropDownParent;

                        that._positionDetection.getDropDownParent();

                        if (that._dropDownParent === oldDropDownParent || !that._minimized) {
                            return;
                        }

                        that._close();

                        if (newValue === null) {
                            that._appendMinimizedContainerToMenu(that.$.view, null);
                        } else {
                            that._appendMinimizedContainerToExternalElement(that.$.view);
                        }

                        that.$.mainContainer.scrollTop = 0;
                        that._checkOverflow();
                        break;
                    }
                case 'dropDownPosition':
                    {
                        that._close();

                        if (that._minimized && that.dropDownAppendTo !== null) {
                            that.$.view.setAttribute('drop-down-position', newValue);
                        }

                        break;
                    }
                case 'filterable':
                    that._toggleFilterInputGroupLabelVisibility(true);

                    if (newValue === false) {
                        if (that._topLevelFilter !== '') {
                            that._applyFilter('');
                        }

                        for (var i = that._filteredLowerLevelGroups.length - 1; i >= 0; i--) {
                            that._applyFilter('', that._filteredLowerLevelGroups[i]);
                        }
                    }

                    that._checkOverflow();
                    break;
                case 'filterMode':
                    if (!that.filterable) {
                        return;
                    }

                    if (that._topLevelFilter !== '') {
                        that._applyFilter(that._topLevelFilter);
                    }

                    for (var _i = that._filteredLowerLevelGroups.length - 1; _i >= 0; _i--) {
                        that._applyFilter(that._filteredLowerLevelGroups[_i].filter, that._filteredLowerLevelGroups[_i]);
                    }

                    break;
                case 'grouped':
                    that._home();

                    if (newValue) {
                        that._applyGrouping(that.$.mainContainer);
                    } else {
                        that._discardGrouping();
                    }

                    that._toggleFilterInputGroupLabelVisibility(false, true);
                    that._checkOverflow();
                    break;
                case 'loadingIndicatorPosition':
                    if (that.dropDownAppendTo !== null && that._minimized) {
                        that.$.view.setAttribute('loading-indicator-position', newValue);
                    }

                    if (newValue === 'center') {
                        that.$loadingIndicatorPlaceHolder.addClass('jqx-hidden');
                    } else {
                        that.$loadingIndicatorPlaceHolder.removeClass('jqx-hidden');
                    }

                    break;
                case 'theme':
                    babelHelpers.get(ListMenu.prototype.__proto__ || Object.getPrototypeOf(ListMenu.prototype), 'propertyChangedHandler', this).call(this, propertyName, oldValue, newValue);

                    if (that.dropDownAppendTo !== null && that._minimized) {
                        if (oldValue !== '') {
                            that.$view.removeClass(oldValue);
                        }

                        if (newValue) {
                            that.$view.addClass(newValue);
                        }
                    }

                    break;
            }
        }

        /**
         * Appends group headers.
         */

    }, {
        key: '_appendGroupLabels',
        value: function _appendGroupLabels(groups, groupChildren) {
            for (var i = 0; i < groups.length; i++) {
                var groupLabel = document.createElement('div');

                groupLabel.$ = JQX.Utilities.Extend(groupLabel);
                groupLabel.className = 'jqx-list-menu-group-label';
                groupLabel.innerHTML = groups[i];
                groupLabel.groupChildren = groupChildren[i];
                groupChildren[i][0].parentElement.insertBefore(groupLabel, groupChildren[i][0]);

                for (var j = 0; j < groupChildren[i].length; j++) {
                    groupChildren[i][j].groupLabel = groupLabel;
                }
            }
        }

        /**
         * Applies filter.
         */

    }, {
        key: '_applyFilter',
        value: function _applyFilter(filterQuery, view) {
            var that = this,
                items = that._getCurrentViewItems(view);

            for (var i = 0; i < items.length; i++) {
                var item = that._findItem(items[i], filterQuery);

                if (item && item.hidden) {
                    item.hidden = false;
                    if (view === that._view || that._view !== undefined && view !== undefined && !view.contains(that._view) || that._view === undefined) {
                        item.$.removeClass('jqx-hidden');
                    }
                } else if (!item) {
                    items[i].hidden = true;
                    items[i].$.addClass('jqx-hidden');
                }
            }

            if (view) {
                view.filter = filterQuery;

                var index = that._filteredLowerLevelGroups.indexOf(view);

                if (filterQuery === '') {
                    if (index !== -1) {
                        that._filteredLowerLevelGroups.splice(index, 1);
                    }
                } else if (index === -1) {
                    that._filteredLowerLevelGroups.push(view);
                }
            } else {
                that._topLevelFilter = filterQuery;
            }
        }

        /**
         * Back button click handler.
         */

    }, {
        key: '_backButtonClickHandler',
        value: function _backButtonClickHandler(event, noAnimation) {
            var that = this,
                view = that._view;

            if (event) {
                event.stopPropagation();
            }

            if (!view || that.disabled && event || that.displayLoadingIndicator || that._inTransition) {
                return;
            }

            var animation = that.hasAnimation,
                animationType = that.animation,
                resetAnimation = false;

            if (animation && noAnimation) {
                animation = false;
                resetAnimation = true;
                that.animation = 'none';
            }

            that._discardKeyboardHover();

            that.$scrollButtonNear.addClass('jqx-hidden');
            that.$scrollButtonFar.addClass('jqx-hidden');
            that.$mainContainer.removeClass('scroll-buttons-shown');
            view.firstElementChild.classList.remove('jqx-hidden');

            if (!animation) {
                view.$.removeClass('jqx-menu-items-group-opened');
                view.container.$.addClass('jqx-hidden');
            } else {
                that._inTransition = true;
                view.container.$.addClass('no-transition');
                view.container.$.addClass('jqx-hidden');
                view.$.addClass('right');
                view.$.removeClass('right');
                view.container.$.removeClass('no-transition');
            }

            that._showHideMenuItemsGroupSiblings(view, 'removeClass', animation);

            if (animation) {
                setTimeout(function () {
                    view.container.style.top = view.parentElement.getBoundingClientRect().top - view.getBoundingClientRect().top + 'px';
                }, 0);
            } else if (resetAnimation) {
                that.animation = animationType;
            }

            if (view.level === 1) {
                that.$header.addClass('jqx-hidden');
                that.$mainContainer.removeClass('header-shown');
                that._view = undefined;
            } else {
                that.$.title.innerHTML = view.parentItem.titleLabel;
                that._view = view.parentItem;
            }

            that._toggleFilterInputGroupLabelVisibility();

            that.$.mainContainer.scrollTop = 0;

            if (!animation) {
                that._checkOverflow();
            }

            if (event) {
                that.focus();
            }
        }

        /**
         * Applies bottom bounce effect.
         */

    }, {
        key: '_bounceBottom',
        value: function _bounceBottom(initialScrollTop) {
            var that = this,
                mainContainer = that.$.mainContainer;

            that.$mainContainer.addClass('bounce-bottom');

            function bounceBack() {
                mainContainer.scrollTop -= 5;

                if (mainContainer.scrollTop > initialScrollTop) {
                    window.requestAnimationFrame(bounceBack);
                } else {
                    that.$mainContainer.removeClass('bounce-bottom');
                }
            }

            function bounceForth() {
                mainContainer.scrollTop += 5;

                if (mainContainer.scrollTop !== mainContainer.scrollHeight - mainContainer.offsetHeight) {
                    window.requestAnimationFrame(bounceForth);
                } else {
                    window.requestAnimationFrame(bounceBack);
                }
            }

            window.requestAnimationFrame(bounceForth);
        }

        /**
         * Applies top bounce effect.
         */

    }, {
        key: '_bounceTop',
        value: function _bounceTop() {
            var that = this,
                mainContainer = that.$.mainContainer;

            that.$mainContainer.addClass('bounce-top');

            function bounceBack() {
                mainContainer.scrollTop -= 5;

                if (mainContainer.scrollTop > 0) {
                    window.requestAnimationFrame(bounceBack);
                } else {
                    window.requestAnimationFrame(bounceForth);
                }
            }

            function bounceForth() {
                mainContainer.scrollTop += 5;

                if (mainContainer.scrollTop !== 50) {
                    window.requestAnimationFrame(bounceForth);
                } else {
                    mainContainer.scrollTop = 0;
                    that.$mainContainer.removeClass('bounce-top');
                }
            }

            window.requestAnimationFrame(bounceBack);
        }

        /**
         * Checks if items overflow and shows/hides scroll buttons.
         */

    }, {
        key: '_checkOverflow',
        value: function _checkOverflow() {
            var that = this,
                overflow = that.overflow;

            if (overflow === 'hidden') {
                return;
            }

            var overflowing = Math.round(that.$.mainContainer.scrollHeight) > Math.round(that.$.mainContainer.offsetHeight),
                showNear = Math.round(that.$.mainContainer.scrollTop) > 0,
                showFar = Math.round(that.$.mainContainer.offsetHeight + that.$.mainContainer.scrollTop) < Math.round(that.$.mainContainer.scrollHeight);

            if (overflowing) {
                if (overflow === 'auto') {
                    if (!that.$mainContainer.hasClass('scroll-buttons-shown')) {
                        that.$mainContainer.addClass('scroll-buttons-shown');
                    }

                    if (showNear) {
                        that.$scrollButtonNear.removeClass('jqx-hidden');
                    } else {
                        that.$scrollButtonNear.addClass('jqx-hidden');
                    }

                    if (showFar) {
                        that.$scrollButtonFar.removeClass('jqx-hidden');
                    } else {
                        that.$scrollButtonFar.addClass('jqx-hidden');
                    }

                    if ((showNear && showFar) === false) {
                        that.$mainContainer.addClass('one-button-shown');
                    } else {
                        that.$mainContainer.removeClass('one-button-shown');
                    }

                    if (!that.disabled) {
                        that.$.scrollButtonNear.disabled = false;
                        that.$.scrollButtonFar.disabled = false;
                    }
                } else {
                    that.$scrollButtonNear.removeClass('jqx-hidden');
                    that.$scrollButtonFar.removeClass('jqx-hidden');

                    if (that.disabled) {
                        that.$.scrollButtonNear.disabled = true;
                        that.$.scrollButtonFar.disabled = true;
                    } else {
                        that.$.scrollButtonNear.disabled = !showNear;
                        that.$.scrollButtonFar.disabled = !showFar;
                    }
                }
            } else if (!overflowing && overflow === 'auto' && that.$mainContainer.hasClass('scroll-buttons-shown')) {
                that.$mainContainer.removeClass('scroll-buttons-shown');
                that.$mainContainer.removeClass('one-button-shown');
                that.$scrollButtonNear.addClass('jqx-hidden');
                that.$scrollButtonFar.addClass('jqx-hidden');
            } else if (!overflowing && overflow === 'scroll') {
                that.$.scrollButtonNear.disabled = true;
                that.$.scrollButtonFar.disabled = true;
            }
        }

        /**
         * Closes any open pop-up containers.
         */

    }, {
        key: '_close',
        value: function _close() {
            var that = this;

            that._discardKeyboardHover(true);

            if (that._minimized && that._minimizedDropDownOpened) {
                that._positionDetection.removeOverlay();
                that.$view.addClass('jqx-visibility-hidden');

                if (that._edgeMacFF) {
                    that.$.view.style.left = '';
                    that.$.view.style.top = '';
                    that.$view.addClass('not-in-view');
                }

                that.$hamburgerIcon.removeClass('jqx-close-button');
                that._minimizedDropDownOpened = false;
            }
        }

        /**
         * Applies initial settings to the List Menu element.
         */

    }, {
        key: '_createElement',
        value: function _createElement() {
            var that = this;

            that.mode = 'vertical';

            that._positionDetection = new JQX.Utilities.PositionDetection(that);
            that._positionDetection.getDropDownParent();

            if (that.dataSource === null && that.$.mainContainer.firstElementChild instanceof HTMLUListElement) {
                that._processUList();
            }

            var items = that.getElementsByTagName('jqx-menu-item'),
                itemsReady = function itemsReady() {
                that._setFocusable();
                that._menuItems = {};
                that._topLevelFilter = '';
                that._filteredLowerLevelGroups = [];

                that.$.view.setAttribute('animation', that.animation);

                if (that.dataSource === null) {
                    that._processHTML(undefined, 1);
                } else {
                    that._processDataSource();
                }

                that._toggleFilterInputGroupLabelVisibility();

                if (that.overflow === 'scroll') {
                    that.$mainContainer.addClass('scroll-buttons-shown');
                    that.$scrollButtonNear.removeClass('jqx-hidden');
                    that.$scrollButtonFar.removeClass('jqx-hidden');
                    that._updateScrollButtonVisibility(that.$.mainContainer, false, [that.$.scrollButtonNear, that.$.scrollButtonFar]);
                }

                that._applyMinimizeIconTemplate(that.minimizeIconTemplate, null);

                if (that.minimizeWidth !== null && that.offsetWidth <= that.minimizeWidth) {
                    that.minimize();
                } else {
                    that._checkOverflow();
                }

                if (that.displayLoadingIndicator) {
                    that.$loadingIndicatorContainer.removeClass('jqx-hidden');
                }

                if (that.loadingIndicatorPosition !== 'center') {
                    that.$loadingIndicatorPlaceHolder.removeClass('jqx-hidden');
                }

                if (that.__onCompleted) {
                    that._onCompleted = that.__onCompleted;
                    that.__onCompleted = null;
                    that._onCompleted();
                }
            };

            if (items.length === 0) {
                itemsReady();
            } else {
                if (that._onCompleted) {
                    that.__onCompleted = that._onCompleted;
                    that._onCompleted = null;
                }
                that._ensureItemsReady(items, itemsReady);
            }
        }

        /**
         * Creates the pop-up container of jqx-menu-items-group.
         */

    }, {
        key: '_createMenuItemsGroupContainer',
        value: function _createMenuItemsGroupContainer(item, level) {
            var container = document.createElement('div'),
                itemContainer = document.createElement('div');

            container.className = 'jqx-menu-drop-down jqx-hidden';
            container.$ = JQX.Utilities.Extend(container);
            container.level = level;
            container.setAttribute('level', level);
            container.menuItemsGroup = item;

            itemContainer.className = 'jqx-menu-item-container';
            itemContainer.$ = JQX.Utilities.Extend(itemContainer);
            itemContainer.container = container;
            itemContainer.menuItemsGroup = item;

            if (item.checkable) {
                itemContainer.setAttribute('checkable', '');
            }

            itemContainer.setAttribute('check-mode', item.checkMode);

            container.itemContainer = itemContainer;
            container.appendChild(itemContainer);

            return container;
        }

        /**
         * Removes grouping.
         */

    }, {
        key: '_discardGrouping',
        value: function _discardGrouping() {
            var that = this,
                groupLabels = Array.from(that.$.view.getElementsByClassName('jqx-list-menu-group-label'));

            for (var i = 0; i < groupLabels.length; i++) {
                var currentGroupLabel = groupLabels[i];

                currentGroupLabel.parentElement.removeChild(currentGroupLabel);
            }

            that._unsortItems(that.$.mainContainer);
        }

        /**
         * Removes "hover" attribute added by keyboard navigation.
         */

    }, {
        key: '_discardKeyboardHover',
        value: function _discardKeyboardHover() {
            var that = this;

            if (!that._focusedViaKeyboard) {
                return;
            }

            if (that._focusedViaKeyboard === that.$.backButton) {
                that.$.backButton.removeAttribute('hover');
                that.$.backButton.$.button.removeAttribute('hover');
            } else {
                that._focusedViaKeyboard.removeAttribute('focus');
                that._focusedViaKeyboard.removeAttribute('hover');
            }

            that._focusedViaKeyboard = undefined;
        }

        /**
         * Document up handler.
         */

    }, {
        key: '_documentUpHandler',
        value: function _documentUpHandler(event) {
            var that = this,
                target = event.originalEvent.target;

            that._endSwiping(event, Date.now());

            if (that._swipeDetails) {
                if (that._swipeDetails.direction === 'left') {
                    if (that._swipeDetails.start > event.pageX && that._swipeDetails.start - event.pageX > that.offsetWidth / 4) {
                        that._selectionHandler({ target: that._swipeDetails.target }, that._swipeDetails.target, true);
                    }
                } else {
                    if (that._swipeDetails.start < event.pageX && event.pageX - that._swipeDetails.start > that.offsetWidth / 4) {
                        that._backButtonClickHandler();
                    }
                }

                delete that._swipeDetails;
                return;
            }

            if (target === that.$.filterInput || that.disabled || that.displayLoadingIndicator || !target.closest) {
                return;
            }

            if (!that.contains(target) && target.closest('.jqx-list-menu-view') !== that.$.view) {
                that._close();

                if (that._scrolling) {
                    delete that._scrolling;
                }
            } else if ((that.contains(target) || target.closest('.jqx-list-menu-view') === that.$.view) && that !== document.activeElement) {
                that.focus();
            }
        }

        /**
         * Makes sure a jqx-menu-item/jqx-menu-items-group is visible by scrolling to it.
         */

    }, {
        key: '_ensureVisible',
        value: function _ensureVisible(scrollTarget) {
            var that = this,
                parent = that.$.mainContainer;

            if (!parent.$.hasClass('scroll-buttons-shown') && that.overflow !== 'hidden') {
                return;
            }

            var parentBoundingRect = parent.getBoundingClientRect(),
                scrollTargetBoundingRect = scrollTarget.getBoundingClientRect(),
                scrollButtons = [that.$.scrollButtonNear, that.$.scrollButtonFar],
                oldScrollTop = parent.scrollTop;

            if (parentBoundingRect.top > scrollTargetBoundingRect.top || parentBoundingRect.bottom < scrollTargetBoundingRect.bottom) {
                parent.scrollTop = scrollTarget.offsetTop;
                that._updateScrollButtonVisibility(parent, false, scrollButtons);
            }

            that._fireScrollBottomReachedEvent(oldScrollTop);
        }

        /**
         * Fires the "scrollBottomReached" event.
         */

    }, {
        key: '_fireScrollBottomReachedEvent',
        value: function _fireScrollBottomReachedEvent(oldScrollTop) {
            var that = this,
                mainContainer = that.$.mainContainer,
                currentScrollTop = mainContainer.scrollTop;

            if (oldScrollTop === currentScrollTop || currentScrollTop !== mainContainer.scrollHeight - mainContainer.offsetHeight) {
                return;
            }

            that.$.fireEvent('scrollBottomReached');
        }

        /**
         * Gets all jqx-menu-item and jqx-menu-items-group elements in current view.
         */

    }, {
        key: '_getCurrentViewItems',
        value: function _getCurrentViewItems(view) {
            var that = this;

            if (!that.grouped) {
                if (view === undefined) {
                    return that.$.mainContainer.children;
                } else {
                    return view.container.firstElementChild.children;
                }
            } else {
                if (view === undefined) {
                    return that.$.view.querySelectorAll('.jqx-menu-main-container > jqx-menu-item, .jqx-menu-main-container > jqx-menu-items-group');
                } else {
                    var allChildren = view.container.firstElementChild.children,
                        items = [];

                    for (var i = 0; i < allChildren.length; i++) {
                        var currentItem = allChildren[i];

                        if (currentItem instanceof JQX.MenuItem || currentItem instanceof JQX.MenuItemsGroup) {
                            items.push(currentItem);
                        }
                    }

                    return items;
                }
            }
        }

        /**
         * Sorts and groups items.
         */

    }, {
        key: '_sortItems',
        value: function _sortItems(item) {
            var that = this;

            if (!that.grouped) {
                return;
            }

            var groups = [],
                groupChildren = [];
            var parent = void 0;

            if (item instanceof JQX.MenuItemsGroup) {
                parent = item.container.firstElementChild;
            } else if (item === that.$.mainContainer) {
                parent = item;
            }

            var children = Array.from(parent.children);

            children.sort(function (a, b) {
                return a.label.localeCompare(b.label);
            });

            // sort items in DOM
            for (var i = children.length - 1; i >= 0; i--) {
                parent.insertBefore(children[i], parent.firstElementChild);
            }

            // retrieve groups and first elements in groups
            for (var _i2 = 0; _i2 < children.length; _i2++) {
                var currentChild = children[_i2],
                    firstCharacter = currentChild.label.charAt(0),
                    index = groups.indexOf(firstCharacter.toUpperCase());

                if (index === -1) {
                    groups.push(firstCharacter.toUpperCase());
                    groupChildren.push([currentChild]);
                } else {
                    groupChildren[index].push(currentChild);
                }
            }

            that._appendGroupLabels(groups, groupChildren);
        }

        /**
         * Displays top-level view.
         */

    }, {
        key: '_home',
        value: function _home() {
            var that = this;

            while (that._view) {
                that._backButtonClickHandler(undefined, true);
            }
        }

        /**
         * Keydown event handler.
         */

    }, {
        key: '_keydownHandler',
        value: function _keydownHandler(event) {
            var that = this,
                key = event.key;

            if (document.activeElement !== that || ['ArrowDown', 'ArrowLeft', 'ArrowRight', 'ArrowUp', 'End', 'Enter', 'Escape', 'Home', ' '].indexOf(key) === -1 || that.disabled || that.displayLoadingIndicator) {
                return;
            }

            event.preventDefault();

            var view = that._view,
                lastOpenedContainer = view ? view.itemContainer : that.$.mainContainer,
                hoveredItem = that.$.backButton.hasAttribute('hover') ? that.$.backButton : lastOpenedContainer.querySelector('[focus]');

            switch (key) {
                case 'ArrowDown':
                    that._navigate('_getNextEnabledChild', hoveredItem, lastOpenedContainer);
                    break;
                case 'ArrowLeft':
                    that._backButtonClickHandler();
                    break;
                case 'ArrowRight':
                    if (hoveredItem && hoveredItem instanceof JQX.MenuItemsGroup) {
                        that._menuItemsGroupSelectionHandler(hoveredItem, { type: 'keydown' });
                    }

                    break;
                case 'ArrowUp':
                    that._navigate('_getPreviousEnabledChild', hoveredItem, lastOpenedContainer);
                    break;
                case 'End':
                case 'Home':
                    {
                        if (view && key === 'Home') {
                            that.$.mainContainer.scrollTop = 0;
                            that._checkOverflow();
                            that.$.backButton.setAttribute('hover', '');
                            that.$.backButton.$.button.setAttribute('hover', '');
                            that._focusedViaKeyboard = that.$.backButton;

                            if (hoveredItem) {
                                hoveredItem.removeAttribute('focus');
                            }

                            return;
                        }

                        var enabledChild = key === 'End' ? that._getLastEnabledChild(lastOpenedContainer) : that._getFirstEnabledChild(lastOpenedContainer);

                        if (!enabledChild || hoveredItem === enabledChild) {
                            return;
                        }

                        if (hoveredItem) {
                            if (hoveredItem === that.$.backButton) {
                                that.$.backButton.removeAttribute('hover');
                                that.$.backButton.$.button.removeAttribute('hover');
                            } else {
                                hoveredItem.removeAttribute('focus');
                            }
                        }

                        that._hoverViaKeyboard(enabledChild);
                        break;
                    }
                case 'Enter':
                    if (that._minimized && !that._minimizedDropDownOpened) {
                        that._hamburgerIconClickHandler(undefined, that.$.view);
                    } else if (hoveredItem) {
                        if (hoveredItem === that.$.backButton) {
                            that._backButtonClickHandler();
                        } else {
                            that._selectionHandler({ target: hoveredItem });
                        }
                    }

                    break;
                case 'Escape':
                    if (that._minimized && that._minimizedDropDownOpened && !that._view) {
                        that._close();
                    } else {
                        that._backButtonClickHandler();
                    }

                    break;
                case ' ':
                    if (hoveredItem) {
                        if (hoveredItem === that.$.backButton) {
                            that._backButtonClickHandler();
                        } else {
                            that._toggleItem(hoveredItem);
                        }
                    }

                    break;
            }
        }

        /**
         * mainContainer down handler.
         */

    }, {
        key: '_mainContainerDownHandler',
        value: function _mainContainerDownHandler(event) {
            var that = this;

            if (!JQX.Utilities.Core.isMobile || that.disabled || that.displayLoadingIndicator) {
                return;
            }

            that._dragStartDetails = { startY: event.pageY, x: event.pageX, y: event.pageY, startTime: Date.now(), target: event.originalEvent.target };
        }

        /**
         * mainContainer handler.
         */

    }, {
        key: '_mainContainerHandler',
        value: function _mainContainerHandler() {
            return;
        }

        /**
         * mainContainer move handler.
         */

    }, {
        key: '_mainContainerMoveHandler',
        value: function _mainContainerMoveHandler(event) {
            var that = this;

            if (!that._dragStartDetails) {
                return;
            }

            var pageY = event.pageY,
                difference = that._dragStartDetails.y - pageY,
                oldScrollTop = that.$.mainContainer.scrollTop;

            that.$.mainContainer.scrollTop += difference;

            if (oldScrollTop !== that.$.mainContainer.scrollTop) {
                that._checkOverflow();
                that._fireScrollBottomReachedEvent(oldScrollTop);
            }

            that._dragStartDetails = { startY: that._dragStartDetails.startY, x: event.pageX, y: pageY, startTime: that._dragStartDetails.startTime, target: event.originalEvent.target };
            that._scrolling = true;
        }

        /**
         * mainContainer swipeleft/swiperight handler.
         */

    }, {
        key: '_mainContainerSwipeHandler',
        value: function _mainContainerSwipeHandler(event) {
            var that = this;

            if (!JQX.Utilities.Core.isMobile || that.disabled || that.displayLoadingIndicator) {
                return;
            }

            var target = event.originalEvent.target,
                closestItem = target.closest('jqx-menu-item'),
                closestGroup = target.closest('jqx-menu-items-group');

            if (event.type === 'swiperight') {
                var _target = closestItem || closestGroup;

                if (_target) {
                    delete that._dragStartDetails;
                    delete that._scrolling;

                    that._swipeDetails = { direction: 'right', start: event.pageX, target: _target };
                }
            } else if (closestGroup && closestItem === null) {
                delete that._dragStartDetails;
                delete that._scrolling;

                that._swipeDetails = { direction: 'left', start: event.pageX, target: closestGroup };
            }
        }

        /**
         * Returns the root's activeElement and isInside flag indicating whether the target is inside the element or not.
         * @param {any} target - target
         */

    }, {
        key: '_getRootDetails',
        value: function _getRootDetails(rootNode, event) {
            var that = this;

            if (!rootNode) {
                return;
            }

            if (!that.enableShadowDOM) {
                return { activeElement: rootNode.activeElement, isInsideElement: that.contains(event.target) };
            }

            var activeElement = void 0,
                isInsideElement = void 0;

            while (rootNode) {
                if (!activeElement && rootNode.activeElement) {
                    activeElement = rootNode.activeElement;
                }

                if (rootNode.host === that) {
                    isInsideElement = true;
                }

                if (rootNode === document) {
                    break;
                }

                rootNode = rootNode.host ? rootNode.host.getRootNode() : rootNode.getRootNode();
            }

            return { activeElement: activeElement, isInsideElement: isInsideElement };
        }

        /**
         * jqx-menu-items-group selection handler.
         */

    }, {
        key: '_menuItemsGroupSelectionHandler',
        value: function _menuItemsGroupSelectionHandler(closestItemsGroup, event, noAnimation) {
            var that = this,
                container = closestItemsGroup.container,
                level = container.level,
                rootDetails = that._getRootDetails(event.target ? event.target.getRootNode() : null, event);

            if (that._view === closestItemsGroup) {
                return;
            }

            that._discardKeyboardHover();

            if (rootDetails && rootDetails.activeElement !== that && that.dropDownAppendTo !== null && event.type === 'click' && !rootDetails.isInsideElement) {
                that.focus();
            }

            if (that._inTransition) {
                return;
            }

            if (event.type === 'click' && !event.target.classList.contains('jqx-menu-items-group-arrow') && that._toggleItem(closestItemsGroup)) {
                that._ripple(closestItemsGroup, event);
                return;
            }

            var animation = that.hasAnimation,
                animationType = that.animation,
                resetAnimation = false;

            if (animation && noAnimation) {
                animation = false;
                resetAnimation = true;
                that.animation = 'none';
            }

            if (level === 2) {
                that.$header.removeClass('jqx-hidden');
                that.$mainContainer.addClass('header-shown');
            }

            that.$.title.innerHTML = closestItemsGroup.titleLabel;
            that._view = closestItemsGroup;
            that._toggleFilterInputGroupLabelVisibility();

            closestItemsGroup.removeAttribute('hover');
            closestItemsGroup.removeAttribute('focus');
            closestItemsGroup.$.addClass('jqx-menu-items-group-opened');

            that._showHideMenuItemsGroupSiblings(closestItemsGroup, 'addClass', animation);

            if (!animation) {
                closestItemsGroup.firstElementChild.classList.add('jqx-hidden');
            } else {
                that._inTransition = true;
                closestItemsGroup.firstElementChild.classList.add('animate');
                setTimeout(function () {
                    container.style.top = closestItemsGroup.parentElement.getBoundingClientRect().top - closestItemsGroup.getBoundingClientRect().top + 'px';
                }, 0);
            }

            container.$.removeClass('jqx-hidden');

            if (resetAnimation) {
                that.animation = animationType;
            }

            that.$.mainContainer.scrollTop = 0;

            if (!animation) {
                that._checkOverflow();
            }

            that.$.fireEvent('expand', { 'item': closestItemsGroup, 'label': closestItemsGroup.label, 'path': closestItemsGroup.path, 'value': closestItemsGroup.value });
        }

        /**
         * Mouseout/mouseover handler.
         */

    }, {
        key: '_mouseoutMouseoverHandler',
        value: function _mouseoutMouseoverHandler(event) {
            var that = this;

            if (that.disabled || that.displayLoadingIndicator) {
                return;
            }

            var closestItem = event.target.closest('jqx-menu-item') || event.target.closest('jqx-menu-items-group');

            if (closestItem === null || that._view && closestItem.level <= that._view.level || closestItem.disabled || closestItem.templateApplied) {
                return;
            }

            that._discardKeyboardHover();

            if (event.type === 'mouseover') {
                closestItem.setAttribute('hover', '');
                that._discardKeyboardHover(true);
            } else {
                closestItem.removeAttribute('hover');
            }
        }

        /**
         * Navigates to an item via the keyboard.
         */

    }, {
        key: '_navigate',
        value: function _navigate(method, hoveredItem, lastOpenedContainer) {
            var that = this;

            if (!hoveredItem) {
                if (method === '_getNextEnabledChild') {
                    if (that._view) {
                        that.$.backButton.setAttribute('hover', '');
                        that.$.backButton.$.button.setAttribute('hover', '');
                        that._focusedViaKeyboard = that.$.backButton;
                    } else {
                        that._hoverViaKeyboard(that._getFirstEnabledChild(lastOpenedContainer));
                    }
                } else {
                    that._hoverViaKeyboard(that._getLastEnabledChild(lastOpenedContainer));
                }

                return;
            }

            var navigateToChild = void 0;

            if (method === '_getNextEnabledChild' && hoveredItem === that.$.backButton) {
                navigateToChild = that._getFirstEnabledChild(lastOpenedContainer);

                if (navigateToChild) {
                    that.$.backButton.removeAttribute('hover');
                    that.$.backButton.$.button.removeAttribute('hover');
                } else {
                    return;
                }
            } else if (method === '_getPreviousEnabledChild' && that._view && hoveredItem === that._getFirstEnabledChild(lastOpenedContainer)) {
                that.$.backButton.setAttribute('hover', '');
                that.$.backButton.$.button.setAttribute('hover', '');
                that._focusedViaKeyboard = that.$.backButton;
                hoveredItem.removeAttribute('focus');
                return;
            } else {
                navigateToChild = that[method](hoveredItem);
            }

            if (navigateToChild) {
                hoveredItem.removeAttribute('focus');
                that._hoverViaKeyboard(navigateToChild);
            }
        }

        /**
         * Processes initial HTML structure.
         */

    }, {
        key: '_processHTML',
        value: function _processHTML(item, level) {
            var that = this;
            var container = void 0,
                itemContainer = void 0;

            if (item === undefined) {
                item = that.$.mainContainer;
            }

            if (level > 1) {
                container = that._createMenuItemsGroupContainer(item, level);
                itemContainer = container.itemContainer;
            }

            var itemChildren = Array.from(item.children),
                checkedChildren = [];
            var pathOffset = 0;

            for (var i = 0; i < itemChildren.length; i++) {
                if (level > 1 && i === 0) {
                    pathOffset++;
                    continue;
                }

                var currentItem = itemChildren[i];

                if (!(currentItem instanceof JQX.MenuItem || currentItem instanceof JQX.MenuItemsGroup)) {
                    currentItem.parentElement.removeChild(currentItem);
                    pathOffset++;
                    continue;
                }

                that._createItemHTMLStructure(currentItem, level, item, i - pathOffset);

                if (currentItem.checked) {
                    if (!currentItem.disabled && !currentItem.templateApplied) {
                        checkedChildren.push(currentItem);
                    } else {
                        currentItem.checked = false;
                    }
                }

                if (level > 1) {
                    itemContainer.appendChild(currentItem);
                }

                if (currentItem instanceof JQX.MenuItemsGroup) {
                    that._processHTML(currentItem, level + 1);
                }
            }

            if (level > 1) {
                item.container = container;
                item.itemContainer = itemContainer;

                if (item instanceof JQX.MenuItemsGroup) {
                    var arrowElement = document.createElement('div');

                    arrowElement.className = 'jqx-menu-items-group-arrow jqx-arrow-right right';
                    item.children[0].appendChild(arrowElement);
                }

                item.appendChild(container);
            }

            that._validateRadioButtonSelection(item, level, checkedChildren);

            that._sortItems(item);
        }

        /**
         * Resize handler.
         */

    }, {
        key: '_resizeHandler',
        value: function _resizeHandler() {
            var that = this,
                minimizeWidth = that.minimizeWidth;

            if (minimizeWidth !== null) {
                if (!that._minimized && that.offsetWidth <= minimizeWidth) {
                    that.minimize();
                    return;
                } else if (that._minimized && that.offsetWidth > minimizeWidth) {
                    that.maximize();
                    return;
                }
            }

            that._checkOverflow();
        }

        /**
         * Scrolls using scroll buttons.
         */

    }, {
        key: '_scroll',
        value: function _scroll(scrollButton) {
            var that = this,
                mainContainer = that.$.mainContainer,
                scrollCoefficient = scrollButton.classList.contains('jqx-scroll-button-near') ? -1 : 1,
                oldScrollTop = mainContainer.scrollTop;

            mainContainer.scrollTop = mainContainer.scrollTop + scrollCoefficient * 10;

            if (oldScrollTop !== mainContainer.scrollTop) {
                that._updateScrollButtonVisibility(mainContainer, false, [that.$.scrollButtonNear, that.$.scrollButtonFar]);
                that._fireScrollBottomReachedEvent(oldScrollTop);
            }
        }

        /**
         * Selection handler.
         */

    }, {
        key: '_selectionHandler',
        value: function _selectionHandler(event, closestItemsGroup, swipe) {
            var that = this,
                target = event.target;

            if (that.disabled || that.displayLoadingIndicator) {
                return;
            }

            if (that._scrolling || that._swipeDetails && !swipe) {
                delete that._dragStartDetails;
                delete that._scrolling;
                delete that._swipeDetails;
                return;
            }

            function focus() {
                var rootDetails = that._getRootDetails(target.getRootNode(), event);

                if (rootDetails && rootDetails.activeElement !== that && that.dropDownAppendTo !== null && event.type === 'click' && !rootDetails.isInsideElement) {
                    that.focus();
                }
            }

            if (closestItemsGroup === undefined) {
                if (event.type === 'click') {
                    var closestScrollButton = target.closest('jqx-repeat-button');

                    if (closestScrollButton) {
                        that._scroll(closestScrollButton, event);
                        return;
                    }
                }

                var closestItem = target.closest('jqx-menu-item');

                if (closestItem) {
                    if (closestItem.disabled || closestItem.templateApplied) {
                        focus();
                        return;
                    }

                    if (!that._toggleItem(closestItem)) {
                        that.$.fireEvent('itemClick', { 'item': closestItem, 'label': closestItem.label, 'value': closestItem.value });
                    }

                    that._ensureVisible(closestItem);
                    that._ripple(closestItem, event);
                    focus();
                    return;
                }

                closestItemsGroup = target.closest('jqx-menu-items-group');

                if (closestItemsGroup && (target === closestItemsGroup.container || target === closestItemsGroup.container.firstElementChild)) {
                    return;
                }
            }

            if (closestItemsGroup && !closestItemsGroup.disabled) {
                that._menuItemsGroupSelectionHandler(closestItemsGroup, event);
            }
        }

        /**
         * Shows/hides the siblings of a jqx-menu-items-group.
         */

    }, {
        key: '_showHideMenuItemsGroupSiblings',
        value: function _showHideMenuItemsGroupSiblings(menuItemsGroup, method, animation) {
            var parentElement = menuItemsGroup.parentElement,
                children = parentElement.children;

            var _loop = function _loop(i) {
                var currentChild = children[i];

                if (currentChild === menuItemsGroup) {
                    return 'continue';
                }

                if (!currentChild.hidden) {
                    if (!animation) {
                        currentChild.$[method]('jqx-hidden');
                    } else {
                        if (method === 'addClass') {
                            currentChild.$.addClass('animate');
                        } else {
                            currentChild.$.removeClass('jqx-hidden');
                            currentChild.$.addClass('right');
                            setTimeout(function () {
                                currentChild.$.removeClass('right');
                            }, 0);
                        }
                    }
                }
            };

            for (var i = 0; i < children.length; i++) {
                var _ret = _loop(i);

                if (_ret === 'continue') continue;
            }
        }

        /**
         * Toggles the visibility of the filter input.
         */

    }, {
        key: '_toggleFilterInputGroupLabelVisibility',
        value: function _toggleFilterInputGroupLabelVisibility(filterableChanged, groupedChanged) {
            var that = this,
                itemsCount = that._getCurrentViewItems(that._view).length;

            if (groupedChanged !== true) {
                var shown = !that.$filterInputContainer.hasClass('jqx-hidden');

                if (that.filterable && itemsCount > 1) {
                    if (!shown) {
                        that.$mainContainer.addClass('filter-input-shown');
                        that.$filterInputContainer.removeClass('jqx-hidden');
                    }

                    if (that._view) {
                        that.$.filterInput.value = that._view.filter || '';
                    } else {
                        that.$.filterInput.value = that._topLevelFilter;
                    }
                } else if (shown) {
                    that.$mainContainer.removeClass('filter-input-shown');
                    that.$filterInputContainer.addClass('jqx-hidden');
                }
            }

            if (!filterableChanged && that.grouped && itemsCount > 0) {
                var firstGroupLabel = that._view ? that._view.container.firstElementChild.firstElementChild.$ : that.$.mainContainer.firstElementChild.$;

                if (itemsCount === 1) {
                    firstGroupLabel.addClass('jqx-hidden');
                } else {
                    firstGroupLabel.removeClass('jqx-hidden');
                }
            }
        }

        /**
         * External view handler.
         */

    }, {
        key: '_viewHandler',
        value: function _viewHandler(event) {
            var that = this;

            if (event.type === 'transitionend') {
                var target = event.target;

                if (target === that.$.view || that.$.backButton.contains(target)) {
                    return;
                }

                if (target.classList.contains('animate')) {
                    target.classList.remove('animate');
                    target.classList.add('jqx-hidden');
                }

                if (target.classList.contains('jqx-menu-drop-down')) {
                    target.style.top = '';
                }

                if (target.classList.contains('jqx-menu-items-group-opened')) {
                    target.classList.remove('jqx-menu-items-group-opened');
                }

                that._checkOverflow();
                that._inTransition = false;
                return;
            }

            if (!that._minimized || that.dropDownAppendTo === null) {
                return;
            }

            switch (event.type) {
                case 'click':
                    that._selectionHandler(event);
                    break;
                case 'mouseout':
                    that._mouseoutMouseoverHandler(event);
                    break;
                case 'mouseover':
                    that._mouseoutMouseoverHandler(event);
                    break;
            }
        }
    }], [{
        key: 'properties',

        // List Menu's properties.
        get: function get() {
            return {
                'displayLoadingIndicator': {
                    value: false,
                    type: 'boolean'
                },
                'dropDownPosition': {
                    value: 'auto',
                    allowedValues: ['top-left', 'top-right', 'bottom-left', 'bottom-right', 'auto'],
                    type: 'string'
                },
                'filterable': {
                    value: false,
                    type: 'boolean'
                },
                'filterInputPlaceholder': {
                    value: '',
                    type: 'string'
                },
                'filterMode': {
                    value: 'containsIgnoreCase',
                    allowedValues: ['contains', 'containsIgnoreCase', 'doesNotContain', 'doesNotContainIgnoreCase', 'equals', 'equalsIgnoreCase', 'startsWith', 'startsWithIgnoreCase', 'endsWith', 'endsWithIgnoreCase'],
                    type: 'string'
                },
                'grouped': {
                    value: false,
                    type: 'boolean'
                },
                'loadingIndicatorPlaceholder': {
                    value: 'Loading...',
                    type: 'string'
                },
                'loadingIndicatorPosition': {
                    value: 'center',
                    allowedValues: ['bottom', 'center', 'top'],
                    type: 'string'
                }
            };
        }

        /**
         * List Menu's event listeners.
         */

    }, {
        key: 'listeners',
        get: function get() {
            return {
                'resize': '_resizeHandler',
                'backButton.click': '_backButtonClickHandler',
                'filterInput.keyup': '_filterInputKeyupHandler',
                'mainContainer.down': '_mainContainerDownHandler',
                'mainContainer.move': '_mainContainerMoveHandler',
                'mainContainer.swipeleft': '_mainContainerSwipeHandler',
                'mainContainer.swiperight': '_mainContainerSwipeHandler',
                'view.click': '_viewHandler',
                'view.mouseout': '_viewHandler',
                'view.mouseover': '_viewHandler',
                'view.transitionend': '_viewHandler',
                'view.wheel': '_wheelHandler'
            };
        }

        /**
         * CSS files needed for the element (ShadowDOM)
         */

    }, {
        key: 'styleUrls',
        get: function get() {
            return ['jqx.listmenu.css'];
        }
    }]);
    return ListMenu;
}(JQX.Menu));