'use strict';

/**
* ScrollBar custom element.
*/
JQX('jqx-scroll-bar', function (_JQX$BaseElement) {
    babelHelpers.inherits(ScrollBar, _JQX$BaseElement);

    function ScrollBar() {
        babelHelpers.classCallCheck(this, ScrollBar);
        return babelHelpers.possibleConstructorReturn(this, (ScrollBar.__proto__ || Object.getPrototypeOf(ScrollBar)).apply(this, arguments));
    }

    babelHelpers.createClass(ScrollBar, [{
        key: 'template',


        /** ScrollBar's template. */
        value: function template() {
            var template = '<div id="container" class="jqx-container">\n                    <div id="nearButton" class ="jqx-scroll-button jqx-arrow-left"></div>\n                    <div  id="track" class ="jqx-track">\n                        <div id="thumb" class="jqx-thumb"></div>\n                    </div>\n                    <div id="farButton" class ="jqx-scroll-button jqx-arrow-right"></div>\n            </div>';

            return template;
        }
    }, {
        key: '_updateInBoundsFlag',
        value: function _updateInBoundsFlag(event) {
            var that = this;

            var button = event.target;

            button._isPointerInBounds = true;

            if (event.type === 'mouseleave') {
                button._isPointerInBounds = false;
            }

            var buttons = 'buttons' in event ? event.buttons : event.which;
            if (buttons !== 1) {
                that._stopRepeat(event);
            }
        }
    }, {
        key: '_startRepeat',
        value: function _startRepeat(event) {
            var that = this;

            if (that.disabled) {
                return;
            }

            var button = event.target;

            if (!button._initialTimer) {
                button._initialTimer = setTimeout(function () {
                    button._repeatTimer = setInterval(function () {
                        if (button._isPointerInBounds) {
                            var buttons = 'buttons' in event ? event.buttons : event.which;

                            button.$.fireEvent('click', { buttons: buttons, clientX: event.clientX, clientY: event.clientY, pageX: event.pageX, pageY: event.pageY, screenX: event.screenX, screenY: event.screenY });
                        }
                    }, that.clickRepeatDelay);
                }, 3 * that.clickRepeatDelay);
            }
        }
    }, {
        key: '_stopRepeat',
        value: function _stopRepeat(event) {
            var that = this;

            if (that.disabled) {
                return;
            }

            var button = event.target;

            if (button._repeatTimer) {
                clearInterval(button._repeatTimer);
                button._repeatTimer = null;
            }

            if (button._initialTimer) {
                clearTimeout(button._initialTimer);
                button._initialTimer = null;
            }
        }
    }, {
        key: '_calculateThumbSize',
        value: function _calculateThumbSize(scrollAreaSize) {
            var that = this;
            var positions = that.max - that.min;
            var enoughSpace = that.orientation === 'horizontal' ? that.$.track.offsetWidth > 10 : that.$.track.offsetHeight > 10;
            var size = 0;

            if (positions >= 1 && enoughSpace) {
                size = scrollAreaSize / (positions + scrollAreaSize) * scrollAreaSize;

                if (that.$.thumb.className.indexOf('jqx-hidden') >= 0) {
                    that.$thumb.removeClass('jqx-hidden');
                }
            } else {
                that.$thumb.addClass('jqx-hidden');
            }

            return Math.max(10, Math.min(size, scrollAreaSize));
        }
    }, {
        key: '_dragStartHandler',
        value: function _dragStartHandler(event) {
            var that = this;

            if (that.disabled) {
                return;
            }

            that.thumbCapture = true;
            that.dragStartX = event.clientX;
            that.dragStartY = event.clientY;

            that.dragStartValue = that.value;

            event.stopPropagation();
            event.preventDefault();
        }
    }, {
        key: '_dragHandler',
        value: function _dragHandler(event) {
            var that = this;

            if (that.thumbCapture !== true) {
                return;
            }

            that._isThumbDragged = true;

            var ratio = (that.max - that.min) / (that.scrollBarSize - that.thumbSize);
            var offsetValue = that.orientation === 'horizontal' ? (event.clientX - that.dragStartX) * ratio : (event.clientY - that.dragStartY) * ratio;
            var step = offsetValue;

            if (that.rightToLeft && that.orientation === 'horizontal') {
                step = -offsetValue;
            }

            that._updateValue(that.dragStartValue + step);

            event.stopPropagation();
            event.preventDefault();

            if (event.originalEvent) {
                event.originalEvent.stopPropagation();
                event.originalEvent.preventDefault();
            }
        }
    }, {
        key: '_dragEndHandler',
        value: function _dragEndHandler(event) {
            var that = this;

            if (that._trackDownTimer) {
                clearInterval(that._trackDownTimer);
                that._trackDownTimer = null;
            }

            if (!that.thumbCapture) {
                return;
            }

            that.thumbCapture = false;
            that._isThumbDragged = false;

            if (that.mechanicalAction === 'switchWhenReleased') {
                that._updateValue(that.dragStartValue, that.value);
            } else if (this.mechanicalAction === 'switchUntilReleased') {
                that._updateValue(that.dragStartValue);
            }

            event.preventDefault();
            event.stopPropagation();

            event.originalEvent.preventDefault();
            event.originalEvent.stopPropagation();
        }
    }, {
        key: '_farButtonClickHandler',
        value: function _farButtonClickHandler() {
            var that = this;

            if (that.disabled) {
                return;
            }

            var value = that.value;

            that._updateValue(that.value + that.step);

            if (that.mechanicalAction === 'switchUntilReleased') {
                that._updateValue(value);
            }
        }
    }, {
        key: '_nearButtonClickHandler',
        value: function _nearButtonClickHandler() {
            var that = this;

            if (that.disabled) {
                return;
            }

            var value = that.value;

            that._updateValue(that.value - that.step);

            if (that.mechanicalAction === 'switchUntilReleased') {
                that._updateValue(value);
            }
        }
    }, {
        key: 'propertyChangedHandler',
        value: function propertyChangedHandler(propertyName, oldValue, newValue) {
            babelHelpers.get(ScrollBar.prototype.__proto__ || Object.getPrototypeOf(ScrollBar.prototype), 'propertyChangedHandler', this).call(this, propertyName, oldValue, newValue);

            var that = this;

            switch (propertyName) {
                case 'min':
                case 'max':
                case 'orientation':
                case 'showButtons':
                    {
                        that._layout();
                        break;
                    }
                case 'value':
                    that._updateValue(oldValue, newValue);
                    break;
            }
        }
    }, {
        key: 'ready',
        value: function ready() {
            babelHelpers.get(ScrollBar.prototype.__proto__ || Object.getPrototypeOf(ScrollBar.prototype), 'ready', this).call(this);

            var that = this;

            that._layout();
        }
    }, {
        key: '_resizeHandler',
        value: function _resizeHandler() {
            var that = this;

            that._layout();
        }
    }, {
        key: 'refresh',
        value: function refresh() {
            var that = this;

            that._layout();
        }
    }, {
        key: '_layout',
        value: function _layout() {
            var that = this;

            that.scrollBarSize = that.orientation === 'horizontal' ? that.$.track.offsetWidth : that.$.track.offsetHeight;
            that.thumbSize = that._calculateThumbSize(that.scrollBarSize);

            if (that.orientation === 'horizontal' && that.$.thumb.style.width !== that.thumbSize + 'px') {
                that.$.thumb.style.width = that.thumbSize + 'px';
            } else if (that.orientation === 'vertical' && that.$.thumb.style.height !== that.thumbSize + 'px') {
                that.$.thumb.style.height = that.thumbSize + 'px';
            }

            if (that.orientation === 'horizontal') {
                if (that.$.nearButton.classList.contains('jqx-arrow-up')) {
                    that.$.nearButton.classList.remove('jqx-arrow-up');
                }

                if (that.$.farButton.classList.contains('jqx-arrow-down')) {
                    that.$.farButton.classList.remove('jqx-arrow-down');
                }

                if (!that.$.nearButton.classList.contains('jqx-arrow-left')) {
                    that.$.nearButton.classList.add('jqx-arrow-left');
                }

                if (!that.$.farButton.classList.contains('jqx-arrow-right')) {
                    that.$.farButton.classList.add('jqx-arrow-right');
                }
            } else {
                if (that.$.nearButton.classList.contains('jqx-arrow-left')) {
                    that.$.nearButton.classList.remove('jqx-arrow-left');
                }

                if (that.$.farButton.classList.contains('jqx-arrow-right')) {
                    that.$.farButton.classList.remove('jqx-arrow-right');
                }

                if (!that.$.nearButton.classList.contains('jqx-arrow-up')) {
                    that.$.nearButton.classList.add('jqx-arrow-up');
                }

                if (!that.$.farButton.classList.contains('jqx-arrow-down')) {
                    that.$.farButton.classList.add('jqx-arrow-down');
                }
            }

            that._updateThumbPosition();

            if (that.value > that.max || that.value < that.min) {
                that._updateValue(that.value, that.value > that.max ? that.max : that.min);
            }
        }
    }, {
        key: '_selectStartHandler',
        value: function _selectStartHandler(event) {
            var that = this;

            if (that.thumbCapture) {
                event.preventDefault();
            }
        }
    }, {
        key: '_trackDownHandler',
        value: function _trackDownHandler(event) {
            var that = this;

            if (event.target !== that.$.track) {
                return;
            }

            that._trackDownTimer = setInterval(function () {
                that._trackClickHandler(event);
            }, that.clickRepeatDelay);

            event.stopPropagation();
            event.preventDefault();
        }
    }, {
        key: '_trackClickHandler',
        value: function _trackClickHandler(event) {
            var that = this;

            if (that.disabled) {
                return;
            }

            if (that._isThumbDragged) {
                clearInterval(that._trackDownTimer);
                that._trackDownTimer = null;
                return;
            }

            var thumbRect = that.$.thumb.getBoundingClientRect();
            var x = event.pageX - window.pageXOffset;
            var y = event.pageY - window.pageYOffset;

            var value = that.value;

            if (that.orientation === 'horizontal') {
                if (x > (that._isThumbDragged ? that.dragStartX : thumbRect.right)) {
                    that._updateValue(that.value + that.largeStep);
                } else if (x < (that._isThumbDragged ? that.dragStartX : thumbRect.left)) {
                    that._updateValue(that.value - that.largeStep);
                }
            } else {
                if (y > (that._isThumbDragged ? that.dragStartY : thumbRect.bottom)) {
                    that._updateValue(that.value + that.largeStep);
                } else if (y < (that._isThumbDragged ? that.dragStartY : thumbRect.top)) {
                    that._updateValue(that.value - that.largeStep);
                }
            }

            if (that.mechanicalAction === 'switchUntilReleased') {
                that._updateValue(value);
            }
        }
    }, {
        key: '_updateValue',
        value: function _updateValue(oldValue, newValue) {
            var that = this;

            if (arguments.length === 1) {
                newValue = oldValue;
                oldValue = that.value;
            }

            if (newValue === undefined || isNaN(newValue)) {
                newValue = that.min;
            }

            if (newValue > that.max) {
                newValue = that.max;
            }

            if (newValue < that.min) {
                newValue = that.min;
            }

            that.value = newValue;

            if (oldValue !== newValue) {
                that._updateThumbPosition();

                if (that.thumbCapture && that.mechanicalAction === 'switchWhenReleased') {
                    return;
                }

                if (that.onChange) {
                    that.onChange({ 'value': that.value, 'oldValue': oldValue, min: that.min, max: that.max });
                    return;
                }

                that.$.fireEvent('change', { 'value': that.value, 'oldValue': oldValue, min: that.min, max: that.max });
            }
        }
    }, {
        key: '_updateThumbPosition',
        value: function _updateThumbPosition() {
            var that = this;

            var height = that.$.track.offsetHeight;
            var width = that.$.track.offsetWidth;

            var scrollBarSize = that.orientation === 'horizontal' ? width : height;
            var thumbSize = that._calculateThumbSize(scrollBarSize);
            var maxThumbPosition = that.orientation === 'horizontal' ? width - thumbSize : height - thumbSize;

            var thumbPosition = (scrollBarSize - thumbSize) / (that.max - that.min) * (that.value - that.min);

            if (that.rightToLeft && that.orientation === 'horizontal') {
                thumbPosition = (scrollBarSize - thumbSize) / (that.max - that.min) * (that.max - that.value - that.min);
            }

            thumbPosition = Math.min(maxThumbPosition, Math.max(0, thumbPosition));

            if (that.orientation === 'vertical' && that.$.thumb.style.top !== thumbPosition + 'px') {
                that.$.thumb.style.top = thumbPosition + 'px';
            } else if (that.orientation === 'horizontal' && that.$.thumb.style.left !== thumbPosition + 'px') {
                that.$.thumb.style.left = thumbPosition + 'px';
            }
        }
    }], [{
        key: 'properties',

        // ScrollBar's properties.
        get: function get() {
            return {
                'clickRepeatDelay': {
                    type: 'integer',
                    value: 50
                },
                'largeStep': {
                    type: 'integer',
                    value: 100
                },
                'min': {
                    type: 'integer',
                    value: 0
                },
                'max': {
                    type: 'integer',
                    value: 1000
                },
                'mechanicalAction': {
                    value: 'switchWhileDragging',
                    allowedValues: ['switchUntilReleased', 'switchWhenReleased', 'switchWhileDragging'],
                    type: 'string'
                },
                'orientation': {
                    type: 'string',
                    value: 'horizontal',
                    allowedValues: ['horizontal', 'vertical']
                },
                'step': {
                    type: 'integer',
                    value: 10
                },
                'showButtons': {
                    type: 'boolean',
                    value: true,
                    defaultReflectToAttribute: true
                },
                'value': {
                    type: 'integer',
                    value: 0
                }
            };
        }
    }, {
        key: 'styleUrls',
        get: function get() {
            return ['jqx.scrollbar.css'];
        }
    }, {
        key: 'listeners',
        get: function get() {
            return {
                'nearButton.click': '_nearButtonClickHandler',
                'nearButton.mousedown': '_startRepeat',
                'nearButton.mouseup': '_stopRepeat',
                'nearButton.mouseenter': '_updateInBoundsFlag',
                'nearButton.mouseleave': '_updateInBoundsFlag',
                'farButton.click': '_farButtonClickHandler',
                'farButton.mousedown': '_startRepeat',
                'farButton.mouseup': '_stopRepeat',
                'farButton.mouseenter': '_updateInBoundsFlag',
                'farButton.mouseleave': '_updateInBoundsFlag',
                'track.down': '_trackDownHandler',
                'track.click': '_trackClickHandler',
                'thumb.down': '_dragStartHandler',
                'document.move': '_dragHandler',
                'document.up': '_dragEndHandler',
                'up': '_dragEndHandler',
                'document.selectstart': '_selectStartHandler',
                'resize': '_resizeHandler'
            };
        }
    }]);
    return ScrollBar;
}(JQX.BaseElement));