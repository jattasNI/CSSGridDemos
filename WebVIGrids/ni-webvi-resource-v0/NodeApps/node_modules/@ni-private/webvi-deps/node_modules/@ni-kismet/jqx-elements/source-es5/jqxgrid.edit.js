'use strict';

JQX.Utilities.Assign('Grid.Edit', function () {
    function Edit() {
        babelHelpers.classCallCheck(this, Edit);
    } /*index, row, event*/
    //const that = this;

    babelHelpers.createClass(Edit, [{
        key: '_renderCommandBar',
        value: function _renderCommandBar() {
            var that = this;

            //const commandBar = that.$.headerCommandBar;
            var dataSource = that.editing.commandBar.dataSource;

            var renderCommandBar = function renderCommandBar(commandBar) {
                var _loop = function _loop(item) {
                    var properties = dataSource[item];
                    var commandBarItem = document.createElement('div');

                    commandBarItem.classList.add('jqx-grid-command-item');

                    commandBarItem.label = that.localize(item);

                    if (properties.icon) {
                        commandBarItem.innerHTML = '<span class="jqx-grid-icon ' + properties.icon + '"></span>' + '<span class="jqx-grid-label">' + commandBarItem.label + '</span>';
                    }

                    if (!properties.visible) {
                        commandBarItem.classList.add('jqx-hidden');
                    }

                    commandBarItem.command = properties.command;

                    commandBarItem.onclick = function () {
                        var command = commandBarItem.command;

                        that._applyCommand(command, []);
                    };

                    commandBar.appendChild(commandBarItem);
                };

                for (var item in dataSource) {
                    _loop(item);
                }
            };

            if (that.editing.enabled && that.editing.commandBar.visible) {
                that.$.headerCommandBar.innerHTML = '';
                that.$.footerCommandBar.innerHTML = '';

                if (that.editing.commandBar.position !== 'far') {
                    renderCommandBar(that.$.headerCommandBar);
                }

                if (that.editing.commandBar.position !== 'near') {
                    renderCommandBar(that.$.footerCommandBar);
                }
            }
        }
    }, {
        key: 'commandKeyEditCommand',
        value: function commandKeyEditCommand() {
            var that = this;

            that.beginCellEdit();
        }
    }, {
        key: 'commandKeyCancelCommand',
        value: function commandKeyCancelCommand() {
            var that = this;

            that.cancelEdit();
        }
    }, {
        key: 'commandKeyUpdateCommand',
        value: function commandKeyUpdateCommand() {
            var that = this;

            that.endEdit();
        }
    }, {
        key: 'commandColumnMenuCommand',
        value: function commandColumnMenuCommand() {
            var that = this;

            that._openColumnChooserMenu(that._commandColumn);
        }
    }, {
        key: 'commandColumnEditCommand',
        value: function commandColumnEditCommand(row) {
            var that = this;

            that.beginEdit(row.id);
        }
    }, {
        key: 'commandColumnUpdateCommand',
        value: function commandColumnUpdateCommand() /*row*/{
            var that = this;

            that.endEdit();
        }
    }, {
        key: 'commandColumnRowMenuCommand',
        value: function commandColumnRowMenuCommand() /*row*/{
            //const that = this;

        }
    }, {
        key: 'commandColumnCancelCommand',
        value: function commandColumnCancelCommand(row) {
            var that = this;

            if (that.editing.batch) {
                var rowIndex = that._rowsDeleted ? that._rowsDeleted.indexOf(row) : -1;

                if (rowIndex >= 0) {
                    that._rowsDeleted.splice(rowIndex, 1);
                }

                for (var i = 0; i < that.columns.length; i++) {
                    var dataField = that.columns[i].dataField;

                    if (that._cellsUpdatedValues && that._cellsUpdatedValues[row.id + '_' + dataField]) {
                        delete that._cellsUpdatedValues[row.id + '_' + dataField];
                        that._cellsUpdatedValues.length--;
                    }
                }
                that._recycle(false);
            }

            that.cancelEdit();
        }
    }, {
        key: 'commandColumnDeleteCommand',
        value: function commandColumnDeleteCommand(row) {
            var that = this;

            that.deleteRow(row.id);
        }
    }, {
        key: 'deleteRow',
        value: function deleteRow(id, callback) {
            var that = this;

            var row = that.rowById[id];

            if (!row) {
                return false;
            }

            var command = function command(row) {
                if (that.editing.batch === true || that.editing.batch && that.editing.batch.indexOf('delete') >= 0) {
                    that._batchDeleteRow(row);
                } else {
                    var index = that.rows.indexOf(row);

                    that.rows.splice(index, 1);
                }

                if (callback) {
                    callback(row);
                }
            };

            if (that.editing.deleteDialog.enabled) {
                that._openDeleteRowDialog(row, command);
            } else {
                command(row);
            }

            return true;
        }
    }, {
        key: '_renderAddNewRow',
        value: function _renderAddNewRow() {
            var that = this;

            that._frozenNearDefaultRows = [];
            that._frozenFarDefaultRows = [];

            var newNearRow = new JQX.Grid.Row({ data: {}, index: -1, grid: that, freeze: 'near', visible: that.editing.addNewRow.position !== 'far', autoGenerated: true, addNewRow: true });
            var newFarRow = new JQX.Grid.Row({ data: {}, index: -2, grid: that, freeze: 'far', visible: that.editing.addNewRow.position !== 'near', autoGenerated: true, addNewRow: true });

            if (that._newNearRow) {
                var index = that._frozenNearRows.indexOf(that._newNearRow);

                if (index >= 0) {
                    that._frozenNearRows.splice(index, 1);
                }
            }

            if (that._newFarRow) {
                var _index = that._frozenFarRows.indexOf(that._newFarRow);

                if (_index >= 0) {
                    that._frozenFarRows.splice(_index, 1);
                }
            }

            if (that.editing.addNewRow.visible) {
                that._frozenNearDefaultRows.push(newNearRow);
                that._frozenFarDefaultRows.push(newFarRow);

                that._frozenNearRows.push(newNearRow);
                that._frozenFarRows.push(newFarRow);
            }

            that._scrollView.vScrollBar.$.farButton.addEventListener('click', function () {
                if (that.editing.addNewRow.autoCreate) {
                    if (that._scrollView.vScrollBar.value === that._scrollView.vScrollBar.max) {
                        that.addUnboundRow(1);

                        that._scrollView.vScrollBar.value = that._scrollView.vScrollBar.max;
                    }
                }
            });

            that._newNearRow = newNearRow;
            that._newFarRow = newFarRow;
        }
    }, {
        key: 'addUnboundRow',
        value: function addUnboundRow(count, position) {
            var that = this;

            if (undefined === count) {
                count = 1;
            }

            if (undefined === position) {
                position = 'far';
            }

            if (!that._nearRowsAdded) {
                that._nearRowsAdded = [];
                that._farRowsAdded = [];
            }

            if (!that._unboundRows) {
                that._unboundRows = [];
            }

            that.beginUpdate();

            for (var i = 0; i < count; i++) {
                var id = JQX.Utilities.Core.createGUID().replace(/-/ig, '');
                var row = new JQX.Grid.Row({ index: -1, unbound: true, id: id, grid: that });

                that.rowById[row.id] = row;

                if (position === 'far') {
                    that._farRowsAdded.push(row);
                } else {
                    that._nearRowsAdded.push(row);
                }

                that._unboundRows.push(row);
            }

            that.endUpdate();
        }
    }, {
        key: '_insertNewRowAfter',
        value: function _insertNewRowAfter(callback) {
            var that = this;

            return that._insertNewRowBefore(callback, true);
        }
    }, {
        key: '_insertNewRowBefore',
        value: function _insertNewRowBefore(callback, insertAtBottom) {
            var that = this;
            var row = new JQX.Grid.Row({ index: insertAtBottom ? 0 : -1, id: JQX.Utilities.Core.createGUID(), grid: that });

            var command = function (row, insertAtBottom) {
                if (that.editing.batch === true || that.editing.batch && that.editing.batch.indexOf('add') >= 0) {
                    that._batchAddRow(row, insertAtBottom ? that.rows.length : 0);
                } else {
                    row.index = that.rows.length;
                    that._add(row, insertAtBottom ? that.rows.length : 0);
                }

                if (insertAtBottom) {
                    that.scrollTop = that.scrollHeight;
                } else {
                    that.scrollTop = 0;
                }

                if (!that.editing.addDialog.enabled) {
                    setTimeout(function () {
                        if (that.editing.enabled) {
                            that._beginEdit(row);
                        }
                    }, 100);
                }

                if (callback) {
                    callback(row);
                }
            }.bind(this);

            if (that.editing.addDialog.enabled) {
                that._openAddRowDialog(row, command);
            } else {
                command(row, insertAtBottom);
            }

            return true;
        }
    }, {
        key: 'commandBarBatchSaveCommand',
        value: function commandBarBatchSaveCommand() {
            var that = this;

            that._saveBatchEdit();
        }
    }, {
        key: 'commandBarAddRowCommand',
        value: function commandBarAddRowCommand() {
            var that = this;

            that._insertNewRowAfter();
        }
    }, {
        key: 'commandBarAddTopRowCommand',
        value: function commandBarAddTopRowCommand() {
            var that = this;

            that._insertNewRowBefore();
        }
    }, {
        key: 'commandBarDeleteRowCommand',
        value: function commandBarDeleteRowCommand() {
            var that = this;

            var index = 1;
            var rowToDelete = that.rows[that.rows.length - index];

            if (!that._rowsDeleted) {
                that._rowsDeleted = [];
            }

            while (that._rowsDeleted.indexOf(that.rows[that.rows.length - index]) >= 0) {
                index++;
            }

            rowToDelete = that.rows[that.rows.length - index];

            if (rowToDelete) {
                that.commandColumnDeleteCommand(rowToDelete);
            }
        }
    }, {
        key: 'commandBarBatchRevertCommand',
        value: function commandBarBatchRevertCommand() {
            var that = this;

            that.revertBatchEdit();
        }
    }, {
        key: 'beginEdit',
        value: function beginEdit(id, dataField) {
            var that = this;
            var row = that.rowById[id];

            if (row) {
                that._beginEdit(row, dataField);
            }
        }
    }, {
        key: '_beginEdit',
        value: function _beginEdit(row, dataField) {
            var that = this;

            if (!dataField) {
                dataField = that.columns[0].dataField;
            }

            var column = that.columnByDataField[dataField];

            if (!row || !column || column && column.autoGenerated) {
                return false;
            }

            var cell = row.getCell(dataField);

            if (!cell) {
                return false;
            }

            if (that.editing.mode === 'cell') {
                that._beginCellEdit(cell);
            } else if (that.editing.mode === 'row') {
                that._beginRowEdit(row, cell);
            }
        }
    }, {
        key: 'endEdit',
        value: function endEdit() {
            var that = this;

            var result = false;
            var id = null;

            if (that.editing.dialog.enabled && that.editing.dialog.visible) {
                if (that._dialogEdit) {
                    that._dialogEdit.close();
                }
            }

            if (that.editing.editRow) {
                id = that.editing.editRow.id;
                result = that._endRowEdit();
            } else if (that.editing.editCell) {
                id = that.editing.editCell.row.id;
                result = that._endCellEdit();
            }

            that._saveUnboundRows(id);

            return result;
        }
    }, {
        key: '_saveUnboundRows',
        value: function _saveUnboundRows(id) {
            var that = this;

            if (that._unboundRows && that._unboundRows.length > 0 && that.editing.addNewRow.autoSave) {
                var row = that.rowById[id];
                if (!row.unbound) {
                    return;
                }

                var index = that._unboundRows.indexOf(row);

                if (index < 0) {
                    return;
                }

                var length = index + 1;
                that.beginUpdate();

                for (var i = 0; i < length; i++) {
                    var _row = that._unboundRows[i];

                    if (!_row) {
                        continue;
                    }

                    delete that.rowById[_row.id];

                    _row.unbound = false;

                    var requestFocusUpdate = false;

                    if (that._selection.focusedCell && that._selection.focusedCell.row.id === _row.id) {
                        requestFocusUpdate = true;
                    }

                    if (that._nearRowsAdded && that._nearRowsAdded.indexOf(_row) >= 0) {
                        that._nearRowsAdded.splice(that._nearRowsAdded.indexOf(_row), 1);
                        that._add(0, _row.data);

                        if (requestFocusUpdate) {
                            that._selection.focusedCell.row = that.rows[0];
                        }
                    } else if (that._farRowsAdded && that._farRowsAdded.indexOf(_row) >= 0) {
                        that._farRowsAdded.splice(that._farRowsAdded.indexOf(_row), 1);
                        that._add(_row.data);

                        if (requestFocusUpdate) {
                            that._selection.focusedCell.row = that.rows[that.rows.length - 1];
                        }
                    }
                }

                that._unboundRows.splice(0, length);

                that.endUpdate();
            }
        }
    }, {
        key: 'saveBatchEdit',
        value: function saveBatchEdit() {
            var that = this;

            that._saveBatchEdit();
        }
    }, {
        key: 'revertBatchEdit',
        value: function revertBatchEdit() {
            var that = this;

            that._clearBatchEdit(true);
        }
    }, {
        key: '_endCellEdit',
        value: function _endCellEdit(editCell) {
            var that = this;
            var cell = editCell || that.editing.editCell;

            if (!cell || cell && !cell.isEditing) {
                return null;
            }

            var value = that._getEditorValue(cell);

            if (value === 'invalid value') {
                cell.setAttribute('error', '');

                return false;
            }

            var id = that._getEditorId(cell);
            var editor = that._cellEditors[id];

            editor.detach();

            cell.element.removeAttribute('editor');
            cell.element.removeAttribute('error');
            cell.isEditing = false;
            cell.element.content.innerHTML = '';

            var refresh = function refresh() {
                if (!that.editing.editRow) {
                    that._recycle(false);
                }
            };

            var areEqual = function areEqual(value, cellValue) {
                if (cell.column.dataType === 'date') {
                    return value.valueOf() === cellValue.valueOf();
                }

                return value === cellValue;
            };

            var modifiedValue = that._cellsUpdatedValues ? that._cellsUpdatedValues[cell.row.id + '_' + cell.column.dataField] : undefined;
            var cellValue = modifiedValue !== undefined ? modifiedValue : cell.value;

            if (!areEqual(value, cellValue)) {
                that.editing.editCell = null;

                if (!that.editing.editRow) {
                    that.editing.isEditing = false;
                }

                if (that.editing.batch === true || that.editing.batch && that.editing.batch.indexOf('update') >= 0) {
                    that._batchUpdateCell(cell.row, cell.column, value, cell.value);
                    refresh();
                } else {
                    cell._updating = true;
                    cell.value = value;
                    cell._updating = false;
                    refresh();
                }
            } else {
                that.editing.editCell = null;

                if (!that.editing.editRow) {
                    that.editing.isEditing = false;
                    refresh();
                }
            }

            if (that.editing.commandColumn.visible && !that.editing.commandColumn.width && that.editing.mode === 'cell') {
                that.refresh();
            }

            that.focus();

            return true;
        }
    }, {
        key: 'cancelEdit',
        value: function cancelEdit() {
            var that = this;

            if (that.editing.editRow) {
                var cells = that.editing.editRow.cells;

                for (var i = 0; i < cells.length; i++) {
                    var cell = cells[i];
                    var element = cell.element;

                    if (element) {
                        element.removeAttribute('editor');
                        element.removeAttribute('error');
                        element.content.innerHTML = '';
                    }

                    cell.isEditing = false;
                }

                that.editing.editRow = null;
            } else if (that.editing.editCell) {
                that.editing.editCell.element.removeAttribute('editor');
                that.editing.editCell.element.removeAttribute('error');
                that.editing.editCell.element.content.innerHTML = '';
                that.editing.editCell.isEditing = false;
                that.editing.editCell = null;
            }

            if (that.editing.dialog.visible && that.editing.dialog.enabled) {
                that._dialogEdit.close();
            }

            that.editing.isEditing = false;
            that._recycle(false);

            if (that.editing.commandColumn.visible) {
                that.refresh();
            }

            that.focus();
        }
    }, {
        key: '_endRowEdit',
        value: function _endRowEdit() {
            var that = this;

            var row = that.editing.editRow;

            if (!row) {
                return false;
            }

            var canEndEdit = true;
            var cells = row.cells;

            for (var i = 0; i < cells.length; i++) {
                var cell = cells[i];
                var value = that._getEditorValue(cell);

                if (value === 'invalid value') {
                    cell.setAttribute('error', '');
                    canEndEdit = false;
                }
            }

            if (canEndEdit) {
                for (var _i = 0; _i < cells.length; _i++) {
                    var _cell = cells[_i];

                    that._endCellEdit(_cell);
                }

                that.editing.isEditing = false;
                that.editing.editRow = null;

                if (that.editing.commandColumn.visible && !that.editing.commandColumn.width) {
                    that.refresh();
                } else {
                    that._recycle(false);
                }

                return true;
            }

            that.focus();

            return false;
        }
    }, {
        key: '_batchDeleteRow',
        value: function _batchDeleteRow(row) {
            var that = this;

            if (!that._rowsDeleted) {
                that._rowsDeleted = [];
            }

            that._rowsDeleted.push(row);
            that._recycle(false);
        }
    }, {
        key: '_batchAddRow',
        value: function _batchAddRow(row, index) {
            var that = this;

            if (!that._rowsAdded) {
                that._rowsAdded = [];
            }

            that._rowsAdded.push(row.id);
            that.rowById[row.id] = row;

            row.index = that.rows.length + (that._rowsAdded ? that._rowsAdded.length : 0);

            if (index === 0) {
                that._nearRowsAdded.splice(0, 0, row);
            } else {
                that._farRowsAdded.push(row);
            }

            var fullRefresh = that.isInitialized && that._rowElements && that._rowElements.length < that.rows.length + that._rowsAdded.length;

            if (fullRefresh) {
                that._initializeRowElements();
            }

            that.refresh();
        }
    }, {
        key: '_batchUpdateCell',
        value: function _batchUpdateCell(row, column, value, originalValue) {
            var that = this;

            if (!that._cellsUpdatedValues) {
                that._cellsUpdatedValues = [];
            }

            var areEqual = function areEqual(value, cellValue) {
                if (column.dataType === 'date') {
                    return value.valueOf() === cellValue.valueOf();
                }

                return value === cellValue;
            };

            if (areEqual(value, originalValue)) {
                delete that._cellsUpdatedValues[row.id + '_' + column.dataField];
            } else {
                that._cellsUpdatedValues[row.id + '_' + column.dataField] = value;
            }

            that._cellsUpdatedValues.length++;
        }
    }, {
        key: 'getBatchEditChanges',
        value: function getBatchEditChanges() {
            var that = this;
            var updatedCells = [];
            var deletedRows = [];
            var addedRows = [];

            for (var key in that._cellsUpdatedValues) {
                var value = that._cellsUpdatedValues[key];
                var rowId = key.substring(0, key.indexOf('_'));
                var columnDataField = key.substring(key.indexOf('_') + 1);

                var row = that.rowById[rowId];
                var cell = row.getCell(columnDataField);

                updatedCells.push({ id: rowId, dataField: columnDataField, oldValue: cell.value, newValue: value });
            }

            if (that._rowsDeleted && that._rowsDeleted.length > 0) {
                for (var i = 0; i < that._rowsDeleted.length; i++) {
                    var _row2 = that._rowsDeleted[i];

                    deletedRows.push({ id: _row2.id, data: _row2 });
                }
            }

            if (that._rowsAdded && that._rowsAdded.length > 0) {
                for (var _i2 = 0; _i2 < that._rowsAdded.length; _i2++) {
                    var _row3 = that._rowsAdded[_i2];

                    addedRows.push({ id: _row3.id, data: _row3 });
                }
            }

            return {
                updated: updatedCells,
                deleted: deletedRows,
                added: addedRows
            };
        }
    }, {
        key: '_saveBatchEdit',
        value: function _saveBatchEdit() {
            var that = this;

            for (var key in that._cellsUpdatedValues) {
                var value = that._cellsUpdatedValues[key];
                var rowId = key.substring(0, key.indexOf('_'));
                var columnDataField = key.substring(key.indexOf('_') + 1);

                var row = that.rowById[rowId];
                var cell = row.getCell(columnDataField);

                cell._updating = true;
                cell.value = value;
                cell._updating = false;
            }

            var stopUpdates = that._rowsDeleted && that._rowsDeleted.length > 0 || that._rowsAdded && that._rowsAdded.length > 0;

            if (stopUpdates) {
                that.beginUpdate();
            }

            if (that._rowsAdded && that._rowsAdded.length > 0) {
                for (var i in that._rowsAdded) {
                    var id = that._rowsAdded[i];
                    var _row4 = that.rowById[id];

                    if (!_row4) {
                        continue;
                    }

                    if (that._nearRowsAdded.indexOf(_row4) >= 0) {
                        that.rows.splice(0, 0, _row4);
                    } else if (that._farRowsAdded.indexOf(_row4) >= 0) {
                        that.rows.push(_row4);
                    }
                }
            }

            if (that._rowsDeleted && that._rowsDeleted.length > 0) {
                for (var _i3 = 0; _i3 < that._rowsDeleted.length; _i3++) {
                    var _row5 = that._rowsDeleted[_i3];

                    var index = that.rows.indexOf(_row5);

                    if (index < 0) {
                        continue;
                    }

                    that.rows.splice(index, 1);
                }
            }

            if (stopUpdates) {
                that.endUpdate();
            }

            that._clearBatchEdit(false);
        }
    }, {
        key: '_clearBatchEdit',
        value: function _clearBatchEdit() /*revertNewRows*/{
            var that = this;

            var requiresRefresh = false;

            if (that._rowsAdded && that._rowsAdded.length > 0) {
                requiresRefresh = true;
            }

            that._cellsUpdatedValues = [];
            that._rowsAdded = [];
            that._rowsDeleted = [];
            that._nearRowsAdded = [];
            that._farRowsAdded = [];

            if (requiresRefresh) {
                that.refresh();
            } else {
                that._recycle(false);
            }
        }
    }, {
        key: '_getEditorId',
        value: function _getEditorId(cell) {
            if (cell.editor !== cell.column.editor) {
                return cell.editor.template + '_' + cell.column.dataField + '_' + cell.row.id;
            }

            return cell.editor.template + '_' + cell.column.dataField;
        }
    }, {
        key: '_applyCommand',
        value: function _applyCommand(command, params) {
            var that = this;

            if (!params) {
                params = [];
            }

            var onApplyCommand = function onApplyCommand() {
                if (typeof command === 'function') {
                    command.apply(that, params);
                } else if (that[command]) {
                    that[command].apply(that, params);
                } else if (JQX[command]) {
                    JQX[command].apply(that, params);
                } else if (window[command]) {
                    window[command].apply(that, params);
                }
            };

            if (that.onCommand) {
                if (!params) {
                    params = [];
                }

                if (!params[1]) {
                    params[1] = null;
                }

                var args = { name: command, command: onApplyCommand, details: params[0], event: params[1], handled: false };

                setTimeout(function () {
                    that.onCommand.apply(that, [args]);

                    if (args.handled) {
                        return;
                    }

                    onApplyCommand();
                }, 100);
            } else {
                onApplyCommand();
            }
        }
    }, {
        key: '_getCommandColumnCommandsTemplate',
        value: function _getCommandColumnCommandsTemplate() {
            var that = this;

            var dataSource = that.editing.commandColumn.dataSource;

            var showLabel = that.editing.commandColumn.displayMode !== 'icon';
            var showIcon = that.editing.commandColumn.displayMode !== 'label';

            var template = '';

            for (var item in dataSource) {
                var _properties = dataSource[item];

                var commandColumnItem = '<div';
                var isCommandSet = false;

                if (item === 'commandColumnMenu') {
                    continue;
                }

                if (!isCommandSet) {
                    commandColumnItem += ' item="' + item + '" command="' + _properties.command + '"' + ' class="jqx-grid-command-item">';
                    isCommandSet = true;
                }

                var label = _properties.label === '{{messages}}' ? that.localize(item) : _properties.label;

                if (showIcon && showLabel) {
                    commandColumnItem += '<span class="jqx-grid-icon ' + _properties.icon + '"></span>';
                    commandColumnItem += '<span class="jqx-grid-label">' + label + '</span>';
                } else if (showIcon && !showLabel) {
                    commandColumnItem += '<span class="jqx-grid-icon ' + _properties.icon + '"></span>';
                } else if (showLabel && !showIcon) {
                    commandColumnItem += '<span class="jqx-grid-label">' + label + '</span>';
                }

                commandColumnItem += '</div>';

                template += commandColumnItem;
            }

            return template;
        }
    }, {
        key: '_updateCommandColumnCommandsVisibility',
        value: function _updateCommandColumnCommandsVisibility(element, row) {
            var that = this;
            var commands = element.children;
            //const commandItems = [];
            var dataSource = that.editing.commandColumn.dataSource;

            for (var i = 0; i < commands.length; i++) {
                var command = commands[i];
                var item = command.getAttribute('item');
                var visible = dataSource[item].visible;

                if (visible === true) {
                    command.classList.remove('jqx-hidden');
                } else if (visible === false) {
                    command.classList.add('jqx-hidden');
                } else if (visible === 'auto') {
                    if (!that.editing.dialog.enabled && (that.editing.editRow === row || that.editing.editCell && that.editing.editCell.row === row)) {
                        if (item === 'commandColumnEdit') {
                            command.classList.add('jqx-hidden');
                        } else if (item === 'commandColumnUpdate' || item === 'commandColumnCancel') {
                            commands[i].classList.remove('jqx-hidden');
                        }
                    } else {
                        if (item === 'commandColumnEdit') {
                            command.classList.remove('jqx-hidden');
                        } else if (item === 'commandColumnUpdate' || item === 'commandColumnCancel') {
                            commands[i].classList.add('jqx-hidden');
                        }
                    }
                }
            }
        }
    }, {
        key: '_handleEditKeyDown',
        value: function _handleEditKeyDown(event) {
            var that = this;
            var key = event.key;
            var dataSource = that.editing.commandKeys;

            if (that.editing.dialog.enabled) {
                return;
            }

            for (var item in dataSource) {
                var _properties2 = dataSource[item];
                var keys = _properties2.key.replace(/ /ig, '').split('|');

                if (keys.indexOf(key) >= 0) {
                    that._applyCommand(_properties2.command);
                    break;
                }
            }
        }
    }, {
        key: '_getCustomCellEditor',
        value: function _getCustomCellEditor(cell) {
            var that = this;

            cell.editor.selector = cell.editor.template;
            cell.editor.template = 'custom';

            var id = that._getEditorId(cell);

            if (!that._cellEditors[id]) {
                var element = document.createElement('div');

                that._applyCellEditorUserSettings(element, cell);

                element.classList.add('jqx-grid-cell-editor');

                var command = function command(event) {
                    //let key = event.key;

                    if (event.type === 'keydown') {
                        that._handleEditKeyDown(event);

                        return;
                    }
                };

                var focus = function focus() {
                    var element = cell.editor.instance.element.firstElementChild;

                    if (cell.editor.focus) {
                        setTimeout(function () {
                            cell.editor.focus.apply(cell.editor.instance.element, []);
                        }, 50);
                    } else {
                        setTimeout(function () {
                            element.focus();
                        }, 50);
                    }
                };

                var blur = function blur(event) {
                    var element = cell.editor.instance.element.firstElementChild;

                    if (cell.editor.blur) {
                        cell.editor.blur.apply(cell.editor.instance.element, [event]);
                    } else {
                        element.blur();
                    }
                };

                var setValue = function setValue(value) {
                    var element = cell.editor.instance.element.firstElementChild;

                    if (cell.editor.setValue) {
                        cell.editor.setValue.apply(cell.editor.instance.element, [value]);
                    } else {
                        if (element.innerHTML.indexOf('{{') >= 0) {
                            var html = element.innerHTML.replace(/{{value}}/ig, value).replace(/{{id}}/ig, cell.row.id);

                            element.innerHTML = html;
                        }

                        element.value = value;

                        if (value instanceof Date) {
                            element.value = value.toISOString().split('T')[0];
                        }

                        cell.editor.instance.element.value = element.value;
                    }
                };

                var getValue = function getValue() {
                    var element = cell.editor.instance.element.firstElementChild;

                    if (cell.editor.getValue) {
                        return cell.editor.getValue.apply(cell.editor.instance.element, []);
                    }

                    var value = element.value;

                    return value || '';
                };

                var detach = function detach() {

                    element.removeEventListener('keydown', command);

                    if (cell.editor.detach) {
                        cell.editor.detach.apply(element, []);
                    }
                };

                var attach = function attach() {
                    element.addEventListener('keydown', command);

                    if (cell.editor.attach) {
                        cell.editor.attach.apply(element, []);
                    }
                };

                var template = null;

                if (cell.editor.selector.startsWith('#') || cell.editor.selector.startsWith('.')) {
                    template = document.querySelector(cell.editor.selector);
                }

                if (template) {
                    element.appendChild(template.content.cloneNode(true).firstElementChild);
                } else {
                    var htmlToElement = function htmlToElement(html) {
                        var template = document.createElement('template');

                        html = html.trim(); // Never return a text node of whitespace as the result
                        template.innerHTML = html;
                        return template.content.firstChild;
                    };

                    var templateElement = htmlToElement(cell.editor.selector);

                    if (templateElement) {
                        element.appendChild(templateElement);
                    }
                }

                that._cellEditors[id] = { element: element, focus: focus, blur: blur, getValue: getValue, setValue: setValue, attach: attach, detach: detach };
            }

            return that._cellEditors[id];
        }
    }, {
        key: '_getTextAreaCellEditor',
        value: function _getTextAreaCellEditor(cell) {
            var that = this;
            var id = that._getEditorId(cell);

            var element = document.createElement('div');
            var textarea = document.createElement('textarea');
            var expander = document.createElement('div');

            that._applyCellEditorUserSettings(element, cell);

            textarea.classList.add('jqx-input');
            element.classList.add('jqx-grid-cell-editor');
            element.classList.add('jqx-grid-text-area-cell-editor');
            expander.classList.add('nav');

            expander.classList.add('jqx-icon-resize-full', 'jqx-grid-icon');

            var command = function command(event) {
                var key = event.key;

                if (event.type === 'keydown') {
                    that._handleEditKeyDown(event);

                    if (event.shiftKey && key === ' ') {
                        expander.click();
                        event.preventDefault();
                    }
                    return;
                }
            };

            expander.onclick = function () {
                var textAreaEditorDialog = document.createElement('div');
                var closeButton = document.createElement('span');
                var popupTextArea = document.createElement('textarea');
                var element = cell.editor.instance.element;
                var textAreaContainer = document.createElement('div');
                var scrollBar = document.createElement('jqx-scroll-bar');

                scrollBar.orientation = 'vertical';

                textAreaEditorDialog.setAttribute('theme', that.theme);
                textAreaContainer.appendChild(popupTextArea);

                textAreaContainer.classList.add('jqx-grid-text-area-container');
                textAreaContainer.appendChild(scrollBar);

                popupTextArea.value = textarea.value;
                popupTextArea.classList.add('jqx-input');

                expander.textAreaEditorDialog = textAreaEditorDialog;
                expander.popupTextArea = popupTextArea;

                closeButton.classList.add('close-button');
                closeButton.classList.add('jqx-grid-icon');
                closeButton.classList.add('jqx-icon-cancel-circled');

                //let tempValueLength = 0;

                var updateScrollBar = function updateScrollBar() {
                    scrollBar.value = popupTextArea.scrollTop;
                    scrollBar.max = popupTextArea.scrollHeight - popupTextArea.offsetHeight;

                    scrollBar.onChange = null;

                    if (popupTextArea.offsetHeight >= popupTextArea.scrollHeight) {
                        scrollBar.classList.add('jqx-hidden');
                    } else {
                        scrollBar.classList.remove('jqx-hidden');
                    }

                    scrollBar.onChange = function () {
                        popupTextArea.scrollTop = scrollBar.value;
                    };
                };

                popupTextArea.onscroll = function () /*event*/{
                    updateScrollBar();
                };

                popupTextArea.onkeydown = function (event) {
                    if (event.key === 'Escape') {
                        textAreaEditorDialog.parentNode.removeChild(textAreaEditorDialog);
                    }

                    if (event.key === 'Enter' && event.shiftKey) {
                        closeButton.click();
                    }

                    //tempValueLength = popupTextArea.value.length;
                };

                closeButton.onclick = function () {
                    expander.textAreaEditorDialog.parentNode.removeChild(expander.textAreaEditorDialog);
                    setTimeout(function () {
                        textarea.value = popupTextArea.value;
                        textarea.select();
                    }, 50);
                };

                textAreaEditorDialog.classList.add('jqx-grid-text-area-dialog');

                textAreaEditorDialog.appendChild(textAreaContainer);
                textAreaEditorDialog.appendChild(closeButton);

                document.body.appendChild(textAreaEditorDialog);

                setTimeout(function () {
                    popupTextArea.select();
                    updateScrollBar();
                }, 50);

                updateScrollBar();
                textAreaEditorDialog.style.top = that._offsetTop(element) + 'px';
                textAreaEditorDialog.style.left = that._offsetLeft(element) + 'px';
                textAreaEditorDialog.style.width = element.offsetWidth + 'px';
            };

            element.appendChild(textarea);
            element.appendChild(expander);

            var getValue = function getValue() {
                var value = textarea.value;

                if (expander.textAreaEditorDialog && expander.textAreaEditorDialog.parentNode) {
                    textarea.value = expander.popupTextArea.value;

                    return textarea.value;
                }

                return value;
            };

            var setValue = function setValue(value) {
                textarea.value = value;
            };

            var focus = function focus() {
                setTimeout(function () {
                    textarea.select();
                }, 50);
            };

            var blur = function blur() {};

            var attach = function attach() {
                textarea.addEventListener('keydown', command);
            };

            var detach = function detach() {
                textarea.removeEventListener('keydown', command);

                if (expander.textAreaEditorDialog && expander.textAreaEditorDialog.parentNode) {
                    textarea.value = expander.popupTextArea.value;
                    expander.textAreaEditorDialog.parentNode.removeChild(expander.textAreaEditorDialog);
                }
            };

            that._cellEditors[id] = { element: element, focus: focus, blur: blur, setValue: setValue, getValue: getValue, attach: attach, detach: detach };

            return that._cellEditors[id];
        }
    }, {
        key: '_getInputCellEditor',
        value: function _getInputCellEditor(cell) {
            var that = this;
            var id = that._getEditorId(cell);

            if (!that._cellEditors[id]) {
                var element = document.createElement('input');

                that._applyCellEditorUserSettings(element, cell);

                element.classList.add('jqx-input');
                element.classList.add('jqx-grid-cell-editor');
                element.classList.add('jqx-grid-input-cell-editor');

                var command = function command(event) {
                    //let key = event.key;

                    if (event.type === 'keydown') {
                        if (cell.column.dataType === 'number' || cell.column.dataType === 'int' || cell.column.dataType === 'float') {
                            if (!event.key.match(/[0-9]/) && event.key !== '-' && event.key.length === 1) {
                                event.preventDefault();
                                event.stopPropagation();
                                return;
                            }
                        }

                        that._handleEditKeyDown(event);

                        return;
                    }
                };

                var focus = function focus() {
                    setTimeout(function () {
                        element.select();
                    }, 50);
                };

                var blur = function blur() {};

                var setValue = function setValue(value) {
                    if (cell.column.dataType === 'number' || cell.column.dataType === 'int' || cell.column.dataType === 'float') {
                        if (value === '') {
                            return;
                        }

                        if (value && !value.toString().match(/[0-9]/) && value !== '-') {
                            return;
                        }
                    }

                    element.value = value;
                };

                var getValue = function getValue() {
                    return element.value;
                };

                var detach = function detach() {
                    element.removeEventListener('keydown', command);
                };

                var attach = function attach() {
                    element.addEventListener('keydown', command);
                };

                that._cellEditors[id] = { element: element, focus: focus, blur: blur, getValue: getValue, setValue: setValue, attach: attach, detach: detach };
            }

            return that._cellEditors[id];
        }
    }, {
        key: '_applyCellEditorUserSettings',
        value: function _applyCellEditorUserSettings(editor, cell) {
            //const that = this;

            for (var property in cell.editor) {
                if (property === 'template') {
                    continue;
                }

                if (property === 'list') {
                    editor.setAttribute(property, cell.editor[property]);
                    continue;
                }

                editor[property] = cell.editor[property];
            }
        }
    }, {
        key: '_getAutoCompleteCellEditor',
        value: function _getAutoCompleteCellEditor(cell) {
            var that = this;
            var id = that._getEditorId(cell);

            if (!that._cellEditors[id]) {
                var element = document.createElement('jqx-input');

                that._applyCellEditorUserSettings(element, cell);

                var command = function command(event) {
                    //let key = event.key;

                    if (element.opened) {
                        return;
                    }

                    if (event.type === 'keydown') {
                        that._handleEditKeyDown(event);
                        return;
                    }
                };

                element.classList.add('jqx-grid-cell-editor');
                element.classList.add('jqx-grid-auto-complete-cell-editor');

                var focus = function focus() {
                    setTimeout(function () {
                        if (element && element.select) {
                            element.select();
                        }
                    }, 50);
                };

                var setValue = function setValue(value) {
                    element.value = value;
                };

                var getValue = function getValue() {
                    return element.value;
                };

                var detach = function detach() {
                    if (element && element.close) {
                        element.value = '';
                        element.close();
                        element.removeEventListener('keydown', command);
                    }
                };

                var blur = function blur() {};

                var attach = function attach() {
                    element.addEventListener('keydown', command);
                };

                that._cellEditors[id] = { element: element, focus: focus, blur: blur, setValue: setValue, getValue: getValue, attach: attach, detach: detach };
            }

            var rows = that.getVisibleRows();
            var items = [];

            for (var i = 0; i < rows.length; i++) {
                var item = that.dataSource[rows[i].index];

                if (item) {
                    item = item[cell.column.dataField];

                    if (items.indexOf(item) === -1) {
                        items.push(item);
                    }
                }
            }

            that._cellEditors[id].element.dataSource = items;

            return that._cellEditors[id];
        }
    }, {
        key: '_getDateTimePickerCellEditor',
        value: function _getDateTimePickerCellEditor(cell) {
            var that = this;
            var id = that._getEditorId(cell);

            if (!that._cellEditors[id]) {
                var element = document.createElement('jqx-date-time-picker');

                element.calendarButton = true;
                element.dropDownAppendTo = 'body';
                element.autoClose = true;
                element.dropDownDisplayMode = 'calendar';

                that._applyCellEditorUserSettings(element, cell);

                var command = function command(event) {
                    //let key = event.key;

                    if (element.opened) {
                        return;
                    }

                    if (event.type === 'keydown') {
                        that._handleEditKeyDown(event);
                        return;
                    }
                };

                element.classList.add('jqx-grid-cell-editor');
                element.classList.add('jqx-grid-date-time-picker-cell-editor');

                var focus = function focus() {
                    setTimeout(function () {
                        element.select();
                    }, 50);
                };

                var setValue = function setValue(value) {
                    element.value = value;
                };

                var getValue = function getValue() {
                    return element.value;
                };

                var detach = function detach() {
                    element.value = '';
                    element.close();
                    element.removeEventListener('keydown', command);
                };

                var blur = function blur(event) {
                    var dropDownId = element.getAttribute('aria-controls');

                    if (dropDownId && element.opened) {
                        var boundingRect = that.getBoundingRect(document.getElementById(dropDownId));

                        if (!(event.pageX < boundingRect.left || event.pageX > boundingRect.right || event.pageY < boundingRect.top || event.pageY > boundingRect.bottom)) {
                            event.preventDefault();
                        }
                    }
                };

                //const cancel = function () {
                //    return false;
                //}

                var attach = function attach() {
                    element.addEventListener('keydown', command);
                };

                that._cellEditors[id] = { element: element, focus: focus, blur: blur, setValue: setValue, getValue: getValue, attach: attach, detach: detach };
            }

            return that._cellEditors[id];
        }
    }, {
        key: '_getNumberInputCellEditor',
        value: function _getNumberInputCellEditor(cell) {
            var that = this;
            var id = that._getEditorId(cell);

            if (!that._cellEditors[id]) {
                var element = document.createElement('div');
                var numberInput = document.createElement('input');
                var spinner = document.createElement('div');
                var spinnerUp = document.createElement('div');
                var spinnerDown = document.createElement('div');

                that._applyCellEditorUserSettings(element, cell);

                spinnerUp.tabIndex = spinnerDown.tabIndex = 0;
                numberInput.classList.add('jqx-input');
                element.classList.add('jqx-grid-cell-editor');
                element.classList.add('jqx-grid-number-input-cell-editor');
                spinner.classList.add('nav');
                spinnerUp.classList.add('up');
                spinnerDown.classList.add('down');

                var command = function command(event) {
                    //let key = event.key;

                    if (event.type === 'keydown') {
                        that._handleEditKeyDown(event);
                        return;
                    }
                };

                numberInput.type = 'number';

                spinner.appendChild(spinnerUp);
                spinner.appendChild(spinnerDown);
                element.appendChild(numberInput);
                element.appendChild(spinner);

                var getValue = function getValue() {
                    var value = parseFloat(numberInput.value);

                    if (isNaN(value) || value === Infinity || value === -Infinity) {
                        return 0;
                    }

                    return value;
                };

                var setValue = function setValue(value) {
                    numberInput.value = value;
                };

                var focus = function focus() {
                    setTimeout(function () {
                        numberInput.select();
                    }, 50);
                };

                var blur = function blur() {};

                var attach = function attach() {
                    numberInput.addEventListener('keydown', command);
                    spinnerUp.onkeydown = command;
                    spinnerDown.onkeydown = command;

                    spinnerUp.onclick = function () {
                        var oldValue = parseFloat(numberInput.value);

                        if (oldValue < numberInput.max || numberInput.max === '') {
                            numberInput.value = oldValue + 1;
                        }
                    };

                    spinnerDown.onclick = function () {
                        var oldValue = parseFloat(numberInput.value);

                        if (oldValue > numberInput.min || numberInput.min === '') {
                            numberInput.value = oldValue - 1;
                        }
                    };
                };

                var detach = function detach() {
                    numberInput.removeEventListener('keydown', command);

                    spinnerUp.onclick = spinnerDown.onclick = null;
                    spinnerUp.onkeydown = spinnerDown.onkeydown = null;
                };

                that._cellEditors[id] = { element: element, focus: focus, blur: blur, setValue: setValue, getValue: getValue, attach: attach, detach: detach };
            }

            return that._cellEditors[id];
        }
    }, {
        key: '_getCheckBoxCellEditor',
        value: function _getCheckBoxCellEditor(cell) {
            var that = this;
            var id = that._getEditorId(cell);

            if (!that._cellEditors[id]) {
                var element = document.createElement('div');

                element.classList.add('jqx-input');
                element.classList.add('jqx-grid-cell-editor');
                element.classList.add('jqx-grid-check-box-cell-editor');
                element.tabIndex = 0;

                var command = function command() /*event*/{
                    if (element.value !== true && element.value !== false && element.value !== null) {
                        element.value = false;
                    }

                    if (element.value === null) {
                        element.value = false;
                    } else {
                        element.value = !element.value;
                    }

                    if (false === element.value) {
                        element.removeAttribute('checked');
                    } else {
                        element.setAttribute('checked', element.value ? '' : 'indeterminate');
                    }
                };

                var keyDownHandler = function keyDownHandler(event) {
                    that._handleEditKeyDown(event);
                };

                var setValue = function setValue(value) {
                    element.value = value;

                    if (false === element.value) {
                        element.removeAttribute('checked');
                    } else {
                        element.setAttribute('checked', element.value ? '' : 'indeterminate');
                    }
                };

                var focus = function focus() {
                    element.focus();

                    setTimeout(function () {
                        element.focus();
                    }, 25);
                };

                var getValue = function getValue() {
                    return element.value;
                };

                var detach = function detach() {
                    element.value = false;
                    element.removeEventListener('click', command);
                    element.removeEventListener('keydown', keyDownHandler);
                };

                var blur = function blur() {};

                var attach = function attach() {
                    element.addEventListener('keydown', keyDownHandler);
                    element.addEventListener('click', command);
                };

                that._cellEditors[id] = {
                    getValue: getValue,
                    setValue: setValue,
                    focus: focus,
                    blur: blur,
                    element: element,
                    detach: detach,
                    attach: attach
                };
            }

            return that._cellEditors[id];
        }
    }, {
        key: '_getEditorValue',
        value: function _getEditorValue(cell) {
            var that = this;

            var id = that._getEditorId(cell);

            if (!that._cellEditors) {
                return undefined;
            }

            var editor = that._cellEditors[id];

            if (!editor) {
                return undefined;
            }

            var parseValue = function parseValue(value) {
                switch (cell.column.dataType) {
                    case 'float':
                    case 'int':
                    case 'number':
                        value = cell.column.dataType === 'int' ? parseInt(value) : parseFloat(value);

                        if (isNaN(value)) {
                            value = 0;
                        }
                        break;
                    case 'bool':
                    case 'boolean':
                        if (value === 'true' || value === '1') {
                            value = true;
                        }

                        if (value === 'false' || value === '0') {
                            value = false;
                        }
                        break;
                    case 'date':
                        value = new JQX.Utilities.DateTime(value);

                        value = value.toDate();
                        break;
                    case 'dateTime':
                        value = new JQX.Utilities.DateTime(value);

                        break;
                }

                return value;
            };

            var value = null;

            switch (cell.editor.template) {
                case 'input':
                case 'autoComplete':
                case 'numberInput':
                case 'deteTimePicker':
                case 'checkBox':
                    {
                        try {
                            value = parseValue(editor.getValue());
                        } catch (error) {
                            value = cell.value;
                        }

                        if (cell.editor.getValue) {
                            var customValue = cell.editor.getValue(cell, value);

                            if (customValue !== undefined) {
                                value = customValue;
                            }
                        }

                        break;
                    }
                default:
                    {
                        value = parseValue(editor.getValue());
                    }
            }

            var isValid = true;

            if (cell.column.validator) {
                isValid = cell.column.validator.evaluate(value);
            }

            if (isValid) {
                return value;
            }

            return 'invalid value';
        }
    }, {
        key: '_beginRowEdit',
        value: function _beginRowEdit(row, clickedCell /*, event*/) {
            var that = this;

            if (row === that.editing.editRow) {
                return false;
            }

            if (that.editing.editRow) {
                var canEndEdit = that.endEdit();

                if (!canEndEdit) {
                    return false;
                }
            }

            var cells = row.cells;

            that.editing.editRow = row;

            if (that.editing.commandColumn.visible) {
                that.editing.isEditing = false;

                that.refresh();

                that.editing.isEditing = true;
            }

            row.isEditing = true;

            var isFirstCell = false;

            for (var i = 0; i < cells.length; i++) {
                var cell = cells[i];

                var result = that._beginCellEdit(cell);

                if (!clickedCell) {
                    if (result && !isFirstCell) {
                        isFirstCell = true;

                        cell.editor.instance.focus();
                    }
                } else if (cell === clickedCell) {
                    cell.editor.instance.focus();
                }

                if (that.editing.commandColumn.visible && cell.column.commandColumn) {
                    cell.render();
                }
            }

            return true;
        }
    }, {
        key: '_createDialog',
        value: function _createDialog() /*top, left*/{
            var that = this;
            var dialog = document.createElement('div');

            dialog.setAttribute('animation', 'none');
            dialog.classList.add('jqx-window', 'jqx-grid-dialog');
            dialog.style.width = that.editing.dialog.width;
            dialog.style.height = that.editing.dialog.height;
            dialog.style.left = '';
            dialog.style.top = '';

            dialog.innerHTML = '<div class="jqx-container">\n                        <div id="headerSection" class="jqx-header-section">\n                            <div class="jqx-header"></div>\n                            <div class="jqx-buttons-container">\n                                <jqx-button unfocusable class="jqx-close-button"></jqx-button>\n                            </div>\n                        </div>\n                        <div class="jqx-content"><div></div></div>\n                        <div class ="jqx-footer">\n                            <div class ="jqx-stack-layout right spacing">\n                                <jqx-button class ="jqx-confirm-button item primary">Ok</jqx-button>\n                                <jqx-button class ="jqx-cancel-button item">Cancel</jqx-button>\n                            </div>\n                        </div>\n                    </div>';

            dialog.content = dialog.querySelector('.jqx-content').firstChild;
            dialog.footer = dialog.querySelector('.jqx-footer');
            dialog.header = dialog.querySelector('.jqx-header');
            dialog.btnConfirm = dialog.querySelector('.jqx-confirm-button');
            dialog.btnCancel = dialog.querySelector('.jqx-cancel-button');
            dialog.btnClose = dialog.querySelector('.jqx-close-button');
            var overlay = document.createElement('div');

            overlay.classList.add('jqx-grid-dialog-overlay');

            overlay.onclick = function () {
                return;
            };

            dialog.overlay = overlay;

            dialog.remove = function () {
                if (dialog.parentNode) {
                    dialog.parentNode.removeChild(dialog);
                }
            };

            dialog.close = function () {
                dialog.classList.remove('open');

                dialog.addEventListener('transitionend', dialog.remove);
                dialog.addEventListener('transitioncancel', dialog.remove);

                if (dialog.modal) {
                    if (dialog.overlay.parentNode) {
                        dialog.overlay.parentNode.removeChild(dialog.overlay);
                    }
                }

                if (dialog.onClose) {
                    dialog.onClose();
                }
            };

            dialog.open = function (left, top) {
                dialog.removeEventListener('transitionend', dialog.remove);
                dialog.removeEventListener('transitioncancel', dialog.remove);

                document.body.appendChild(dialog);

                if (!left) {
                    left = that.editing.dialog.left;
                }

                if (!top) {
                    top = that.editing.dialog.top;
                }

                requestAnimationFrame(function () {
                    dialog.classList.add('open');

                    var positionFromString = function positionFromString(position, alignment) {
                        var offset = that.offset(that);

                        if (position === 'center' && alignment === 'horizontal') {
                            position = 'middle';
                        }

                        switch (position) {
                            case 'top':
                                return offset.top;
                            case 'bottom':
                                return offset.top + that.offsetHeight - dialog.offsetHeight;
                            case 'center':
                                return offset.top + that.offsetHeight / 2 - dialog.offsetHeight / 2;
                            case 'left':
                                return offset.left;
                            case 'middle':
                                return offset.left + that.offsetWidth / 2 - dialog.offsetWidth / 2;
                            case 'right':
                                return offset.left + that.offsetWidth - dialog.offsetWidth;
                        }

                        if (alignment === 'horizontal') {
                            return parseInt(position) + offset.left;
                        }

                        if (alignment === 'vertical') {
                            return parseInt(position) + offset.top;
                        }

                        if (typeof position === 'number') {
                            return position;
                        }

                        return parseInt(position);
                    };

                    dialog.style.left = positionFromString(left, 'horizontal') + 'px';
                    dialog.style.top = positionFromString(top, 'vertical') + 'px';
                });

                if (dialog.modal) {
                    that.appendChild(dialog.overlay);
                }

                if (dialog.onOpen) {
                    dialog.onOpen();
                }
            };

            return dialog;
        }
    }, {
        key: '_openAddRowDialog',
        value: function _openAddRowDialog(row, command) {
            var that = this;

            if (!that.editing.addDialog.enabled) {
                return false;
            }

            var dialog = that._dialogAddRow || that._createDialog();
            var header = that.editing.dialog.header === '{{message}}' ? that.localize('dialogAddHeader') : that.editing.dialog.header;
            var content = dialog.content;

            dialog.header.innerHTML = header;

            row.grid = that;

            if (undefined === row.index) {
                row.index = that.rows.length;

                if (that._rowsAdded) {
                    row.index += that._rowsAdded.length;
                }
            }

            var cells = row.cells;

            var layoutRow = null;
            var layoutRowIndex = 0;

            if (!that._cellEditors) {
                that._cellEditors = [];
            }

            if (!that._dialogAddRow) {
                dialog.modal = true;
                dialog.btnConfirm.innerHTML = that.localize('dialogAddButtonConfirm');
                dialog.btnCancel.innerHTML = that.localize('dialogAddButtonCancel');

                dialog.onOpen = function () {
                    that.editing.dialog.visible = true;
                };

                dialog.onClose = function () {
                    that.editing.dialog.visible = false;
                };

                dialog.btnCancel.onclick = function () {
                    dialog.close();
                };

                dialog.btnClose.onclick = function () {
                    dialog.close();
                };

                dialog.btnConfirm.onclick = function () {
                    var data = {};

                    for (var i = 0; i < cells.length; i++) {
                        var cell = cells[i];
                        var value = that._getEditorValue(cell);
                        var id = that._getEditorId(cell);
                        var editor = that._cellEditors[id];

                        data[cell.column.dataField] = value;

                        editor.detach();
                    }

                    var index = that._rowsAdded ? that._rowsAdded.length : 0;

                    var row = new JQX.Grid.Row({ index: that.rows.length + index, grid: that, data: data });

                    dialog.close();

                    command(row, dialog.index === 0 ? true : false);
                };

                dialog.onkeydown = function (event) {
                    var key = event.key;

                    if (key === 'Enter') {
                        dialog.btnConfirm.onclick();
                    } else if (key === 'Escape') {
                        dialog.close();
                    }
                };

                content.classList.add('jqx-grid-layout');

                for (var i = 0; i < that.columns.length; i++) {
                    var column = that.columns[i];

                    if (!column.allowEdit) {
                        continue;
                    }

                    if (layoutRowIndex % 2 === 0) {
                        layoutRow = document.createElement('div');
                        layoutRow.classList.add('row');
                        content.appendChild(layoutRow);
                    }

                    var col = document.createElement('div');

                    col.classList.add('col-sm-6');

                    var stack = document.createElement('div');

                    stack.classList.add('column');

                    var label = document.createElement('label');

                    label.innerHTML = that.columns[i].label;

                    var fieldEditor = document.createElement('div');

                    fieldEditor.classList.add('jqx-grid-dialog-editor');
                    fieldEditor.setAttribute('editor', column.dataField);
                    fieldEditor.setAttribute('template', column.editor.template);

                    col.appendChild(stack);
                    layoutRow.appendChild(col);
                    stack.appendChild(label);
                    stack.appendChild(fieldEditor);
                    layoutRowIndex++;
                }
            }

            dialog.open();
            dialog.index = row.index;

            for (var _i4 = 0; _i4 < cells.length; _i4++) {
                var cell = cells[_i4];
                var _column = cell.column;
                var dataField = _column.dataField;
                var _fieldEditor = dialog.querySelector('[editor=' + dataField + ']');

                _fieldEditor.innerHTML = '';

                var cellValue = '';

                if (cell.value !== undefined) {
                    cellValue = cell.value;
                } else {
                    if (_column.dataType === 'int64' || _column.dataType === 'number' || _column.dataType === 'int' || _column.dataType === 'float') {
                        cellValue = 0;
                    }

                    if (_column.dataType === 'date') {
                        cellValue = new Date();
                    }

                    if (_column.dataType === 'bool' || _column.dataType === 'boolean') {
                        cellValue = false;
                    }
                }
                var editor = null;

                switch (cell.editor.template) {
                    default:
                    case 'custom':
                        {
                            editor = that._getCustomCellEditor(cell);

                            break;
                        }
                    case 'checkBox':
                        {
                            editor = that._getCheckBoxCellEditor(cell);

                            break;
                        }
                    case 'autoComplete':
                        {
                            editor = that._getAutoCompleteCellEditor(cell);

                            break;
                        }
                    case 'dateTimePicker':
                        editor = that._getDateTimePickerCellEditor(cell);

                        break;
                    case 'textArea':
                        {
                            editor = that._getTextAreaCellEditor(cell);

                            break;
                        }
                    case 'numberInput':
                    case 'input':
                        {
                            editor = cell.editor.template === 'numberInput' ? that._getNumberInputCellEditor(cell) : that._getInputCellEditor(cell);

                            break;
                        }
                }

                editor.attach();

                cell.editor.instance = editor;
                editor.setValue(cellValue);

                if (_i4 === 0) {
                    editor.focus();
                }
                if (!cell.editor.isInitialized) {
                    cell.editor.isInitialized = true;

                    if (cell.editor.onInit) {
                        cell.editor.onInit(cell.row.index, cell.column.dataField, cell.editor.instance.element);
                    }
                }

                if (cell.editor.onRender) {
                    cell.editor.onRender(cell.row.index, cell.column.dataField, cell.editor.instance.element);
                }

                _fieldEditor.appendChild(editor.element);
            }

            that._dialogAddRow = dialog;
        }
    }, {
        key: '_openEditDialog',
        value: function _openEditDialog(cell, editor) {
            var that = this;

            if (!that.editing.dialog.enabled) {
                return false;
            }

            var dialog = that._dialogEdit || that._createDialog();
            var header = that.editing.dialog.header === '{{message}}' ? that.localize('dialogEditHeader', { value: that.editing.editRow ? cell.row.visibleIndex + 1 : cell.column.label }) : that.editing.dialog.header;
            var content = dialog.content;

            dialog.header.innerHTML = header;

            var row = null;
            var layoutRowIndex = 0;

            if (!that._dialogEdit) {
                dialog.modal = true;
                dialog.btnConfirm.innerHTML = that.localize('dialogEditButtonConfirm');
                dialog.btnCancel.innerHTML = that.localize('dialogEditButtonCancel');

                dialog.onOpen = function () {
                    that.editing.dialog.visible = true;
                };

                dialog.onClose = function () {
                    that.editing.dialog.visible = false;
                };

                dialog.btnCancel.onclick = function () {
                    that.cancelEdit();
                };

                dialog.btnClose.onclick = function () {
                    that.cancelEdit();
                };

                dialog.btnConfirm.onclick = function () {
                    that.endEdit();
                };

                dialog.onkeydown = function (event) {
                    var key = event.key;
                    var dataSource = that.editing.commandKeys;

                    for (var item in dataSource) {
                        var _properties3 = dataSource[item];

                        if (key === _properties3.key) {
                            that._applyCommand(_properties3.command);
                            break;
                        }
                    }
                };

                if (that.editing.editRow) {
                    content.classList.add('jqx-grid-layout');

                    for (var i = 0; i < that.columns.length; i++) {
                        var column = that.columns[i];

                        if (!column.allowEdit) {
                            continue;
                        }

                        if (layoutRowIndex % 2 === 0) {
                            row = document.createElement('div');
                            row.classList.add('row');
                            content.appendChild(row);
                        }

                        var col = document.createElement('div');

                        col.classList.add('col-sm-6');

                        var stack = document.createElement('div');

                        stack.classList.add('column');

                        var label = document.createElement('label');

                        label.innerHTML = that.columns[i].label;

                        var fieldEditor = document.createElement('div');

                        fieldEditor.classList.add('jqx-grid-dialog-editor');
                        fieldEditor.setAttribute('editor', column.dataField);
                        fieldEditor.setAttribute('template', column.editor.template);

                        col.appendChild(stack);
                        row.appendChild(col);
                        stack.appendChild(label);
                        stack.appendChild(fieldEditor);
                        layoutRowIndex++;
                    }
                } else {
                    var _column2 = cell.column;

                    var _fieldEditor2 = document.createElement('div');

                    _fieldEditor2.classList.add('jqx-grid-dialog-editor');
                    _fieldEditor2.setAttribute('editor', '');
                    _fieldEditor2.setAttribute('template', _column2.editor.template);

                    content.appendChild(_fieldEditor2);
                }
            }

            dialog.open();

            if (that.editing.editRow) {
                var _fieldEditor3 = dialog.querySelector('[editor=' + cell.column.dataField + ']');

                _fieldEditor3.innerHTML = '';
                _fieldEditor3.appendChild(editor.element);
            } else {
                var _column3 = cell.column;
                var _fieldEditor4 = dialog.querySelector('[editor]');

                _fieldEditor4.innerHTML = '';

                _fieldEditor4.setAttribute('template', _column3.editor.template);
                _fieldEditor4.appendChild(editor.element);
            }

            that._dialogEdit = dialog;
        }
    }, {
        key: '_openDeleteRowDialog',
        value: function _openDeleteRowDialog(row, command) {
            var that = this;

            if (!that.editing.deleteDialog.enabled) {
                return false;
            }

            var dialog = that._dialogDelete || that._createDialog();
            var header = that.editing.dialog.header === '{{message}}' ? that.localize('dialogDeleteHeader', { value: row.visibleIndex + 1 }) : that.editing.dialog.header;
            //const content = dialog.content;

            dialog.header.innerHTML = header;
            dialog.content.innerHTML = that.localize('dialogDeleteContent');
            dialog.row = row;

            if (!that._dialogDelete) {
                dialog.modal = true;
                dialog.btnConfirm.innerHTML = that.localize('dialogDeleteButtonConfirm');
                dialog.btnCancel.innerHTML = that.localize('dialogDeleteButtonCancel');

                dialog.onOpen = function () {
                    that.editing.dialog.visible = true;
                };

                dialog.onClose = function () {
                    that.editing.dialog.visible = false;
                };

                dialog.btnCancel.onclick = function () {
                    dialog.close();
                };

                dialog.btnClose.onclick = function () {
                    dialog.close();
                };

                dialog.btnConfirm.onclick = function () {
                    command(dialog.row);
                    dialog.close();
                };

                dialog.onkeydown = function (event) {
                    if (event.key === 'Escape') {
                        dialog.close();
                    }
                };
                that._dialogDelete = dialog;
            }

            dialog.open();

            setTimeout(function () {
                dialog.btnConfirm.focus();
            }, 100);
        }
    }, {
        key: '_beginCellEdit',
        value: function _beginCellEdit(cell, event) {
            var that = this;

            if (cell.isEditing) {
                return false;
            }

            if (!(cell.column.allowEdit && !cell.column.autoGenerated && !cell.readonly)) {
                return false;
            }

            if (that.editing.editCell && !that.editing.editRow) {
                var successfulEdit = that._endCellEdit();

                if (false === successfulEdit) {
                    return false;
                }
            }

            if (!that._cellEditors) {
                that._cellEditors = [];
            }

            if (!that.editing.editRow) {
                that.editing.editCell = cell;
            }

            if (that.editing.commandColumn.visible && !that.editing.editRow) {
                that.editing.isEditing = false;

                that.refresh();

                that.editing.isEditing = true;
            }

            that.editing.isEditing = true;
            if (that._selection.selectionRect) {
                that._selection.selectionRect.classList.add('jqx-visibility-hidden');
            }

            var appendEditor = function appendEditor(editor) {
                var element = editor.element;

                if (that.editing.dialog.enabled) {
                    that._openEditDialog(cell, editor);
                } else {
                    cell.element.setAttribute('editor', typeof cell.editor.template === 'string' ? cell.editor.template : 'template');
                    cell.element.content.innerHTML = '';
                    cell.element.content.appendChild(element);

                    if (that.editing.editRow) {
                        cell.element.setAttribute('row-editor', '');
                    }
                }

                editor.attach();

                cell.editor.instance = editor;
                cell.isEditing = true;
            };

            var modifiedValue = that._cellsUpdatedValues ? that._cellsUpdatedValues[cell.row.id + '_' + cell.column.dataField] : undefined;
            var cellValue = modifiedValue !== undefined ? modifiedValue : cell.value;

            if (cellValue === undefined) {
                cellValue = '';

                var column = cell.column;

                if (column.dataType === 'number' || column.dataType === 'int' || column.dataType === 'float') {
                    cellValue = 0;
                } else if (column.dataType === 'date') {
                    cellValue = new Date();
                    cellValue.setTime(0, 0, 0);
                }
            }

            switch (cell.editor.template) {
                default:
                case 'custom':
                    {
                        var editor = that._getCustomCellEditor(cell);

                        appendEditor(editor);

                        editor.setValue(cellValue);

                        break;
                    }
                case 'checkBox':
                    {
                        var _editor = that._getCheckBoxCellEditor(cell);

                        appendEditor(_editor);

                        var value = cellValue === true || cellValue === 1 ? true : false;

                        if (cell.template === 'checkBox' && event) {
                            var elements = document.elementsFromPoint(event.clientX, event.clientY);

                            if (elements[0].classList.contains('jqx-input')) {
                                _editor.setValue(!value);
                            } else {
                                _editor.setValue(value);
                            }
                        } else {
                            _editor.setValue(value);
                        }

                        break;
                    }
                case 'autoComplete':
                    {
                        var _editor2 = that._getAutoCompleteCellEditor(cell);

                        appendEditor(_editor2);

                        _editor2.setValue(cellValue);

                        if (cell.editor.autoOpen) {
                            _editor2.element.open();
                        }

                        break;
                    }
                case 'dateTimePicker':
                    {
                        var _editor3 = that._getDateTimePickerCellEditor(cell);

                        appendEditor(_editor3);

                        _editor3.setValue(cellValue);

                        if (cell.editor.autoOpen) {
                            _editor3.element.open();
                        }
                        break;
                    }
                case 'textArea':
                    {
                        var _editor4 = that._getTextAreaCellEditor(cell);

                        appendEditor(_editor4);

                        _editor4.setValue(cellValue);

                        break;
                    }
                case 'numberInput':
                case 'input':
                    {
                        var _editor5 = cell.editor.template === 'numberInput' ? that._getNumberInputCellEditor(cell) : that._getInputCellEditor(cell);

                        appendEditor(_editor5);

                        _editor5.setValue(cellValue);

                        break;
                    }
            }

            if (!cell.editor.isInitialized) {
                cell.editor.isInitialized = true;

                if (cell.editor.onInit) {
                    cell.editor.onInit(cell.row.index, cell.column.dataField, cell.editor.instance.element);
                }
            }

            if (cell.editor.onRender) {
                cell.editor.onRender(cell.row.index, cell.column.dataField, cell.editor.instance.element);
            }

            if (that.editing.editCell) {
                cell.editor.instance.focus();
            }

            return true;
        }
    }, {
        key: '_onCellClick',
        value: function _onCellClick(cell, event) {
            var that = this;

            if (cell.row.addNewRow) {
                if (cell.row.freeze === 'far') {
                    that._insertNewRowAfter();
                } else {
                    that._insertNewRowBefore();
                }

                return;
            }

            if (!that.editing.enabled) {
                return;
            }

            if (that.editing.commandColumn.visible) {
                if (cell.column.commandColumn) {
                    var elements = document.elementsFromPoint(event.pageX, event.pageY);
                    var commandItem = null;

                    for (var i = 0; i < elements.length; i++) {
                        if (elements[i].classList.contains('jqx-grid-command-item')) {
                            commandItem = elements[i];
                            break;
                        }
                    }

                    if (!commandItem) {
                        commandItem = cell.element.querySelector('.jqx-grid-command-item');
                    }

                    if (commandItem) {
                        var command = commandItem.getAttribute('command');

                        that._applyCommand(command, [cell.row, event]);
                        return;
                    }
                } else if (that.editing.commandColumn.inline) {
                    var _elements = document.elementsFromPoint(event.pageX, event.pageY);
                    for (var _i5 = 0; _i5 < _elements.length; _i5++) {
                        if (_elements[_i5].classList.contains('jqx-grid-command-item')) {
                            return;
                        }
                    }
                }
            }

            if (that.editing.action === 'none' && that.editing.isEditing) {
                var canEndEdit = false;

                if (that.editing.editCell && that.editing.editCell.row !== cell.row) {
                    canEndEdit = true;
                }

                if (that.editing.editRow && that.editing.editRow !== cell.row) {
                    canEndEdit = true;
                }

                if (canEndEdit) {
                    that.endEdit();
                }
            }

            if (that.editing.action !== 'click') {
                return;
            }

            if (that.selection.enabled && !cell.selected) {
                return;
            }

            if (that.editing.mode === 'cell') {
                var parentCell = cell.parent();

                if (parentCell) {
                    that._beginCellEdit(parentCell, event);
                } else {
                    that._beginCellEdit(cell, event);
                }
            } else if (that.editing.mode === 'row') {
                that._beginRowEdit(cell.row, cell, event);
            }
        }
    }, {
        key: '_onCellDoubleClick',
        value: function _onCellDoubleClick(cell, event) {
            var that = this;

            if (!that.editing.enabled) {
                return;
            }

            if (that.editing.action !== 'doubleClick' || that.editing.isEditing) {
                return;
            }

            if (that.editing.mode === 'cell') {
                that._beginCellEdit(cell, event);
            } else if (that.editing.mode === 'row') {
                that._beginRowEdit(cell.row, cell, event);
            }
        }
    }, {
        key: '_onRowClick',
        value: function _onRowClick() /*index, row, event*/{
            //const that = this;

        }
    }, {
        key: '_onRowDoubleClick',
        value: function _onRowDoubleClick() {}
    }]);
    return Edit;
}());