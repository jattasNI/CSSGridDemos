/**
* ColorPicker custom element.
*/
JQX('jqx-color-picker', class ColorPicker extends JQX.DropDownButton {
    // ColorPicker's properties.
    static get properties() {
        return {
            'editable': {
                value: false,
                type: 'boolean'
            },
            'applyValueMode': {
                value: 'instantly',
                allowedValues: ['instantly', 'useButtons'],
                type: 'string'
            },
            'columnCount': {
                value: 8,
                type: 'number'
            },
            'gridThemeColors': {
                value: null,
                type: 'array?',
                reflectToAttribute: false
            },
            'gridShadeColors': {
                value: null,
                type: 'array?',
                reflectToAttribute: false
            },
            'gridStandardColors': {
                value: null,
                type: 'array?',
                reflectToAttribute: false
            },
            'paletteColors': {
                value: null,
                type: 'array?',
                reflectToAttribute: false
            },
            'paletteCustomColors': {
                value: null,
                type: 'array?',
                reflectToAttribute: false
            },
            'disableUndo': {
                value: false,
                type: 'boolean'
            },
            'displayMode': {
                value: 'default',
                allowedValues: ['default', 'grid', 'palette', 'radial', 'hexagonal', 'spectrumGrid', 'materialGrid'],
                type: 'string'
            },
            'dropDownAppendTo': {
                value: null,
                type: 'any'
            },
            'dropDownHeight': {
                value: 'auto',
                type: 'string'
            },
            'dropDownWidth': {
                value: 'auto',
                type: 'string'
            },
            'editAlphaChannel': {
                value: false,
                type: 'boolean'
            },
            'enableCustomColors': {
                value: false,
                type: 'boolean'
            },
            'hidePreviewContainer': {
                value: false,
                type: 'boolean'
            },
            'hideRGBEditor': {
                value: false,
                type: 'boolean'
            },
            'hideHEXEditor': {
                value: false,
                type: 'boolean'
            },
            'hideAlphaEditor': {
                value: false,
                type: 'boolean'
            },
            'messages': {
                value: {
                    'en': {
                        'redPrefix': 'R:',
                        'greenPrefix': 'G:',
                        'bluePrefix': 'B:',
                        'hexPrefix': '#:',
                        'alphaPrefix': 'Alpha:',
                        'ok': 'OK',
                        'cancel': 'CANCEL',
                        'customColor': 'CUSTOM COLOR',
                        'standardColors': 'Standard colors',
                        'themeColors': 'Theme colors'
                    }
                },
                type: 'object',
                extend: true
            },
            'name': {
                value: '',
                type: 'string'
            },
            'palette': {
                value: 'default',
                allowedValues: ['default', 'gray', 'red', 'green', 'blue', 'custom'],
                type: 'string'
            },
            'placeholder': {
                value: 'Please Select Color',
                type: 'string'
            },
            'tooltipDisplayMode': {
                value: 'hex',
                allowedValues: ['none', 'rgba', 'rgb', 'hex'],
                type: 'string'
            },
            'value': {
                value: null,
                type: 'string?'
            },
            'valueDisplayMode': {
                value: 'default',
                allowedValues: ['default', 'colorBox', 'colorCode', 'none'], // default => (colorBox + text), colorBox(only color box), text(only input), none(only button with placeholder); editable to enable text input in default and text modes, otherwise input to be disabled
                type: 'string'
            },
            'valueFormat': {
                value: 'default',
                allowedValues: ['default', 'rgb', 'rgba', 'hex'], // in 'default' mode the value is shown in format 'as is' entered by the user
                type: 'string'
            },
            'inverted': {
                value: false,
                type: 'boolean'
            },
            'hideContentToFit': {
                value: ['RGB', 'HEX', 'alpha', 'previewContainer'], // hides palette editors in a sequence if there is not enought space
                type: 'array'
            }
        };
    }

    /**
     * ColorPicker's event listeners.
     */
    static get listeners() {
        return {
            'input.change': '_inputChangeHandler',
            'input.focus': '_focusEventHandler',
            'input.blur': '_blurEventHandler',
            'colorPanel.cancelButtonClick': '_cancelButtonHandler',
            'colorPanel.okButtonClick': '_okButtonHandler',
            'colorPanel.change': '_colorPanelChangeHandler',
            'keydown': '_keyDownHandler'
        };
    }
    /**
    * Checks for missing modules.
    */
    static get requires() {
        return {
            'JQX.ColorPanel': 'jqxcolorpanel.js',
            'JQX.DropDownButton': 'jqxdropdownbutton.js'
        }
    }

    /**
    * ColorPicker's HTML template.
    */
    template() {
        return `<div id="container">
                    <span class="jqx-label" id="label">[[label]]</span>
                    <div id="content" class="jqx-content">
                        <div id="buttonsContainer" class ="jqx-buttons-container">
                            <div id="actionButton" class ="jqx-input jqx-action-button">
                                <div id="colorSampleContainer" class="color-picker-sample-container">
                                    <div id="colorSample" class="color-picker-sample"></div>
                                </div>
                                <input type="text" id="input" class ="color-picker-action-input" placeholder="[[placeholder]]" spellcheck="false"/>
                            </div>
                            <span id="dropDownButton" class ="jqx-drop-down-button">
                                <span id="arrow"></span>
                            </span>
                        </div>
                        <div id="dropDownContainer" class ="jqx-drop-down jqx-drop-down-color-picker jqx-drop-down-container jqx-visibility-hidden">
                            <jqx-scroll-viewer id="scrollViewer"
                                right-to-left="[[right-to-left]]"
                                horizontal-scroll-bar-visibility="[[horizontalScrollBarVisibility]]"
                                vertical-scroll-bar-visibility="[[verticalScrollBarVisibility]]">
                                    <jqx-color-panel id="colorPanel" wait
                                        animation="[[animation]]"
                                        apply-value-mode="[[applyValueMode]]"
                                        column-count="[[columnCount]]"
                                        disabled="[[disabled]]"
                                        display-mode="[[displayMode]]"
                                        edit-alpha-channel="[[editAlphaChannel]]"
                                        enable-custom-colors="[[enableCustomColors]]"
                                        grid-theme-colors="[[gridThemeColors]]"
                                        grid-shade-colors="[[gridShadeColors]]"
                                        grid-standard-colors="[[gridStandardColors]]"
                                        hide-content-to-fit="[[hideContentToFit]]"
                                        hide-preview-container="[[hidePreviewContainer]]"
                                        hide-r-g-b-editor="[[hideRGBEditor]]"
                                        hide-h-e-x-editor="[[hideHEXEditor]]"
                                        hide-alpha-editor="[[hideAlphaEditor]]"
                                        inverted="[[inverted]]"
                                        locale="[[locale]]"
                                        name="[[name]]"
                                        palette-colors="[[paletteColors]]"
                                        palette-custom-colors="[[paletteCustomColors]]"
                                        palette="[[palette]]"
                                        theme="[[theme]]"
                                        tooltip-display-mode="[[tooltipDisplayMode]]"
                                        value="{{value}}"
                                        value-format="[[valueFormat]]">
                                    </jqx-color-panel>
                            </jqx-scroll-viewer>
                            <div id="resizeBar" class="jqx-drop-down-resize-bar">
                                <div></div>
                            </div>
                         </div>
                    </div>
                    <span class="jqx-hint" id="hint">[[hint]]</span>
                </div>`;
    }

    /**
    * Updates the DropDownButton when a property is changed.
    * @param {string} propertyName The name of the property.
    * @param {number/string} oldValue The previously entered value. Max, min and value are of type Number. The rest are of type String.
    * @param {number/string} newValue The new entered value. Max, min and value are of type Number. The rest are of type String.
    */
    propertyChangedHandler(propertyName, oldValue, newValue) {
        const that = this;

        that._bindProperties(propertyName);

        switch (propertyName) {
            case 'editable':
            case 'disabled':
            case 'readonly':
                that.$.input.readOnly = that.disabled || that.readonly || !that.editable;
                break;
            case 'value':
                if (that.$.colorPanel._isValidColor(that.value)) {
                    that._applyValue(that.value);
                }
                break;
            default:
                super.propertyChangedHandler(propertyName, oldValue, newValue);
                break;
        }

        if (propertyName === 'displayMode') {
            //Resize event not thrown
            that.$.colorPanel._hideControlsByPriority();
        }
    }

    /**
     * Open method. Opens the popup
     */
    open() {
        const that = this;

        //Lazy generate the ColorPanel structure before opening. The first time only
        if (that.$.colorPanel._initializeOnOpening) {
            delete that.$.colorPanel._initializeOnOpening;
            that.$.colorPanel._generateGridStructures();
            that.$.colorPanel._applyValue(that.value);
            that.$.colorPanel._hideControlsByPriority();
        }

        super.open();
    }

    /**
     * ColorPicker ready method
     */
    _createElement() {
        const that = this;

        that.$.colorPanel._initializeOnOpening = !that.opened;

        that.$.colorPanel.wait = false;

        that.$.input.readOnly = that.disabled || that.readonly || !that.editable;
        that._applyValue(that.$.colorPanel.value);
        that._setFocusable();
    }

    /*
    * Applies the value
    */
    _colorPanelChangeHandler(event) {
        const that = this;

        that._applyValue(event.detail.value);

        if (that.dropDownAppendTo && that.dropDownAppendTo.length > 0) {
            that.$.fireEvent('change', event.detail);
        }
    }

    /**
     * Handles Cancel Button Click
     */
    _cancelButtonHandler() {
        const that = this;

        if (that.$.colorPanel.$.container.className.indexOf('custom-color-selection') > -1) {
            return;
        }

        that.close();
    }

    /*
    * Closes the dropdown and applies the value
    */
    _okButtonHandler() {
        const that = this;

        that._applyValue(that.$.colorPanel.value);
        that.close();
    }

    /**
     * Makes the element focusable or not
     */
    _setFocusable() {
        const that = this;

        if (!that.disabled && !that.unfocusable) {
            let index = that.tabIndex > 0 ? that.tabIndex : 0;

            that.$.input.tabIndex = index;
            that.dropDownOpenMode === 'dropDownButton' ? that.$.dropDownButton.setAttribute('tabindex', index) : that.$.dropDownButton.removeAttribute('tabindex');
            return;
        }

        that.$.input.tabIndex = -1;
        that.$.dropDownButton.removeAttribute('tabindex');
    }

    /*
    * Binds properties to color panel
    */
    _bindProperties(propertyName) {
        const that = this,
            properties = ['columnCount', 'gridThemeColors', 'gridShadeColors', 'gridStandardColors', 'paletteCustomColors', 'name', 'hideContentToFit', 'applyValueMode', 'inverted', 'paletteColors', 'displayMode', 'tooltipDisplayMode', 'editAlphaChannel', 'enableCustomColors', 'hidePreviewContainer', 'hideRGBEditor', 'hideHEXEditor', 'hideAlphaEditor', 'hideContentToFit', 'messages', 'theme', 'animation', 'theme', 'locale', 'palette', 'valueMember', 'disabled', 'valueFormat'];

        if (propertyName) {
            if (properties.indexOf(propertyName) > -1 || propertyName === 'value') {
                that.$.colorPanel[propertyName] = that[propertyName];
            }

            that.$.scrollViewer.refresh();
            return;
        }
    }

    /*
    * Applies value 
    */
    _inputChangeHandler() {
        const that = this;

        event.preventDefault();
        event.stopPropagation();

        that.value = that.$.colorPanel.value = that.$.input.value;
    }

    /*
    * Applies the value to value property, color sample, color panel
    */
    _applyValue(tempValue) {
        const that = this;

        that.value = that.$.colorPanel.value = that.$.colorSample.style.backgroundColor = that.$.input.value = tempValue;

        that.value ? that.$colorSampleContainer.removeClass('no-color') : that.$colorSampleContainer.addClass('no-color');
    }

    /**
    * Key down handler 
    * @param {any} event
    */
    _keyDownHandler(event) {
        const that = this,
            activeElement = document.activeElement;

        if (that.disabled || that.readonly ||
            (activeElement !== that && activeElement !== that.$.dropDownButton && activeElement !== that.$.input)) {
            return;
        }

        switch (event.key) {
            case 'Enter':
            case ' ':
                if (event.target !== that.$.input) {
                    if (that.opened && event.key === 'Enter') {
                        event.preventDefault();
                        that.close();
                    }
                    else if (!that.opened && !that.readonly && that.dropDownOpenMode !== 'none') {
                        event.preventDefault();
                        that.open();
                    }
                }
                else if (event.key === 'Enter') {
                    event.preventDefault();
                    that.$.colorPanel.value = that.$.input.value;
                }

                break;
            case 'End':
                that.$.scrollViewer.scrollTop = that.$.scrollViewer.scrollHeight;
                break;
            case 'Home':
                that.$.scrollViewer.scrollTop = 0;
                break;
            case 'PageUp':
            case 'PageDown':
                that.$.scrollViewer.scrollTop += (event.key.indexOf('Down') > -1 ? 1 : -1) * that.$.dropDownContainer.offsetHeight;
                break;
            case 'ArrowUp':
            case 'ArrowDown':
                if (event.altKey) {
                    if (!that.disabled && !that.readonly && that.dropDownOpenMode !== 'none') {
                        that.$dropDownContainer.hasClass('jqx-visibility-hidden') ? that.open() : that.close();
                    }

                    return;
                }

                event.preventDefault();
                //that.$.scrollViewer.scrollTop += (event.key.indexOf('Down') > -1 ? 1 : -1) * 10;
                break;
            case 'Escape':
                event.preventDefault();
                that.close();
                break;
        }
    }
});
