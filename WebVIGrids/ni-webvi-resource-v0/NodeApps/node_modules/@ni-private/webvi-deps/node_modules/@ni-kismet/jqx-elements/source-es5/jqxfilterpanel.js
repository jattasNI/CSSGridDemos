'use strict';

/**
 * Filter panel custom element.
 */

JQX('jqx-filter-panel', function (_JQX$BaseElement) {
    babelHelpers.inherits(FilterPanel, _JQX$BaseElement);

    function FilterPanel() {
        babelHelpers.classCallCheck(this, FilterPanel);
        return babelHelpers.possibleConstructorReturn(this, (FilterPanel.__proto__ || Object.getPrototypeOf(FilterPanel)).apply(this, arguments));
    }

    babelHelpers.createClass(FilterPanel, [{
        key: 'template',


        /**
         * Filter panel's HTML template.
         */
        value: function template() {
            var template = '<div id="container" class="jqx-container">\n                <div id="label" class="jqx-filter-panel-label"></div>\n                <div id="mainContainer"></div>\n                <div id="buttonContainer" class="jqx-filter-panel-button-container">\n                    <jqx-button id="filterButton" class="primary" animation="[[animation]]" disabled="[[disabled]]" unfocusable="[[unfocusable]]"></jqx-button>\n                    <jqx-button id="clearButton" animation="[[animation]]" disabled="[[disabled]]" unfocusable="[[unfocusable]]"></jqx-button>\n                    <jqx-button id="cancelButton" animation="[[animation]]" disabled="[[disabled]]" unfocusable="[[unfocusable]]"></jqx-button>\n                </div>\n            </div>';

            return template;
        }

        /**
         * Invoked when an instance of custom element is attached to the DOM for the first time.
         */

    }, {
        key: 'ready',
        value: function ready() {
            babelHelpers.get(FilterPanel.prototype.__proto__ || Object.getPrototypeOf(FilterPanel.prototype), 'ready', this).call(this);

            var that = this,
                filterType = that.filterType;

            that._localize();
            that._setButtonsVisibility();
            that._filterType = filterType + 'Filter';
            that._filterHandler = new JQX.Utilities[filterType.slice(0, 1).toUpperCase() + filterType.slice(1) + 'FilterHandler'](that);
        }

        /**
         * Discards current filtering.
         */

    }, {
        key: 'cancel',
        value: function cancel() {
            var that = this;

            that._filterHandler[that.mode + 'Cancel']();
            that.$.fireEvent('cancel');
        }

        /**
         * Clears current filtering.
         */

    }, {
        key: 'clear',
        value: function clear() {
            var that = this;

            that._filterHandler[that.mode + 'Clear']();
            that.$.fireEvent('clear');
        }
    }, {
        key: 'reset',
        value: function reset() {
            var that = this;

            that.$.clearButton.removeAttribute('hover');
            that.$.filterButton.removeAttribute('hover');
            that.$.cancelButton.removeAttribute('hover');

            that._filterHandler[that.mode + 'Clear']();
            that._filterHandler.filterObject = new JQX.Utilities.FilterGroup();
        }
    }, {
        key: 'getFilter',
        value: function getFilter() {
            if (this._filterHandler) {
                var filter = new JQX.Utilities.FilterGroup();

                for (var filterProperty in this._filterHandler.filterObject) {
                    filter[filterProperty] = this._filterHandler.filterObject[filterProperty];
                }

                return filter;
            }

            return null;
        }

        /**
         * Evaluates a filter.
         */

    }, {
        key: 'evaluate',
        value: function evaluate(value) {
            try {
                return this._filterHandler.evaluate(value);
            } catch (error) {
                return false;
            }
        }

        /**
         * Applies current filtering.
         */

    }, {
        key: 'filter',
        value: function filter() {
            var that = this;

            that._filterHandler[that.mode + 'Filter']();
            that.$.fireEvent('filter');
        }

        /**
         * Gets the current filter state.
         */

    }, {
        key: 'getState',
        value: function getState() {
            return this._filterHandler.cachedFilter;
        }

        /**
         * Loads a previously saved filter state.
         *
         * @param {Object} state An object returned by the method getState.
         */

    }, {
        key: 'loadState',
        value: function loadState(state) {
            try {
                var that = this;

                that._filterHandler.cachedFilter = state;
                that._filterHandler[that.mode + 'Cancel']();
            } catch (error) {
                //
            }
        }

        /**
         * Called when a property is changed.
         */

    }, {
        key: 'propertyChangedHandler',
        value: function propertyChangedHandler(propertyName, oldValue, newValue) {
            babelHelpers.get(FilterPanel.prototype.__proto__ || Object.getPrototypeOf(FilterPanel.prototype), 'propertyChangedHandler', this).call(this, propertyName, oldValue, newValue);

            var that = this,
                filterHandler = that._filterHandler;

            function clearStoredObjects() {
                var objectNames = ['cachedFilter', 'caseSensitive', 'customExcelFilterObjects', 'customItems', 'dataSource', 'defaultListSelection', 'defaultListSource', 'displayMode', 'filterBuilder', 'filterBuilderObject', 'filterBuilderOperations', 'filterObject', 'firstInput', 'firstList', 'operationsMapping', 'operatorList', 'secondInput', 'secondList', 'timeOnly', 'tree'];

                objectNames.forEach(function (index) {
                    delete filterHandler[objectNames[index]];
                });

                delete that._filterHandler;
            }

            function reRender() {
                that.$.mainContainer.innerHTML = '';
                clearStoredObjects();
                that._filterHandler = new JQX.Utilities[that.filterType.slice(0, 1).toUpperCase() + that.filterType.slice(1) + 'FilterHandler'](that);
            }

            switch (propertyName) {
                case 'animation':
                case 'disabled':
                case 'unfocusable':
                    switch (that.mode) {
                        case 'default':
                            [filterHandler.firstList, filterHandler.firstInput, filterHandler.logicalOperatorList, filterHandler.secondList, filterHandler.secondInput].forEach(function (element) {
                                element[propertyName] = newValue;
                            });
                            break;
                        case 'excel':
                            filterHandler.tree[propertyName] = newValue;
                            break;
                        case 'filterBuilder':
                            filterHandler.filterBuilder[propertyName] = newValue;

                            if (filterHandler.caseSensitive) {
                                filterHandler.caseSensitive[propertyName] = newValue;
                            }

                            break;
                    }

                    break;
                case 'buttons':
                    that._setButtonsVisibility();
                    break;
                case 'data':
                case 'dataField':
                    if (that.mode === 'excel' && !Array.isArray(that.dataSource)) {
                        reRender();
                    }

                    break;
                case 'dataSource':
                    if (that.mode === 'excel') {
                        reRender();
                    }

                    break;
                case 'filterType':
                    that._filterType = newValue + 'Filter';
                    reRender();
                    break;
                case 'mode':
                    reRender();
                    break;
                case 'formatString':
                    if (that.filterType !== 'date') {
                        return;
                    }

                    switch (that.mode) {
                        case 'default':
                            filterHandler.firstInput.formatString = newValue;
                            filterHandler.secondInput.formatString = newValue;
                            break;
                        case 'excel':
                            reRender();
                            break;
                        case 'filterBuilder':
                            filterHandler.filterBuilder.formatStringDate = newValue;
                            filterHandler.filterBuilder.formatStringDateTime = newValue;
                            break;
                    }

                    break;
                case 'locale':
                case 'messages':
                    {
                        that._localize();

                        switch (that.mode) {
                            case 'default':
                                {
                                    var firstListSelection = filterHandler.firstList.selectedIndexes,
                                        operatorListSelection = filterHandler.logicalOperatorList.selectedIndexes,
                                        secondListSelection = filterHandler.secondList.selectedIndexes;

                                    filterHandler.setDefaults();
                                    filterHandler.firstList.dataSource = filterHandler.defaultListSource;
                                    filterHandler.logicalOperatorList.dataSource = [{ value: 0, label: that.localize('and') }, { value: 1, label: that.localize('or') }];
                                    filterHandler.secondList.dataSource = filterHandler.defaultListSource;

                                    if (that.filterType === 'date') {
                                        var inputs = [filterHandler.firstInput, filterHandler.secondInput];

                                        inputs.forEach(function (input) {

                                            if (!input.messages[that.locale]) {
                                                input.messages[that.locale] = {};
                                            }

                                            input.messages[that.locale].dateTabLabel = that.localize('dateTabLabel');
                                            input.messages[that.locale].timeTabLabel = that.localize('timeTabLabel');

                                            if (propertyName === 'locale') {
                                                input.locale = that.locale;
                                            } else {
                                                input.$.selectDate.innerHTML = input.messages[that.locale].dateTabLabel;
                                                input.$.selectTime.innerHTML = input.messages[that.locale].timeTabLabel;
                                            }

                                            if (input._dropDownDisplayMode === 'timePicker') {
                                                input.placeholder = that.localize('placeholderTime');
                                                input.placeholder = that.localize('placeholderTime');
                                            } else {
                                                input.placeholder = that.localize('placeholderDate');
                                                input.placeholder = that.localize('placeholderDate');
                                            }
                                        });
                                    }

                                    filterHandler.firstList.selectedIndexes = firstListSelection;
                                    filterHandler.logicalOperatorList.selectedIndexes = operatorListSelection;
                                    filterHandler.secondList.selectedIndexes = secondListSelection;
                                    break;
                                }
                            case 'excel':
                                filterHandler.tree.selectAll.label = that.localize('selectAll');

                                if (filterHandler.tree.blanks) {
                                    filterHandler.tree.blanks.label = that.localize('blanks');
                                }
                                break;
                            case 'filterBuilder':
                                filterHandler.localizeFilterBuilder();

                                if (propertyName === 'messages') {
                                    filterHandler.filterBuilder._localizeInitialValues();
                                    filterHandler.filterBuilder._refresh();
                                }

                                filterHandler.filterBuilder.$.scrollableContainer.refresh();
                                break;
                        }

                        break;
                    }
            }
        }

        /**
         * Localizes element.
         */

    }, {
        key: '_localize',
        value: function _localize() {
            var that = this;

            that.$.label.innerHTML = that.localize('showRows');
            that.$.filterButton.innerHTML = that.localize('filter');
            that.$.clearButton.innerHTML = that.localize('clear');
            that.$.cancelButton.innerHTML = that.localize('cancel');
        }

        /**
         * Sets buttons visibility.
         */

    }, {
        key: '_setButtonsVisibility',
        value: function _setButtonsVisibility() {
            var that = this,
                buttonsVisibility = that.buttons;

            ['cancel', 'clear', 'filter'].forEach(function (button) {
                if (buttonsVisibility.indexOf(button) !== -1) {
                    that['$' + button + 'Button'].removeClass('jqx-hidden');
                } else {
                    that['$' + button + 'Button'].addClass('jqx-hidden');
                }
            });
        }
    }], [{
        key: 'properties',

        /**
         * Filter panel's properties.
         */
        get: function get() {
            return {
                'buttons': {
                    value: ['clear', 'filter'],
                    type: 'array'
                },
                'data': {
                    value: null,
                    type: 'array?',
                    reflectToAttribute: false
                },
                'dataField': {
                    value: null,
                    type: 'string?'
                },
                'dataSource': {
                    value: null,
                    type: 'any',
                    reflectToAttribute: false
                },
                'evaluateFilterExpression': {
                    value: null,
                    type: 'function?',
                    reflectToAttribute: false
                },
                'filterType': {
                    value: 'string',
                    allowedValues: ['numeric', 'string', 'date', 'boolean'],
                    type: 'string'
                },
                'formatString': {
                    value: 'd',
                    type: 'string'
                },
                'messages': {
                    value: {
                        'en': {
                            'addCondition': 'Add Condition',
                            'addGroup': 'Add Group',
                            'and': 'and',
                            'blanks': '(Blanks)',
                            'cancel': 'Cancel',
                            'clear': 'Clear',
                            'contains': 'contains',
                            'containsCaseSensitive': 'contains (case sensitive)',
                            'dateTabLabel': 'DATE',
                            'doesNotContain': 'does not contain',
                            'doesNotContainCaseSensitive': 'does not contain (case sensitive)',
                            'empty': 'empty',
                            'endsWith': 'ends with',
                            'endsWithCaseSensitive': 'ends with (case sensitive)',
                            'equal': 'equal',
                            'equalCaseSensitive': 'equal (case sensitive)',
                            'filter': 'Filter',
                            'filterBuilderPlaceholder': '&lt;enter a value&gt;',
                            'greaterThan': 'greater than',
                            'greaterThanOrEqual': 'greater than or equal',
                            'lessThan': 'less than',
                            'lessThanOrEqual': 'less than or equal',
                            'mismatchedProperties': 'jqxFilterPanel: The "filterType" and the data type of the selected "dataField" are mismatched.',
                            'missingProperty': 'jqxFilterPanel: When mode is \'excel\', either "data" and "dataField" or "dataSource" of type Array have to be set.',
                            'notEmpty': 'not empty',
                            'notEqual': 'not equal',
                            'notNull': 'not null',
                            'null': 'null ',
                            'or': 'or',
                            'placeholderDate': 'Enter date',
                            'placeholderTime': 'Enter time',
                            'selectAll': '(Select All)',
                            'showRows': 'Show rows where:',
                            'startsWith': 'starts with',
                            'startsWithCaseSensitive': 'starts with (case sensitive)',
                            'timeTabLabel': 'TIME'
                        }
                    },
                    type: 'object',
                    extend: true
                },
                'mode': {
                    value: 'default',
                    allowedValues: ['default', 'excel', 'filterBuilder'],
                    type: 'string'
                }
            };
        }

        /**
         * Filter panel's event listeners.
         */

    }, {
        key: 'listeners',
        get: function get() {
            return {
                'cancelButton.click': 'cancel',
                'clearButton.click': 'clear',
                'filterButton.click': 'filter'
            };
        }

        /**
         * Filter panel's required files.
         */

    }, {
        key: 'requires',
        get: function get() {
            return {
                'JQX.Button': 'jqxbutton.js',
                'JQX.DateTimePicker': 'jqxdatetimepicker.js',
                'JQX.DropDownList': 'jqxdropdownlist.js',
                'JQX.FilterBuilder': 'jqxfilterbuilder.js',
                'JQX.NumericTextBox': 'jqxnumerictextbox.js',
                'JQX.Tree': 'jqxtree.js',
                'JQX.FilterGroup': 'jqxfilter.js'
            };
        }
    }]);
    return FilterPanel;
}(JQX.BaseElement));
JQX.Utilities.Assign('BaseFilterHandler', function () {
    function BaseFilterHandler(context) {
        babelHelpers.classCallCheck(this, BaseFilterHandler);

        var that = this;

        that.context = context;
        that.filterObject = new JQX.Utilities.FilterGroup();
        that.setDefaults();

        if (context.filterType === 'date') {
            var sampleDateTime = new JQX.Utilities.DateTime(),
                formatString = context.formatString,
                formatStringRegExp = sampleDateTime.getParseRegExp(sampleDateTime.calendar, formatString.replace(/y+/g, 'yyyyy'));

            that.displayMode = JQX.Utilities.DateTime.detectDisplayMode(sampleDateTime, formatString, formatStringRegExp);
            that.timeOnly = that.displayMode === 'timePicker';
        }

        if (context.mode === 'default') {
            that.createDefaultHTMLStructure();
            return;
        }

        that.operationsMapping = {
            '=': 'EQUAL',
            '<>': 'NOT_EQUAL',
            '<': 'LESS_THAN',
            '>': 'GREATER_THAN',
            '<=': 'LESS_THAN_OR_EQUAL',
            '>=': 'GREATER_THAN_OR_EQUAL',
            'isblank': 'EMPTY',
            'isnotblank': 'NOT_EMPTY',
            'contains': 'CONTAINS',
            'notcontains': 'DOES_NOT_CONTAIN',
            'startswith': 'STARTS_WITH',
            'endswith': 'ENDS_WITH',
            'NULL': 'NULL',
            'NOT_NULL': 'NOT_NULL'
        };

        if (context.mode === 'excel') {
            that.createExcelHTMLStructure();
        } else if (context.mode === 'filterBuilder') {
            that.createBuilderHTMLStructure();
        }
    }

    /**
     * Sets default source and selection.
     */


    babelHelpers.createClass(BaseFilterHandler, [{
        key: 'setDefaults',
        value: function setDefaults() {
            var that = this,
                context = that.context;

            that.defaultListSource = [{ value: 'EQUAL', label: context.localize('equal') }, { value: 'NOT_EQUAL', label: context.localize('notEqual') }, { value: 'LESS_THAN', label: context.localize('lessThan') }, { value: 'LESS_THAN_OR_EQUAL', label: context.localize('lessThanOrEqual') }, { value: 'GREATER_THAN', label: context.localize('greaterThan') }, { value: 'GREATER_THAN_OR_EQUAL', label: context.localize('greaterThanOrEqual') }, { value: 'NULL', label: context.localize('null') }, { value: 'NOT_NULL', label: context.localize('notNull') }];
            that.filterBuilderOperations = ['<', '=', '<>', '<=', '>', '>=', 'NULL', 'NOT_NULL'];
            that.defaultListSelection = 2;
        }

        /**
         * Creates the filter panel's HTML structure in default mode.
         */

    }, {
        key: 'createDefaultHTMLStructure',
        value: function createDefaultHTMLStructure() {
            var that = this,
                context = that.context,
                firstList = document.createElement('jqx-drop-down-list'),
                operatorList = document.createElement('jqx-drop-down-list'),
                secondList = document.createElement('jqx-drop-down-list'),
                fragment = document.createDocumentFragment();

            firstList.classList.add('jqx-filter-panel-list');
            firstList.dataSource = that.defaultListSource;
            firstList.selectedIndexes = [that.defaultListSelection];

            operatorList.classList.add('jqx-filter-panel-operator-list');
            operatorList.dataSource = [{ value: 0, label: context.localize('and') }, { value: 1, label: context.localize('or') }];

            secondList.classList.add('jqx-filter-panel-list');
            secondList.dataSource = that.defaultListSource;
            secondList.selectedIndexes = [that.defaultListSelection];

            that.firstList = firstList;
            that.logicalOperatorList = operatorList;
            that.secondList = secondList;

            that.appendInputs();
            that.firstInput.classList.add('jqx-filter-panel-input');
            that.secondInput.classList.add('jqx-filter-panel-input');

            operatorList.dropDownHeight = 'auto';
            operatorList.selectedIndexes = [0];

            [firstList, that.firstInput, operatorList, secondList, that.secondInput].forEach(function (element) {
                element.animation = context.animation;
                element.disabled = context.disabled;
                element.unfocusable = context.unfocusable;
                element.dropDownPosition = 'bottom';
                element.dropDownAppendTo = 'body';
                element.dropDownMaxHeight = 200;
                element.dropDownWidth = 'auto';
                fragment.appendChild(element);
            });

            that.context.$.mainContainer.appendChild(fragment);
            that.cacheFilter(that.defaultListSelection, 0, that.defaultListSelection);
        }

        /**
         * Caches filter.
         */

    }, {
        key: 'cacheFilter',
        value: function cacheFilter(firstFilterComparison, operator, secondFilterComparison) {
            var that = this;

            that.cachedFilter = {
                firstFilterComparison: firstFilterComparison,
                firstFilterValue: that.firstInput.value,
                logicalOperator: operator,
                secondFilterComparison: secondFilterComparison,
                secondFilterValue: that.secondInput.value
            };
        }

        /**
         * Applies filter.
         */

    }, {
        key: 'defaultFilter',
        value: function defaultFilter() {
            var that = this,
                context = that.context,
                firstFilterComparison = that.firstList.selectedValues[0],
                firstFilterValue = that.getFilterInputValue(that.firstInput),
                operator = parseFloat(that.logicalOperatorList.selectedValues[0]),
                secondFilterComparison = that.secondList.selectedValues[0],
                secondFilterValue = that.getFilterInputValue(that.secondInput),
                filterObject = that.filterObject;

            filterObject.clear();

            if (firstFilterValue !== '' || ['NULL', 'NOT_NULL', 'EMPTY', 'NOT_EMPTY'].indexOf(firstFilterComparison) !== -1) {
                var firstFilter = filterObject.createFilter(context._filterType, firstFilterValue, firstFilterComparison, undefined, context.formatString, context.locale, that.firstInput._dropDownDisplayMode === 'timePicker');

                filterObject.addFilter(operator, firstFilter);
            }

            if (secondFilterValue !== '' || ['NULL', 'NOT_NULL', 'EMPTY', 'NOT_EMPTY'].indexOf(secondFilterComparison) !== -1) {
                var secondFilter = filterObject.createFilter(context._filterType, secondFilterValue, secondFilterComparison, undefined, context.formatString, context.locale, that.secondInput._dropDownDisplayMode === 'timePicker');

                filterObject.addFilter(operator, secondFilter);
            }

            that.cacheFilter(that.firstList.selectedIndexes[0], that.logicalOperatorList.selectedIndexes[0], that.secondList.selectedIndexes[0]);
        }

        /**
         * Parses filter input value.
         */

    }, {
        key: 'getFilterInputValue',
        value: function getFilterInputValue(input) {
            return input.value;
        }

        /**
         * Applies filter ('excel' mode).
         */

    }, {
        key: 'excelFilter',
        value: function excelFilter() {
            var that = this,
                context = that.context;

            if (Array.isArray(context.dataSource)) {
                that.customExcelFilter();
                return;
            }

            var tree = that.tree,
                filterObject = that.filterObject;

            filterObject.clear();
            that.customItems = [];

            if (tree._menuItems['0'].selected) {
                return;
            }

            var selectedIndexes = tree.selectedIndexes;

            selectedIndexes.forEach(function (index) {
                var item = tree._menuItems[index];

                if (item instanceof JQX.TreeItem) {
                    var value = item.value;

                    if (item.hasAttribute('default-item')) {
                        var filterComparison = that.getExcelComparison(value),
                            filter = filterObject.createFilter(context._filterType, value, filterComparison, undefined, context.formatString, context.locale, that.timeOnly);

                        filterObject.addFilter('or', filter);
                    } else {
                        that.customItems.push(item);
                    }
                }
            });
            that.cachedFilter = selectedIndexes.slice(0);
        }

        /**
         * Applies filter ('excel' mode with custom data source).
         */

    }, {
        key: 'customExcelFilter',
        value: function customExcelFilter() {
            var that = this,
                tree = that.tree;

            delete that.customExcelFilterObjects;

            if (tree._menuItems['0'].selected) {
                return;
            }

            var context = that.context,
                filterObjects = [],
                selectedIndexes = tree.selectedIndexes;

            selectedIndexes.forEach(function (index) {
                var item = tree._menuItems[index];

                if (item instanceof JQX.TreeItem) {
                    var value = item.value;

                    if (!Array.isArray(value)) {
                        return;
                    }

                    if (!Array.isArray(value[0])) {
                        value = [value];
                    }

                    var filterObject = new JQX.Utilities.FilterGroup();

                    for (var i = 0; i < value.length; i++) {
                        var condition = value[i],
                            operation = that.operationsMapping[condition[1]],
                            filter = filterObject.createFilter(context._filterType, condition[2], operation, undefined, context.formatString, context.locale, that.timeOnly);

                        filterObject.addFilter('and', filter);
                    }

                    filterObjects.push(filterObject);
                }
            });

            that.customExcelFilterObjects = filterObjects;
            that.cachedFilter = selectedIndexes.slice(0);
        }

        /**
         * Gets filter comparison ('excel' mode).
         */

    }, {
        key: 'getExcelComparison',
        value: function getExcelComparison(value) {
            return value === '' ? 'NULL' : 'EQUAL';
        }

        /**
         * Applies filter ('filterBuilder' mode).
         */

    }, {
        key: 'filterBuilderFilter',
        value: function filterBuilderFilter() {
            var that = this,
                filterSettings = that.filterBuilder.value,
                caseSensitive = that.context.filterType === 'string' ? that.caseSensitive.checked : false,
                filterResult = { filters: [] };

            function recursion(currentContext, collection) {
                var filterObject = new JQX.Utilities.FilterGroup(),
                    operator = currentContext[1];

                collection.logicalOperator = operator;

                for (var i = 0; i < currentContext.length; i++) {
                    if (i === 1) {
                        continue;
                    }

                    var node = currentContext[i];

                    if (Array.isArray(node)) {
                        if (Array.isArray(node[0])) {
                            var subCollection = { filters: [] };

                            collection.filters.push(subCollection);
                            recursion(node, subCollection);
                        } else {
                            filterObject.addFilter(operator, that.createFilterBuilderFilter(filterObject, node, caseSensitive));
                        }
                    }
                }

                if (filterObject.filters.length > 0) {
                    collection.filters.push(filterObject);
                }
            }

            recursion(filterSettings, filterResult);
            that.filterBuilderObject = filterResult;
            that.cachedFilter = {
                filterBuilder: JSON.parse(JSON.stringify(that.filterBuilder.value), function (key, value) {
                    return (/^(\d{4})-(\d{2})-(\d{2})T(\d{2}):(\d{2}):(\d{2}).(\d{3})Z$/.test(value) ? new Date(value) : value
                    );
                }),
                caseSensitive: caseSensitive
            };
        }

        /**
         * Calls the "createFilter" method with the correct arguments.
         */

    }, {
        key: 'createFilterBuilderFilter',
        value: function createFilterBuilderFilter(filterObject, node, caseSensitive) {
            var that = this,
                context = that.context;
            var operation = that.operationsMapping[node[1]];

            if (caseSensitive && ['CONTAINS', 'DOES_NOT_CONTAIN', 'STARTS_WITH', 'ENDS_WITH', 'EQUAL'].indexOf(operation) !== -1) {
                operation += '_CASE_SENSITIVE';
            }

            return filterObject.createFilter(context._filterType, node[2], operation, undefined, context.formatString, context.locale, false);
        }

        /**
         * Clears filter.
         */

    }, {
        key: 'defaultClear',
        value: function defaultClear() {
            var that = this;

            that.firstList.selectedIndexes = [that.defaultListSelection];
            that.firstInput.value = '';
            that.logicalOperatorList.selectedIndexes = [0];
            that.secondList.selectedIndexes = [that.defaultListSelection];
            that.secondInput.value = '';

            that.filterObject.clear();
            that.cacheFilter(that.defaultListSelection, 0, that.defaultListSelection);
        }

        /**
         * Clears filter ('excel' mode).
         */

    }, {
        key: 'excelClear',
        value: function excelClear() {
            var that = this;

            that.tree.select('0');
            that.filterObject.clear();
            that.cachedFilter = that.tree.selectedIndexes.slice(0);
        }

        /**
         * Clears filter ('filterBuilder' mode).
         */

    }, {
        key: 'filterBuilderClear',
        value: function filterBuilderClear() {
            var that = this;

            that.filterBuilder.value = ['and'];

            if (that.context.filterType === 'string') {
                that.caseSensitive.checked = false;
            }

            that.cachedFilter = { filterBuilder: ['and'], caseSensitive: false };
        }

        /**
         * Cancels current filter application.
         */

    }, {
        key: 'defaultCancel',
        value: function defaultCancel() {
            var that = this;

            that.firstList.selectedIndexes = [that.cachedFilter.firstFilterComparison];
            that.firstInput.value = that.cachedFilter.firstFilterValue;
            that.logicalOperatorList.selectedIndexes = [that.cachedFilter.logicalOperator];
            that.secondList.selectedIndexes = [that.cachedFilter.secondFilterComparison];
            that.secondInput.value = that.cachedFilter.secondFilterValue;
        }

        /**
         * Cancels current filter application ('excel' mode).
         */

    }, {
        key: 'excelCancel',
        value: function excelCancel() {
            var that = this;

            that.tree.selectedIndexes = that.cachedFilter.slice(0);
        }

        /**
         * Cancels current filter application ('filterBuilder' mode).
         */

    }, {
        key: 'filterBuilderCancel',
        value: function filterBuilderCancel() {
            var that = this;

            that.filterBuilder.value = that.cachedFilter.filterBuilder;

            if (that.context.filterType === 'string') {
                that.caseSensitive.checked = that.cachedFilter.caseSensitive;
            }
        }

        /**
         * Creates the filter panel's HTML structure in 'excel' mode.
         */

    }, {
        key: 'createExcelHTMLStructure',
        value: function createExcelHTMLStructure() {
            var that = this,
                context = that.context,
                tree = document.createElement('jqx-tree'),
                uniqueValuesDetails = { data: context.data, dataField: context.dataField, filterType: context._filterType };

            if (!context.dataSource || !Array.isArray(context.dataSource)) {
                if (!context.data || !context.dataField) {
                    context.error(context.localize('missingProperty'));
                }

                if (context.filterType === 'date') {
                    uniqueValuesDetails.formatString = context.formatString;
                    uniqueValuesDetails.displayMode = that.displayMode;
                    that.dataSource = that.filterObject.getUniqueValues(uniqueValuesDetails, context);

                    try {
                        that.getHierarchicalDataSource(that.displayMode);
                    } catch (error) {
                        context.error(context.localize('mismatchedProperties'));
                    }

                    if (that.timeOnly) {
                        tree.classList.add('standard-excel');
                    } else {
                        tree.classList.add('date-excel');
                    }
                } else {
                    that.dataSource = that.filterObject.getUniqueValues(uniqueValuesDetails, context);
                    tree.classList.add('standard-excel');
                }

                if (typeof context.dataSource === 'function') {
                    that.dataSource = context.dataSource(that.dataSource) || that.dataSource;
                }
            } else {
                that.processCustomDataSource(tree);
            }

            tree.animation = context.animation;
            tree.disabled = context.disabled;
            tree.unfocusable = context.unfocusable;
            tree.dataSource = [{
                label: context.localize('selectAll'),
                value: '',
                items: that.dataSource,
                expanded: true,
                selected: true
            }];
            tree.selectionMode = 'checkBox';
            tree.hasThreeStates = true;
            tree.toggleMode = 'arrow';
            tree.addEventListener('collapsing', function (event) {
                if (event.detail.item.level === 1) {
                    event.preventDefault();
                }
            });
            tree._onCompleted = function () {
                that.cachedFilter = tree.selectedIndexes.slice(0);

                if (tree.classList.contains('date-excel')) {
                    for (var path in tree._menuItems) {
                        if (path === '0') {
                            continue;
                        }

                        var item = tree._menuItems[path];

                        item.firstElementChild.style.paddingLeft = (item.level - 1) * 20 - 10 + 'px';
                    }
                } else {
                    tree._menuItems['0'].firstElementChild.style.paddingLeft = 0;
                }

                tree.selectAll = tree._menuItems['0'];
                tree.blanks = tree.querySelector('[label="' + context.localize('blanks') + '"]');
            };
            that.tree = tree;

            context.$.mainContainer.appendChild(tree);
        }

        /**
         * Processes custom data source in 'excel' mode.
         */

    }, {
        key: 'processCustomDataSource',
        value: function processCustomDataSource(tree) {
            var that = this,
                context = that.context,
                dataSource = context.dataSource;

            tree.classList.add('standard-excel');
            that.dataSource = dataSource;
        }

        /**
         * Creates the filter panel's HTML structure in 'filterBuilder' mode.
         */

    }, {
        key: 'createBuilderHTMLStructure',
        value: function createBuilderHTMLStructure() {
            var that = this,
                context = that.context,
                filterBuilder = document.createElement('jqx-filter-builder'),
                dataField = context.dataField,
                dataType = context.filterType === 'numeric' ? 'number' : context.filterType;

            that.filterBuilder = filterBuilder;
            filterBuilder.animation = context.animation;
            filterBuilder.disabled = context.disabled;
            filterBuilder.unfocusable = context.unfocusable;
            filterBuilder.value = ['and'];
            filterBuilder.fields = [{ label: dataField, dataField: dataField, dataType: dataType, filterOperations: that.filterBuilderOperations }];
            that.localizeFilterBuilder();
            context.$.mainContainer.appendChild(filterBuilder);

            if (dataType === 'string') {
                var caseSensitive = document.createElement('jqx-check-box');

                caseSensitive.classList.add('case-sensitive');
                caseSensitive.innerHTML = 'Case sensitive';
                caseSensitive.animation = context.animation;
                caseSensitive.disabled = context.disabled;
                caseSensitive.unfocusable = context.unfocusable;
                caseSensitive.checked = false;
                that.caseSensitive = caseSensitive;
                context.$.mainContainer.appendChild(caseSensitive);
            }
            that.filterBuilderObject = { filters: [] };
            that.cachedFilter = { filterBuilder: ['and'], caseSensitive: false };
        }

        /**
         * Localizes filter builder.
         */

    }, {
        key: 'localizeFilterBuilder',
        value: function localizeFilterBuilder() {
            var that = this,
                context = that.context,
                filterBuilder = that.filterBuilder;
            var defaultMessages = filterBuilder.messages[context.locale];

            if (!defaultMessages) {
                defaultMessages = {};
                filterBuilder.messages[context.locale] = defaultMessages;
            }

            filterBuilder.customOperations = [{
                name: 'NULL',
                label: context.localize('null'),
                hideValue: true
            }, {
                name: 'NOT_NULL',
                label: context.localize('notNull'),
                hideValue: true
            }];
            defaultMessages['addCondition'] = context.localize('addCondition');
            defaultMessages['addGroup'] = context.localize('addGroup');
            defaultMessages['<'] = context.localize('lessThan');
            defaultMessages['<='] = context.localize('lessThanOrEqual');
            defaultMessages['<>'] = context.localize('notEqual');
            defaultMessages['='] = context.localize('equal');
            defaultMessages['>'] = context.localize('greaterThan');
            defaultMessages['>='] = context.localize('greaterThanOrEqual');
            defaultMessages['and'] = context.localize('and');
            defaultMessages['contains'] = context.localize('contains');
            defaultMessages['endswith'] = context.localize('endsWith');
            defaultMessages['isblank'] = context.localize('empty');
            defaultMessages['isnotblank'] = context.localize('notEmpty');
            defaultMessages['notcontains'] = context.localize('doesNotContain');
            defaultMessages['or'] = context.localize('or');
            defaultMessages['startswith'] = context.localize('startsWith');
            defaultMessages['dateTabLabel'] = context.localize('dateTabLabel');
            defaultMessages['timeTabLabel'] = context.localize('timeTabLabel');

            filterBuilder.formatStringDate = context.formatString;
            filterBuilder.formatStringDateTime = context.formatString;
            filterBuilder.locale = context.locale;
            filterBuilder.valuePlaceholder = context.localize('filterBuilderPlaceholder');
        }

        /**
         * Evaluates a filter.
         */

    }, {
        key: 'evaluate',
        value: function evaluate(value) {
            var that = this,
                context = that.context;

            if (context.mode === 'default') {
                return that.filterObject.evaluate(value);
            }

            if (context.mode === 'excel') {
                var result = false;

                if (Array.isArray(context.dataSource)) {
                    if (!that.customExcelFilterObjects || that.customExcelFilterObjects.length === 0) {
                        return true;
                    }

                    for (var i = 0; i < that.customExcelFilterObjects.length; i++) {
                        result = result || that.customExcelFilterObjects[i].evaluate(value);
                    }

                    return result;
                }

                if (that.customItems && that.customItems.length > 0) {
                    if (that.filterObject.filters.length > 0) {
                        result = that.filterObject.evaluate(value);
                    }

                    if (that.customItems && context.evaluateFilterExpression) {
                        for (var _i = 0; _i < that.customItems.length; _i++) {
                            var customCalculation = context.evaluateFilterExpression(value, that.customItems[_i].value);

                            if (customCalculation !== undefined) {
                                result = result || customCalculation;
                            }
                        }
                    }
                } else {
                    result = that.filterObject.evaluate(value);
                }

                return result;
            }

            function evaluateGroup(group) {
                var result = group.logicalOperator === 'and' ? true : false;

                for (var _i2 = 0; _i2 < group.filters.length; _i2++) {
                    var currentResult = void 0;

                    if (group.filters[_i2] instanceof JQX.Utilities.FilterGroup) {
                        currentResult = group.filters[_i2].evaluate(value);
                    } else {
                        currentResult = evaluateGroup(group.filters[_i2]);
                    }

                    result = group.logicalOperator === 'and' ? result && currentResult : result || currentResult;
                }

                return result;
            }

            if (!that.filterBuilderObject.logicalOperator) {
                return true;
            }

            return evaluateGroup(that.filterBuilderObject);
        }
    }]);
    return BaseFilterHandler;
}());

JQX.Utilities.Assign('NumericFilterHandler', function (_JQX$Utilities$BaseFi) {
    babelHelpers.inherits(NumericFilterHandler, _JQX$Utilities$BaseFi);

    function NumericFilterHandler() {
        babelHelpers.classCallCheck(this, NumericFilterHandler);
        return babelHelpers.possibleConstructorReturn(this, (NumericFilterHandler.__proto__ || Object.getPrototypeOf(NumericFilterHandler)).apply(this, arguments));
    }

    babelHelpers.createClass(NumericFilterHandler, [{
        key: 'appendInputs',

        /**
         * Appends inputs specific to filter type.
         */
        value: function appendInputs() {
            var that = this,
                firstInput = document.createElement('jqx-numeric-text-box'),
                secondInput = document.createElement('jqx-numeric-text-box');

            firstInput.inputFormat = 'floatingPoint';
            firstInput.nullable = true;
            firstInput.spinButtons = true;
            firstInput.value = null;
            secondInput.inputFormat = 'floatingPoint';
            secondInput.nullable = true;
            secondInput.spinButtons = true;
            secondInput.value = null;

            that.firstInput = firstInput;
            that.secondInput = secondInput;
        }

        /**
         * Parses filter input value.
         */

    }, {
        key: 'getFilterInputValue',
        value: function getFilterInputValue(input) {
            if (input.value === null || input.value === '') {
                return '';
            }

            return parseFloat(input.value);
        }
    }]);
    return NumericFilterHandler;
}(JQX.Utilities.BaseFilterHandler));

JQX.Utilities.Assign('StringFilterHandler', function (_JQX$Utilities$BaseFi2) {
    babelHelpers.inherits(StringFilterHandler, _JQX$Utilities$BaseFi2);

    function StringFilterHandler() {
        babelHelpers.classCallCheck(this, StringFilterHandler);
        return babelHelpers.possibleConstructorReturn(this, (StringFilterHandler.__proto__ || Object.getPrototypeOf(StringFilterHandler)).apply(this, arguments));
    }

    babelHelpers.createClass(StringFilterHandler, [{
        key: 'setDefaults',

        /**
         * Sets default source and selection.
         */
        value: function setDefaults() {
            var that = this,
                context = that.context;

            that.defaultListSource = [{ value: 'EMPTY', label: context.localize('empty') }, { value: 'NOT_EMPTY', label: context.localize('notEmpty') }, { value: 'CONTAINS', label: context.localize('contains') }, { value: 'CONTAINS_CASE_SENSITIVE', label: context.localize('containsCaseSensitive') }, { value: 'DOES_NOT_CONTAIN', label: context.localize('doesNotContain') }, { value: 'DOES_NOT_CONTAIN_CASE_SENSITIVE', label: context.localize('doesNotContainCaseSensitive') }, { value: 'STARTS_WITH', label: context.localize('startsWith') }, { value: 'STARTS_WITH_CASE_SENSITIVE', label: context.localize('startsWithCaseSensitive') }, { value: 'ENDS_WITH', label: context.localize('endsWith') }, { value: 'ENDS_WITH_CASE_SENSITIVE', label: context.localize('endsWithCaseSensitive') }, { value: 'EQUAL', label: context.localize('equal') }, { value: 'EQUAL_CASE_SENSITIVE', label: context.localize('equalCaseSensitive') }, { value: 'NULL', label: context.localize('null') }, { value: 'NOT_NULL', label: context.localize('notNull') }];
            that.filterBuilderOperations = ['contains', 'isblank', 'isnotblank', 'notcontains', 'startswith', 'endswith', '=', 'NULL', 'NOT_NULL'];
            that.defaultListSelection = 2;
        }

        /**
         * Appends inputs specific to filter type.
         */

    }, {
        key: 'appendInputs',
        value: function appendInputs() {
            var that = this,
                firstInput = document.createElement('input'),
                secondInput = document.createElement('input');

            firstInput.classList.add('jqx-input');
            secondInput.classList.add('jqx-input');

            that.firstInput = firstInput;
            that.secondInput = secondInput;
        }

        /**
         * Gets filter comparison ('excel' mode).
         */

    }, {
        key: 'getExcelComparison',
        value: function getExcelComparison(value) {
            return value === '' ? 'EMPTY' : 'EQUAL_CASE_SENSITIVE';
        }
    }]);
    return StringFilterHandler;
}(JQX.Utilities.BaseFilterHandler));

JQX.Utilities.Assign('DateFilterHandler', function (_JQX$Utilities$BaseFi3) {
    babelHelpers.inherits(DateFilterHandler, _JQX$Utilities$BaseFi3);

    function DateFilterHandler() {
        babelHelpers.classCallCheck(this, DateFilterHandler);
        return babelHelpers.possibleConstructorReturn(this, (DateFilterHandler.__proto__ || Object.getPrototypeOf(DateFilterHandler)).apply(this, arguments));
    }

    babelHelpers.createClass(DateFilterHandler, [{
        key: 'appendInputs',

        /**
         * Appends inputs specific to filter type.
         */
        value: function appendInputs() {
            var that = this,
                context = that.context,
                firstInput = document.createElement('jqx-date-time-picker'),
                secondInput = document.createElement('jqx-date-time-picker');

            firstInput.calendarButton = true;
            firstInput.editMode = 'partial';
            firstInput.formatString = context.formatString;
            firstInput.dropDownDisplayMode = 'auto';
            firstInput.locale = context.locale;

            if (!firstInput.messages[context.locale]) {
                firstInput.messages[context.locale] = {};
            }

            firstInput.messages[context.locale].dateTabLabel = context.localize('dateTabLabel');
            firstInput.messages[context.locale].timeTabLabel = context.localize('timeTabLabel');
            firstInput.nullable = true;
            firstInput.value = null;

            secondInput.calendarButton = true;
            secondInput.editMode = 'partial';
            secondInput.formatString = context.formatString;
            secondInput.dropDownDisplayMode = 'auto';
            secondInput.locale = context.locale;

            if (!secondInput.messages[context.locale]) {
                secondInput.messages[context.locale] = {};
            }

            secondInput.messages[context.locale].dateTabLabel = context.localize('dateTabLabel');
            secondInput.messages[context.locale].timeTabLabel = context.localize('timeTabLabel');
            secondInput.nullable = true;
            secondInput.value = null;
            secondInput._onCompleted = function () {
                if (secondInput._dropDownDisplayMode === 'timePicker') {
                    firstInput.placeholder = context.localize('placeholderTime');
                    firstInput.placeholder = context.localize('placeholderTime');
                } else {
                    firstInput.placeholder = context.localize('placeholderDate');
                    firstInput.placeholder = context.localize('placeholderDate');
                }
            };

            that.firstInput = firstInput;
            that.secondInput = secondInput;
        }

        /**
         * Parses filter input value.
         */

    }, {
        key: 'getFilterInputValue',
        value: function getFilterInputValue(input) {
            if (input.value === null) {
                return '';
            }

            var result = input.value.toDate();

            if (this.displayMode === 'calendar') {
                result.setHours(0, 0, 0);
            }

            return result;
        }

        /**
         * Clears filter.
         */

    }, {
        key: 'defaultClear',
        value: function defaultClear() {
            var that = this;

            that.firstList.selectedIndexes = [that.defaultListSelection];
            that.firstInput.value = null;
            that.logicalOperatorList.selectedIndexes = [0];
            that.secondList.selectedIndexes = [that.defaultListSelection];
            that.secondInput.value = null;

            that.filterObject.clear();
            that.cacheFilter(that.defaultListSelection, 0, that.defaultListSelection);
        }

        /**
         * Gets hierarchical data source ('excel' mode).
         */

    }, {
        key: 'getHierarchicalDataSource',
        value: function getHierarchicalDataSource(displayMode) {
            var that = this,
                dataSource = that.dataSource,
                mapping = {},
                treeSource = [];
            var blanks = void 0;

            if (displayMode === 'timePicker') {
                return;
            }

            if (dataSource[dataSource.length - 1].value === '') {
                blanks = dataSource[dataSource.length - 1];
                dataSource.pop();
            }

            dataSource.forEach(function (item) {
                var date = item.value,
                    year = date.getFullYear(),
                    month = new Intl.DateTimeFormat(that.context.locale, { month: 'long' }).format(date),
                    day = date.getDate();

                if (!mapping[year]) {
                    mapping[year] = {};
                }

                if (!mapping[year][month]) {
                    mapping[year][month] = {};
                }

                if (!mapping[year][month][day]) {
                    if (displayMode === 'calendar') {
                        mapping[year][month][day] = date;
                        return;
                    } else {
                        mapping[year][month][day] = {};
                    }
                }

                if (displayMode === 'calendar') {
                    return;
                }

                var hours = date.getHours(),
                    minutes = date.getMinutes(),
                    seconds = date.getSeconds();

                if (!mapping[year][month][day][hours]) {
                    mapping[year][month][day][hours] = {};
                }

                if (!mapping[year][month][day][hours][minutes]) {
                    mapping[year][month][day][hours][minutes] = {};
                }

                if (!mapping[year][month][day][hours][minutes][seconds]) {
                    mapping[year][month][day][hours][minutes][seconds] = date;
                }
            });

            for (var year in mapping) {
                var yearLevelItem = { label: year, items: [], customAttribute: 'default-item' };

                treeSource.push(yearLevelItem);

                for (var month in mapping[year]) {
                    var monthLevelItem = { label: month, items: [], customAttribute: 'default-item' };

                    yearLevelItem.items.push(monthLevelItem);

                    for (var day in mapping[year][month]) {
                        var dayLeveItem = { label: day, customAttribute: 'default-item' };

                        monthLevelItem.items.push(dayLeveItem);

                        if (displayMode === 'calendar') {
                            dayLeveItem.value = mapping[year][month][day];
                            continue;
                        }

                        dayLeveItem.items = [];

                        for (var hours in mapping[year][month][day]) {
                            var hoursLevelItem = { label: '0'.repeat(2 - hours.length) + hours, items: [], customAttribute: 'default-item' };

                            dayLeveItem.items.push(hoursLevelItem);

                            for (var minutes in mapping[year][month][day][hours]) {
                                var minutesLevelItem = { label: ':' + '0'.repeat(2 - minutes.length) + minutes, items: [], customAttribute: 'default-item' };

                                hoursLevelItem.items.push(minutesLevelItem);

                                for (var seconds in mapping[year][month][day][hours][minutes]) {
                                    var secondsLevelItem = {
                                        label: ':' + '0'.repeat(2 - seconds.length) + seconds,
                                        value: mapping[year][month][day][hours][minutes][seconds],
                                        customAttribute: 'default-item'
                                    };

                                    minutesLevelItem.items.push(secondsLevelItem);
                                }
                            }
                        }
                    }
                }
            }

            if (blanks) {
                treeSource.push(blanks);
            }

            that.dataSource = treeSource;
        }
    }]);
    return DateFilterHandler;
}(JQX.Utilities.BaseFilterHandler));

JQX.Utilities.Assign('BooleanFilterHandler', function (_JQX$Utilities$BaseFi4) {
    babelHelpers.inherits(BooleanFilterHandler, _JQX$Utilities$BaseFi4);

    function BooleanFilterHandler() {
        babelHelpers.classCallCheck(this, BooleanFilterHandler);
        return babelHelpers.possibleConstructorReturn(this, (BooleanFilterHandler.__proto__ || Object.getPrototypeOf(BooleanFilterHandler)).apply(this, arguments));
    }

    babelHelpers.createClass(BooleanFilterHandler, [{
        key: 'cacheFilter',

        /**
         * Caches filter.
         */
        value: function cacheFilter(firstFilterComparison, operator, secondFilterComparison) {
            var that = this;

            that.cachedFilter = {
                firstFilterComparison: firstFilterComparison,
                firstFilterValue: that.firstInput.selectedIndexes.slice(0),
                logicalOperator: operator,
                secondFilterComparison: secondFilterComparison,
                secondFilterValue: that.secondInput.selectedIndexes.slice(0)
            };
        }

        /**
         * Sets default source and selection.
         */

    }, {
        key: 'setDefaults',
        value: function setDefaults() {
            var that = this,
                context = that.context;

            that.defaultListSource = [{ value: 'EQUAL', label: context.localize('equal') }, { value: 'NOT_EQUAL', label: context.localize('notEqual') }, { value: 'NULL', label: context.localize('null') }, { value: 'NOT_NULL', label: context.localize('notNull') }];
            that.filterBuilderOperations = ['=', '<>', 'NULL', 'NOT_NULL'];
            that.defaultListSelection = 0;
        }

        /**
         * Appends inputs specific to filter type.
         */

    }, {
        key: 'appendInputs',
        value: function appendInputs() {
            var that = this,
                firstInput = document.createElement('jqx-drop-down-list'),
                secondInput = document.createElement('jqx-drop-down-list');

            firstInput.dataSource = [{ value: true, label: 'true' }, { value: false, label: 'false' }];
            firstInput.selectedIndexes = [];
            firstInput.selectionMode = 'zeroOrOne';
            secondInput.dataSource = [{ value: true, label: 'true' }, { value: false, label: 'false' }];
            secondInput.selectedIndexes = [];
            secondInput.selectionMode = 'zeroOrOne';

            that.firstInput = firstInput;
            that.secondInput = secondInput;
        }

        /**
         * Parses filter input value.
         */

    }, {
        key: 'getFilterInputValue',
        value: function getFilterInputValue(input) {
            if (input.selectedValues.length === 0) {
                return '';
            }

            return input.selectedValues[0] === 'true';
        }

        /**
         * Clears filter.
         */

    }, {
        key: 'defaultClear',
        value: function defaultClear() {
            var that = this;

            that.firstList.selectedIndexes = [that.defaultListSelection];
            that.firstInput.selectedIndexes = [];
            that.logicalOperatorList.selectedIndexes = [0];
            that.secondList.selectedIndexes = [that.defaultListSelection];
            that.secondInput.selectedIndexes = [];

            that.filterObject.clear();
            that.cacheFilter(that.defaultListSelection, 0, that.defaultListSelection);
        }

        /**
         * Cancels current filter application.
         */

    }, {
        key: 'defaultCancel',
        value: function defaultCancel() {
            var that = this;

            that.firstList.selectedIndexes = [that.cachedFilter.firstFilterComparison];
            that.firstInput.selectedIndexes = that.cachedFilter.firstFilterValue;
            that.logicalOperatorList.selectedIndexes = [that.cachedFilter.logicalOperator];
            that.secondList.selectedIndexes = [that.cachedFilter.secondFilterComparison];
            that.secondInput.selectedIndexes = that.cachedFilter.secondFilterValue;
        }
    }]);
    return BooleanFilterHandler;
}(JQX.Utilities.BaseFilterHandler));