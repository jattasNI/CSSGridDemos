'use strict';

JQX.Utilities.Assign('Grid.Sort', function () {
    function Sort() {
        babelHelpers.classCallCheck(this, Sort);
    }

    babelHelpers.createClass(Sort, [{
        key: 'clearSort',
        value: function clearSort() {
            var that = this;

            if (that._isSorting) {
                return;
            }

            that._isSorting = true;

            that.dataSource.clearSort();

            for (var i = 0; i < that._sortedColumns.length; i++) {
                var sortColumn = that._sortedColumns[i];
                var column = that.columnByDataField[sortColumn.dataField];

                column.setProperty('sortOrder', null);
                column.setProperty('sortIndex', null);
            }

            that._sortedColumns = [];

            for (var _i = 0; _i < that.dataSource.length; _i++) {
                var row = that.rows[_i];
                var data = that.dataSource[_i];

                row.data = data;
                row.boundIndex = data.boundIndex;
            }

            that._recycle();

            that._isSorting = false;
        }
    }, {
        key: 'getSortedColumns',
        value: function getSortedColumns() {
            var that = this;
            var sortedColumns = [];

            if (that._sortedColumns) {
                for (var i = 0; i < that._sortedColumns.length; i++) {
                    var sortColumn = that._sortedColumns[i];

                    sortedColumns[sortColumn.dataField] = { sortOrder: sortColumn.sortOrder, sortIndex: sortColumn.sortIndex };
                    sortedColumns.length++;
                }
            }

            return sortedColumns;
        }
    }, {
        key: 'addSort',
        value: function addSort(dataField, sortOrder) {
            var that = this;

            that.sortBy(dataField, sortOrder);
        }
    }, {
        key: 'removeSort',
        value: function removeSort(dataField) {
            var that = this;

            that.sortBy(dataField, null);
        }
    }, {
        key: 'sortBy',
        value: function sortBy(columnDataField, sortOrder) {
            var that = this;
            var column = that.columnByDataField[columnDataField];
            var sortDataFields = [];
            var sortOrders = [];
            var sortDataTypes = [];
            var toggleSort = sortOrder === undefined ? true : false;

            if (that._isSorting || !column) {
                return;
            }

            that._isSorting = true;

            if (undefined === sortOrder) {
                sortOrder = 'asc';
            }

            var clearSortColumn = function clearSortColumn(column) {
                column.setProperty('sortOrder', null);
            };

            var clearSortColumns = function clearSortColumns() {
                if (that._sortedColumns.length > 0) {
                    for (var i = 0; i < that._sortedColumns.length; i++) {
                        var sortColumn = that._sortedColumns[i];
                        var _column = that.columnByDataField[sortColumn.dataField];

                        clearSortColumn(_column);
                    }
                }

                that._sortedColumns = [];
            };

            if (column === null) {
                clearSortColumns();
                that._isSorting = false;
                return;
            }

            if (!that.sorting.enabled || !that.dataSource || !column.allowSort || that._sortAnimation) {
                that._isSorting = false;
                return;
            }

            clearSortColumn(column);

            if (!that._sortedColumns) {
                that._sortedColumns = [];
            }

            var dataType = 'string';

            for (var i = 0; i < that.dataSource.dataFields.length; i++) {
                var field = that.dataSource.dataFields[i];

                if (field.name === columnDataField) {
                    dataType = field.dataType;
                    break;
                }
            }

            var addNewSortColumn = true;

            for (var _i2 = 0; _i2 < that._sortedColumns.length; _i2++) {
                var sortColumn = that._sortedColumns[_i2];

                if (sortColumn.dataField === columnDataField) {
                    addNewSortColumn = false;

                    sortColumn.sortIndex = column.sortIndex;

                    if (toggleSort) {
                        if (sortColumn.sortOrder === 'asc') {
                            sortColumn.sortOrder = 'desc';
                            sortOrder = 'desc';
                        } else if (sortColumn.sortOrder === 'desc') {
                            if (that.sorting.sortToggleThreeStates) {
                                that._sortedColumns.splice(_i2, 1);
                                clearSortColumn(column);
                                sortOrder = null;
                            } else {
                                sortColumn.sortOrder = 'asc';
                                sortOrder = 'asc';
                            }
                            break;
                        }
                    } else {
                        sortColumn.sortOrder = sortOrder;

                        if (sortOrder === null) {
                            that._sortedColumns.splice(_i2, 1);
                            clearSortColumn(column);
                        }
                    }
                }
            }

            if (addNewSortColumn) {
                if (that.sorting.mode === 'one') {
                    clearSortColumns();
                }

                if (sortOrder !== null) {
                    that._sortedColumns.push({ dataField: columnDataField, sortOrder: sortOrder, sortIndex: column.sortIndex, dataType: dataType });
                }
            }

            column.setProperty('sortOrder', sortOrder);

            that._sortedColumns.sort(function (a, b) {
                if (typeof a.sortIndex === 'string' && typeof b.sortIndex === 'string') {
                    return 0;
                }

                if (typeof a.sortIndex === 'number' && typeof b.sortIndex === 'string') {
                    return -1;
                }

                if (typeof a.sortIndex === 'string' && typeof b.sortIndex === 'number') {
                    return 1;
                }

                if (typeof a.sortIndex === 'number' && typeof b.sortIndex === 'number') {
                    return a.sortIndex - b.sortIndex;
                }
            });

            for (var _i3 = 0; _i3 < that._sortedColumns.length; _i3++) {
                var _sortColumn = that._sortedColumns[_i3];

                sortDataFields.push(_sortColumn.dataField);
                sortOrders.push(_sortColumn.sortOrder);
                sortDataTypes.push(_sortColumn.dataType);
            }

            var sort = function sort() {
                if (that.dataSource && that.dataSource.virtualDataSource) {
                    that._virtualDataRequest('sort');
                } else {
                    that.dataSource.sortBy(sortDataFields, sortDataTypes, sortOrders);

                    if (that.dataSource.boundHierarchy) {
                        that._refreshRowHierarchy();
                    } else {
                        for (var _i4 = 0; _i4 < that.dataSource.length; _i4++) {
                            var row = that.rows[_i4];
                            var data = that.dataSource[_i4];

                            row.data = data;
                            row.boundIndex = data.boundIndex;
                        }
                    }

                    that._recycle();
                }

                that.$.fireEvent('sort', {
                    'data': that.getSortedColumns()
                });
            };

            if (that.appearance.allowSortAnimation) {
                var positions = [];
                var takenPositions = [];

                that.rows.canNotify = false;
                that._sortAnimation = true;

                var refreshRows = function refreshRows() {
                    for (var _i5 = 0; _i5 < that._rowElements.length; _i5++) {
                        var rowElement = that._rowElements[_i5];

                        rowElement.classList.remove('jqx-grid-sort-animation');
                        that.removeTransformMoveStyle(rowElement);

                        if (rowElement.offsetHeight > 0) {
                            positions.push(rowElement.offsetTop);
                        }
                    }
                };

                refreshRows();

                that._sortTimer = setTimeout(function () {
                    refreshRows();
                    that._sortAnimation = false;
                    that.rows.canNotify = true;
                }, that.appearance.sortAnimationDuration);

                that._sortTimer2 = setTimeout(function () {
                    sort();
                }, that.appearance.sortAnimationDuration / 2);

                var _loop = function _loop(_i6) {
                    var rowElement = that._rowElements[_i6];

                    rowElement.classList.remove('jqx-grid-sort-animation');

                    that.removeTransformMoveStyle(rowElement);
                    var randomIndex = Math.floor(Math.random() * positions.length - 1 + 1);

                    while (takenPositions[randomIndex]) {
                        randomIndex = Math.floor(Math.random() * positions.length - 1 + 1);
                    }

                    takenPositions[randomIndex] = true;

                    that.addTransformMoveStyle(rowElement, '0ms', 0, -rowElement.offsetTop + positions[randomIndex], 0, 0.5);
                    rowElement.classList.add('jqx-grid-sort-animation');

                    setTimeout(function () {
                        that.addTransformMoveStyle(rowElement, that.appearance.sortAnimationDuration + 'ms', 0, 0, 0, 1);
                    });

                    setTimeout(function () {
                        rowElement.classList.remove('jqx-grid-sort-animation');
                    }, that.appearance.sortAnimationDuration);
                };

                for (var _i6 = 0; _i6 < positions.length; _i6++) {
                    _loop(_i6);
                }
            } else {
                sort();
            }

            that._isSorting = false;
        }
    }]);
    return Sort;
}());