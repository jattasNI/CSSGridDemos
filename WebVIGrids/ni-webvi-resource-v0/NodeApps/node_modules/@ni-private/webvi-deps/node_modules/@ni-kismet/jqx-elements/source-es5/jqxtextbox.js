'use strict';

/**
* TextBox custom element.
*/
JQX('jqx-text-box', function (_JQX$ComboBox) {
    babelHelpers.inherits(TextBox, _JQX$ComboBox);

    function TextBox() {
        babelHelpers.classCallCheck(this, TextBox);
        return babelHelpers.possibleConstructorReturn(this, (TextBox.__proto__ || Object.getPrototypeOf(TextBox)).apply(this, arguments));
    }

    babelHelpers.createClass(TextBox, [{
        key: 'template',


        /**
        * TextBox's HTML template.
        */
        value: function template() {
            return '<div id="container">\n                    <span id="label" inner-h-t-m-l="[[label]]" class="jqx-label"></span>\n                    <div id="content" class="jqx-content">\n                        <input class="jqx-input" type="text" id="input"\n                            disabled="[[disabled]]"\n                            maxlength="[[maxLength]]"\n                            name="[[name]]"\n                            placeholder="[[placeholder]]"\n                            readonly="[[readonly]]">\n                        <div id="autoCompleteString"></div>\n                        <div id="dropDownContainer" class="jqx-drop-down jqx-drop-down-container jqx-visibility-hidden">\n                           <jqx-list-box id="listBox"\n                               data-source="[[dataSource]]"\n                               unfocusable="true"\n                               disabled="[[disabled]]"\n                               display-loading-indicator="[[displayLoadingIndicator]]"\n                               display-member="[[displayMember]]"\n                               item-height="[[itemHeight]]"\n                               item-template="[[itemTemplate]]"\n                               filter-callback="[[filterCallback]]"\n                               filter-mode="[[filterMode]]"\n                               loading-indicator-placeholder="[[loadingIndicatorPlaceholder]]"\n                               loading-indicator-position="[[loadingIndicatorPosition]]"\n                               placeholder="[[dropDownPlaceholder]]"\n                               readonly="[[readonly]]"\n                               selection-mode="[[selectionMode]]"\n                               value-member="[[valueMember]]">\n                                <content></content>\n                            </jqx-list-box>\n                         </div>\n                    </div>\n                    <span id="hint" class ="jqx-hint"></span>\n                </div>';
        }

        /**
        * Updates the TextBox when a property is changed.
        * @param {string} propertyName The name of the property.
        * @param {number/string} oldValue The previously entered value. Max, min and value are of type Number. The rest are of type String.
        * @param {number/string} newValue The new entered value. Max, min and value are of type Number. The rest are of type String.
        */

    }, {
        key: 'propertyChangedHandler',
        value: function propertyChangedHandler(propertyName, oldValue, newValue) {
            var that = this;

            switch (propertyName) {
                case 'autoComplete':
                    if (that.$.listBox._filteredItems && that.$.listBox._filteredItems.length !== that.$.listBox._items.length) {
                        babelHelpers.get(TextBox.prototype.__proto__ || Object.getPrototypeOf(TextBox.prototype), '_autoComplete', this).call(this, true);
                    }

                    //Handle HTMLInput's default autocomplete
                    that.$.input.autocomplete = newValue !== 'none' ? 'off' : 'on';
                    break;

                case 'dataSource':
                case 'valueMember':
                    //when selectedValues is 0 and displayMember is changed set actionButton text to default.
                    that._clearSelection();

                    //Check the new listBox size
                    that._setDropDownSize();
                    that._positionDetection.checkBrowserBounds('vertically');
                    that._positionDetection.positionDropDown();
                    that._positionDetection.checkBrowserBounds('horizontally');

                    //Issue: When changing dataSource from property, the items are not added right away so size isnt calculated properly. Needs a new event or sth...
                    //that._setDropDownSize();
                    break;
                case 'displayMember':
                case 'inputMember':
                    {
                        var listBox = that.$.listBox;

                        if (listBox.selectedIndexes.length) {
                            var label = listBox._items[listBox.selectedIndexes[0]][that.inputMember];

                            that.$.listBox.$.filterInput.value = label;

                            that.$.input.value = that.displayMode === 'escaped' ? that._toEscapedDisplayMode(label) : that._toDefaultDisplayMode(label);
                            that.set('value', that._toDefaultDisplayMode(that.$.input.value));
                        }

                        break;
                    }
                case 'displayMode':
                    that.$.input.value = newValue === 'escaped' ? that._toEscapedDisplayMode(that.value) : that.value = that._toDefaultDisplayMode(that.$.input.value);
                    break;
                case 'dropDownOpenMode':
                    that._setFocusable();
                    that.$dropDownContainer.addClass('jqx-visibility-hidden');
                    that.opened = false;
                    break;
                case 'value':
                    if (that.$.input !== document.activeElement || that.$.input === document.activeElement && that.$.input.value === that._oldValue) {
                        that.$.input.value = that.displayMode === 'escaped' ? that._toEscapedDisplayMode(that.value) : that.value;
                        that._oldValue = oldValue;
                    }

                    if (!that.value) {
                        that.clearSelection();
                    }

                    newValue.length > 0 ? that.$.addClass('has-value') : that.$.removeClass('has-value');
                    break;
                case 'hint':
                    if (newValue === null) {
                        that.$.hint.innerHTML = '';
                        that.$.removeClass('invalid');
                        return;
                    }

                    that._handleHintContainer();
                    break;
                default:
                    babelHelpers.get(TextBox.prototype.__proto__ || Object.getPrototypeOf(TextBox.prototype), 'propertyChangedHandler', this).call(this, propertyName, oldValue, newValue);
                    break;
            }
        }

        /**
        * Checks for missing modules.
        */

    }, {
        key: 'open',


        /**
         * Opens the popup
         */
        value: function open() {
            var that = this;

            if (that.$.listBox.items.length === 0 || that.autoComplete === 'none') {
                return;
            }

            if (that.$.input.value.length === 0 && that.$.listBox._filteredItems && that.$.listBox._filteredItems.length !== that.$.listBox._items.length) {
                babelHelpers.get(TextBox.prototype.__proto__ || Object.getPrototypeOf(TextBox.prototype), '_autoComplete', this).call(this, true);
                return;
            }

            babelHelpers.get(TextBox.prototype.__proto__ || Object.getPrototypeOf(TextBox.prototype), 'open', this).call(this);
        }

        /**
         * Closes the popup
         */

    }, {
        key: 'close',
        value: function close() {
            var that = this;

            babelHelpers.get(TextBox.prototype.__proto__ || Object.getPrototypeOf(TextBox.prototype), 'close', this).call(this);
            that.$.autoCompleteString.textContent = '';

            if (that.$.listBox._focusedItem) {
                that.$.listBox._focusedItem._focused = false;
            }

            if (that.autoComplete === 'none') {
                return;
            }

            if (that.$.input._filteredItems && that.$.input._filteredItems[0] && that.$.input._filteredItems[0] !== that.$.input.value) {
                babelHelpers.get(TextBox.prototype.__proto__ || Object.getPrototypeOf(TextBox.prototype), '_autoComplete', this).call(this, true);
            }
        }

        /**
         * Focus method
         */

    }, {
        key: 'focus',
        value: function focus() {
            this.$.input.focus();
        }

        /**
        * Sets tab index 
        */

    }, {
        key: '_setFocusable',
        value: function _setFocusable() {
            var that = this;

            if (that.disabled || that.unfocusable) {
                that.$.input.tabIndex = -1;
                return;
            }

            that.$.input.removeAttribute('tabindex');
        }

        /**
        * Reset Method. Reset to the initialization value
        */

    }, {
        key: 'reset',
        value: function reset() {
            var that = this;

            if (that.displayMode === 'escaped') {
                that.value = that._initializationValue;
                that.$.input.value = that._toEscapedDisplayMode(that._initializationValue);
            } else {
                that.$.input.value = that.value = that._initializationValue;
            }

            if (!that.value && that.$.listBox) {
                that.clearSelection();
            }
        }

        /**
        * BindingComplete event Handler. When the dataSource or size of listBox is changed.
        */

    }, {
        key: '_bindingCompleteHandler',
        value: function _bindingCompleteHandler() {
            var that = this;

            if (!that.$.listBox) {
                return;
            }

            that._setDropDownSize();
            that._positionDetection.checkBrowserBounds();
        }

        /**
        * TextBox create method.
        */

    }, {
        key: '_createElement',
        value: function _createElement() {
            var that = this;

            that._browserIsIEorEdge = JQX.Utilities.Core.Browser.IE || JQX.Utilities.Core.Browser.Edge;

            if (that.autoFocus) {
                that.$.input.focus();
            }

            if (that.value) {
                that.$.input.value = that.displayMode === 'escaped' ? that._toEscapedDisplayMode(that.value) : that.value;
            }

            if (that.autoComplete !== 'none') {
                that.$.input.autocomplete = 'off';
            }

            that._setDropDownSize();
            that._handleSelectedText();
            that._setFocusable();
            that._initializationValue = that._oldValue = that.value;
            that.value.length > 0 ? that.$.addClass('has-value') : that.$.removeClass('has-value');
            that._handleHintContainer();
        }

        /**
        * Focus handler. Selects whole text in element's text area on selectAllOnFocus: true
        */

    }, {
        key: '_focusHandler',
        value: function _focusHandler(event) {
            var that = this;

            if (event.type === 'blur') {
                if (that._isDropDownClicked) {
                    return;
                }

                that.removeAttribute('focus');
                that.$.autoCompleteString.textContent = '';
                that.value.length > 0 ? that.$.addClass('has-value') : that.$.removeClass('has-value');

                if ((that.autoComplete === 'auto' || that.autoComplete === 'inline') && that.$.input.value.length > 0 && that.$.listBox._focusedItem && that.$.listBox._focusedItem._focused) {
                    that.$.input.value = that.$.listBox._focusedItem[that.inputMember];
                }

                if (!that._preventDropDownClose) {
                    that.close();
                }

                if (that._oldValue !== that.value) {
                    that.$.fireEvent('change', { oldValue: that._oldValue, newValue: that.value });
                }
                return;
            }

            if (that.disabled) {
                return;
            }

            that.setAttribute('focus', '');
            that._oldValue = that.value;

            if (that.selectAllOnFocus) {
                that.$.input.select();
            }
        }

        /**
        * TextBox container mouse enter/leave events handler.
        */

    }, {
        key: '_handlePointerInEscapedSymbol',
        value: function _handlePointerInEscapedSymbol(direction) {
            var that = this;

            if (that.displayMode !== 'escaped') {
                return;
            }

            var selectionStart = that.$.input.selectionStart,
                selectionEnd = that.$.input.selectionEnd,
                value = that.$.input.value;

            if (value[selectionStart - 1] !== '\\') {
                return;
            }

            if (!value[selectionStart].match(/n|r|s|t|f/g)) {
                return;
            }

            if (selectionStart === selectionEnd) {
                var pointerPositionModifier = direction === 'next' ? 1 : -1;
                that.$.input.selectionStart = selectionStart + pointerPositionModifier;
                that.$.input.selectionEnd = selectionStart + pointerPositionModifier;
                return;
            } else {
                that.$.input.selectionStart = selectionStart - 1;
            }

            if (value[selectionEnd - 1] !== '\\') {
                return;
            }

            if (!value[selectionEnd].match(/n|r|s|t|f/g)) {
                return;
            }

            that.$.input.selectionEnd = selectionEnd + 1;
        }

        /**
         * Handles Text selection
         */

    }, {
        key: '_handleSelectedText',
        value: function _handleSelectedText() {
            var that = this;

            if (that.selectionStart === null || that.selectionEnd === null || that.selectionStart === that.selectionEnd || that.selectAllOnFocus) {
                return;
            }

            that.selectionStart = that.selectionStart < 0 ? 0 : that.selectionStart;
            that.selectionEnd = that.selectionEnd > that.value.length ? that.value.length : that.selectionEnd;

            that.$.input.setSelectionRange(that.selectionStart, that.selectionEnd);
        }

        /**
         * Handles the Hint
         */

    }, {
        key: '_handleHintContainer',
        value: function _handleHintContainer() {
            var that = this;

            if (!that.hint) {
                return;
            }

            var container = that.$.hint;

            if (typeof that.hint === 'function') {
                var value = that.value,
                    invalid = that.hint(value, container);

                invalid ? that.$.addClass('invalid') : that.$.removeClass('invalid');
            } else if (typeof that.hint === 'string') {
                container.innerHTML = that.hint;
                that.$.removeClass('invalid');
            }
        }

        /**
        * keyDown event handler.
        */

    }, {
        key: '_keyDownHandler',
        value: function _keyDownHandler(event) {
            var that = this;

            function replaceEscapedKeyWith(newValue) {
                var selectionStart = that.$.input.selectionStart,
                    selectionEnd = that.$.input.selectionEnd,
                    value = that.$.input.value;

                event.preventDefault();
                value = value.substring(0, selectionStart) + newValue + value.substring(selectionEnd, value.length);
                that.value = that._toDefaultDisplayMode(value);
                that.$.input.value = value;
                that.$.input.selectionStart = that.$.input.selectionEnd = selectionStart + 2;
            }

            that._showAutoCompleteHighlighter = false;

            switch (event.key) {
                case 'ArrowUp':
                case 'ArrowDown':
                    if (event.altKey) {
                        event.preventDefault();
                        if (event.key === 'ArrowDown') {
                            that.open();
                        } else {
                            that.close();
                        }

                        return;
                    }

                    if (that.opened) {
                        event.preventDefault();
                        that.$.listBox._handleKeyStrokes(event.key);

                        if (that.autoComplete !== 'inline') {
                            break;
                        }

                        that._showAutoCompleteHighlighter = true;
                        babelHelpers.get(TextBox.prototype.__proto__ || Object.getPrototypeOf(TextBox.prototype), '_updateAutoCompleteHelper', this).call(this);
                    }

                    break;
                case 'PageUp':
                case 'PageDown':
                    event.preventDefault();
                    that.$.input.selectionStart = that.$.input.selectionEnd = event.key === 'PageUp' ? 0 : that.$.input.value.length;
                    break;
                case 'Enter':
                    if (that.opened && that.$.listBox._focusedItem && that.$.listBox._focusedItem._focused) {
                        that.$.listBox.$.filterInput.value = that.$.listBox._focusedItem[that.inputMember];
                        that.$.input.value = that.displayMode === 'escaped' ? that._toEscapedDisplayMode(that.$.listBox._focusedItem[that.inputMember]) : that._toDefaultDisplayMode(that.$.listBox._focusedItem[that.inputMember]);
                        that.select(that.$.listBox._focusedItem);
                        that.close();
                    }

                    if (that.enterKeyBehavior !== 'default') {
                        var value = that.$.input.value;

                        if (that._oldValue !== value) {
                            event.preventDefault();
                            that.$.fireEvent('change', {
                                'oldValue': that._oldValue,
                                'newValue': value,
                                'type': 'submit'
                            });

                            if (that.enterKeyBehavior === 'clearOnSubmit') {
                                if (JQX.MaskedTextBox && that instanceof JQX.MaskedTextBox) {
                                    that._cleanMask();
                                    that._setMaskToInput();
                                    that.$.input.selectionStart = that.$.input.selectionEnd = 0;
                                } else {
                                    that.$.input.value = '';
                                }
                            }

                            that._oldValue = that.value = that._toDefaultDisplayMode(that.$.input.value);
                        }

                        that._submitted = true;
                    }
                    break;
                case 'Escape':
                    that.close();
                    that._closedFromKeyCombination = true;

                    if (that.escKeyMode === 'none') {
                        return;
                    }

                    switch (that.escKeyMode) {
                        case 'none':
                            break;
                        case 'clearValue':
                            that.value = that.$.input.value = '';
                            break;
                        case 'previousValue':
                            that.$.input.value = that.displayMode === 'escaped' ? that._toEscapedDisplayMode(that._oldValue) : that._oldValue;
                            break;
                    }

                    break;
                case ' ':
                    if (that.displayMode === 'escaped') {
                        replaceEscapedKeyWith('\\s');
                    }

                    break;
                case 'Backspace':
                    if (that.displayMode === 'escaped' && that.$.input.selectionStart === that.$.input.selectionEnd) {
                        var carretPosition = that.$.input.selectionStart;

                        if (that.$.input.value[carretPosition - 2] === '\\' && (that.$.input.value[carretPosition - 1] === 's' || that.$.input.value[carretPosition - 1] === 'n')) {
                            that.$.input.value = that.$.input.value.substring(0, carretPosition - 2) + that.$.input.value.substring(carretPosition - 2, that.$.input.value.length);
                            that.$.input.selectionStart = carretPosition - 2;
                        }
                    }

                    break;
            }
        }

        /**
         * Pre-defined ComboBox keyUpHandler
         */

    }, {
        key: '_keyUpHandler',
        value: function _keyUpHandler(event) {
            var that = this;

            if (that.disabled || event.key === 'Escape' || event.target === that.$.listBox.$.filterInput) {
                return;
            }

            if (event.target === that.$.input && that.selectionMode === 'oneOrManyExtended') {
                that.$.listBox._keysPressed[event.key] = false;
            }
        }

        /**
         * ListItem click event handler
         * @param {any} event
         */

    }, {
        key: '_listBoxItemClickHandler',
        value: function _listBoxItemClickHandler(event) {
            var that = this,
                eventDetails = event.detail;

            babelHelpers.get(TextBox.prototype.__proto__ || Object.getPrototypeOf(TextBox.prototype), '_listBoxItemClickHandler', this).call(this, event);

            if (eventDetails.selected) {
                if (that.displayMode === 'escaped') {
                    var originalValue = that.$.input.value;

                    that.value = that._toDefaultDisplayMode(originalValue);
                    that.$.input.value = originalValue;
                } else {
                    that.value = that.$.input.value;
                }

                if (that._oldValue !== that.value) {
                    that.$.fireEvent('change', { oldValue: that._oldValue, newValue: that.value });
                    that.$.input.focus();
                }
            }
        }
    }, {
        key: '_submitKeyUpHandler',
        value: function _submitKeyUpHandler() {
            var that = this;

            if (that._submitted) {
                if (that.enterKeyBehavior === 'clearOnSubmit') {
                    that.$.input.selectionStart = that.$.input.selectionEnd = 0;
                }

                that._submitted = false;
            }
        }

        /**
        * TextBox keyUp event handler.
        */

    }, {
        key: '_textBoxKeyUpHandler',
        value: function _textBoxKeyUpHandler(event) {
            var that = this;

            if (that.disabled || event.altKey || event.ctrlKey) {
                return;
            }

            if (that.displayMode === 'escaped') {
                var originalValue = that.$.input.value;

                that.value = that._toDefaultDisplayMode(that.$.input.value);
                that.$.input.value = originalValue;
            } else {
                that.value = that.$.input.value;
            }

            var selectedItem = void 0;

            if (that.$.listBox.selectedIndexes.length === 1) {
                selectedItem = that.$.listBox.getItem(that.$.listBox.selectedValues[0]);

                if (that.value !== selectedItem[that.inputMember]) {
                    that.unselect(selectedItem);
                }
            }

            if (!that._showAutoCompleteHighlighter) {
                that.$.autoCompleteString.textContent = '';
            }

            if (event.key === 'Alt' || event.key === 'Control' || !that.opened && event.key === 'Escape' || event.key === 'Enter') {
                that._closedFromKeyCombination = false;
                return;
            }

            if (event.key && event.key.indexOf('Arrow') > -1) {
                that._handlePointerInEscapedSymbol(event.key === 'ArrowRight' ? 'next' : undefined);
                return;
            }

            if (that.autoComplete !== 'none' && (that.$.input.value.length > 0 || that.dropDownOpenMode === 'auto')) {
                var autoComplete = babelHelpers.get(TextBox.prototype.__proto__ || Object.getPrototypeOf(TextBox.prototype), '_autoComplete', this).bind(that);

                if (that._autoCompleteTimer) {
                    clearTimeout(that._autoCompleteTimer);
                }

                if (that.$.listBox._items.length === 0 && typeof that.dataSource !== 'function') {
                    that.close();
                    return;
                }

                that._autoCompleteTimer = setTimeout(function () {
                    autoComplete(true);
                }, that.autoCompleteDelay);
            } else {
                that.close();
            }

            if (event.key === 'Enter' && that.value !== that.value && that._browserIsIEorEdge) {
                that.value = that.$.input.value;
                that.$.fireEvent('change', { value: that.value });
            }
        }

        /**
        * ListBox drop down change event handler.
        */

    }, {
        key: '_listBoxChangeHandler',
        value: function _listBoxChangeHandler(event) {
            var that = this;

            //Stop listBox's change event. TextBox will throw it's own 'change' event
            event.stopPropagation();

            if (event.detail.selected) {
                var label = that.$.listBox._items[event.detail.index][that.inputMember];

                that.$.listBox.$.filterInput.value = label;

                that.$.input.value = that.displayMode === 'escaped' ? that._toEscapedDisplayMode(label) : that._toDefaultDisplayMode(label);
                that.set('value', that._toDefaultDisplayMode(that.$.input.value));
            }

            if (that.autoComplete !== 'none' && typeof that.dataSource !== 'function') {
                that._autoComplete(true);
            }
        }

        /**
        * TextBox container mouse enter/leave events handler.
        */

    }, {
        key: '_mouseEventsHandler',
        value: function _mouseEventsHandler(event) {
            var that = this;

            event.type === 'mouseenter' ? that.setAttribute('hover', '') : that.removeAttribute('hover');
        }

        /**
        * TextBox change handler.
        */

    }, {
        key: '_textBoxChangeHandler',
        value: function _textBoxChangeHandler(event) {
            var that = this;

            event.stopPropagation();

            if (that.displayMode === 'escaped') {
                var originalValue = that.$.input.value,
                    selectionStart = that.$.input.selectionStart,
                    selectionEnd = that.$.input.selectionEnd,
                    clipboardData = event.clipboardData || event.originalEvent && event.originalEvent.clipboardData || window.clipboardData;

                if (clipboardData) {
                    var clipboardValue = clipboardData.getData('text'),
                        value = that.$.input.value;

                    event.preventDefault();
                    clipboardValue = that._toEscapedDisplayMode(clipboardValue);
                    that.$.input.value = value.substring(0, selectionStart) + clipboardValue + value.substring(selectionEnd, value.length);
                }

                that.value = that._toDefaultDisplayMode(that.$.input.value);
                that.$.input.value = originalValue;
            } else {
                that.value = that.$.input.value;
            }

            that._handleHintContainer();
        }

        /**
        * TextBox test select handler.
        */

    }, {
        key: '_textBoxSelectHandler',
        value: function _textBoxSelectHandler() {
            var that = this;

            if (that.disabled) {
                return;
            }

            that.selectionStart = that.$.input.selectionStart;
            that.selectionEnd = that.$.input.selectionEnd;
        }

        /**
        * Escapes special characters in the string.
        */

    }, {
        key: '_toEscapedDisplayMode',
        value: function _toEscapedDisplayMode(str) {
            var keyValuePairs = [{ key: /\r\n|\n\r|\n|\r/g, value: '\\n' }, { key: /\s/g, value: '\\s' }, { key: /\n/g, value: '\\n' }, { key: /\t/g, value: '\\t' }, { key: /\f/g, value: '\\f' }, { key: /\r/g, value: '\\r'
                /*{ key: /\\/g, value: '\\\\' }*/
            }];

            for (var i = 0; i < keyValuePairs.length; i++) {
                str = str.replace(keyValuePairs[i].key, keyValuePairs[i].value);
            }

            return str;
        }

        /**
        * Reverts escaped characters.
        */

    }, {
        key: '_toDefaultDisplayMode',
        value: function _toDefaultDisplayMode(str) {
            if (!str) {
                str = '';
            }

            var keyValuePairs = [{ key: /\\s/g, value: ' ' }, { key: /\\n/g, value: '\n' }, { key: /\\t/g, value: '\t' }, { key: /\\f/g, value: '\f' }, { key: /\\r/g, value: '\r'
                /*{ key: /\\\\[^n{1}|^s{1}|^t{1}|^f{1}|^r{1}]/g, value: '\\' }*/
            }];

            for (var i = 0; i < keyValuePairs.length; i++) {
                str = str.replace(keyValuePairs[i].key, keyValuePairs[i].value);
            }

            return str;
        }

        /**
        * Document mouse down event handler.
        */

    }, {
        key: '_documentDownHandler',
        value: function _documentDownHandler(event) {
            var that = this;

            if (that.disabled || that.readonly) {
                return;
            }

            var target = event.originalEvent.target;

            if (that.enableShadowDOM) {
                target = event.originalEvent.composedPath()[0];

                var rootElement = target.getRootNode().host;

                while (rootElement) {
                    if (rootElement.closest('.jqx-drop-down-container') === that.$.dropDownContainer) {
                        that._isDropDownClicked = true;
                    }

                    rootElement = rootElement.getRootNode().host;
                }
            } else {
                that._isDropDownClicked = target.closest('.jqx-drop-down-container') === that.$.dropDownContainer;
            }

            var listItem = event.originalEvent.target.closest('jqx-list-item');

            if (that.hasRippleAnimation && listItem) {
                JQX.Utilities.Animation.Ripple.animate(listItem, event.pageX, event.pageY);
            }

            if (listItem || that._isDropDownClicked) {
                that._preventDropDownClose = true;
            }
        }

        /**
        * Document Up event handler.
        */

    }, {
        key: '_documentUpHandler',
        value: function _documentUpHandler(event) {
            var that = this;

            if (that.disabled) {
                return;
            }

            var target = that.enableShadowDOM ? event.originalEvent.composedPath()[0] : event.originalEvent.target;

            if (!target) {
                return;
            }

            if (that.displayMode === 'escaped' && target === that.$.input) {
                that._handlePointerInEscapedSymbol();
            }

            if (that._isDropDownClicked || that.readonly) {
                delete that._isDropDownClicked;
                return;
            }

            if (target === that.$.input && that.dropDownOpenMode === 'auto') {
                babelHelpers.get(TextBox.prototype.__proto__ || Object.getPrototypeOf(TextBox.prototype), '_autoComplete', this).call(this, true);
                return;
            }

            while (target) {
                if (target instanceof JQX.ListItem && target.ownerListBox === that.$.listBox) {
                    if (target.unselectable || target.disabled) {
                        return;
                    }

                    if (that.displayMode === 'escaped') {
                        that.value = target[that.inputMember];
                        that.$.input.value = that._toEscapedDisplayMode(target[that.inputMember]);
                    } else {
                        that.$.input.value = that.value = target[that.inputMember];
                    }

                    that.$.fireEvent('change', {
                        'oldValue': that._oldValue,
                        'newValue': that.value,
                        'type': 'submit'
                    });

                    that._oldValue = that.value;
                    that.enterKeyBehavior === 'clearOnSubmit' && (that.$.input.value = that.value = '');

                    babelHelpers.get(TextBox.prototype.__proto__ || Object.getPrototypeOf(TextBox.prototype), '_autoComplete', this).call(this, true);
                    that.close();
                    target = 'item';
                    that.$.input.focus();
                    return;
                } else if (target === that.$.listBox) {
                    target = 'listBox';
                    return;
                }

                target = target.parentElement;
            }

            if (target !== 'listBox' && target !== 'item') {
                that.close();
                return;
            }
        }
    }], [{
        key: 'properties',

        /** 
        * TextBox's properties 
        */
        get: function get() {
            return {
                'autoFocus': {
                    value: false,
                    type: 'boolean'
                },
                'autoComplete': {
                    allowedValues: ['none', 'manual', 'auto', 'inline'],
                    type: 'string',
                    value: 'manual'
                },
                'displayMode': {
                    value: 'default',
                    allowedValues: ['default', 'escaped'],
                    type: 'string'
                },
                'dropDownOpenMode': {
                    allowedValues: ['none', 'default', 'auto'],
                    value: 'default',
                    type: 'string'
                },
                'enterKeyBehavior': {
                    value: 'submit',
                    allowedValues: ['submit', 'clearOnSubmit'],
                    type: 'string'
                },
                'form': {
                    value: '',
                    type: 'string'
                },
                'hint': {
                    value: null,
                    reflectToAttribute: false,
                    type: 'any'
                },
                'maxLength': {
                    value: null,
                    type: 'number?'
                },
                'minLength': {
                    value: 2,
                    type: 'number'
                },
                'messages': {
                    extend: true,
                    value: {
                        'en': {
                            'missingReference': '{{elementType}}: Missing reference to {{files}}.'
                        }
                    },
                    type: 'object'
                },
                'required': {
                    value: false,
                    type: 'boolean'
                },
                'requiredMessage': {
                    value: '',
                    type: 'string'
                },
                'selectAllOnFocus': {
                    value: false,
                    type: 'boolean'
                },
                'selectionMode': {
                    value: 'zeroOrOne',
                    allowedValues: ['none', 'oneOrManyExtended', 'zeroOrMany', 'oneOrMany', 'zeroOrOne', 'one', 'checkBox', 'radioButton'],
                    type: 'string'
                },
                'type': {
                    value: 'input',
                    type: 'string',
                    defaultReflectToAttribute: true,
                    readonly: true
                },
                'value': {
                    value: '',
                    type: 'string'
                }
            };
        }

        /**
        * TextBox's event listeners.
        */

    }, {
        key: 'listeners',
        get: function get() {
            return {
                'document.up': '_documentUpHandler',
                'focus': '_focusHandler',
                'keydown': '_keyDownHandler',
                'mouseenter': '_mouseEventsHandler',
                'mouseleave': '_mouseEventsHandler',
                'input.blur': '_focusHandler',
                'input.change': '_textBoxChangeHandler',
                'input.focus': '_focusHandler',
                'input.keyup': '_textBoxKeyUpHandler',
                'input.paste': '_textBoxChangeHandler',
                'input.select': '_textBoxSelectHandler',
                'listBox.bindingComplete': '_bindingCompleteHandler'
            };
        }
    }, {
        key: 'requires',
        get: function get() {
            return {
                'JQX.ComboBox': 'jqxcombobox.js'
            };
        }

        /*
        * CSS files needed for the element (ShadowDOM)
        */

    }, {
        key: 'styleUrls',
        get: function get() {
            return ['jqx.textbox.css'];
        }
    }]);
    return TextBox;
}(JQX.ComboBox));