'use strict';

JQX('jqx-grid', function (_JQX$ScrollViewer) {
    babelHelpers.inherits(Grid, _JQX$ScrollViewer);

    function Grid() {
        babelHelpers.classCallCheck(this, Grid);
        return babelHelpers.possibleConstructorReturn(this, (Grid.__proto__ || Object.getPrototypeOf(Grid)).apply(this, arguments));
    }

    babelHelpers.createClass(Grid, [{
        key: 'template',


        /** Button's template. */
        value: function template() {
            return '<div class=\'jqx-container\'id=\'container\' disabled=\'[[disabled]]\' role=\'grid\'>\n                <div id=\'header\' class=\'jqx-grid-header jqx-hidden\' ></div>\n                <div id=\'groupHeader\' class=\'jqx-grid-group-header jqx-hidden\'></div>\n                <div id=\'headerPager\' top class=\'jqx-grid-pager jqx-hidden\'></div>\n                <div id=\'headerCommandBar\' header top class=\'jqx-grid-header jqx-grid-command-bar jqx-hidden\'></div>\n                 <div id=\'content\' class=\'jqx-grid-content\'>\n                    <div id=\'placeholder\' class =\'jqx-hidden jqx-placeholder jqx-grid-placeholder\'>[[placeholder]]</div>\n                    <div id=\'columnHeader\' class=\'jqx-grid-column-header\'>\n                        <div id=\'columnNearContainer\' class=\'near jqx-hidden jqx-grid-column-header-cell-container\'>\n                       </div>\n                       <div id=\'columnContainer\' class=\'center jqx-grid-column-header-cell-container\'>\n                       </div>\n                        <div id=\'columnFarContainer\' class=\'far jqx-hidden jqx-grid-column-header-cell-container\'>\n                       </div>\n                    </div>\n                    <div id=\'scrollView\' class =\'jqx-grid-scroll-view\'>\n                        <div id=\'rowNearContainer\' class=\'near jqx-hidden jqx-grid-row-container\'>\n                        </div>\n                         <div id=\'rowContainer\' class=\'center jqx-grid-row-container\'>\n                        </div>\n                        <div id=\'rowFarContainer\' class=\'far jqx-hidden jqx-grid-row-container\'>\n                        </div>\n                        <jqx-scroll-bar id=\'verticalScrollBar\' class=\'jqx-grid-scroll-bar\' wait disabled=\'[[disabled]]\' orientation=\'vertical\'></jqx-scroll-bar>\n                        <jqx-scroll-bar id=\'horizontalScrollBar\' class=\'jqx-grid-scroll-bar\' wait disabled=\'[[disabled]]\'></jqx-scroll-bar>\n                    </div>\n                  <div id=\'filterFooter\' class=\'jqx-grid-filter-footer jqx-hidden\'></div>\n                </div>\n                <div id=\'loadingIndicatorContainer\' class=\'jqx-loader-container\'>\n                    <span id=\'loadingIndicator\' class=\'jqx-grid-loader jqx-loader\'></span>\n                    <span id=\'loadingIndicatorPlaceHolder\' class =\'jqx-loader-label jqx-hidden\'>[[loadingIndicatorPlaceholder]]</span>\n                </div>\n                <div id=\'footerCommandBar\' footer class=\'jqx-grid-footer jqx-grid-command-bar jqx-hidden\'></div>\n                <div id=\'footerPager\' class=\'jqx-grid-pager jqx-hidden\'></div>\n                <div id=\'footer\' class=\'jqx-grid-footer jqx-hidden\'></div>\n            </div>';
        }

        /**
            * Grid's event listeners.
            */

    }, {
        key: 'pageSizeValidator',
        value: function pageSizeValidator(oldValue, newValue) {
            var that = this;

            if (newValue < 0) {
                return 0;
            }

            if (that.dataSource && newValue > that.dataSource.length) {
                return that.dataSource.length;
            }
        }
    }, {
        key: 'pageIndexValidator',
        value: function pageIndexValidator(oldValue, newValue) {
            var that = this;

            if (newValue < 0) {
                return 0;
            }

            if (that.dataSource) {
                var maxPageIndex = Math.ceil(that.dataSource.length / that.paging.pageSize);

                if (newValue > maxPageIndex - 1) {
                    return maxPageIndex - 1;
                }
            }
        }
    }, {
        key: '_offsetTop',
        value: function _offsetTop(element) {
            var that = this;

            if (!element) {
                return 0;
            }

            return element.offsetTop + that._offsetTop(element.offsetParent);
        }
    }, {
        key: '_offsetLeft',
        value: function _offsetLeft(element) {
            var that = this;

            if (!element) {
                return 0;
            }

            return element.offsetLeft + that._offsetLeft(element.offsetParent);
        }
    }, {
        key: 'offset',
        value: function offset(element) {
            return { left: this._offsetLeft(element), top: this._offsetTop(element) };
        }
    }, {
        key: 'getBoundingRect',
        value: function getBoundingRect(element) {
            var offsetX = window.pageXOffset,
                offsetY = window.pageYOffset,
                rect = element.getBoundingClientRect();

            if (element !== document.body) {
                var parent = element.parentNode;

                while (parent !== document.body) {
                    offsetX += parent.scrollLeft;
                    offsetY += parent.scrollTop;
                    parent = parent.parentNode;
                }
            }

            return {
                bottom: rect.bottom + offsetY,
                height: rect.height,
                left: rect.left + offsetX,
                right: rect.right + offsetX,
                top: rect.top + offsetY,
                width: rect.width
            };
        }
    }, {
        key: '_downHandler',
        value: function _downHandler() {}
    }, {
        key: '_upHandler',
        value: function _upHandler(event) {
            var that = this;

            var boundingRect = that.getBoundingRect(that);

            if (that._tapTimer) {
                clearTimeout(that._tapTimer);
            }

            if (event.pageX < boundingRect.left || event.pageX > boundingRect.right || event.pageY < boundingRect.top || event.pageY > boundingRect.bottom) {
                if (that._inputOverlay) {
                    that._inputOverlay.classList.remove('jqx-input-overlay-on');
                    setTimeout(function () {
                        if (that._inputOverlay) {
                            if (that._inputOverlay.parentNode) {
                                that._inputOverlay.parentNode.removeChild(that._inputOverlay);
                            }

                            that._inputOverlay = null;
                        }
                    }, 300);
                }

                if (that.editing.isEditing && !that.editing.dialog.enabled) {
                    setTimeout(function () {
                        if (event.defaultPrevented) {
                            return;
                        }

                        if (that.editing.editCell && that.editing.editCell.editor.instance) {
                            that.editing.editCell.editor.instance.blur(event);

                            if (event.defaultPrevented) {
                                return;
                            }
                        }

                        that.endEdit();
                    }, 50);
                }

                if (that.menu) {
                    var target = event.originalEvent.target;

                    if (!that.contains(target) && !that.menu.contains(target)) {
                        var dropDownLists = that.menu.querySelectorAll('jqx-drop-down-list');
                        var dateTimePickers = that.menu.querySelectorAll('jqx-date-time-picker');

                        for (var i = 0; i < dropDownLists.length; i++) {
                            var dropDownList = dropDownLists[i];
                            var dropDown = dropDownList.$.dropDownContainer;

                            if (dropDown.contains(target)) {
                                return;
                            }
                        }

                        for (var _i = 0; _i < dateTimePickers.length; _i++) {
                            var dateTimePicker = dateTimePickers[_i];
                            var _dropDown = dateTimePicker.$.dropDownContainer;

                            if (_dropDown.contains(target)) {
                                return;
                            }
                        }

                        that.closeMenu();

                        return;
                    }
                }
            }

            that._dragSelectionEnd();

            that.classList.remove('jqx-grid-resize-mode');
            that.$.root.classList.remove('jqx-grid-resize-mode');

            if (that._rowToResize && that._rowResizeStartLine && that._rowResizeLine) {
                var _row = that.rowById[that._rowToResizeId];

                var newRowHeight = _row.cellHeight + parseFloat(that._rowResizeLine.style.top) - parseFloat(that._rowResizeStartLine.style.top);

                that.rows.canNotify = false;
                _row.height = null;

                if (that.rowResizeMode === 'split') {
                    var nextRow = that._nextRow(_row);
                    var offset = parseInt(_row.height - newRowHeight + _row.cellHeight);

                    _row.computedHeight = newRowHeight;
                    nextRow.computedHeight = parseInt(nextRow.height) + offset;
                    nextRow.height = null;
                } else {
                    _row.computedHeight = newRowHeight;
                }

                that.rows.canNotify = true;

                that._rowResizeStartLine.parentNode.removeChild(that._rowResizeStartLine);
                that._rowResizeLine.parentNode.removeChild(that._rowResizeLine);
                if (that.appearance.showResizeTooltips) {
                    that._rowResizeTooltip.parentNode.removeChild(that._rowResizeTooltip);
                }
                that._rowResizeLine = null;
                that._rowToResize = null;
                that._rowToResizeId = null;

                that.refresh();

                return;
            }

            if (!that._columnToResizeElement || !that._columnResizeLine) {
                return;
            }

            var column = that.columnByDataField[that._columnToResizeDataField];
            var columnRect = that._columnToResizeRect;

            var newColumnWidth = boundingRect.left + parseInt(that._columnResizeLine.style.left) - columnRect.left + that.scrollLeft;

            that.columns.canNotify = false;
            if (that.columnResizeMode === 'split') {
                var nextColumn = that._nextColumn(column);
                var _offset = parseInt(column.computedWidth - newColumnWidth);

                column.width = newColumnWidth;
                nextColumn.width = parseInt(nextColumn.computedWidth) + _offset;
            } else {
                column.width = newColumnWidth;
            }
            that.columns.canNotify = true;
            that._columnResizeLine.parentNode.removeChild(that._columnResizeLine);
            that._columnResizeLine = null;
            that._columnResizeStartLine.parentNode.removeChild(that._columnResizeStartLine);
            if (that._columnResizeTooltip.parentNode) {
                that._columnResizeTooltip.parentNode.removeChild(that._columnResizeTooltip);
            }
            that._columnResizeStartLine = null;
            that._columnToResizeElement = null;
            that._columnToResizeRect = null;
            that._columnToResizeDataField = null;
            that._columnResizeTooltip = null;

            that.refresh();
        }
    }, {
        key: '_nextColumn',
        value: function _nextColumn(column) {
            var that = this;

            for (var i = 0; i < that.viewColumns.length; i++) {
                var currentColumn = that.viewColumns[i];

                if (currentColumn.visibleIndex === column.visibleIndex + 1) {
                    return currentColumn;
                }
            }

            return null;
        }
    }, {
        key: '_nextRow',
        value: function _nextRow(row) {
            var that = this;

            var rows = that._recyclingRows;
            var rowIndex = rows.indexOf(row);

            if (rowIndex >= 0) {
                return rows[rowIndex + 1];
            }

            return null;
        }
    }, {
        key: '_columnMoveResizeHandler',
        value: function _columnMoveResizeHandler(event) {
            var that = this;
            var columnResizeBreakpoint = 5;

            var updateTooltip = function updateTooltip(boundingRect) {
                var columnRect = that._columnToResizeRect;
                var newColumnWidth = boundingRect.left + parseFloat(that._columnResizeLine.style.left) - columnRect.left + that.scrollLeft;

                if (that.appearance.showResizeTooltips) {
                    that._columnResizeTooltip.innerHTML = 'w: ' + parseInt(newColumnWidth) + 'px';
                }
            };

            if (that._columnResizeLine) {
                var column = that.columnByDataField[that._columnToResizeDataField];
                var columnRect = that._columnToResizeRect;
                var minWidth = column.minWidth;
                var maxWidth = column.maxWidth;
                var nextColumn = that._nextColumn(column);
                var boundingRect = that.getBoundingRect(that);

                if (event.pageX < boundingRect.left) {
                    return;
                }

                if (that.columnResizeMode === 'split' && nextColumn) {
                    if (event.pageX >= boundingRect.left + nextColumn.left + nextColumn.width - nextColumn.minWidth - that.scrollLeft) {
                        that._columnResizeLine.style.left = -boundingRect.left + boundingRect.left + nextColumn.width + nextColumn.left - nextColumn.minWidth - that.scrollLeft + 'px';
                        updateTooltip(boundingRect);
                        return;
                    }
                }

                if (columnRect.left + minWidth - that.scrollLeft >= event.pageX) {
                    that._columnResizeLine.style.left = -boundingRect.left + columnRect.left + minWidth - that.scrollLeft + 'px';

                    updateTooltip(boundingRect);
                    return;
                }

                if (columnRect.left + maxWidth - that.scrollLeft <= event.pageX) {
                    that._columnResizeLine.style.left = -boundingRect.left + columnRect.left + maxWidth - that.scrollLeft + 'px';
                    updateTooltip(boundingRect);
                    return;
                }

                that._columnResizeLine.style.left = -boundingRect.left + event.pageX + 'px';
                updateTooltip(boundingRect);
            } else {
                var _that = this;

                var elements = document.elementsFromPoint(event.clientX, event.clientY);

                var columnDataField = null;
                var columnElement = null;

                if (_that._columnResizeLine) {
                    return;
                }

                for (var i = 0; i < elements.length; i++) {
                    var element = elements[i];

                    if (element.hasAttribute('data-field') && element.hasAttribute('header')) {
                        columnDataField = element.getAttribute('data-field');
                        columnElement = element;
                        break;
                    }
                }

                if (_that._columnToResizeElement) {
                    _that._columnToResizeElement.style.cursor = '';
                    _that._columnToResizeElement = null;
                }

                if (columnDataField) {
                    var columnRight = columnElement.getBoundingClientRect().right;

                    columnElement.style.cursor = '';

                    if (columnRight - columnResizeBreakpoint <= event.clientX && event.clientX <= columnRight + columnResizeBreakpoint) {
                        var _column = _that.columnByDataField[columnDataField];

                        if (!_column || _column && !_column.allowResize) {
                            return;
                        }

                        var isLastColumn = _that._isLastVisibleColumn(_column);

                        if (_that.columnResizeMode === 'split' && isLastColumn) {
                            return;
                        }

                        columnElement.style.cursor = 'col-resize';

                        _that._columnToResizeRect = _that.getBoundingRect(columnElement);
                        _that._columnToResizeElement = columnElement;
                        _that._columnToResizeDataField = columnDataField;
                    }
                }
            }
        }
    }, {
        key: '_moveHandler',
        value: function _moveHandler(event) {
            var that = this;

            if (that.selection.enabled && that.selection.allowDragSelection && !that.editing.isEditing) {
                if (!that._selection.selectionRect || that._selection.selectionRect && !that._selection.selectionRect.captured) {
                    that._dragSelection(event);
                    if (JQX.Utilities.Core.isMobile) {
                        event.originalEvent.preventDefault();
                    }
                }
            }

            if (that.columnResizeMode !== 'none') {
                that._columnMoveResizeHandler(event);
            }

            if (that.rowResizeMode !== 'none') {
                that._rowMoveResizeHandler(event);
            }
        }
    }, {
        key: '_rowMoveResizeHandler',
        value: function _rowMoveResizeHandler(event) {
            var that = this;

            var elements = document.elementsFromPoint(event.clientX, event.clientY);
            var rowResizeBreakpoint = 5;
            var resizeLineHeight = 1;

            var rowId = null;
            var rowElement = null;

            if (that._rowResizeLine) {
                var scrollViewTop = that._offsetTop(that.$.scrollView);
                var scrollViewBounds = {
                    top: scrollViewTop, bottom: that.$.scrollView.offsetHeight + scrollViewTop
                };

                if (event.pageY <= scrollViewBounds.top) {
                    return;
                }

                if (event.pageY >= scrollViewBounds.bottom) {
                    return;
                }

                var updateTooltip = function updateTooltip() {
                    var newRowHeight = _row2.cellHeight + parseFloat(that._rowResizeLine.style.top) - parseFloat(that._rowResizeStartLine.style.top);

                    if (that.appearance.showResizeTooltips) {
                        that._rowResizeTooltip.innerHTML = 'h: ' + parseInt(newRowHeight) + 'px';
                    }
                };

                var _row2 = that.rowById[that._rowToResizeId];
                var nextRow = that._nextRow(_row2);
                var rowBounds = that._rowToResizeBounds;

                var minHeight = _row2.minHeight;
                var maxHeight = _row2.maxHeight;

                if (that.rowResizeMode === 'split' && nextRow) {
                    if (rowBounds.bottom + nextRow.height - nextRow.minHeight <= event.pageY) {
                        that._rowResizeLine.style.top = rowBounds.bottom + nextRow.height - nextRow.minHeight - scrollViewTop + 'px';
                        updateTooltip();
                        return;
                    }
                }

                if (rowBounds.top + minHeight + rowResizeBreakpoint >= event.pageY) {
                    that._rowResizeLine.style.top = rowBounds.top + minHeight + rowResizeBreakpoint - scrollViewTop + 'px';
                    updateTooltip();
                    return;
                }

                if (rowBounds.top + maxHeight >= event.pageY - scrollViewTop) {
                    that._rowResizeLine.style.top = rowBounds.top + maxHeight + rowResizeBreakpoint - scrollViewTop + 'px';
                    updateTooltip();
                    return;
                }

                that._rowResizeLine.style.top = -scrollViewTop + event.pageY - resizeLineHeight + 'px';
                updateTooltip();
                return;
            } else {
                for (var i = 0; i < elements.length; i++) {
                    var element = elements[i];

                    if (element.hasAttribute('data-id') && element.hasAttribute('header')) {
                        rowElement = element;
                        rowId = element.getAttribute('data-id');
                        break;
                    }
                }

                if (that._rowToResize) {
                    that._rowToResize.style.cursor = '';
                    that._rowToResize = null;
                }

                if (rowId !== null) {
                    var rowBottom = that._offsetTop(rowElement) + rowElement.offsetHeight;

                    rowElement.style.cursor = '';

                    if (rowBottom - rowResizeBreakpoint <= event.clientY && event.clientY <= rowBottom + rowResizeBreakpoint) {
                        var _row3 = that.rowById[rowId];

                        if (!_row3 || _row3 && !_row3.allowResize) {
                            return;
                        }

                        if (_row3.header) {
                            _row3.header.style.cursor = 'row-resize';
                        }

                        var top = that._offsetTop(rowElement);

                        that._rowToResizeBounds = {
                            top: top, bottom: rowElement.offsetHeight + top, height: rowElement.offsetHeight
                        };
                        that._rowToResize = rowElement;
                        that._rowToResizeId = rowId;
                    }
                }
            }
        }
    }, {
        key: '_rowDownResizeHandler',
        value: function _rowDownResizeHandler() {
            var that = this;

            var rowBounds = that._rowToResizeBounds;

            var createLine = function createLine() {
                var resizeLine = document.createElement('div');

                resizeLine.classList.add('jqx-grid-resize-line', 'row');

                resizeLine.style.width = that.$.scrollView.offsetWidth - that._rowToResize.offsetLeft + 'px';
                resizeLine.style.left = '0px';
                resizeLine.style.top = -that._offsetTop(that.$.scrollView) + rowBounds.bottom + 'px';

                return resizeLine;
            };

            var resizeTooltip = document.createElement('div');

            resizeTooltip.classList.add('jqx-grid-resize-tooltip');

            that._rowResizeTooltip = resizeTooltip;
            that._rowResizeTooltip.style.top = -that._offsetTop(that.$.scrollView) + rowBounds.bottom + 'px';
            that._rowResizeTooltip.innerHTML = 'h: ' + parseInt(rowBounds.height) + 'px';
            that._rowResizeTooltip.style.right = '20px';
            that._rowResizeTooltip.style.bottom = 'initial';

            if (that.rowResizeMode === 'growAndShrink') {
                that.classList.add('jqx-grid-resize-mode');
                that.$.root.classList.add('jqx-grid-resize-mode');
            }

            that._rowResizeLine = createLine();
            that._rowResizeStartLine = createLine();

            that.$.scrollView.appendChild(that._rowResizeLine);
            that.$.scrollView.appendChild(that._rowResizeStartLine);
            if (that.appearance.showResizeTooltips) {
                that.$.scrollView.appendChild(that._rowResizeTooltip);
            }
        }
    }, {
        key: '_rowResizeHandler',
        value: function _rowResizeHandler(event) {
            var that = this;

            var clientX = event.clientX;
            var clientY = event.clientY;

            if (clientX === undefined || clientY === undefined) {
                clientX = event.touches[0].clientX;
                clientY = event.touches[0].clientY;
            }

            var elements = document.elementsFromPoint(clientX, clientY);
            var rowId = null;

            for (var i = 0; i < elements.length; i++) {
                var element = elements[i];

                if (element.getAttribute('data-id')) {
                    rowId = element.getAttribute('data-id');
                }
            }

            if (rowId !== null) {
                if (that._rowToResize && !that._rowResizeLine) {
                    that._rowDownResizeHandler(event);

                    return;
                }
            }
        }
    }, {
        key: '_columnMouseLeaveHandler',
        value: function _columnMouseLeaveHandler() {
            var that = this;

            for (var i = 0; i < that._columnElements.length; i++) {
                var element = that._columnElements[i];
                var column = element.column;

                if (column && column.autoShowActionButton) {
                    element._hideActionButton();
                }
            }
        }
    }, {
        key: '_columnMoveHandler',
        value: function _columnMoveHandler(event) {
            var that = this;

            if (that._columnResizeStartLine || that._rowResizeStartLine) {
                return;
            }

            for (var i = 0; i < that._columnElements.length; i++) {
                var element = that._columnElements[i];
                var column = element.column;

                if (column && column.autoShowActionButton) {
                    var rect = element.getBoundingClientRect();
                    var offset = that.offset(element);

                    if (offset.left <= event.pageX && offset.left + rect.width - 6 >= event.pageX) {
                        if (offset.top <= event.pageY && offset.top + rect.height >= event.pageY) {
                            if (!that.hasColumnMenu(column)) {
                                continue;
                            }

                            element._showActionButton();
                        } else {
                            element._hideActionButton();
                        }
                    } else {
                        element._hideActionButton();
                    }
                }
            }
        }
    }, {
        key: '_columnDownResizeHandler',
        value: function _columnDownResizeHandler() {
            var that = this;

            var columnRect = that._columnToResizeRect;
            var columnHeaderRect = that.getBoundingRect(that.$.columnHeader);

            var createLine = function createLine() {
                var resizeLine = document.createElement('div');

                resizeLine.classList.add('jqx-grid-resize-line');

                resizeLine.style.left = -columnHeaderRect.left + columnRect.right + 'px';
                resizeLine.style.top = -columnHeaderRect.top + columnRect.top + 'px';
                resizeLine.style.height = 'calc(100% - ' + resizeLine.style.top + ')';

                return resizeLine;
            };

            var resizeTooltip = document.createElement('div');

            resizeTooltip.classList.add('jqx-grid-resize-tooltip');

            that._columnResizeTooltip = resizeTooltip;
            that._columnResizeTooltip.style.left = -columnHeaderRect.left + columnRect.right + 'px';
            that._columnResizeTooltip.innerHTML = 'w: ' + parseInt(columnRect.width) + 'px';

            that._columnResizeLine = createLine();
            that._columnResizeStartLine = createLine();

            if (that.columnResizeMode === 'growAndShrink') {
                that.classList.add('jqx-grid-resize-mode');
                that.$.root.classList.add('jqx-grid-resize-mode');
            }

            if (that.appearance.showResizeTooltips) {
                that.$.root.appendChild(that._columnResizeTooltip);
            }

            that.$.root.appendChild(that._columnResizeLine);
            that.$.root.appendChild(that._columnResizeStartLine);
        }
    }, {
        key: '_columnDownHandler',
        value: function _columnDownHandler(event) {
            var that = this;

            var elements = document.elementsFromPoint(event.clientX, event.clientY);

            var columnDataField = null;
            var columnElement = null;

            for (var i = 0; i < elements.length; i++) {
                var element = elements[i];

                if (element.classList.contains('jqx-action-button')) {
                    return;
                }

                if (element.getAttribute('data-field')) {
                    columnDataField = element.getAttribute('data-field');
                    columnElement = element;
                    break;
                }
            }

            if (columnDataField) {
                var column = columnElement.column;

                if (!column) {
                    return;
                }

                if (columnDataField === '_commandColumn') {
                    that._applyCommand(that.editing.commandColumn.dataSource.commandColumnMenu.command);
                    return;
                }

                var selectColumn = function selectColumn(action) {
                    var canSelect = column.selectionColumn ? that.selection.checkBoxes.action === action && that.selection.enabled : that.selection.action === action && that.selection.enabled;

                    if (canSelect) {
                        if (!event.shiftKey && !event.ctrlKey) {
                            that._dragSelectionStartDataField = columnDataField;
                        } else {
                            that._dragSelectionStartDataField = null;
                        }

                        if (columnDataField === '_checkBoxColumn') {
                            that._toggleColumnSelection(column);
                            return;
                        }

                        that._setSelection(null, column.dataField, event);

                        that.$.fireEvent('change');
                    }
                };

                that.$.fireEvent('columnClick', {
                    'column': column
                });

                if (new Date() - that._clickTime < 300) {
                    that.$.fireEvent('columnDoubleClick', {
                        'column': column
                    });

                    selectColumn('doubleClick');
                }

                selectColumn('click');

                if (that._columnToResizeElement && !that._columnResizeLine) {
                    that._columnDownResizeHandler(event);

                    return;
                }

                if (JQX.Utilities.Core.isMobile) {
                    if (new Date() - that._clickTime < 300) {
                        if (column.allowSortToggleOnClick && that.sorting.enabled) {
                            that.sortBy(columnDataField);
                        }
                    }

                    that._columnMoveHandler(event);
                    event.originalEvent.preventDefault();
                } else {
                    if (column.allowSortToggleOnClick && that.sorting.enabled) {
                        that.sortBy(columnDataField);
                    }
                }

                that._clickTime = new Date();
            }

            that.closeMenu();
        }
    }, {
        key: 'addTransformMoveStyle',
        value: function addTransformMoveStyle(element, duration, x, y, z, opacity) {
            element.style['opacity'] = opacity;
            element.style['transition-duration'] = duration;
            element.style['transform'] = 'translate3d(' + x + 'px,' + y + 'px,' + z + 'px)';
        }
    }, {
        key: 'removeTransformMoveStyle',
        value: function removeTransformMoveStyle(element) {
            element.style['opacity'] = '';
            element.style['transition-duration'] = '';
            element.style['transform'] = '';
        }
    }, {
        key: '_rowDownHandler',
        value: function _rowDownHandler(event) {
            var that = this;

            if (that._inputOverlay) {
                that._inputOverlay.classList.remove('jqx-input-overlay-on');
            }

            that.closeMenu();
            that._rowResizeHandler(event);

            if (that._toggledRow && that.appearance.allowRowToggleAnimation) {
                return;
            }

            var clientX = event.clientX;
            var clientY = event.clientY;

            if (event.touches) {
                clientX = event.touches[0].clientX;
                clientY = event.touches[0].clientY;
            }

            var elements = document.elementsFromPoint(clientX, clientY);
            var rowElement = null;
            var toggleButton = null;
            var cellElement = null;

            //const refresh = function () {
            //    const scrollLeft = that._scrollView.scrollLeft;

            //    that._refreshLayout();
            //    that._recycle();
            //    that._scrollView.scrollLeft = scrollLeft;
            //}

            that._lastPointerDownTime = new Date();

            for (var i = 0; i < elements.length; i++) {
                var element = elements[i];

                if (element.hasAttribute('toggle-button')) {
                    toggleButton = element;
                }

                if (!cellElement && element.nodeName.toLowerCase() === 'jqx-grid-cell') {
                    cellElement = element;
                }

                if (!rowElement && element.nodeName.toLowerCase() === 'jqx-grid-row') {
                    rowElement = element;
                    break;
                }
            }

            if (rowElement && cellElement) {
                var cell = cellElement ? cellElement.cell : null;

                if (toggleButton && cell && !cell.column.rowDetailColumn || that._adaptiveLayout > 0 && false === rowElement.row.leaf) {
                    var _row4 = rowElement.row;

                    _row4.toggle();
                } else if (that.rowDetail.enabled && that.rowDetail.visible && toggleButton && cell && cell.column.rowDetailColumn) {
                    var _row5 = rowElement.row;

                    if (_row5.showDetail) {
                        that.hideDetail(_row5.id);
                    } else {
                        that.showDetail(_row5.id);
                    }
                } else {
                    var _row6 = rowElement.row;
                    var _cell = cellElement ? cellElement.cell : null;

                    that.$.fireEvent('rowClick', {
                        'row': _row6,
                        originalEvent: event.originalEvent
                    });

                    that.$.fireEvent('cellClick', {
                        'cell': _cell,
                        originalEvent: event.originalEvent
                    });

                    if (that._tapTimer) {
                        clearTimeout(that._tapTimer);
                    }

                    that._tapTimer = setTimeout(function () {
                        if (that._clickedRow === rowElement) {
                            that.$.fireEvent('rowTap', {
                                'row': _row6,
                                originalEvent: event.originalEvent
                            });
                        }

                        if (that._clickedCell === cellElement) {

                            that.$.fireEvent('cellTap', {
                                'cell': _cell,
                                originalEvent: event.originalEvent
                            });
                        }
                    }, 300);

                    //const isEditing = that.editing.isEditing;

                    var selectRow = function selectRow(action) {
                        if (!that.selection.enabled || _row6.autoGenerated) {
                            return;
                        }

                        var isEditing = that.editing.isEditing;

                        if (isEditing && that.editing.editCell.row.id === _row6.id && that.editing.editCell.column.dataField === _cell.column.dataField) {
                            return;
                        }

                        if (that.selection.action === action) {
                            if (!event.shiftKey && !event.ctrlKey) {
                                if (!that.selection.allowRowHeaderSelection && _cell.column.autoGenerated) {
                                    that._dragSelectionStartRow = null;
                                } else {
                                    that._dragSelectionStartRow = rowElement.row;
                                }
                            } else {
                                that._dragSelectionStartRow = null;
                            }

                            if (!event.shiftKey && !event.ctrlKey) {
                                that._dragSelectionStartDataField = _cell.column.dataField;
                            } else {
                                that._dragSelectionStartDataField = null;
                            }

                            that._setSelection(_row6.id, _cell.column.dataField, event);
                            that.$.fireEvent('change');
                        } else if (_cell.column.selectionColumn && that.selection.checkBoxes.enabled && that.selection.checkBoxes.action === action) {
                            that._setSelection(_row6.id, _cell.column.dataField, event);
                            that.$.fireEvent('change');
                        }
                    };

                    var isSelected = _cell.selected;
                    //const focusedCell = that._selection.focusedCell;

                    selectRow('click');

                    if (_row6.autoGenerated || _cell.column.autoGenerated || _cell.template) {
                        that._onRowClick(_row6.index, _row6, event);
                        that._onCellClick(_cell, event);
                    } else {
                        if (that.selection.enabled) {
                            if (that.selection.allowCellSelection) {
                                if (isSelected === true && isSelected === _cell.selected && !that.selection.isDragging && that._clickedCell === cellElement && new Date() - that._clickTime < 300) {
                                    that._onRowClick(_row6.index, _row6, event);
                                    that._onCellClick(_cell, event);
                                }
                            } else if (that.selection.allowRowSelection) {
                                if (isSelected === true && isSelected === _cell.selected && !that.selection.isDragging && that._clickedCell === cellElement && new Date() - that._clickTime < 300) {
                                    that._onRowClick(_row6.index, _row6, event);
                                    that._onCellClick(_cell, event);
                                }
                            } else {
                                that._onRowClick(_row6.index, _row6, event);
                                that._onCellClick(_cell, event);
                            }
                        } else {
                            that._onRowClick(_row6.index, _row6, event);
                            that._onCellClick(_cell, event);
                        }
                    }

                    if (new Date() - that._clickTime < 300) {
                        if (that._clickedRow === rowElement) {
                            that._onRowDoubleClick(_row6.index, _row6, event, event);

                            that.$.fireEvent('rowDoubleClick', {
                                'row': _row6,
                                originalEvent: event.originalEvent
                            });

                            selectRow('doubleClick');
                        }

                        if (that._clickedCell === cellElement) {
                            that._onCellDoubleClick(_cell, event);

                            that.$.fireEvent('cellDoubleClick', {
                                'cell': _cell,
                                originalEvent: event.originalEvent
                            });
                        }
                    }

                    that._clickedRow = rowElement;
                    that._clickedCell = cellElement;
                    that._clickTime = new Date();
                }
            }
        }
    }, {
        key: 'showDetail',
        value: function showDetail(id) {
            var that = this;

            var row = that.rowById[id];

            if (!row) {
                return;
            }

            row.showDetail = true;
        }
    }, {
        key: 'hideDetail',
        value: function hideDetail(id) {
            var that = this;

            var row = that.rowById[id];

            if (!row) {
                return;
            }

            row.showDetail = false;
        }
    }, {
        key: '_focusHandler',
        value: function _focusHandler() {
            var that = this;
            that._focused = true;
        }
    }, {
        key: '_blurHandler',
        value: function _blurHandler() {
            var that = this;
            that._focused = false;
        }
    }, {
        key: '_notify',
        value: function _notify(propertyName, oldValue, newValue) {
            var that = this;

            if (that.notifyFn) {
                for (var i = 0; i < that.notifyFn.length; i++) {
                    that.notifyFn[i](propertyName, oldValue, newValue);
                }
            }
        }
    }, {
        key: 'notify',
        value: function notify(notifyFn) {
            var that = this;

            if (notifyFn) {
                if (!that.notifyFn) {
                    that.notifyFn = [];
                }

                that.notifyFn.push(notifyFn);
            }
        }
    }, {
        key: '_applyTemplate',
        value: function _applyTemplate(selector, element) {
            //const that = this;
            var template = null;

            if (selector === null || selector === '') {
                element.innerHTML = '';
                return;
            }

            if (selector.startsWith('#') || selector.startsWith('.')) {
                template = document.querySelector(selector);
            }

            if (template) {
                element.innerHTML = '';
                element.appendChild(template.content.cloneNode(true).firstElementChild);
            } else {
                var htmlToElement = function htmlToElement(html) {
                    var template = document.createElement('template');

                    html = html.trim(); // Never return a text node of whitespace as the result
                    template.innerHTML = html;
                    return template.content.firstChild;
                };

                var templateElement = htmlToElement(selector);

                if (templateElement) {
                    element.innerHTML = '';
                    element.appendChild(templateElement);
                }
            }
        }
        /**
        * Updates the listbox when a property is changed.
        * @param {string} propertyName The name of the property.
        * @param {number/string} oldValue The previously entered value. Max, min and value are of type Number. The rest are of type String.
        * @param {number/string} newValue The new entered value. Max, min and value are of type Number. The rest are of type String.
        */

    }, {
        key: 'propertyChangedHandler',
        value: function propertyChangedHandler(propertyName, oldValue, newValue) {
            var that = this;

            if (!that.isInitialized) {
                return;
            }

            that._notify(propertyName, oldValue, newValue);

            switch (propertyName) {
                case 'appearance_showColumnHeaderLines':
                case 'appearance_showColumnLines':
                case 'appearance_showRowLines':
                    {
                        that._recycle();
                        return;
                    }
                case 'appearance_allowColumnStickyPosition':
                    {
                        if (newValue) {
                            that._stickHeader();
                        } else {
                            that._unstickHeader();
                        }

                        break;
                    }
                case 'appearance_showColumnIcon':
                    {
                        for (var i = 0; i < that.columns.length; i++) {
                            var column = that.columns[i];

                            column.setProperty('showIcon', that.appearance.showColumnIcon);
                        }

                        that._recycle();

                        break;
                    }
                /*
                case 'appearance_showColumnSortButton': {
                for (let i = 0; i < that.columns.length; i++) {
                    const column = that.columns[i];
                      column.setProperty('showSortButton', that.appearance.showColumnSortButton);
                }
                  that._recycle();
                  break;
                }
                case 'appearance_showColumnFilterButton': {
                for (let i = 0; i < that.columns.length; i++) {
                    const column = that.columns[i];
                      column.setProperty('showFilterButton', that.appearance.showColumnFilterButton);
                }
                  that._recycle();
                  break;
                }
                case 'appearance_showColumnDescriptionButton': {
                for (let i = 0; i < that.columns.length; i++) {
                    const column = that.columns[i];
                      column.setProperty('showDescriptionButton', that.appearance.showColumnDescriptionButton);
                }
                  that._recycle();
                break;
                }*/
                case 'appearance_showRowNumber':
                case 'appearance_showRowHeader':
                    {
                        that._initializeRowNumberColumn();

                        var _column2 = that._frozenNearColumns[0];

                        if (_column2.rowNumbersColumn && _column2.element && !_column2.element.parentNode) {
                            that.$.columnNearContainer.appendChild(_column2.element);
                        }

                        that.refresh();
                        break;
                    }

                case 'header_template':
                    {
                        that._applyTemplate(newValue, that.$.header);
                        break;
                    }
                case 'footer_template':
                    {
                        that._applyTemplate(newValue, that.$.footer);
                        break;
                    }
                case 'columnWidth':
                    {
                        that.columns.canNotify = false;

                        var width = parseInt(newValue);

                        if (isNaN(width)) {
                            width = 'auto';
                        }

                        if (width >= 30 || width === 'auto') {
                            for (var _i2 = 0; _i2 < that.columns.length; _i2++) {
                                var _column3 = that.columns[_i2];

                                _column3.width = width;
                            }
                        }

                        that.columns.canNotify = true;
                        that.refresh();
                        break;
                    }
                case 'columnHeader_visible':
                    {
                        that.__columnHeaderHeight = null;
                        that.refresh();
                        break;
                    }
                case 'selection_checkBoxes_enabled':
                    {
                        that._selectionColumn.visible = newValue;
                        break;
                    }

                case 'selection_checkBoxes_autoShow':
                    {
                        if (that._selectionColumn.element) {
                            if (newValue) {
                                that._selectionColumn.element.setAttribute('auto-show', '');
                            } else {
                                that._selectionColumn.element.removeAttribute('auto-show');
                            }
                        }
                        break;
                    }

                case 'selection_checkBoxes_position':
                    {
                        var index = that.viewColumns.indexOf(that._selectionColumn);

                        that.viewColumns.canNotify = false;

                        that.viewColumns.splice(index, 1);

                        var nearIndex = that._frozenNearColumns.indexOf(that._selectionColumn);
                        var farIndex = that._frozenFarColumns.indexOf(that._selectionColumn);

                        if (nearIndex >= 0) {
                            that._frozenNearColumns.splice(nearIndex, 1);
                        }

                        if (farIndex >= 0) {
                            that._frozenFarColumns.splice(farIndex, 1);
                        }

                        if (newValue === 'far') {
                            that._selectionColumn.canNotify = false;
                            that._selectionColumn.freeze = 'far';
                            that._selectionColumn.canNotify = true;
                            that._frozenFarColumns.splice(0, 0, that._selectionColumn);
                            that.viewColumns.push(that._selectionColumn);
                            that.$.columnFarContainer.appendChild(that._selectionColumn.element);
                        } else {
                            var autoGeneratedNearColumns = 0;
                            var _index = 0;

                            for (var _i3 = 0; _i3 < that.viewColumns.length; _i3++) {
                                if (!that.viewColumns[_i3].autoGenerated && that.viewColumns[_i3].dataField === that.columns[_index++].dataField) {
                                    break;
                                }

                                if (that.viewColumns[_i3].autoGenerated) {
                                    autoGeneratedNearColumns++;
                                }
                            }

                            that._selectionColumn.canNotify = false;
                            that._selectionColumn.freeze = 'near';
                            that._selectionColumn.canNotify = true;

                            that._frozenNearColumns.splice(autoGeneratedNearColumns, 0, that._selectionColumn);
                            that.viewColumns.splice(autoGeneratedNearColumns, 0, that._selectionColumn);
                            that.$.columnNearContainer.appendChild(that._selectionColumn.element);
                        }

                        that.viewColumns.canNotify = true;

                        break;
                    }
                case 'filtering_enabled':
                    if (newValue) {
                        that._createFilterPanels();
                    }
                    return;
                case 'filtering_filter':
                    for (var _i4 = 0; _i4 < that.columns.length; _i4++) {
                        var _column4 = that.columns[_i4];

                        _column4.canNotify = false;
                        _column4.setProperty('filter', null);
                        _column4.canNotify = true;
                    }

                    for (var j = 0; j < that.filtering.filter.length; j++) {
                        var filter = that.filtering.filter[j];

                        if (filter) {
                            var dataField = filter[0];
                            var filterExpression = filter.splice(1);
                            var filterGroup = null;

                            if (filterExpression instanceof JQX.FilterGroup) {
                                filterGroup = filterExpression;
                            } else {
                                var _column5 = that.columnByDataField[dataField];

                                if (_column5) {
                                    filterGroup = that.dataSource._createFilter(_column5.dataType, filterExpression);
                                }
                            }

                            if (filterGroup) {
                                that.addFilter(dataField, filterGroup, false);
                            }
                        }
                    }

                    that.refreshFilters();
                    return;
                case 'paging_spinner_enabled':
                    {
                        that._refresh();
                        break;
                    }
                case 'pager_visible':
                    that._renderPagers();
                    that._refreshPaging(false);
                    return;
                case 'paging_pageIndex':
                case 'pager_position':
                case 'paging_enabled':
                    that._refreshPaging(true);
                    return;
                case 'paging_pageSize':
                    that._refreshPaging(false);
                    return;
                case 'columns':
                    {
                        that._renderColumns();
                        return;
                    }
                case 'dataSource':
                    {
                        that.dataBind();
                        return;
                    }
                case 'displayLoadingIndicator':
                    {
                        that._setLoadingIndicatorVisibility();
                        return;
                    }
                case 'filterable':
                    {
                        that._refreshLayout();
                        return;
                    }

                case 'selectionMode':
                    {
                        return;
                    }

                case 'editing_addNewRow_position':
                    {
                        that._renderAddNewRow();
                        that.refresh();
                        return;
                    }

                case 'editing_dialog_visible':
                    {
                        return;
                    }
            }

            that.refresh();
        }

        /**
          * Unselects all rows.
          */

    }, {
        key: 'clearSelection',
        value: function clearSelection() {
            var that = this;

            if (!that.dataSource || that.dataSource.length === 0) {
                return;
            }

            that._recycle();
        }

        /**
        * ListBox ready method.
        */

    }, {
        key: 'ready',
        value: function ready() {
            babelHelpers.get(Grid.prototype.__proto__ || Object.getPrototypeOf(Grid.prototype), 'ready', this).call(this);
            var that = this;

            var vScrollBar = that._scrollView.vScrollBar;
            var hScrollBar = that._scrollView.hScrollBar;

            vScrollBar.hasStyleObserver = false;
            hScrollBar.hasStyleObserver = false;
            vScrollBar.hasResizeObserver = false;
            hScrollBar.hasResizeObserver = false;
            vScrollBar.wait = false;
            hScrollBar.wait = false;
            vScrollBar.onChange = that._verticalScrollbarHandler.bind(that);
            hScrollBar.onChange = that._horizontalScrollbarHandler.bind(that);

            that.setFocusable(true);
            that._setLoadingIndicatorVisibility();
            that._cellsMerge = [];
            that.checkLicense();

            that._render();
        }
    }, {
        key: 'checkLicense',
        value: function checkLicense(log) {
            var that = this;

            if (that.grouping.enabled || that.selection.enabled && that.selection.allowCellSelection || that.rowDetail.enabled || that.editing.enabled && that.editing.batch || that.editing.enabled && that.editing.mode === 'row' || that.editing.enabled && that.editing.addNewRow.visible || that.editing.enabled && that.editing.commandColumn.visible || that.scrollMode === 'virtual' || that.sorting.enabled && that.sorting.mode === 'many' || log === true) {
                babelHelpers.get(Grid.prototype.__proto__ || Object.getPrototypeOf(Grid.prototype), 'checkLicense', this).call(this);
            }
        }
    }, {
        key: '_createFilterPanels',
        value: function _createFilterPanels() {
            var that = this;

            if (!that._filterPanels) {
                that._filterPanels = [];
            } else if (that._filterPanels.length > 0) {
                return;
            }

            if (that.filtering.enabled && that._filterPanels.length === 0) {
                requestAnimationFrame(function () {
                    var stringPanel = document.createElement('jqx-filter-panel');
                    var boolPanel = document.createElement('jqx-filter-panel');
                    var numericPanel = document.createElement('jqx-filter-panel');
                    var datePanel = document.createElement('jqx-filter-panel');

                    boolPanel.filterType = 'boolean';
                    numericPanel.filterType = 'numeric';
                    datePanel.filterType = 'date';

                    that._filterPanels['bool'] = boolPanel;
                    that._filterPanels['date'] = datePanel;
                    that._filterPanels['numeric'] = numericPanel;

                    that._filterPanels['string'] = stringPanel;

                    for (var filterType in that._filterPanels) {
                        var filterPanel = that._filterPanels[filterType];

                        filterPanel.classList.add('jqx-hidden');
                        that.$.content.appendChild(filterPanel);
                        filterPanel.parentNode.removeChild(filterPanel);
                    }
                });
            }
        }
    }, {
        key: '_applyScrollMode',
        value: function _applyScrollMode() {
            var that = this;
            var vScrollBar = that._scrollView.vScrollBar;

            requestAnimationFrame(function () {
                vScrollBar.largeStep = that.$.scrollView.offsetHeight;

                switch (that.scrollMode) {
                    case 'physical':
                    case 'infinite':
                    case 'virtual':
                        vScrollBar.step = 10;
                        vScrollBar.mechanicalAction = 'switchWhileDragging';
                        break;
                    case 'deferred':
                        vScrollBar.step = 10;
                        vScrollBar.mechanicalAction = 'switchWhenReleased';
                        break;
                    case 'logical':
                        vScrollBar.step = that.rowMinHeight;
                        vScrollBar.mechanicalAction = 'switchWhileDragging';
                        break;
                }
            });
        }
    }, {
        key: 'beginUpdate',
        value: function beginUpdate() {
            var that = this;

            if (!that._isUpdating) {
                that._isUpdating = 0;
            }

            that._isUpdating++;
        }
    }, {
        key: 'endUpdate',
        value: function endUpdate(refresh) {
            var that = this;

            that._isUpdating--;

            if (that._isUpdating < 0) {
                that._isUpdating = 0;
            }

            if (refresh !== false) {
                that.refresh();
            }
        }
    }, {
        key: 'suspendLayout',
        value: function suspendLayout() {
            var that = this;

            that._layoutSuspended = true;
        }
    }, {
        key: 'resumeLayout',
        value: function resumeLayout(reRender) {
            var that = this;

            that._layoutSuspended = false;

            if (reRender) {
                that.refresh();
            } else {
                that._recycle(false);
            }
        }
    }, {
        key: '_measureColumnHeight',
        value: function _measureColumnHeight() {
            var that = this;

            if (that.__measuredColumnHeight) {
                return that.__measuredColumnHeight;
            }

            var header = document.createElement('jqx-grid-column');
            header.style.height = 'auto';
            header.style.position = 'static';

            var columnHeaderCellContentElement = document.createElement('div');

            columnHeaderCellContentElement.classList.add('jqx-label');
            columnHeaderCellContentElement.innerHTML = 'aAbBcCdDeEfFgGhHiIjJkKlLmMnNoOpPqQrRwWxXyYzZ1234567890';

            header.appendChild(columnHeaderCellContentElement);
            that.$.columnHeader.appendChild(header);

            var height = that.$.columnHeader.offsetHeight;

            that.$.columnHeader.removeChild(header);

            if (that._columnHeights && that._columnHeights.length > 1) {
                height = that._columnHeights[0];
            }

            if (height < that.columnMinHeight) {
                height = that.columnMinHeight;
            }

            that.__measuredColumnHeight = height;

            return height;
        }
    }, {
        key: '_initializeColumnGroupsHierarchy',
        value: function _initializeColumnGroupsHierarchy() {
            var that = this;
            var totalMaxLevel = 0;

            that.$.columnContainer.innerHTML = '';

            if (that.columnGroups.length > 0) {
                for (var i = 0; i < that.columnGroups.length; i++) {
                    that.columnGroups[i].parent = null;
                    that.columnGroups[i].groups = null;
                }

                for (var _i5 = 0; _i5 < that.viewColumns.length; _i5++) {
                    that.viewColumns[_i5].parent = null;
                    that.viewColumns[_i5].groups = null;
                }

                var getParentGroup = function getParentGroup(name) {
                    for (var _i6 = 0; _i6 < that.columnGroups.length; _i6++) {
                        var group = that.columnGroups[_i6];
                        if (group.name === name) return group;
                    }
                    return null;
                };

                var getColumns = function getColumns(group) {
                    var columns = new Array();
                    if (group.columnGroup) {
                        columns.push(group);
                    }
                    if (group.groups) {
                        for (var _i7 = 0; _i7 < group.groups.length; _i7++) {
                            if (group.groups[_i7].columnGroup) {
                                columns.push(group.groups[_i7]);
                            } else {
                                if (group.groups[_i7].groups) {
                                    var tmpcolumns = getColumns(group.groups[_i7]);
                                    for (var j = 0; j < tmpcolumns.length; j++) {
                                        columns.push(tmpcolumns[j]);
                                    }
                                }
                            }
                        }
                    }
                    return columns;
                };

                for (var _i8 = 0; _i8 < that.columnGroups.length; _i8++) {
                    var group = that.columnGroups[_i8];
                    if (!group.groups) {
                        group.groups = null;
                    }
                    if (group.parentGroup) {
                        var parentGroup = getParentGroup(group.parentGroup);
                        if (parentGroup) {
                            group.parent = parentGroup;
                            if (!parentGroup.groups) {
                                parentGroup.groups = new Array();
                            }
                            if (parentGroup.groups.indexOf(group) === -1) {
                                parentGroup.groups.push(group);
                            }
                        }
                    }
                }
                for (var _i9 = 0; _i9 < that.viewColumns.length; _i9++) {
                    var _group = that.viewColumns[_i9];

                    if (_group.columnGroup) {
                        var _parentGroup = getParentGroup(_group.columnGroup);

                        if (_parentGroup) {
                            if (!_parentGroup.groups) {
                                _parentGroup.groups = new Array();
                            }

                            _group.parent = _parentGroup;

                            if (_parentGroup.groups.indexOf(_group) === -1) {
                                _parentGroup.groups.push(_group);
                            }
                        }
                    }
                }
                for (var _i10 = 0; _i10 < that.viewColumns.length; _i10++) {
                    var _group2 = that.viewColumns[_i10];
                    var initialgroup = _group2;

                    _group2.level = 0;
                    while (initialgroup.parent) {
                        initialgroup = initialgroup.parent;
                        _group2.level++;
                    }

                    initialgroup = _group2;
                    var maxlevel = _group2.level;
                    totalMaxLevel = Math.max(totalMaxLevel, _group2.level);

                    while (initialgroup.parent) {
                        initialgroup = initialgroup.parent;
                        if (initialgroup) {
                            initialgroup.level = --maxlevel;
                        }
                    }
                }

                for (var _i11 = 0; _i11 < that.columnGroups.length; _i11++) {
                    var _group3 = that.columnGroups[_i11];
                    var columns = getColumns(_group3);

                    _group3.columns = columns;

                    var indexes = new Array();
                    var frozen = 0;
                    var freezePosition = 'near';

                    if (columns.length === 0) {
                        frozen = -1;
                        _group3.visible = false;
                    }

                    for (var j = 0; j < columns.length; j++) {
                        indexes.push(that.viewColumns.indexOf(columns[j]));
                        if (columns[j].freeze) {
                            if (columns[j].freeze === 'far') {
                                freezePosition = 'far';
                            }
                            frozen++;
                        }
                    }

                    if (frozen === columns.length) {
                        _group3.freeze = freezePosition;
                    } else if (frozen > 0 && frozen < columns.length) {
                        that.error(that.localize('frozenColumns', { elementType: 'Grid' }));
                    }

                    indexes.sort(function (value1, value2) {
                        value1 = parseInt(value1);
                        value2 = parseInt(value2);

                        if (value1 < value2) {
                            return -1;
                        }

                        if (value1 > value2) {
                            return 1;
                        }
                        return 0;
                    });

                    for (var index = 1; index < indexes.length; index++) {
                        if (indexes[index] !== indexes[index - 1] + 1) {
                            that.error(that.localize('columnGroups', { elementType: 'Grid' }));
                        }
                    }
                }
            }

            that._columnGroupsLevel = 1 + totalMaxLevel;
        }
    }, {
        key: '_refreshColumnHeights',
        value: function _refreshColumnHeights() {
            var that = this;

            that._viewColumnsHeight = that._measureColumnHeight();
            that._columnHeights = [];
            var height = 0;

            for (var i = 0; i < that._columnGroupsLevel; i++) {
                var currentHeight = that._viewColumnsHeight;

                if (that.columnHeight) {
                    if (typeof that.columnHeight === 'number') {
                        currentHeight = that.columnHeight ? that.columnHeight : that._viewColumnsHeight;
                    } else {
                        currentHeight = that.columnHeight ? that.columnHeight(i) : that._viewColumnsHeight;
                    }
                }

                if (currentHeight < that.columnMinHeight) {
                    currentHeight = that.columnMinHeight;
                }

                if (!currentHeight) {
                    height += that._viewColumnsHeight;
                    that._columnHeights.push(that._viewColumnsHeight);
                } else {
                    that._columnHeights.push(currentHeight);
                    height += currentHeight;
                }
            }

            that._columnHeaderHeight = that._columnGroupsLevel * that._viewColumnsHeight;
            that._columnHeaderHeight = height;
            that.$.columnHeader.style.height = that._columnHeaderHeight + 'px';

            var getColumnTop = function getColumnTop(column) {
                var top = 0;

                for (var _i12 = 0; _i12 < column.level; _i12++) {
                    top += that._columnHeights[_i12];
                }

                return top;
            };

            var getColumnHeight = function getColumnHeight(column) {
                var top = getColumnTop(column);
                var totalHeight = that._columnHeaderHeight - top;

                for (var _i13 = column.level + 1; _i13 < that._columnHeights.length; _i13++) {
                    var level = _i13;

                    for (var j = 0; j < that.viewColumns.length; j++) {
                        var currentColumn = that.viewColumns[j];
                        var breakLoop = false;

                        if (currentColumn.level === level) {
                            var col = currentColumn;

                            while (col.parent) {
                                if (col.parent === column) {
                                    totalHeight -= that._columnHeights[level];
                                    breakLoop = true;
                                    break;
                                }
                                col = col.parent;
                            }

                            if (breakLoop) {
                                break;
                            }
                        }
                    }
                }

                return totalHeight;
            };

            for (var _i14 = 0; _i14 < that.viewColumns.length; _i14++) {
                var column = that.viewColumns[_i14];

                var _height = getColumnHeight(column);

                column.computedHeight = _height;
                column.top = getColumnTop(column);
            }

            for (var j = 0; j < that._columnGroupsLevel - 1; j++) {
                for (var _i15 = 0; _i15 < that.columnGroups.length; _i15++) {
                    var group = that.columnGroups[_i15];
                    var level = group.level;

                    if (level !== j) {
                        continue;
                    }

                    if (group.groups) {
                        var _height2 = getColumnHeight(group);
                        var top = getColumnTop(group);

                        group.top = top;
                        group.computedHeight = _height2;
                    }

                    var header = group.element;

                    if (!header) {
                        continue;
                    }

                    header.style.width = group.computedWidth + 'px';
                    header.style.left = group.left + 'px';
                    header.style.top = group.top + 'px';
                    header.style.height = group.computedHeight + 'px';
                    header.style.lineHeight = group.computedHeight + 'px';
                }
            }
        }
    }, {
        key: '_refreshColumnWidths',
        value: function _refreshColumnWidths() {
            var that = this;

            that.__clientSize = null;

            var vScrollWidth = that.$.verticalScrollBar.offsetWidth > 0 ? that.$.verticalScrollBar.offsetWidth : 0;
            var groupByDataSource = that.dataSource.groupBy || [];

            var indent = that.grouping.enabled ? that.grouping.groupIndent * (1 + groupByDataSource.length) : 0;
            var checkBoxesIndent = 0;

            if (that.selection.checkBoxes.enabled) {
                checkBoxesIndent = that._selectionColumn.computedWidth ? that._selectionColumn.computedWidth : that._selectionColumn.minWidth;
            }

            var gridWidth = that._clientSize.width - vScrollWidth - indent;

            var adaptiveWidth = that.adaptivityMode.adaptiveLayout.width;
            var responsiveWidth = that.adaptivityMode.responsiveLayout.width;
            // 375 is default for iPhone 6, 7, & 8, X. Switches to 1 column layout instead of 2 columns layout when this point is reached.
            var phoneMinWidth = 375;
            var columnAdaptiveWidth = that.adaptivityMode.adaptiveLayout.enabled && gridWidth <= adaptiveWidth ? gridWidth >= phoneMinWidth ? '50%' : '100%' : null;

            var columnsComputedWidth = 0;
            var columnsWithAutoWidth = [];
            var nearWidth = 0;
            var farWidth = 0;
            var columnsWidth = 0;

            that._adaptiveLayout = 0;

            if (columnAdaptiveWidth) {
                if (columnAdaptiveWidth === '50%') {
                    that._adaptiveLayout = 2;
                } else {
                    that._adaptiveLayout = 1;
                }
            }

            that._responsiveLayout = false;

            for (var i = that.viewColumns.length - 1; i >= 0; i--) {
                var column = that.viewColumns[i];

                if (column.adaptiveVisible) {
                    that._responsiveLayout = that.adaptivityMode.responsiveLayout.enabled && gridWidth <= responsiveWidth && that._adaptiveLayout === 0;
                    break;
                }
            }

            if (that.editing.enabled && that.editing.commandColumn.visible && !that.editing.commandColumn.inline) {
                var measureColumnWidth = function measureColumnWidth() {
                    var header = document.createElement('div');
                    var columnHeaderCellContentElement = document.createElement('div');
                    var dataSource = that.editing.commandColumn.dataSource;

                    var width = 0;
                    var commandsHTML = '';
                    var visibleColumnsLength = 0;

                    columnHeaderCellContentElement.classList.add('jqx-label');

                    for (var item in dataSource) {
                        var properties = dataSource[item];

                        var checkedVisibility = false;

                        if (item === 'commandColumnMenu') {
                            continue;
                        }

                        var visible = false;

                        if (!checkedVisibility) {
                            if (properties.visible === true) {
                                visibleColumnsLength++;
                                visible = true;
                            } else if (properties.visible === 'auto') {
                                if ((!that.editing.editRow && !that.editing.editCell || that.editing.dialog.enabled) && item === 'commandColumnEdit') {
                                    visibleColumnsLength++;
                                    visible = true;
                                } else if ((that.editing.editRow || that.editing.editCell) && !that.editing.dialog.enabled) {
                                    if (item === 'commandColumnUpdate') {
                                        visibleColumnsLength++;
                                        visible = true;
                                    } else if (item === 'commandColumnCancel') {
                                        visibleColumnsLength++;
                                        visible = true;
                                    }
                                }
                            }

                            checkedVisibility = true;
                        }

                        if (visible && that.editing.commandColumn.displayMode !== 'icon') {
                            var label = properties.label === '{{messages}}' ? that.localize(item) : properties.label;

                            commandsHTML += '<span>' + label + '</span>';
                        }
                    }

                    columnHeaderCellContentElement.innerHTML = '<span>' + commandsHTML + '</span>';
                    header.appendChild(columnHeaderCellContentElement);
                    header.style.width = 'auto';
                    header.style.position = 'static';
                    that.$.columnHeader.appendChild(header);
                    width = 10 + columnHeaderCellContentElement.firstChild.offsetWidth;
                    that.$.columnHeader.removeChild(header);

                    if (that.editing.commandColumn.displayMode === 'icon') {
                        width = 20 + visibleColumnsLength * 20;
                    } else if (that.editing.commandColumn.displayMode === 'labelAndIcon') {
                        width += visibleColumnsLength * 25;
                    } else {
                        width += visibleColumnsLength * 10;
                    }

                    return width;
                };

                var width = that.editing.commandColumn.width ? that.editing.commandColumn.width : measureColumnWidth();

                that.columns.canNotify = false;
                that._commandColumn.width = width;
                that.columns.canNotify = true;
            }

            for (var _i16 = 0; _i16 < that.viewColumns.length; _i16++) {
                var viewColumn = that.viewColumns[_i16];
                var _column6 = viewColumn;
                //     const columnByDataField = that.columnByDataField[viewColumn.dataField];
                //     const column = columnByDataField ? columnByDataField : viewColumn;

                var _width = void 0;

                if (columnAdaptiveWidth) {
                    _width = parseFloat(columnAdaptiveWidth) / 100;
                    _width *= gridWidth;
                    _column6.computedWidth = _width;
                    continue;
                }

                if (typeof _column6.width === 'number') {
                    _width = _column6.width;
                } else if (_column6.width && _column6.width.toString().indexOf('%') >= 0) {
                    _width = parseFloat(_column6.width) / 100;
                    _width *= gridWidth - checkBoxesIndent;
                } else if (_column6.visible) {
                    columnsWithAutoWidth.push(_column6);
                    _width = 0;
                }

                if (_column6.overflowWidth) {
                    _width -= _column6.overflowWidth;
                }

                if (_column6.visible && !_column6.adaptiveVisible) {
                    columnsComputedWidth += _width;
                }

                if (_width < _column6.minWidth) {
                    _width = _column6.minWidth;
                }

                _column6.computedWidth = _width;
            }

            if (columnsWithAutoWidth) {
                var autoWidth = gridWidth - columnsComputedWidth;
                var computedAutoWidth = 0;

                if (autoWidth < 0) {
                    autoWidth = columnsWithAutoWidth.length * 60;
                }

                for (var _i17 = 0; _i17 < columnsWithAutoWidth.length; _i17++) {
                    var _column7 = columnsWithAutoWidth[_i17];
                    var _width2 = void 0;

                    _width2 = autoWidth / columnsWithAutoWidth.length;

                    if (_i17 === columnsWithAutoWidth.length - 1) {
                        _width2 = autoWidth - computedAutoWidth;
                    }

                    if (_column7.overflowWidth) {
                        _width2 -= _column7.overflowWidth;
                    }

                    if (_width2 < _column7.minWidth) {
                        _width2 = _column7.minWidth;
                    }

                    _column7.computedWidth = _width2;
                    computedAutoWidth += _width2;
                }
            }

            for (var _i18 = 0; _i18 < that.viewColumns.length; _i18++) {
                var _viewColumn = that.viewColumns[_i18];
                var _column8 = _viewColumn; //viewColumn.autoGenerated ? viewColumn : that.columnByDataField[viewColumn.dataField];

                if (!_column8.visible || _column8.adaptiveVisible) {
                    continue;
                }

                if (indent > 0 && !_column8.autoGenerated) {
                    _column8.computedWidth += indent;
                    indent = 0;
                }

                if (_column8.freeze) {
                    if (_column8.freeze === true || _column8.freeze === 'near') {
                        _column8.left = nearWidth;
                        columnsWidth += _column8.computedWidth;
                        nearWidth += _column8.computedWidth;
                    } else if (_column8.freeze === 'far') {
                        _column8.left = farWidth;
                        farWidth += _column8.computedWidth;
                    }
                } else {
                    _column8.left = columnsWidth;
                    columnsWidth += _column8.computedWidth;
                }
            }

            for (var j = 0; j < that._columnGroupsLevel - 1; j++) {
                var _loop = function _loop(_i19) {
                    var group = that.columnGroups[_i19];
                    var level = group.level;

                    if (level !== j) {
                        return 'continue';
                    }

                    var left = 99999;

                    if (group.groups) {
                        var getWidth = function getWidth(group) {
                            var width = 0;
                            for (var _j = 0; _j < group.groups.length; _j++) {
                                var currentGroup = group.groups[_j];
                                if (!currentGroup.groups) {
                                    if (!currentGroup.hidden) {
                                        left = Math.min(currentGroup.left, left);
                                        width += currentGroup.computedWidth;
                                    }
                                } else {
                                    width += getWidth(currentGroup);
                                }
                            }
                            return width;
                        };

                        group.computedWidth = getWidth(group);
                        group.left = left;
                    }
                };

                for (var _i19 = 0; _i19 < that.columnGroups.length; _i19++) {
                    var _ret = _loop(_i19);

                    if (_ret === 'continue') continue;
                }
            }
        }
    }, {
        key: '_createColumnHeaderCellElements',
        value: function _createColumnHeaderCellElements() {
            var that = this;
            var columnContainer = that.$.columnContainer;
            var fragment = document.createDocumentFragment();

            var columnsWidth = 0;
            that._columnElements = [];
            that.$.columnContainer.innerHTML = '';
            that.$.columnNearContainer.innerHTML = '';
            that.$.columnFarContainer.innerHTML = '';

            for (var i = 0; i < that._frozenNearColumns.length; i++) {
                var column = that._frozenNearColumns[i];

                column.createElement();
            }

            for (var _i20 = 0; _i20 < that._frozenFarColumns.length; _i20++) {
                var _column9 = that._frozenFarColumns[_i20];

                _column9.createElement();
            }

            for (var _i21 = 0; _i21 < that.viewColumns.length; _i21++) {
                var _column10 = that.viewColumns[_i21];

                if (_column10.freeze) {
                    continue;
                }

                var header = _column10.createElement();

                if (_column10.computedWidth === undefined) {
                    that._columnElements.push(header);
                    fragment.appendChild(header);
                    continue;
                }

                columnsWidth += _column10.computedWidth;

                that._columnElements.push(header);

                if (columnsWidth < 2 * that._clientSize.width) {
                    fragment.appendChild(header);
                }
            }

            for (var _i22 = 0; _i22 < that.columnGroups.length; _i22++) {
                var _group4 = that.columnGroups[_i22];
                var groupColumn = new JQX.Grid.Column({ visible: _group4.visible !== undefined ? _group4.visible : true, allowSelect: false, grid: that, dataField: _group4.name, label: _group4.label, align: _group4.align, verticalAlign: _group4.verticalAlign });

                _group4.column = groupColumn;

                var _header = groupColumn.createElement();

                _header.style.width = _group4.computedWidth + 'px';
                _header.style.left = _group4.left + 'px';
                _header.style.top = _group4.top + 'px';
                _header.style.height = _group4.computedHeight + 'px';
                _header.style.lineHeight = _group4.computedHeight + 'px';

                fragment.appendChild(_header);

                _group4.element = _header;
                _group4.grid = this;
            }

            if (!that.htmlColumnLastChild) {
                that.htmlColumnLastChild = document.createElement('jqx-grid-column');
                that.htmlColumnLastChild.classList.add('top-far-corner');
                that.$.columnHeader.appendChild(that.htmlColumnLastChild);
            }

            columnContainer.appendChild(fragment);
            columnContainer.style.width = that._computedColumnsWidth + 'px';

            that._refreshFrozenColumns();
        }
    }, {
        key: '_refreshFrozenColumns',
        value: function _refreshFrozenColumns() {
            var that = this;

            that.$.columnNearContainer.style.width = that._frozenColumnsNearWidth + 'px';
            that.$.columnFarContainer.style.width = that._frozenColumnsFarWidth + 'px';

            for (var i = 0; i < that.columnGroups.length; i++) {
                var columnGroup = that.columnGroups[i];

                if (columnGroup.freeze && columnGroup.element) {
                    if (columnGroup.freeze === true || columnGroup.freeze === 'near') {
                        that.$.columnNearContainer.appendChild(columnGroup.element);
                    } else if (columnGroup.freeze === 'far') {
                        that.$.columnFarContainer.appendChild(columnGroup.element);
                    }
                }
            }

            for (var _i23 = 0; _i23 < that.viewColumns.length; _i23++) {
                var column = that.viewColumns[_i23];

                if (column.freeze && column.element) {
                    if (column.freeze === true || column.freeze === 'near') {
                        that.$.columnNearContainer.appendChild(column.element);
                    } else if (column.freeze === 'far') {
                        that.$.columnFarContainer.appendChild(column.element);
                    }
                }
            }
        }
    }, {
        key: '_initializeRowElements',
        value: function _initializeRowElements() {
            var that = this;

            if (!that.rows) {
                return;
            }

            that.rows.canNotify = false;

            var rowsHeight = 0;
            var height = that._clientSize.height;

            that.$.rowNearContainer.innerHTML = '';
            that.$.rowFarContainer.innerHTML = '';
            that.$.rowContainer.innerHTML = '';
            that._rowElements = [];
            that._overflowOffset = Math.max(height, 300);

            var offsetHeight = that.offsetHeight;
            that.$.container.classList.add('jqx-hidden');

            var newOffsetHeight = that.offsetHeight;
            that.$.container.classList.remove('jqx-hidden');

            if (that.verticalScrollBarVisibility === 'hidden' || offsetHeight !== newOffsetHeight) {
                height = that._scrollHeight;
            }

            var createRecyclingRows = function createRecyclingRows() {
                var documentFragment = document.createDocumentFragment();

                if (that.rows && that.rows.length === 0) {
                    return;
                }

                for (var i = 0; i < that.rows.length; i++) {
                    var _row7 = that.rows[i];

                    if (_row7.freeze) {
                        continue;
                    }

                    var rowElement = _row7.createElement();

                    documentFragment.appendChild(rowElement);
                    rowsHeight += that.rowMinHeight;

                    if (rowsHeight > that._overflowOffset + height) {
                        break;
                    }
                }

                that.$.rowContainer.appendChild(documentFragment);

                var rowElements = that.$.rowContainer.children;

                for (var _i24 = 0; _i24 < rowElements.length; _i24++) {
                    var _rowElement = rowElements[_i24];

                    if (that.rows[_i24]) {
                        that.rows[_i24].element = _rowElement;
                    }

                    that._rowElements[_i24] = _rowElement;
                }
            };

            for (var i = 0; i < that._frozenNearRows.length; i++) {
                var _row8 = that._frozenNearRows[i];
                var element = _row8.createElement();

                _row8.element = element;
                that.$.rowNearContainer.appendChild(element);
            }

            for (var _i25 = 0; _i25 < that._frozenFarRows.length; _i25++) {
                var _row9 = that._frozenFarRows[_i25];
                var _element = _row9.createElement();

                _row9.element = _element;
                that.$.rowFarContainer.appendChild(_element);
            }

            createRecyclingRows();

            var maxIterations = 0;

            while (rowsHeight < 1.5 * height && ++maxIterations < 50) {
                createRecyclingRows();
            }

            that.rows.canNotify = true;
        }
    }, {
        key: '_initializeRows',
        value: function _initializeRows() {
            var that = this;

            var frozenIndex = 0;
            that._frozenNearDefaultRows = [];
            that._frozenFarDefaultRows = [];
            that.rows = [];
            that.rowById = [];

            that._frozenFarRows = [];
            that._frozenNearRows = [];

            var calculateSummary = function calculateSummary() {
                var summaryObject = [];
                var hasSummary = false;

                for (var i = 0; i < that.columns.length; i++) {
                    var column = that.columns[i];
                    var columnSummary = {};

                    if (column.summary && column.summary.length > 0) {
                        hasSummary = true;
                    }

                    columnSummary[column.dataField] = column.summary;
                    summaryObject.push(columnSummary);
                }

                if (!hasSummary) {
                    that._summaryItems = [];
                    return;
                }

                that._summaryItems = that.dataSource.summarize(summaryObject);
            };

            var addNewRow = function addNewRow(data, index) {
                var row = data.grid ? data : new JQX.Grid.Row({ data: data, index: index, grid: that });

                if (that.onRowInit) {
                    that.onRowInit(index, row);
                    for (var propertyName in row) {
                        if (row.properties.indexOf(propertyName) === -1 && !propertyName.startsWith('_')) {
                            that.error(that.localize('invalidRowProperty', { elementType: 'Grid', propertyName: propertyName }));
                        }
                    }
                }

                if (row.selected) {
                    that._selection.rows[row.id] = true;
                }

                if (row.freeze) {
                    if (row.freeze === true || row.freeze === 'near') {
                        that.rows.splice(frozenIndex++, 0, row);
                        that._frozenNearRows.push(row);
                    } else if (row.freeze === 'far') {
                        that._frozenFarRows.push(row);
                        that.rows.push(row);
                    }
                } else {
                    if (that.rows[index]) {
                        that.rows.splice(index, 0, row);
                    } else {
                        that.rows.push(row);
                    }
                }

                if (that.scrollMode === 'virtual' || that.paging.enabled && that.dataSource && that.dataSource.virtualDataSource) {
                    return;
                }

                if (that.onRowInserted) {
                    that.onRowInserted(index, row);
                }
            };

            var removeLastRow = function removeLastRow() {
                var lastRow = that.rows[that.rows.length - 1];

                that.rows.pop();

                if (that.onRowRemoved) {
                    that.onRowRemoved(that.rows.length, lastRow);
                }
            };

            var removeAt = function removeAt(index) {
                var row = that.rows[index];

                that.rows.splice(index, 1);

                if (that.onRowRemoved) {
                    that.onRowRemoved(index, row);
                }
            };

            that._add = addNewRow;
            that._removeLastRow = removeLastRow;
            that._removeAt = removeAt;

            that._rowHeight = that._autoRowHeight;

            var dataSourceLength = that.dataSource.length;

            for (var i = 0; i < that.dataSource.length; i++) {
                var data = that.dataSource[i];

                addNewRow(data, i);
            }

            for (var _i26 = 0; _i26 < that._frozenFarRows.length; _i26++) {
                var _row10 = that._frozenFarRows[_i26];

                that.rows.splice(that.rows.indexOf(_row10), 1);
                that.rows.push(_row10);
            }

            calculateSummary();

            that.dataSource.notify(function (changes) {
                if (that.dataSource._updating) {
                    return;
                }

                var data = changes.data;

                that.rows.canNotify = false;

                switch (changes.action) {
                    case 'add':
                        if (data.length) {
                            for (var _i27 = 0; _i27 < data.length; _i27++) {
                                addNewRow(data[_i27], that.dataSource.length - data.length + _i27);
                            }
                        } else {
                            addNewRow(data, that.dataSource.length - 1);
                        }

                        break;
                    case 'update':
                        if (data.length) {
                            for (var _i28 = 0; _i28 < data.length; _i28++) {
                                var index = changes.index[_i28];

                                if (!that.rows[index]) {
                                    addNewRow(data[_i28], that.dataSource.length - 1);
                                    continue;
                                }

                                that.rows[index].data = data[_i28];

                                if (that.onRowUpdated) {
                                    that.onRowUpdated(index, that.rows[index]);
                                }
                            }
                        } else {
                            var _index2 = changes.index;

                            if (!that.rows[_index2]) {
                                addNewRow(data, that.dataSource.length - 1);
                            } else {
                                that.rows[_index2].data = data;
                            }

                            if (that.onRowUpdated) {
                                that.onRowUpdated(_index2, that.rows[_index2]);
                            }
                        }
                        break;
                    case 'insert':
                        addNewRow(data, changes.index);

                        for (var _i29 = 0; _i29 < that.rows.length; _i29++) {
                            var _row11 = that.rows[_i29];

                            _row11.index = _i29;
                        }
                        break;
                    case 'remove':
                        removeAt(changes.index);
                        break;
                    case 'removeLast':
                        removeLastRow();
                        break;
                    case 'bindingComplete':
                        if (that.dataSource && that.dataSource.url) {
                            that.displayLoadingIndicator = false;
                            that._setLoadingIndicatorVisibility();
                            that._toggledRow = null;

                            if (that.dataSource.length !== dataSourceLength) {
                                if (that.paging.enabled) {
                                    that.$.headerPager.querySelector('jqx-pager').pagesCount = Math.ceil(that.dataSource.length / that.paging.pageSize);
                                    that.$.footerPager.querySelector('jqx-pager').pagesCount = Math.ceil(that.dataSource.length / that.paging.pageSize);
                                }

                                that._initializeRows();
                                that._initializeRowElements();

                                that.refresh();
                            }

                            that._recycle();
                        }
                        break;
                }

                calculateSummary();

                if (changes.action !== 'update') {
                    that._refreshLayout();
                }

                that._recycle();

                that.rows.canNotify = true;
            });

            that._observeRows();

            if (that.summaryRow.visible) {
                for (var _i30 = 0; _i30 < that._summaryRowCount; _i30++) {
                    var summaryNearRow = new JQX.Grid.Row({ freeze: 'near', visible: that.summaryRow.position === 'near', summaryRowIndex: _i30, summaryRow: true });
                    var summaryFarRow = new JQX.Grid.Row({ freeze: 'far', visible: that.summaryRow.position === 'far', summaryRowIndex: _i30, summaryRow: true });

                    that._frozenNearRows.splice(0, 0, summaryNearRow);
                    that._frozenFarRows.push(summaryFarRow);
                }
            }

            if (that.filtering.enabled && that.filtering.filterRow.visible) {
                var _row12 = new JQX.Grid.Row({ freeze: 'near', filterRow: true });

                that._frozenNearRows.splice(0, 0, _row12);
            }

            that._renderAddNewRow();
        }
    }, {
        key: '_observeRows',
        value: function _observeRows() {
            var that = this;

            var observables = {
                'allowToggle': true, 'allowResize': true, 'expanded': true, 'selected': true, 'visible': true, 'enabled': true, 'minHeight': true, 'height': true, 'freeze': true, 'showDetail': true, 'data': true, 'visibleIndex': true, 'index': true
            };

            that._frozenNearRows = [];
            that._frozenFarRows = [];

            that.rows = new JQX.ObservableArray(that.rows, null, observables);

            for (var i = 0; i < that.rows.length; i++) {
                var _row13 = that.rows[i];

                if (_row13.freeze === true || _row13.freeze === 'near') {
                    that._frozenNearRows.push(_row13);
                } else if (_row13.freeze === 'far') {
                    that._frozenFarRows.push(_row13);
                }

                that.rowById[that.rows[i].id] = _row13;
            }

            var rowPropertyChanged = function rowPropertyChanged(row, propertyName, oldValue, newValue) {
                row.propertyChanged(propertyName, oldValue, newValue);
            };

            that.rows.notify(function (changes) {
                if (!that.rows.canNotify) {
                    return;
                }

                var changeType = changes.action;

                if (changeType === 'length') {
                    return;
                }

                if (changes.path) {
                    that.rows.canNotify = false;
                    rowPropertyChanged(changes.target, changes.propertyName, changes.oldValue, changes.newValue);
                    that.rows.canNotify = true;
                    return;
                }

                that.rows.canNotify = false;

                if (!that.dataSource) {
                    return;
                }

                that.dataSource.canNotify = false;

                switch (changeType) {
                    case 'add':
                        {
                            var addRow = function addRow(index) {
                                var row = that.rows[index];

                                if (row instanceof JQX.Grid.Row === false) {
                                    row = new JQX.Grid.Row(row);

                                    var notify = that.rows.canNotify;
                                    that.rows.canNotify = false;
                                    changes.object[index] = row;
                                    row = changes.object[index];
                                    that.rows.canNotify = notify;
                                }

                                if (index < that.dataSource.length) {
                                    that.dataSource.insert(index, that.rows[index].data);
                                } else {
                                    that.dataSource.add(that.rows[index].data);
                                }

                                row.grid = that;
                                row.data = that.dataSource[index];

                                that.rowById[row.id] = row;

                                if (row.selected) {
                                    that._selection.rows[row.id] = true;
                                }

                                if (row.freeze) {
                                    if (row.freeze === true || row.freeze === 'near') {
                                        that._frozenNearRows.push(row);
                                    } else if (row.freeze === 'far') {
                                        that._frozenFarRows.push(row);
                                    }
                                }
                            };

                            for (var _i31 = 0; _i31 < changes.addedCount; _i31++) {
                                addRow(changes.index + _i31);
                            }

                            break;
                        }
                    case 'update':
                        {
                            that.dataSource.update(changes.index, that.rows[changes.index]);
                            break;
                        }
                    case 'remove':
                        {
                            var _row14 = changes.removed;

                            delete that.rowById[_row14.id];

                            that.dataSource.remove(changes.index);
                            break;
                        }
                }

                that.dataSource.canNotify = true;
                that.rows.canNotify = true;

                if (!changeType) {
                    return;
                }

                var fullRefresh = that.isInitialized && that._rowElements && that._rowElements.length < that.rows.length;

                if (fullRefresh) {
                    that._initializeRowElements();
                }

                that.refresh();
                that._refreshPagesCount();
            });
        }
    }, {
        key: 'render',
        value: function render() {
            var that = this;

            that._render();
        }
    }, {
        key: '_renderColumns',
        value: function _renderColumns(refresh) {
            var that = this;

            that._initializeColumns();
            that._initializeColumnGroupsHierarchy();
            that._refreshColumnsResponsiveVisibility();
            that._createColumnHeaderCellElements();
            that._renderColumnGroupHeaders();

            if (refresh !== false) {
                that._refresh();
            }
        }
    }, {
        key: '_renderRows',
        value: function _renderRows(refresh) {
            var that = this;

            that._initializeRows();
            that._initializeRowElements();

            if (refresh !== false) {
                that._refresh();
            }
        }
    }, {
        key: '_render',
        value: function _render() {
            var that = this;

            if (!that.isInitialized) {
                if (that.onBeforeInit) {
                    that.onBeforeInit();
                }

                that.$.fireEvent('beforeInit', {
                    'grid': that
                });
            }

            if (that.dataSource === null) {
                that.dataSource = new JQX.DataAdapter();
            }

            that._selection = {
                rows: [],
                columns: [],
                cells: []
            };

            if (that.dataSource && that.dataSource.url) {
                that.displayLoadingIndicator = true;
                that._setLoadingIndicatorVisibility();

                that.dataSource.data = {
                    sorting: that.getSortedColumns(),
                    filtering: that.getFilteredColumns(),
                    grouping: []
                };
            }

            that._renderColumns(false);
            that._renderRows(false);
            that._renderPagers();
            that._renderCommandBar();

            if (that.appearance.allowColumnStickyPosition) {
                that._stickHeader();
            }

            if (!that.isInitialized) {
                for (var i = 0; i < that.viewColumns.length; i++) {
                    var column = that.viewColumns[i];

                    if (!column.allowSort || !column.sortOrder) {
                        continue;
                    }

                    var sortAnimation = that.appearance.allowSortAnimation;

                    that.appearance.allowSortAnimation = false;
                    that.sortBy(column.dataField, column.sortOrder);
                    that.appearance.allowSortAnimation = sortAnimation;
                }

                if (that.filtering.filter.length > 0) {
                    for (var j = 0; j < that.filtering.filter.length; j++) {
                        var filter = that.filtering.filter[j];

                        if (filter) {
                            var dataField = filter[0];
                            var filterExpression = filter.splice(1);
                            var filterGroup = null;

                            if (filterExpression instanceof JQX.FilterGroup) {
                                filterGroup = filterExpression;
                            } else {
                                var _column11 = that.columnByDataField[dataField];

                                if (_column11) {
                                    filterGroup = that.dataSource._createFilter(_column11.dataType, filterExpression);
                                }
                            }

                            if (filterGroup) {
                                that.addFilter(dataField, filterGroup, false);
                            }
                        }
                    }

                    that.refreshFilters();
                }
            } else {
                that.refreshFilters();
            }

            that.viewColumns.canNotify = true;

            if (!that.isInitialized) {
                if (that.onInit) {
                    that.onInit();
                }

                that.$.fireEvent('init', {
                    'grid': that
                });
            }

            that.isInitialized = true;

            if (that.scrollMode === 'virtual' || that.paging.enabled && that.dataSource && that.dataSource.virtualDataSource) {
                that._virtualDataRequest('dataBind');
            } else if (that.dataSource && that.dataSource.virtualDataSource) {
                that._virtualDataRequest('dataBind');
            }

            if (that.header.template !== '') {
                that._applyTemplate(that.header.template, that.$.header);
            }

            if (that.footer.template !== '') {
                that._applyTemplate(that.footer.template, that.$.footer);
            }

            that._createFilterPanels();
            that._refresh();
            that._applyScrollMode();

            if (that.onRender) {
                that.onRender();
            }
        }
    }, {
        key: '_refreshPagesCount',
        value: function _refreshPagesCount() {
            var that = this;

            var getPagesCount = function getPagesCount() {
                var visibleRows = that.getVisibleRows();

                var rowsCount = visibleRows.length;

                if (that.rowHierarchy) {
                    rowsCount = 0;

                    for (var i = 0; i < visibleRows.length; i++) {
                        var _row15 = visibleRows[i];

                        if (_row15.level === 0 && !_row15.parent) {
                            rowsCount++;
                        }
                    }

                    if (that.dataSource.virtualDataSourceLength) {
                        rowsCount = that.dataSource.virtualDataSourceLength;
                    }
                }

                return Math.ceil(rowsCount / that.paging.pageSize);
            };

            var headerPager = that.$.headerPager.querySelector('jqx-pager');
            var pagesCount = getPagesCount();

            if (headerPager) {
                headerPager.pagesCount = pagesCount;
            }

            var footerPager = that.$.footerPager.querySelector('jqx-pager');

            if (headerPager) {
                footerPager.pagesCount = pagesCount;
            }

            if (that.paging.pageIndex > pagesCount) {
                that.paging.pageIndex = pagesCount - 1;
                that._refreshPaging(that.paging.pageIndex);
            }
        }
    }, {
        key: '_stickHeader',
        value: function _stickHeader() {
            var that = this;

            var handler = function handler() {
                that._handleStickyHeader();
            };

            that.$.columnHeader.style.top = '';
            that.$.columnHeader.classList.remove('jqx-columns-sticky');

            var parent = that.parentNode;

            while (parent !== document) {
                parent.addEventListener('scroll', handler);

                parent = parent.parentNode;
            }

            try {
                if (window.top !== null && window.top !== window.self) {
                    window.top.document.addEventListener('scroll', handler);
                }
            } catch (error) {
                //
            }

            that._handleStickyHeader();
        }
    }, {
        key: '_unstickHeader',
        value: function _unstickHeader() {
            var that = this;

            that.$.columnHeader.style.top = '';
            that.$.columnHeader.classList.remove('jqx-columns-sticky');

            var handler = function handler() {
                that._scrollHandler();
            };

            var parent = that.parentNode;

            while (parent !== document.body) {
                parent.removeEventListener('scroll', handler);

                parent = parent.parentNode;
            }

            try {
                if (document.referrer !== '' || window.frameElement) {
                    if (window.top !== null && window.top !== window.self) {
                        window.top.document.removeEventListener('scroll', handler);
                    }
                }
            } catch (error) {
                //
            }
        }
    }, {
        key: '_handleStickyHeader',
        value: function _handleStickyHeader() {
            var that = this;

            if (!that.appearance.allowColumnStickyPosition) {
                return;
            }

            that.$.columnHeader.classList.add('jqx-columns-sticky');

            if (document.scrollTop === 0 && that.parentElement.scrollTop === 0) {
                that.$.columnHeader.style.top = '';
            } else {
                var parent = that.parentNode;

                var top = 0;

                while (parent !== document.body) {
                    top += parseInt(parent.scrollTop);

                    parent = parent.parentNode;
                }

                var headerTop = parseInt(that.clientTop + top);

                that.$.columnHeader.style.top = headerTop + 'px';

                var frameTop = 0;

                if (window.top !== window.self) {
                    if (parseInt(window.top.scrollY) > parseInt(that._offsetTop(window.frameElement))) {
                        frameTop = parseInt(window.top.scrollY) - parseInt(that._offsetTop(window.frameElement));
                    }
                }

                if (window.scrollY + frameTop > that.offsetTop) {
                    that.$.columnHeader.style.top = parseInt(window.scrollY) - parseInt(that.offsetTop) + headerTop + frameTop + 'px';
                }
            }
        }
    }, {
        key: '_scrollHandler',
        value: function _scrollHandler() {
            var that = this;

            that._handleStickyHeader();
        }
    }, {
        key: '_initializeRowNumberColumn',
        value: function _initializeRowNumberColumn() {
            var that = this;

            if (that._frozenNearColumns && that._frozenNearColumns.length > 0 && that._frozenNearColumns[0].rowNumbersColumn) {
                that._frozenNearColumns[0].visible = that.appearance.showRowNumber || that.appearance.showRowHeader;
                return;
            }

            var measureColumnWidth = function measureColumnWidth() {
                var header = document.createElement('div');
                var columnHeaderCellContentElement = document.createElement('div');
                var rowsLength = that.rows ? that.rows.length : that.dataSource ? that.dataSource.length : 0;

                var width = 0;

                columnHeaderCellContentElement.classList.add('jqx-label');
                columnHeaderCellContentElement.innerHTML = '<span>' + rowsLength + '</span>';
                header.appendChild(columnHeaderCellContentElement);
                header.style.width = 'auto';
                header.style.position = 'static';
                that.$.columnHeader.appendChild(header);
                width = 20 + columnHeaderCellContentElement.firstChild.offsetWidth;
                that.$.columnHeader.removeChild(header);

                return Math.max(30, width);
            };

            var width = that.appearance.showRowNumber ? measureColumnWidth() : 30;
            var column = new JQX.Grid.Column({ dataField: '_rowHeaderColumn', label: '', allowSelect: false, freeze: true, visible: true, grid: that, autoGenerated: true, rowNumbersColumn: true, cellsAlign: 'center', width: width });

            column.createElement();

            var observableColumn = new JQX.Observable(column, column.observables);

            that.viewColumns.splice(0, 0, observableColumn);
            that._frozenNearColumns.splice(0, 0, observableColumn);
        }
    }, {
        key: '_initializeColumns',
        value: function _initializeColumns() {
            var that = this;

            if (typeof that.columns === 'number') {
                var boundColumns = [];

                var charCode = 'A'.charCodeAt(0);
                var prefix = '';
                var index = 0;

                for (var i = 0; i < that.columns; i++) {
                    var letter = String.fromCharCode(charCode + index);

                    index++;

                    var label = prefix + letter;

                    boundColumns.push({ align: 'center', label: label, dataField: label, width: 100 });

                    if (index >= 26) {
                        index = 0;
                        prefix += 'A';
                    }
                }

                that._boundColumns = boundColumns;
            } else {
                that._boundColumns = Array.isArray(that.columns) ? that.columns.splice(0) : that.columns.toArray().splice(0);
            }

            that.columnByDataField = [];
            that.viewColumns = [];
            that.columns = new JQX.ObservableArray();

            that._frozenFarColumns = [];
            that._frozenNearColumns = [];
            that._summaryRowCount = 0;
            var frozenIndex = 0;

            var _applyBoundColumnDataType = function _applyBoundColumnDataType(column) {
                if (that.dataSource.dataFields) {
                    var field = that.dataSource.dataFields.find(function (field) {
                        if (field.name === column.dataField) {
                            return field;
                        }
                    });

                    var dataType = field ? field.dataType || 'string' : 'string';

                    column.dataType = dataType;
                }
            };

            if (that._boundColumns.length === 0 && that.dataSource && that.dataSource[0]) {
                var _row16 = that.dataSource[0];

                for (var dataField in _row16) {
                    if (dataField.startsWith('_') || dataField === '$') {
                        continue;
                    }

                    var _index3 = that._boundColumns.length;
                    var _column12 = {
                        index: _index3, visibleIndex: _index3, label: dataField, dataField: dataField
                    };

                    _applyBoundColumnDataType(_column12);

                    that._boundColumns.push(_column12);
                }
            }

            var _loop2 = function _loop2(_i32) {
                var boundColumn = that._boundColumns[_i32];

                if (typeof boundColumn === 'string') {
                    if (that.dataSource.dataFields) {
                        var field = that.dataSource.dataFields.find(function (field) {
                            if (field.name === boundColumn) {
                                return field;
                            }
                        });

                        boundColumn = {
                            label: boundColumn, dataField: boundColumn, dataType: field ? field.dataType || 'string' : 'string'
                        };
                    }
                } else {
                    _applyBoundColumnDataType(boundColumn);
                }

                boundColumn.visibleIndex = _i32;
                boundColumn.index = _i32;
                boundColumn.grid = that;

                var column = new JQX.Grid.Column(boundColumn);

                if (that.onColumnInit) {
                    that.onColumnInit(_i32, column);
                }

                for (var propertyName in column) {
                    if (column.properties.indexOf(propertyName) === -1 && !propertyName.startsWith('_')) {
                        that.error(that.localize('invalidColumnProperty', { elementType: 'Grid', propertyName: propertyName, type: column.dataField || 'Column' }));
                    }
                }
                column.grid = that;

                that.columns.push(column);

                var observableColumn = that.columns[that.columns.length - 1];

                that._summaryRowCount = Math.max(that._summaryRowCount, column.summary.length);

                if (column.freeze) {
                    if (column.freeze === true || column.freeze === 'near') {
                        that.viewColumns.splice(frozenIndex++, 0, observableColumn);
                        that._frozenNearColumns.push(observableColumn);
                    } else if (column.freeze === 'far') {
                        that._frozenFarColumns.push(observableColumn);
                    }
                } else {
                    that.viewColumns.push(observableColumn);
                }

                if (!that.columnByDataField[column.dataField]) {
                    that.columnByDataField[column.dataField] = observableColumn;
                } else {
                    observableColumn.parent = that.columnByDataField[column.dataField];
                    if (!that.columnByDataField[column.dataField].children) {
                        that.columnByDataField[column.dataField].children = [];
                    }

                    that.columnByDataField[column.dataField].children.push(observableColumn);
                }

                if (that.onColumnInserted) {
                    that.onColumnInserted(_i32, column);
                }
            };

            for (var _i32 = 0; _i32 < that._boundColumns.length; _i32++) {
                _loop2(_i32);
            }

            that.viewColumns = that.viewColumns.concat(that._frozenFarColumns);

            var autoGeneratedNearColumns = 0;

            if (that.appearance.showRowNumber || that.appearance.showRowHeader) {
                that._initializeRowNumberColumn();
                autoGeneratedNearColumns++;
            }

            if (that.rowDetail.enabled) {
                var _column13 = new JQX.Grid.Column({ dataField: '_rowDetailColumn', allowSelect: false, visible: that.rowDetail.visible, label: '', grid: that, freeze: true, rowDetailColumn: true, autoGenerated: true, cellsAlign: 'center', width: 30 });
                var _observableColumn = new JQX.Observable(_column13, _column13.observables);

                if (that.rowDetail.position === 'near') {
                    _column13.freeze = 'near';
                    _observableColumn.freeze = 'near';

                    that.viewColumns.splice(autoGeneratedNearColumns, 0, _observableColumn);
                    that._frozenNearColumns.splice(autoGeneratedNearColumns, 0, _observableColumn);
                } else {
                    that.viewColumns.push(_observableColumn);
                    that._frozenFarColumns.splice(0, 0, _observableColumn);
                }

                autoGeneratedNearColumns++;
            }

            var column = new JQX.Grid.Column({ dataField: '_adaptiveColumn', allowSelect: false, visible: !that.adaptivityMode.responsiveLayout.autoShowHiddenCells, label: '', grid: that, freeze: 'far', adaptiveColumn: true, autoGenerated: true, cellsAlign: 'center', width: 30 });
            var observableColumn = new JQX.Observable(column, column.observables);

            observableColumn.canNotify = false;

            that.viewColumns.push(observableColumn);
            that._frozenFarColumns.splice(0, 0, observableColumn);

            var commandColumn = new JQX.Grid.Column({ dataField: '_commandColumn', allowSelect: false, visible: that.editing.enabled && that.editing.commandColumn.visible && !that.editing.commandColumn.inline, label: '', grid: that, freeze: 'far', commandColumn: true, autoGenerated: true, align: 'center', cellsAlign: 'center', width: '' });
            var observableCommandColumn = new JQX.Observable(commandColumn, commandColumn.observables);

            observableCommandColumn.canNotify = false;

            if (that.editing.commandColumn.position === 'near') {
                commandColumn.freeze = 'near';
                observableCommandColumn.freeze = 'near';

                that.viewColumns.splice(autoGeneratedNearColumns, 0, observableCommandColumn);
                that._frozenNearColumns.splice(autoGeneratedNearColumns, 0, observableCommandColumn);
            } else {
                that.viewColumns.push(observableCommandColumn);
                that._frozenFarColumns.splice(0, 0, observableCommandColumn);
            }

            that._commandColumn = observableCommandColumn;

            var selectionColumn = new JQX.Grid.Column({ allowSelect: false, visible: that.selection.enabled && that.selection.checkBoxes.enabled, dataField: '_checkBoxColumn', label: '', freeze: that.selection.checkBoxes.position, grid: that, selectionColumn: true, autoGenerated: true, cellsAlign: 'center', width: 32 });
            var observableSelectionColumn = new JQX.Observable(selectionColumn, selectionColumn.observables);

            if (selectionColumn.freeze === 'near') {
                that.viewColumns.splice(autoGeneratedNearColumns, 0, observableSelectionColumn);
                that._frozenNearColumns.splice(autoGeneratedNearColumns, 0, observableSelectionColumn);
            } else {
                that.viewColumns.push(observableSelectionColumn);
                that._frozenFarColumns.splice(0, 0, observableSelectionColumn);
            }

            that._selectionColumn = observableSelectionColumn;
            that._selectionColumn.canNotify = false;
            that._observeColumns();
            that._templateColumns();
        }
    }, {
        key: '_templateColumns',
        value: function _templateColumns() {
            var that = this;

            var computedStyle = getComputedStyle(that);
            var templateColumns = computedStyle.getPropertyValue('--jqx-grid-template-columns').trim();
            var columnGap = computedStyle.getPropertyValue('--jqx-grid-column-gap').trim();
            var rowGap = computedStyle.getPropertyValue('--jqx-grid-row-gap').trim();

            that._rowGap = parseInt(rowGap);
            that._columnGap = parseInt(columnGap);
            that._maxHeight = parseInt(computedStyle.maxHeight);
            that._minHeight = parseInt(computedStyle.minHeight);

            if (templateColumns !== 'none') {

                var unboundColumnWidths = 0;

                for (var i = 0; i < that.viewColumns.length; i++) {
                    if (that.viewColumns[i].autoGenerated) {
                        unboundColumnWidths += that.viewColumns[i].visible ? that.viewColumns[i].width : 0;
                    }
                }

                var boundColumnWidths = [];
                var templateColumnsContainer = document.createElement('div');

                templateColumnsContainer.style.display = 'grid';
                templateColumnsContainer.style.gridTemplateColumns = templateColumns;

                for (var _i33 = 0; _i33 < that.columns.length; _i33++) {
                    templateColumnsContainer.innerHTML += '<div></div>';
                }

                templateColumnsContainer.style.width = that.clientWidth - unboundColumnWidths + 'px';

                that.$.root.appendChild(templateColumnsContainer);

                var templateColumnsArray = templateColumns.split(' ');

                for (var _i34 = 0; _i34 < that.columns.length; _i34++) {
                    boundColumnWidths[_i34] = templateColumnsContainer.children[_i34].offsetWidth;

                    if (templateColumnsArray[_i34] === 'auto') {
                        boundColumnWidths[_i34] = 'auto';
                    }
                }

                templateColumnsContainer.parentNode.removeChild(templateColumnsContainer);

                var j = 0;

                for (var _i35 = 0; _i35 < that.viewColumns.length; _i35++) {
                    var column = that.viewColumns[_i35];

                    if (column.autoGenerated) {
                        continue;
                    }

                    if (boundColumnWidths[j]) {
                        column.width = column.templateWidth = boundColumnWidths[j++];
                    }
                }
            } else {
                for (var _i36 = 0; _i36 < that.viewColumns.length; _i36++) {
                    var _column14 = that.viewColumns[_i36];

                    if (_column14.autoGenerated) {
                        continue;
                    }

                    if (_column14.templateWidth) {
                        _column14.width = _column14.templateWidth = 'auto';
                    }
                }
            }
        }
    }, {
        key: '_observeColumns',
        value: function _observeColumns() {
            var that = this;

            var columnPropertyChanged = function columnPropertyChanged(column, propertyName, oldValue, newValue) {
                column.propertyChanged(propertyName, oldValue, newValue);
            };

            var _loop3 = function _loop3(i) {
                var column = that.viewColumns[i];

                column.onAction = function () {
                    that._openMenu(this);
                };

                if (column.autoGenerated) {
                    column.notify(function (changes) {
                        column.canNotify = false;
                        columnPropertyChanged(column, changes.propertyName, changes.oldValue, changes.newValue);
                        column.canNotify = true;
                    });
                }
            };

            for (var i = 0; i < that.viewColumns.length; i++) {
                _loop3(i);
            }

            that.columns.notify(function (changes) {
                var column = null;

                if (changes.path) {
                    that.columns.canNotify = false;
                    columnPropertyChanged(changes.target, changes.propertyName, changes.oldValue, changes.newValue);
                    that.columns.canNotify = true;
                    return;
                }

                that.columns.canNotify = false;

                var changeType = changes.action;

                var unboundColumnsCount = 0;

                switch (changeType) {
                    case 'length':
                        {
                            that.columns.canNotify = true;
                            return;
                        }
                    case 'add':
                        {
                            var addColumn = function addColumn(columnIndex) {
                                column = changes.object[columnIndex];

                                if (column instanceof JQX.Grid.Column === false) {
                                    column = new JQX.Grid.Column(column);

                                    var notify = that.columns.canNotify;
                                    that.columns.canNotify = false;
                                    changes.object[columnIndex] = column;
                                    column = changes.object[columnIndex];
                                    that.columns.canNotify = notify;
                                }

                                column.grid = that;

                                if (column.freeze) {
                                    that._frozenNearColumns.push(column);
                                } else if (column.freeze === 'far') {
                                    that._frozenFarColumns.push(column);
                                }

                                var index = that.viewColumns.length - that._frozenFarColumns.length;

                                if (columnIndex < that.columns.length) {
                                    that.viewColumns.splice(columnIndex + that._frozenNearColumns.length, 0, column);
                                } else {
                                    that.viewColumns.splice(index, 0, column);
                                }

                                if (!that.columnByDataField[column.dataField]) {
                                    that.columnByDataField[column.dataField] = column;
                                } else {
                                    that.columnByDataField[column.dataField].children.push(column);
                                    column.parent = that.columnByDataField[column.dataField];

                                    column.valueField = column.dataField;

                                    var dataField = column.dataField + '_' + column.parent.children.length;

                                    that.columnByDataField[dataField] = column;
                                    column.dataField = dataField;
                                }

                                if (that.onColumnInserted) {
                                    that.onColumnInserted(columnIndex, column);
                                }
                            };

                            for (var i = 0; i < changes.addedCount; i++) {
                                addColumn(changes.index + i);
                            }

                            break;
                        }
                    case 'update':
                        {
                            column = changes.object[changes.index];
                            column.grid = that;

                            for (var _i37 = 0; _i37 < changes.index; _i37++) {
                                if (that.viewColumns[_i37].autoGenerated) {
                                    unboundColumnsCount++;
                                }
                            }

                            that.viewColumns[unboundColumnsCount + changes.index] = column;
                            that.columnByDataField[column.dataField] = column;

                            if (that.onColumnUpdated) {
                                that.onColumnUpdated(changes.index, column);
                            }
                            break;
                        }
                    case 'remove':
                        {
                            column = changes.removed[0];
                            var index = changes.index;

                            for (var _i38 = 0; _i38 <= index; _i38++) {
                                if (that.viewColumns[_i38].autoGenerated) {
                                    unboundColumnsCount++;
                                }
                            }

                            that.viewColumns.splice(unboundColumnsCount + index, 1);
                            delete that.columnByDataField[column.dataField];

                            if (that.onColumnRemoved) {
                                that.onColumnRemoved(changes.index, column);
                            }

                            break;
                        }
                }

                that._initializeColumnGroupsHierarchy();
                that._refreshColumnsResponsiveVisibility();
                that._createColumnHeaderCellElements();
                that._templateColumns();
                that.refresh();
                that.columns.canNotify = true;
            });
        }

        /**
        * Calculates the width/height of the rows.
        */

    }, {
        key: '_horizontalScrollbarHandler',


        /**
        * Handles pressed keys.
        
        _handleKeyStrokes(key) {
            const that = this;
            const toFocus = that.selectionMode === 'radioButton' || that.selectionMode === 'checkBox' || that.selectionMode === 'zeroOrMany' || that.selectionMode === 'oneOrMany';
            let rows = that.rows;
        
        
            if (that.disabled || that.readonly) {
                return;
            }
        
            switch (key) {
                case 'ArrowLeft':
                case 'ArrowUp':
                    break;
                case 'ArrowRight':
                case 'ArrowDown':
                    break;
                case ' ': {
                    break;
                }
                case 'Home': {
                    break;
                }
                case 'End': {
                    break;
                }
                case 'PageUp': {
                    break;
                }
                case 'PageDown': {
                    break;
                }
            }
        
            that._recycle();
        }
        /**
        * Horizontal Scroll Bar handler
        */
        value: function _horizontalScrollbarHandler() {
            var that = this;

            that.closeMenu();
            that.isScrolling = true;

            requestAnimationFrame(function () {
                that._recycle();
                that.isScrolling = false;
            });
        }

        /**
        * Container mousewheel event handler.
        */

    }, {
        key: '_mouseWheelHandler',
        value: function _mouseWheelHandler(event) {
            var that = this;

            if (that._scrollView.hScrollBar.$.hasClass('jqx-hidden') && that._scrollView.vScrollBar.$.hasClass('jqx-hidden')) {
                return;
            }

            if (!that.disabled && !that._scrollView.vScrollBar.$.hasClass('jqx-hidden')) {
                event.stopPropagation();
                event.preventDefault();
                that._scrollView.scrollTo(that._scrollView.scrollTop + that._getScrollCoefficient(event, that._clientSize.height));
                //            that._scrollView.scrollTop += event.deltaY < 0 ? -100 : 100;
            }
        }

        /**
        * Removes all rows from DOM. 
        */

    }, {
        key: 'clearRows',
        value: function clearRows() {
            var that = this;

            that.dataSource = [];
            that.clearSelection();
        }
    }, {
        key: 'dataBind',
        value: function dataBind() {
            var that = this;

            that._renderRows();
            if (that.scrollMode === 'virtual' || that.paging.enabled && that.dataSource && that.dataSource.virtualDataSource) {
                that._virtualDataRequest('dataBind');
            } else if (that.dataSource && that.dataSource.virtualDataSource) {
                that._virtualDataRequest('dataBind');
            }
        }
    }, {
        key: 'refresh',
        value: function refresh(fullRefresh) {
            var that = this;

            if (!that.isInitialized) {
                return;
            }

            if (fullRefresh) {
                that._initializeRows();
                that._initializeRowElements();
            }

            that._refresh();
        }
    }, {
        key: '_refresh',
        value: function _refresh() {
            var that = this;

            if (that._isUpdating) {
                return;
            }

            var vScrollWidth = that.$.verticalScrollBar.offsetWidth;

            that.removeAttribute('grouped');
            that.removeAttribute('tree');

            if (that.grouping.enabled && that.dataSource.groupBy && that.dataSource.groupBy.length > 0) {
                that.setAttribute('grouped', '');
            } else if (that.dataSource.boundHierarchy) {
                that.setAttribute('tree', '');
            }

            if (that.isInitialized) {
                // resize columns first, becase we have columns with auto or percentage width depending on the Grid's width.
                that._refreshColumnsResponsiveVisibility();
            }

            // refresh layout and show or hide horizontal/vertical scrollbars..
            that._refreshLayout();

            if (vScrollWidth !== that.$.verticalScrollBar.offsetWidth) {
                that.__scrollWidth = null;
                that._refreshColumnsResponsiveVisibility();
                that._refreshScrollBars();
            }

            that._refreshSelection();
            that._recycle();

            requestAnimationFrame(function () {
                that._width = that.offsetWidth;
                that._height = that.offsetHeight;
            });
        }
        /**
        * Grid resize handler.
        */

    }, {
        key: '_resizeHandler',
        value: function _resizeHandler(event) {
            var that = this;

            if (event.target === that && !that._isUpdatingScrollBars) {
                that._isUpdatingScrollBars = true;

                that._autoHeight = false;
                if (that.$.content) {
                    that.$.content.classList.remove('auto-height');
                }

                that.refresh();
                that._isUpdatingScrollBars = false;
            }
        }
    }, {
        key: '_refreshColumnsResponsiveVisibility',
        value: function _refreshColumnsResponsiveVisibility() {
            var that = this;

            var responsiveWidth = that.adaptivityMode.responsiveLayout.width;
            var adaptiveWidth = that.adaptivityMode.adaptiveLayout.width;
            var gridWidth = 1 + that.$.scrollView.offsetWidth;
            var columnContainer = that.$.columnContainer;
            var columnNearContainer = that.$.columnNearContainer;
            var columnFarContainer = that.$.columnFarContainer;

            var nearWidth = 0;
            var farWidth = 0;
            var computedColumnsWidth = 0;
            var isTreeColumnSet = false;

            for (var i = 0; i < that.viewColumns.length; i++) {
                var _column15 = that.viewColumns[i];

                _column15._treeColumn = false;

                if (_column15.visible && !_column15.autoGenerated && !isTreeColumnSet) {
                    _column15._treeColumn = true;
                    isTreeColumnSet = true;
                }

                _column15.overflowWidth = undefined;
                _column15.adaptiveVisible = false;
            }

            that._refreshColumnWidths();

            var autoGeneratedNearWidth = 0;
            var autoGeneratedFarWidth = 0;

            for (var _i39 = 0; _i39 < that.viewColumns.length; _i39++) {
                var _column16 = that.viewColumns[_i39];

                if (!_column16.visible || _column16.adaptiveVisible) {
                    continue;
                }

                if (_column16.freeze) {
                    if (_column16.freeze === true || _column16.freeze === 'near') {
                        nearWidth += _column16.computedWidth;

                        if (_column16.autoGenerated) {
                            autoGeneratedNearWidth += _column16.computedWidth;
                        }
                    } else if (_column16.freeze === 'far') {
                        farWidth += _column16.computedWidth;

                        if (_column16.autoGenerated) {
                            autoGeneratedFarWidth += _column16.computedWidth;
                        }
                    }
                }

                computedColumnsWidth += _column16.computedWidth;
            }

            columnContainer.style.width = computedColumnsWidth + 'px';
            columnNearContainer.style.width = nearWidth + 'px';
            columnFarContainer.style.width = farWidth + 'px';

            columnFarContainer.classList.remove('jqx-hidden');
            columnNearContainer.classList.remove('jqx-hidden');

            if (farWidth === 0) {
                columnFarContainer.classList.add('jqx-hidden');
            }

            if (nearWidth === 0) {
                columnNearContainer.classList.add('jqx-hidden');
            }

            columnFarContainer.classList.remove('border-collapse');

            if (farWidth === autoGeneratedFarWidth) {
                columnFarContainer.classList.add('border-collapse');
            }

            that._autoGeneratedColumnsNearWidth = autoGeneratedNearWidth;
            that._autoGeneratedColumnsFarWidth = autoGeneratedFarWidth;

            if (that.adaptivityMode.responsiveLayout.enabled || that.adaptivityMode.adaptiveLayout.enabled) {
                var responsiveMode = gridWidth <= responsiveWidth && that.adaptivityMode.responsiveLayout.enabled;
                var adaptiveMode = gridWidth <= adaptiveWidth && that.adaptivityMode.adaptiveLayout.enabled;

                if (responsiveMode || adaptiveMode) {
                    for (var _i40 = that.viewColumns.length - 1; _i40 >= 0; _i40--) {
                        var _column17 = that.viewColumns[_i40];

                        if (!_column17.visible || _column17.freeze) {
                            continue;
                        }

                        if (computedColumnsWidth - _column17.computedWidth <= gridWidth) {
                            break;
                        }

                        computedColumnsWidth -= _column17.computedWidth;
                        _column17.adaptiveVisible = true;
                    }

                    if (computedColumnsWidth > gridWidth) {
                        var overflowWidth = computedColumnsWidth - gridWidth;

                        var columnIndex = -1;

                        var calculateOverflowWidth = function calculateOverflowWidth(overflowWidth) {
                            for (var _i41 = that.viewColumns.length - 1; _i41 >= 0; _i41--) {
                                var _column18 = that.viewColumns[_i41];

                                if (!_column18.visible || _column18.freeze) {
                                    continue;
                                }

                                if (_column18.adaptiveVisible) {
                                    continue;
                                }

                                if (columnIndex === -1) {
                                    columnIndex = _i41;
                                }

                                var width = _column18.computedWidth - overflowWidth;

                                if (width < _column18.minWidth) {
                                    var maxOverflowColumnWidth = _column18.computedWidth - _column18.minWidth;

                                    _column18.overflowWidth = maxOverflowColumnWidth;
                                    overflowWidth -= maxOverflowColumnWidth;
                                } else {
                                    _column18.overflowWidth = overflowWidth;

                                    return 0;
                                }
                            }

                            return overflowWidth;
                        };

                        overflowWidth = calculateOverflowWidth(overflowWidth);

                        if (overflowWidth > 0 && columnIndex !== -1) {
                            var _column19 = that.viewColumns[columnIndex];

                            computedColumnsWidth -= _column19.computedWidth;
                            _column19.adaptiveVisible = true;

                            overflowWidth = computedColumnsWidth - gridWidth;
                            calculateOverflowWidth(overflowWidth);
                        }

                        that._refreshColumnWidths();
                        computedColumnsWidth = gridWidth;
                    }
                }
            }

            that._computedColumnsWidth = computedColumnsWidth;
            that._frozenColumnsNearWidth = nearWidth;
            that._frozenColumnsFarWidth = farWidth;
        }

        /**
        * Document select start handler.
        */

    }, {
        key: '_selectStartHandler',
        value: function _selectStartHandler(event) {
            var that = this;

            if (that.isScrolling || that.editing.isEditing) {
                return;
            }

            event.preventDefault();
        }

        /**
        * Set tabIndex.
        */

    }, {
        key: 'setFocusable',
        value: function setFocusable(focusable) {
            var that = this;

            if (that.disabled || !focusable) {
                that.removeAttribute('tabindex');
                return;
            }

            that.tabIndex = 0;
        }

        /**
        * Set Loading Indicator Visibility
        */

    }, {
        key: '_setLoadingIndicatorVisibility',
        value: function _setLoadingIndicatorVisibility() {
            var that = this;

            if (that.displayLoadingIndicator) {
                that.$.loadingIndicatorContainer.classList.remove('jqx-visibility-hidden');
                return;
            }

            that.$.loadingIndicatorContainer.classList.add('jqx-visibility-hidden');
        }
    }, {
        key: '_refreshElementsVisibility',
        value: function _refreshElementsVisibility() {
            var that = this;

            var setVisibility = function setVisibility(element, visible) {
                visible ? element.classList.remove('jqx-hidden') : element.classList.add('jqx-hidden');
            };

            setVisibility(that.$.placeholder, !that.rows || that.rows && that.rows.length === 0 || that.columns.length === 0);
            setVisibility(that.$.footer, that.footer.visible);
            setVisibility(that.$.header, that.header.visible);
            setVisibility(that.$.groupHeader, that.groupHeader.visible);
            setVisibility(that.$.columnHeader, that.columnHeader.visible && !that._adaptiveLayout && that.columns.length > 0);
            setVisibility(that.$.headerCommandBar, that.editing.commandBar.visible && that.editing.enabled && that.editing.commandBar.position !== 'far');
            setVisibility(that.$.footerCommandBar, that.editing.commandBar.visible && that.editing.enabled && that.editing.commandBar.position !== 'near');

            that.htmlColumnLastChild.classList.add('jqx-visibility-hidden');

            if (that.pager && that.pager.visible && that.paging.enabled) {
                switch (that.pager.position) {
                    case 'near':
                        setVisibility(that.$.headerPager, true);
                        setVisibility(that.$.footerPager, false);
                        break;
                    case 'far':
                        setVisibility(that.$.headerPager, false);
                        setVisibility(that.$.footerPager, true);
                        break;
                    case 'both':
                        setVisibility(that.$.headerPager, true);
                        setVisibility(that.$.footerPager, true);
                        break;
                }
            } else {
                setVisibility(that.$.footerPager, false);
                setVisibility(that.$.headerPager, false);
            }

            that._refreshRowHierarchy();
        }
    }, {
        key: '_refreshRowHierarchy',
        value: function _refreshRowHierarchy() {
            var that = this;

            that.rowHierarchy = null;

            if (!that.grouping.enabled && that.dataSource.groupBy && that.dataSource.groupBy.length > 0) {
                return;
            }

            if (that.dataSource.boundHierarchy) {
                var reservedNames = that.dataSource.reservedNames;

                var addRow = function addRow(data) {
                    var row = new JQX.Grid.Row({ data: data, index: that.rows.length });

                    that.rowById[row.id] = row;

                    return row;
                };

                var refreshRowsVisibility = function refreshRowsVisibility(boundSource, hierarchy) {
                    for (var i = 0; i < boundSource.length; i++) {
                        var dataItem = boundSource[i];

                        var _row17 = that.rowById[dataItem.$.id];

                        if (!_row17) {
                            _row17 = addRow(dataItem);
                        }

                        _row17.data = dataItem;
                        _row17.leaf = dataItem[reservedNames.leaf] || false;
                        _row17.level = dataItem[reservedNames.level];
                        _row17.groupDataField = dataItem.groupDataField;
                        _row17.label = dataItem.label;

                        if (_row17.data) {
                            _row17.filtered = _row17.data.$.filtered !== undefined ? _row17.data.$.filtered : true;
                        }

                        if (dataItem.summaryRow) {
                            _row17.summaryRow = true;
                        }

                        if (that._toggledRow === null || that._toggledRow && that._toggledRow.id !== _row17.id) {
                            _row17.expandHeight = 0;
                        }

                        if (dataItem.parent) {
                            _row17.parent = that.rowById[dataItem.parent.$.id];
                            _row17.parentId = dataItem.parent.$.id;
                        } else {
                            _row17.parent = null;
                            _row17.parentId = null;
                        }

                        var expanded = _row17.expanded;

                        if (_row17.visible === true && _row17.filtered !== false) {
                            if (expanded || dataItem[reservedNames.leaf]) {
                                hierarchy.push(_row17);

                                if (dataItem.children && dataItem.children.length > 0) {
                                    var children = refreshRowsVisibility(dataItem.children, new Array());

                                    if (children.length === 0) {
                                        _row17.leaf = true;
                                    }

                                    for (var t = 0; t < children.length; t++) {
                                        hierarchy.push(children[t]);
                                    }
                                }
                            } else {
                                hierarchy.push(_row17);

                                if (dataItem.children && dataItem.children.length > 0) {
                                    var _children = refreshRowsVisibility(dataItem.children, new Array());

                                    if (_children.length === 0) {
                                        _row17.leaf = true;
                                    }
                                }
                            }
                        }
                    }

                    return hierarchy;
                };

                var hierarchy = that.dataSource.boundHierarchy;

                if (that.paging.enabled) {
                    hierarchy = hierarchy.slice(that.paging.pageIndex * that.paging.pageSize, (that.paging.pageIndex + 1) * that.paging.pageSize);
                }

                that.rowHierarchy = refreshRowsVisibility(hierarchy, new Array());

                if (that._rowElements.length < that.rowHierarchy.length && !that._toggledRow) {
                    that._initializeRowElements();
                }

                if (that.grouping.summaryRow.visible && !that.grouping.summaryRow.inline) {
                    var addHierarchySummaryRow = function addHierarchySummaryRow(level, hierarchy, parent, index) {
                        if (level !== 0) {
                            if (hierarchy.length > 0 && hierarchy[hierarchy.length - 1] && !hierarchy[hierarchy.length - 1].summaryRow) {
                                var dataItem = {
                                    label: ' ', boundSource: [], groupDataField: parent.data.groupDataField, $: {}, summaryRow: true, leaf: true, level: level, expandHeight: 0, siblings: hierarchy
                                };

                                dataItem.$.id = 'SubRow' + index + '_' + parent.data.$.id;

                                if (parent) {
                                    dataItem.parent = parent.data;
                                    dataItem.parentId = parent.data.$.id;
                                }

                                dataItem.data = Object.assign(dataItem);

                                hierarchy.push(dataItem);
                            }
                        }

                        for (var i = 0; i < hierarchy.length; i++) {
                            if (hierarchy[i] && hierarchy[i].data && hierarchy[i].data.children) {
                                addHierarchySummaryRow(level + 1, hierarchy[i].data.children, hierarchy[i], i);
                            }
                        }
                    };

                    addHierarchySummaryRow(0, that.rowHierarchy, null, 0);
                }
            }
        }
    }, {
        key: 'applyContent',
        value: function applyContent() {}
    }, {
        key: '_refreshContentHeight',
        value: function _refreshContentHeight() {
            var that = this;

            var contentHeight = that._clientSize.height;

            var offsetHeight = that.offsetHeight;
            that.$.container.classList.add('jqx-hidden');

            var newOffsetHeight = that.offsetHeight;
            that.$.container.classList.remove('jqx-hidden');

            if (that.verticalScrollBarVisibility === 'hidden' || offsetHeight !== newOffsetHeight || that._minHeight && that._minHeight === offsetHeight) {
                contentHeight = that._scrollHeight + that.$.columnHeader.offsetHeight + that.$.filterFooter.offsetHeight;

                that.$.content.style.height = contentHeight + 'px';

                that._contentHeight = contentHeight;

                if (that._maxHeight < contentHeight) {
                    that._autoHeight = false;
                    that.$.content.classList.remove('auto-height');
                    that.$.content.style.height = that._maxHeight + 'px';
                    that._contentHeight = that._maxHeight;
                } else {
                    that._autoHeight = true;
                    that.$.content.classList.add('auto-height');
                }
                return;
            }

            if (that.header.visible) {
                contentHeight -= that.$.header.offsetHeight;
            }

            if (that.groupHeader.visible) {
                contentHeight -= that.$.groupHeader.offsetHeight;
            }

            if (that.footer.visible) {
                contentHeight -= that.$.footer.offsetHeight;
            }

            if (that.pager.visible) {
                contentHeight -= that.$.headerPager.offsetHeight;
                contentHeight -= that.$.footerPager.offsetHeight;
            }

            if (that.editing.enabled && that.editing.commandBar.visible) {
                contentHeight -= that.$.headerCommandBar.offsetHeight;
                contentHeight -= that.$.footerCommandBar.offsetHeight;
            }

            that.$.content.style.height = contentHeight + 'px';
            that._contentHeight = contentHeight;
        }
    }, {
        key: 'appendChild',
        value: function appendChild() {
            var args = Array.prototype.slice.call(arguments, 2);
            return HTMLElement.prototype.appendChild.apply(this, args.concat(Array.prototype.slice.call(arguments)));
        }
    }, {
        key: 'removeChild',
        value: function removeChild() {
            var args = Array.prototype.slice.call(arguments, 2);
            return HTMLElement.prototype.removeChild.apply(this, args.concat(Array.prototype.slice.call(arguments)));
        }
    }, {
        key: '_refreshLayout',

        /**
        * Sets the initial scroll bar sizes.
        */
        value: function _refreshLayout() {
            var that = this;
            var source = that.rows;

            if (that._layoutSuspended) {
                return;
            }

            that._visibleRows = null;
            that.__viewRows = null;
            that.__clientSize = null;
            that.__scrollHeight = null;
            that.__scrollWidth = null;
            that.__parentCells = null;

            that.$.columnFarContainer.classList.remove('vscroll');
            that.$.scrollView.classList.remove('hscroll');
            that.$.scrollView.classList.remove('vscroll');

            that._refreshElementsVisibility();
            that._refreshColumnHeights();
            that._refreshContentHeight();

            if (!(source && source.url)) {
                if (!source || source === null || source.length === 0 || that.columns.length === 0) {
                    that.$.placeholder.classList.remove('jqx-hidden');

                    that.scrollWidth = 0;
                    that.scrollHeight = 0;

                    return;
                }
            }

            if (!that.__columnHeaderHeight) {
                that.__columnHeaderHeight = that.$.columnHeader.offsetHeight;
            }

            if (!that.__filterFooterOffsetHeight) {
                that.__filterFooterOffsetHeight = that.$.filterFooter.classList.contains('jqx-hidden') ? 0 : that.$.filterFooter.offsetHeight;
            }

            var scrollViewOffsetHeight = that._contentHeight - that.__filterFooterOffsetHeight - that.__columnHeaderHeight;

            that.$.scrollView.style.height = scrollViewOffsetHeight + 'px';
            that.htmlColumnLastChild.style.height = that.__columnHeaderHeight + 'px';

            if (that.paging.spinner.enabled && that.paging.enabled) {
                if (!that.pageScroll) {
                    var pageScroll = document.createElement('jqx-scroll-bar');

                    pageScroll.orientation = 'vertical';
                    pageScroll.style.height = '100%';
                    pageScroll.style.width = '100%';
                    pageScroll.max = Math.ceil(that.dataSource.length / that.paging.pageSize);
                    pageScroll.step = that.paging.spinner.step;
                    pageScroll.largeStep = that.paging.spinner.step;
                    pageScroll.setAttribute('spinner', '');
                    pageScroll.setAttribute('jqx-id', 'spinner');
                    pageScroll.ownerElement = that;

                    that.addPropertyBinding('[[paging_spinner_step]]', 'step', pageScroll, that.$.columnHeader);

                    pageScroll.addEventListener('change', function (event) {
                        that.paging.pageIndex = event.detail.value;
                    });

                    that.pageScroll = pageScroll;
                }

                that.htmlColumnLastChild.appendChild(that.pageScroll);
            } else {
                that.htmlColumnLastChild.innerHTML = '';
            }

            that._refreshScrollBars();
        }
    }, {
        key: '_refreshScrollBars',
        value: function _refreshScrollBars() {
            var that = this;
            var vScrollBar = that._scrollView.vScrollBar;
            var hScrollBar = that._scrollView.hScrollBar;

            var scrollViewOffsetHeight = that._contentHeight - that.__filterFooterOffsetHeight - that.__columnHeaderHeight;
            var scrollViewOffsetWidth = that.$.scrollView.offsetWidth;

            var hScrollWidth = that._scrollWidth - scrollViewOffsetWidth - that._contentBorder.left;
            var vScrollHeight = that._scrollHeight - scrollViewOffsetHeight - that._contentBorder.top;

            var columnNearContainerComputedStyle = that._columnNearContainerComputedStyle ? that._columnNearContainerComputedStyle : getComputedStyle(that.$.columnNearContainer);
            var columnFarContainerComputedStyle = that._columnFarContainerComputedStyle ? that._columnFarContainerComputedStyle : getComputedStyle(that.$.columnFarContainer);

            var nearWidth = parseInt(that.$.columnNearContainer.style.width) + parseInt(columnNearContainerComputedStyle.borderRightWidth);
            var farWidth = parseInt(that.$.columnFarContainer.style.width) + parseInt(columnFarContainerComputedStyle.borderLeftWidth);

            that.__frozenNearWidth = nearWidth;
            that.__frozenFarWidth = farWidth;

            that._columnNearContainerComputedStyle = columnNearContainerComputedStyle;
            that._columnFarContainerComputedStyle = columnFarContainerComputedStyle;

            that._refreshHorizontalScrollBarVisibility(hScrollWidth);
            that._refreshVerticalScrollBarVisibility(vScrollHeight);

            vScrollBar.style.height = scrollViewOffsetHeight + 'px';

            if (that.computedVerticalScrollBarVisibility) {
                if (!that.__scrollBarSize) {
                    that.__scrollBarSize = vScrollBar.offsetWidth;
                }

                that.__scrollWidth += that.__scrollBarSize;
                that._refreshHorizontalScrollBarVisibility(that._scrollWidth - scrollViewOffsetWidth - 1);

                that.$.columnFarContainer.classList.add('vscroll');
                that.htmlColumnLastChild.classList.remove('jqx-visibility-hidden');
            }

            hScrollBar.style.width = scrollViewOffsetWidth + 'px';
            hScrollBar.style.left = '0px';

            if (that.computedVerticalScrollBarVisibility && that.computedHorizontalScrollBarVisibility) {
                hScrollBar.style.width = scrollViewOffsetWidth - vScrollBar.offsetWidth + 'px';
                vScrollBar.style.height = scrollViewOffsetHeight - hScrollBar.offsetHeight + 'px';
            }

            if (that.computedHorizontalScrollBarVisibility) {
                that.$.scrollView.classList.add('hscroll');

                if (that._autoHeight) {
                    that.$.content.style.height = 'auto';
                    that.$.scrollView.style.height = 'auto';
                    that.$.scrollView.style.paddingBottom = hScrollBar.offsetHeight + 'px';
                } else {
                    that.$.scrollView.style.paddingBottom = '';
                }
            } else {
                that.$.scrollView.classList.remove('hscroll');
            }

            if ((that.__frozenNearHeight > 0 || that._frozenNearRows && that._frozenNearRows.length > 0) && !that.appearance.showVerticalScrollBarOnFixedColumns) {
                var rowNearContainerComputedStyle = getComputedStyle(that.$.rowNearContainer);
                var nearHeight = that.__frozenNearHeight + parseInt(rowNearContainerComputedStyle.borderBottomWidth);

                vScrollBar.style.height = parseInt(vScrollBar.style.height) - nearHeight + 'px';
                vScrollBar.style.top = nearHeight + 'px';
                vScrollBar.style.setProperty('--jqx-scroll-bar-near-size', nearHeight + 'px');
            } else if (that.appearance.showVerticalScrollBarOnFixedColumns) {
                vScrollBar.style.top = '0px';
            }

            if ((that.__frozenFarHeight > 0 || that._frozenFarRows && that._frozenFarRows.length > 0) && !that.appearance.showVerticalScrollBarOnFixedColumns) {
                var rowFarContainerComputedStyle = getComputedStyle(that.$.rowFarContainer);
                var farHeight = -2 + that.__frozenFarHeight + parseInt(rowFarContainerComputedStyle.borderTopWidth);

                vScrollBar.style.height = parseInt(vScrollBar.style.height) - farHeight + 'px';
                vScrollBar.style.setProperty('--jqx-scroll-bar-far-size', farHeight + 'px');

                if (that.__frozenNearHeight === 0) {
                    vScrollBar.style.top = '0px';
                }
            }

            if ((nearWidth > 0 || farWidth > 0) && !that.appearance.showHorizontalScrollBarOnFixedColumns) {
                hScrollBar.style.width = parseInt(hScrollBar.style.width) - nearWidth - farWidth + 'px';
                hScrollBar.style.left = nearWidth + 'px';
                hScrollBar.style.setProperty('--jqx-scroll-bar-near-size', nearWidth + parseInt(columnNearContainerComputedStyle.borderRightWidth) + 'px');
                hScrollBar.style.setProperty('--jqx-scroll-bar-far-size', farWidth + parseInt(columnNearContainerComputedStyle.borderLeftWidth) + 'px');

                if (that.computedVerticalScrollBarVisibility) {
                    if (!that.__scrollBarSize) {
                        that.__scrollBarSize = vScrollBar.offsetWidth;
                    }

                    hScrollBar.style.setProperty('--jqx-scroll-bar-far-size', farWidth + that.__scrollBarSize + 'px');
                }
            }

            vScrollBar.refresh();
            hScrollBar.refresh();
        }

        /**
        * Enable/Disable Horizontal Scroll bar.
        */

    }, {
        key: '_refreshHorizontalScrollBarVisibility',
        value: function _refreshHorizontalScrollBarVisibility(scrollWidth) {
            var that = this;

            that.scrollWidth = scrollWidth;

            if (!that.computedHorizontalScrollBarVisibility) {
                that.scrollLeft = 0;
            }
        }

        /**
        * Enable/Disable Vertical Scroll bar.
        */

    }, {
        key: '_refreshVerticalScrollBarVisibility',
        value: function _refreshVerticalScrollBarVisibility(scrollHeight) {
            var that = this;

            if (that._autoHeight) {
                that.scrollTop = 0;
                that.scrollHeight = 0;
                return;
            }

            if (that.computedHorizontalScrollBarVisibility) {
                scrollHeight += that.$.horizontalScrollBar.offsetHeight;
            }

            that.scrollHeight = scrollHeight;

            if (that.paging.enabled && that.paging.spinner.visible) {
                that.$.verticalScrollBarVisibility.classList.remove('jqx-hidden');
            }

            if (!that.computedVerticalScrollBarVisibility) {
                that.scrollTop = 0;
            }
        }

        /**
        * Style change event.
        */

    }, {
        key: '_styleChangedHandler',
        value: function _styleChangedHandler(event) {
            var that = this;

            if (event.detail.styleProperties['overflow'] || that.classList.contains('jqx-grid-resize-mode')) {
                return;
            }

            if (event.detail.styleProperties['grid-template-columns']) {
                that._templateColumns();
                that.refresh();

                return;
            }

            that._resetCachedLayout();
            that._refreshLayout();
            that._recycle();
        }
    }, {
        key: '_resetCachedLayout',
        value: function _resetCachedLayout() {
            var that = this;

            that.__cellsCommandTemplate = null;
            that.__autoRowHeight = null;
            that.__measuredColumnHeight = null;
            that.__columnHeaderHeight = null;
            that.__filterFooterOffsetHeight = null;
        }
        /**
        * SwipeLeft event handler.
        **/

    }, {
        key: '_swipeLeftHandler',
        value: function _swipeLeftHandler() {}

        /**
        * SwipeRight event handler.
        */

    }, {
        key: '_swipeRightHandler',
        value: function _swipeRightHandler() {}
    }, {
        key: '_getRowIndexByPosition',
        value: function _getRowIndexByPosition(position) {
            var that = this;

            var getRowIndex = function getRowIndex(rows) {
                var bottomPointer = 0;
                var topPointer = rows.length - 1;

                if (position <= 0) {
                    return 0;
                }

                var lastNode = rows[rows.length - 1];

                if (lastNode.top !== -1 && lastNode.top <= position) {
                    return rows.length - 1;
                }

                var condition = true;

                while (condition) {
                    var midPointer = Math.floor((bottomPointer + topPointer) / 2);
                    var currentrow = rows[midPointer];
                    if (that._isRowInPosition(currentrow, position)) {
                        return midPointer;
                    } else if (currentrow.top < position) {
                        bottomPointer = midPointer + 1;
                    } else if (currentrow.top > position) {
                        topPointer = midPointer - 1;
                    } else {
                        bottomPointer = midPointer + 1;
                    }
                }
            };

            var index = getRowIndex(that._recyclingRows);

            return index;
        }
    }, {
        key: '_isRowInPosition',
        value: function _isRowInPosition(row, position) {
            var topPixel = row.top;
            var bottomPixel = row.top + row.height;
            var pixelInRow = topPixel <= position && bottomPixel > position;

            if (row.height === 0) {
                return false;
            }

            return pixelInRow;
        }
    }, {
        key: '_renderColumnGroupHeaders',
        value: function _renderColumnGroupHeaders() {
            var that = this;

            for (var i = 0; i < that.columnGroups.length; i++) {
                var columnGroup = that.columnGroups[i];
                columnGroup.column.render();
            }
        }
    }, {
        key: '_isLastVisibleColumn',
        value: function _isLastVisibleColumn(column) {
            var that = this;

            for (var i = that.viewColumns.length - 1; i >= 0; i--) {
                var currentColumn = that.viewColumns[i];

                if (!currentColumn.visible) {
                    continue;
                }

                if (currentColumn === column) {
                    return true;
                }

                return false;
            }

            return false;
        }
    }, {
        key: '_recycle',
        value: function _recycle(recycleColumns, recycleRows) {
            var that = this;

            if (that._layoutSuspended) {
                return;
            }

            if (that._isUpdating) {
                return;
            }

            if (that.editing.isEditing) {
                that.endEdit();
            }

            if (that._inputOverlay) {
                if (that._inputOverlay.parentNode) {
                    that._inputOverlay.parentNode.removeChild(that._inputOverlay);
                }

                that._inputOverlay = null;
            }

            if (that._selection.selectionRect) {
                that._refreshCellSelectionRect();
            }

            var value = that._scrollView.scrollTop;
            var rowIndex = that._getRowIndexByPosition(value);
            var rows = that._recyclingRows;

            var row = rows[rowIndex];

            var rowTop = row ? row.top : 0;
            var columnLeft = undefined;

            var nearWidth = 0;
            var j = 0;

            var rowSpanOffset = 0;
            var colSpanOffset = 0;

            for (var i = 0; i < that._cellsMerge.length; i++) {
                var cell = that._cellsMerge[i];

                var startRowIndex = rows.indexOf(cell.row);

                if (rowIndex > startRowIndex && rowIndex <= startRowIndex + cell.rowSpan) {
                    rowIndex = startRowIndex;
                    row = cell.row;
                    rowSpanOffset = Math.max(rowSpanOffset, rowTop - row.top);
                    rowTop = row.top;
                    that.$.rowContainer.style.top = that.__frozenNearHeight - value + rowTop + 'px';
                }

                if (cell.colSpan > 1) {
                    for (var _j2 = 0; _j2 < that.viewColumns.length; _j2++) {
                        var viewColumn = that.viewColumns[_j2];
                        var _column20 = viewColumn.autoGenerated ? viewColumn : that.columnByDataField[viewColumn.dataField];
                        if (!_column20.visible || _column20.adaptiveVisible) {
                            continue;
                        }

                        if (_column20.left + _column20.computedWidth - that._scrollView.scrollLeft >= nearWidth && _column20.left - _column20.computedWidth - that._scrollView.scrollLeft < that._clientSize.width) {
                            var cellColumn = that.columnByDataField[cell.column.dataField];

                            colSpanOffset = Math.max(colSpanOffset, _column20.left - cellColumn.left + _column20.computedWidth);
                            break;
                        }
                    }
                }
            }

            if (recycleColumns !== false || that._cellsMerge.length > 0) {
                for (var _i42 = 0; _i42 < that._columnElements.length; _i42++) {
                    var columnElement = that._columnElements[_i42];

                    if (!columnElement.parentNode) {
                        break;
                    }

                    columnElement.set('column', null, false);
                    columnElement.classList.add('jqx-visibility-hidden');
                }

                for (var _i43 = 0; _i43 < that.columnGroups.length; _i43++) {
                    var _column21 = that.columnGroups[_i43];
                    var header = _column21.element;

                    header.style.left = _column21.left + 'px';
                    header.style.width = _column21.computedWidth + 'px';
                }

                that._firstVisibleColumn = null;
                that._lastVisibleColumn = null;

                for (var _i44 = 0; _i44 < that.viewColumns.length; _i44++) {
                    var _viewColumn2 = that.viewColumns[_i44];
                    //      let column = viewColumn.autoGenerated ? viewColumn : that.columnByDataField[viewColumn.dataField];
                    var _column22 = _viewColumn2;

                    if (_column22.visible || _column22.adaptiveVisible) {
                        if (!that._firstVisibleColumn) {
                            that._firstVisibleColumn = _column22;
                        }

                        that._lastVisibleColumn = _column22;
                    }

                    if (_column22.element) {
                        if (_column22 === that._firstVisibleColumn) {
                            _column22.element.classList.add('jqx-grid-column-border-collapse');
                        } else {
                            _column22.element.classList.remove('jqx-grid-column-border-collapse');
                        }
                    }

                    if (_column22.freeze) {
                        if (_column22.freeze === true || _column22.freeze === 'near') {
                            if (_column22.visible) {
                                nearWidth += _column22.computedWidth;
                            }
                        }

                        if (!_column22.visible || _column22.adaptiveVisible) {
                            _column22.element.classList.add('jqx-visibility-hidden');
                        } else {
                            _column22.element.classList.remove('jqx-visibility-hidden');
                            _column22.render();
                        }

                        continue;
                    }

                    if (!_column22.visible || _column22.adaptiveVisible) {
                        continue;
                    }

                    if (that._adaptiveLayout > 0) {
                        _column22.element.classList.add('jqx-visibility-hidden');
                    } else {
                        if (_column22.left + _column22.computedWidth - that._scrollView.scrollLeft >= nearWidth - colSpanOffset && _column22.left - _column22.computedWidth - that._scrollView.scrollLeft < that._clientSize.width) {
                            var _columnElement = that._columnElements[j++];

                            _columnElement.set('column', _column22, false);

                            if (!_columnElement.parentNode) {
                                that.$.columnContainer.appendChild(_columnElement);
                            }

                            _column22.element = _columnElement;
                            _column22.render();

                            if (columnLeft === undefined) {
                                columnLeft = _column22.left;
                            }
                        }
                    }
                }
            }

            if (columnLeft === undefined) {
                columnLeft = 0;
            }

            that.$.columnContainer.style.left = -that._scrollView.scrollLeft + 'px';
            that.$.rowContainer.style.top = that.__frozenNearHeight - value + rowTop + 'px';

            if (recycleRows === false) {
                return;
            }

            if (!that._rowElements) {
                return;
            }

            if (rowIndex >= 0) {
                j = 0;
                var offsetHeight = Math.max(that._clientSize.height, that._overflowOffset);

                for (var _i45 = rowIndex; _i45 < rows.length; _i45++) {
                    var _row18 = rows[_i45];

                    if (_row18.height === 0 || !_row18.visible || _row18.filtered === false || _row18.freeze) {
                        continue;
                    }

                    var rowHeight = _row18.height;

                    if (_row18.expandHeight) {
                        offsetHeight += that.offsetHeight + _row18.expandHeight;
                    }

                    if (rowTop + rowHeight >= value - rowSpanOffset && rowTop <= value + offsetHeight || that._autoHeight) {
                        var rowElement = that._rowElements[j++];

                        if (!rowElement) {
                            break;
                        }

                        _row18.element = rowElement;
                        _row18.grid = that;
                        _row18.render();
                    } else {
                        break;
                    }

                    rowTop += rowHeight;
                }
            }

            that._renderFrozenRows();

            if (j < that._rowElements.length) {
                for (var _i46 = j; _i46 < that._rowElements.length; _i46++) {
                    var scrollRow = that._rowElements[j++];

                    scrollRow.classList.add('jqx-hidden');
                }
            }
        }
    }, {
        key: '_renderFrozenRows',
        value: function _renderFrozenRows() {
            var that = this;
            var anyFrozenNearRowVisible = false;
            var anyFrozenFarRowVisible = false;

            if (that._frozenNearRows.length === 0) {
                that.$.rowNearContainer.classList.add('jqx-hidden');
            } else {
                that.$.rowNearContainer.classList.remove('jqx-hidden');
            }

            for (var i = 0; i < that._frozenNearRows.length; i++) {
                var _row19 = that._frozenNearRows[i];

                if (_row19.visible && _row19.filtered) {
                    anyFrozenNearRowVisible = true;

                    _row19.element = that.$.rowNearContainer.children[i];
                    _row19.render();
                }
            }

            if (!anyFrozenNearRowVisible) {
                that.$.rowNearContainer.classList.add('jqx-hidden');
            }

            if (that._frozenFarRows.length === 0) {
                that.$.rowFarContainer.classList.add('jqx-hidden');
            } else {
                that.$.rowFarContainer.classList.remove('jqx-hidden');
            }

            for (var _i47 = 0; _i47 < that._frozenFarRows.length; _i47++) {
                var _row20 = that._frozenFarRows[_i47];

                if (_row20.visible) {
                    anyFrozenFarRowVisible = true;
                }

                _row20.element = that.$.rowFarContainer.children[_i47];
                _row20.render();
            }

            if (!anyFrozenFarRowVisible) {
                that.$.rowFarContainer.classList.add('jqx-hidden');
            }
        }
    }, {
        key: '_recycleRotate',
        value: function _recycleRotate(columnHeaderCellContentElement, textElement, halign, valign, value) {
            var textRectangle = textElement.getBoundingClientRect();
            var boundingRectangle = columnHeaderCellContentElement.getBoundingClientRect();

            var padding = 4;
            var left = 0;
            var top = 0;

            if (boundingRectangle.width === 0) {
                columnHeaderCellContentElement.innerHTML = value;
                return false;
            }

            if (textRectangle.left > boundingRectangle.left) {
                left = boundingRectangle.left - textRectangle.left;
            }

            if (textRectangle.top < boundingRectangle.top) {
                top = boundingRectangle.top - textRectangle.top;
            }

            if (halign === 'left' || halign === '') {
                left = padding;
            }

            if (halign === 'center') {
                left += boundingRectangle.width / 2 - textRectangle.width / 2;
            }

            if (halign === 'right') {
                left += boundingRectangle.width - textRectangle.width - padding;
            }

            if (valign === 'top' || valign === '') {
                top = padding;
            }

            if (valign === 'center' || valign === 'middle') {
                top += boundingRectangle.height / 2 - textRectangle.height / 2;
            }

            if (valign === 'bottom') {
                top += boundingRectangle.height - textRectangle.height - padding;
            }

            textElement.style.left = left + 'px';
            textElement.style.top = top + 'px';

            return true;
        }
    }, {
        key: '_virtualDataRequest',
        value: function _virtualDataRequest(action) {
            var that = this;

            var first = -1;
            var last = -1;

            if (!that._rowElements && that.scrollMode !== 'infinite') {
                return;
            }

            if (that.scrollMode === 'virtual') {
                for (var i = 0; i < that._rowElements.length; i++) {
                    var rowElement = that._rowElements[i];
                    var _row21 = rowElement.row;
                    var visibleIndex = i === 0 ? _row21.visibleIndex : first + i;

                    if (rowElement.classList.contains('jqx-hidden')) {
                        continue;
                    }

                    if (first === -1) {
                        first = visibleIndex;
                    }

                    if (visibleIndex === -1) {
                        continue;
                    }

                    last = 1 + visibleIndex;
                }
            } else if (that.scrollMode === 'infinite') {
                first = Infinity;
                last = Infinity;
            } else {
                first = 0;
                last = that.dataSource.length;
            }

            if (that.paging.enabled) {
                first = that.paging.pageIndex * that.paging.pageSize;
                last = first + that.paging.pageSize;
            }

            if (last !== Infinity) {
                last = Math.min(last, that.dataSource.length);
            }

            that.displayLoadingIndicator = true;
            that._setLoadingIndicatorVisibility();

            var details = {
                first: first,
                last: last,
                sorting: that.getSortedColumns(),
                filtering: that.getFilteredColumns(),
                grouping: [],
                row: that._toggledRow ? that._toggledRow.data : null,
                action: action
            };

            var dataSourceLength = that.dataSource.length;

            that.dataSource.onVirtualDataSourceRequested(function () {
                that.displayLoadingIndicator = false;
                that._setLoadingIndicatorVisibility();
                that._toggledRow = null;

                if (that.dataSource.length !== dataSourceLength) {
                    if (that.paging.enabled) {
                        that.$.headerPager.querySelector('jqx-pager').pagesCount = Math.ceil(that.dataSource.length / that.paging.pageSize);
                        that.$.footerPager.querySelector('jqx-pager').pagesCount = Math.ceil(that.dataSource.length / that.paging.pageSize);
                    }

                    that._initializeRows();
                    that._initializeRowElements();

                    that.refresh();
                } else if (that.dataSource.virtualDataSourceOnExpand) {
                    that.refresh();
                }

                that._recycle();
            }, details);
        }

        /**
        * Vertical Scroll Bar handler
        */

    }, {
        key: '_verticalScrollbarHandler',
        value: function _verticalScrollbarHandler(data) {
            var that = this;

            that.closeMenu();
            that.isScrolling = true;

            if (that._scrollTimer) {
                clearTimeout(that._scrollTimer);
            }

            that._scrollTimer = setTimeout(function () {
                that._recycle(false);
                that.isScrolling = false;

                if (data.max === data.value) {
                    that.$.fireEvent('scrollBottomReached');

                    if (that.scrollMode === 'infinite') {
                        that._virtualDataRequest('scroll');
                        return;
                    }
                }

                if (that.scrollMode === 'virtual') {
                    that._virtualDataRequest('scroll');
                }

                if (data.min === data.value) {
                    that.$.fireEvent('scrollTopReached');
                }
            });
        }
    }, {
        key: '_autoRowHeight',
        get: function get() {
            var that = this;

            if (that.__autoRowHeight) {
                return that.__autoRowHeight;
            }

            var row = new JQX.Grid.Row({ adaptiveHeight: 0, index: 0, grid: that });
            var measureRowElement = row.createElement();

            var measuredHeight = that.rowMinHeight;

            that.$.scrollView.appendChild(measureRowElement);

            var data = {};

            for (var i = 0; i < that.dataSource.dataFields.length; i++) {
                var dataField = that.dataSource.dataFields[i];

                data[dataField.name] = 'ABCDEFHIJLMNOPQRSTUVWXYZ1234567910|';
            }

            row.data = data;
            row.render();
            measureRowElement.style.height = '';
            measureRowElement.style.lineHeight = '';

            measuredHeight = Math.max(measureRowElement.offsetHeight, measuredHeight);

            for (var _i48 = 0; _i48 < measureRowElement.children.length; _i48++) {
                measureRowElement.children[_i48].style.height = '';
            }

            for (var _i49 = 0; _i49 < measureRowElement.children[1].children.length; _i49++) {
                measureRowElement.children[1].children[_i49].style.height = 'auto';

                var cell = row.getCell(that.columns[0].dataField);

                cell.render();

                measuredHeight = Math.max(measuredHeight, 8 + measureRowElement.children[1].children[_i49].offsetHeight);
                break;
            }

            that.$.scrollView.removeChild(measureRowElement);

            that.__autoRowHeight = measuredHeight;

            return measuredHeight;
        }
    }, {
        key: '_scrollHeight',
        get: function get() {
            var that = this;

            var rows = that._recyclingRows;

            var scrollHeight = 0;
            var measuredHeight = that._autoRowHeight;
            var nearHeight = 0;
            var farHeight = 0;

            if (that.__scrollHeight) {
                return that.__scrollHeight;
            }

            if (rows.length === 0 || that.columns.length === 0) {
                return 0;
            }

            that.rows.canNotify = false;

            // calculate adaptive columns count;

            var adaptiveColumnsCount = 0;
            var normalColumnsCount = 0;

            if (that._responsiveLayout) {
                for (var i = 0; i < that.viewColumns.length; i++) {
                    var _column23 = that.viewColumns[i];

                    if (_column23.autoGenerated) {
                        continue;
                    }

                    if (_column23.adaptiveVisible) {
                        adaptiveColumnsCount++;
                    } else {
                        normalColumnsCount++;
                    }
                }
            } else if (that._adaptiveLayout > 0) {
                for (var _i50 = 0; _i50 < that.viewColumns.length; _i50++) {
                    var _column24 = that.viewColumns[_i50];

                    if (_column24.autoGenerated) {
                        continue;
                    }

                    adaptiveColumnsCount++;
                }
            }

            //const columnAdaptiveWidth = that._adaptiveLayout === 2 ? '50%' : that._adaptiveLayout === 1 ? '100%' : 0;
            var length = rows.length;

            for (var _i51 = 0; _i51 < length; _i51++) {
                var _row22 = rows[_i51];

                if (!_row22.visible || _row22.filtered === false) {
                    _row22.height = 0;
                    _row22.cellHeight = 0;
                    _row22.top = scrollHeight;
                    continue;
                }

                var recalculateRowHeight = !_row22.height || !_row22.cellHeight || _row22.showDetail;

                if (recalculateRowHeight && !_row22.expandHeight) {
                    if (!_row22.detailHeight) {
                        _row22.detailHeight = 200;
                    }

                    if (!that.rowHeight) {
                        _row22.height = measuredHeight;
                        _row22.adaptiveHeight = 0;

                        if (_row22.label !== undefined && !_row22.summaryRow) {
                            _row22.height = that.grouping.groupRowHeight;
                        }

                        if (_row22.computedHeight) {
                            _row22.height = _row22.computedHeight;
                        }

                        _row22.cellHeight = _row22.height;

                        if (that._responsiveLayout) {
                            var rowsCount = Math.ceil(adaptiveColumnsCount / normalColumnsCount);

                            if (undefined === _row22.label) {
                                _row22.adaptiveHeight = rowsCount * measuredHeight;
                            } else {
                                _row22.adaptiveHeight = _row22.height;
                            }

                            _row22.adaptiveHeight += 50;
                        }

                        if (that.rowDetail.enabled && _row22.showDetail) {
                            _row22.height += _row22.detailHeight;
                        }
                    } else if (that.rowHeight) {
                        if (typeof that.rowHeight === 'number') {
                            if (that.rowHeight < that.rowMinHeight) {
                                that.rowHeight = that.rowMinHeight;
                            }

                            _row22.height = that.rowHeight;

                            if (_row22.computedHeight) {
                                _row22.height = _row22.computedHeight;
                            }

                            if (_row22.label !== undefined) {
                                _row22.height = that.grouping.groupRowHeight;
                            }

                            _row22.cellHeight = _row22.height;

                            if (that.rowDetail.enabled && _row22.showDetail) {
                                _row22.height += _row22.detailHeight;
                            }
                        } else {
                            that.rowHeight(_i51, _row22);
                            if (!_row22.height) {
                                _row22.height = measuredHeight;
                            }

                            _row22.cellHeight = _row22.height;

                            if (that.rowDetail.enabled && _row22.showDetail) {
                                _row22.height += _row22.detailHeight;
                            }
                        }
                    }

                    if (that._rowGap && _i51 < that.rows.length - 1) {
                        _row22.height += that._rowGap;
                    }
                }

                if (_row22.freeze === true || _row22.freeze === 'near') {
                    nearHeight += _row22.height;
                } else if (_row22.freeze === 'far') {
                    farHeight += _row22.height;
                }

                if (_row22.freeze) {
                    _row22.top = scrollHeight;
                    continue;
                }

                if (_row22.top !== scrollHeight) {
                    _row22.top = scrollHeight;
                }

                if (_row22.expandHeight) {
                    scrollHeight += _row22.cellHeight;
                } else {
                    scrollHeight += _row22.height;
                }
            }

            that.__scrollHeight = scrollHeight;
            that.__frozenNearHeight = nearHeight;
            that.__frozenFarHeight = farHeight;

            that._scrollView.scrollHeight = scrollHeight - that.$.scrollView.offsetHeight + nearHeight + farHeight;

            scrollHeight = that.__scrollHeight + nearHeight + farHeight;

            if (that.grouping.enabled && that.dataSource.groupBy.length > 0 && that.grouping.groupIndent > 0) {
                scrollHeight += parseInt(that.grouping.groupIndent / 2);
            }

            that.__scrollHeight = scrollHeight;

            that.rows.canNotify = true;

            return scrollHeight;
        }
    }, {
        key: '_clientSize',
        get: function get() {
            var that = this;

            if (that.__clientSize) {
                return that.__clientSize;
            }

            var computedStyle = getComputedStyle(that.$.container);

            var paddingX = parseFloat(computedStyle.paddingLeft) + parseFloat(computedStyle.paddingRight);
            var paddingY = parseFloat(computedStyle.paddingTop) + parseFloat(computedStyle.paddingBottom);

            var borderX = parseFloat(computedStyle.borderLeftWidth) + parseFloat(computedStyle.borderRightWidth);
            var borderY = parseFloat(computedStyle.borderTopWidth) + parseFloat(computedStyle.borderBottomWidth);

            that.__clientSize = {
                width: that.$.container.offsetWidth - paddingX - borderX, height: that.$.container.offsetHeight - paddingY - borderY
            };

            return that.__clientSize;
        }
    }, {
        key: '_viewRows',
        get: function get() {
            var that = this;

            if (that.__viewRows) {
                return that.__viewRows;
            }

            if (!that._nearRowsAdded) {
                that._nearRowsAdded = [];
                that._farRowsAdded = [];
            }

            var viewRows = !that.rowHierarchy ? that.rows.toArray() : that.rowHierarchy;

            var rows = [].concat(that._frozenNearDefaultRows, that._nearRowsAdded, viewRows, that._farRowsAdded, that._frozenFarDefaultRows);

            that.__viewRows = rows;

            return rows;
        }
    }, {
        key: 'styleProperties',
        get: function get() {
            return ['grid-template-columns'];
        }
    }, {
        key: '_scrollWidth',
        get: function get() {
            var that = this;

            if (that.__scrollWidth) {
                return that.__scrollWidth;
            }

            var width = 0;

            for (var i = 0; i < that.viewColumns.length; i++) {
                var _column25 = that.viewColumns[i];

                if (!_column25.visible || _column25.adaptiveVisible) {
                    continue;
                }

                width += _column25.computedWidth;
            }

            if (that.adaptivityMode.responsiveLayout.enabled) {
                var responsiveWidth = that.adaptivityMode.responsiveLayout.width;
                var scrollViewWidth = 1 + that.$.scrollView.offsetWidth;

                if (scrollViewWidth <= responsiveWidth) {
                    return 0;
                }
            }

            if (that.adaptivityMode.adaptiveLayout.enabled) {
                var adaptiveWidth = that.adaptivityMode.adaptiveLayout.width;
                var _scrollViewWidth = 1 + that.$.scrollView.offsetWidth;

                if (_scrollViewWidth <= adaptiveWidth) {
                    return 0;
                }
            }

            width = parseInt(width);
            that.__scrollWidth = width;
            that._scrollView.scrollWidth = width - that._clientSize.width;

            return that.__scrollWidth;
        }
    }, {
        key: 'enableShadowDOM',
        get: function get() {
            return true;
        }
    }, {
        key: '_contentBorder',
        get: function get() {
            var that = this;

            if (that.__contentBorder) {
                return that.__contentBorder;
            }

            var contentComputedStyle = getComputedStyle(that.$.content);
            var contentBorderX = parseFloat(contentComputedStyle.borderLeftWidth) + parseFloat(contentComputedStyle.borderRightWidth);
            var contentBorderY = parseFloat(contentComputedStyle.borderTopWidth) + parseFloat(contentComputedStyle.borderBottomWidth);

            var border = {
                left: contentBorderX, top: contentBorderY
            };

            that.__contentBorder = border;

            return border;
        }
    }, {
        key: '_recyclingRows',
        get: function get() {
            var that = this;

            if (that.rowHierarchy) {
                return that.rowHierarchy;
            }

            var rows = that.getVisibleRows();

            if (that.paging.enabled) {
                rows = rows.slice(that.paging.pageIndex * that.paging.pageSize, (that.paging.pageIndex + 1) * that.paging.pageSize);
            }

            return rows;
        }
    }], [{
        key: 'properties',

        // Grid's properties.
        /*
          */
        get: function get() {
            return {
                //When the adaptivityMode property is set to responsiveLayout, 
                //the grid automatically hides columns one by one when the browser window is resized  
                //When a grid has hidden columns, an ellipsis button is displayed for every row. 
                //Clicking this button expands an adaptive detail row containing the hidden data.

                //When the adaptivityMode property is set to adaptiveLayout, 
                //the grid automatically switches its layout at certain point.
                'adaptivityMode': {
                    value: {
                        'responsiveLayout': {
                            value: {
                                'enabled': {
                                    value: false,
                                    type: 'boolean'
                                },
                                'autoShowHiddenCells': {
                                    value: true,
                                    type: 'boolean'
                                },
                                'width': {
                                    value: 900,
                                    type: 'number'
                                }
                            },
                            type: 'object'
                        },
                        'adaptiveLayout': {
                            value: {
                                'enabled': {
                                    value: false,
                                    type: 'boolean'
                                },
                                'width': {
                                    value: 450,
                                    type: 'number'
                                }
                            },
                            type: 'object'
                        }
                    },
                    type: 'object'
                },
                'allowColumnReorder': {
                    value: false,
                    type: 'boolean'
                },
                'allowRowReorder': {
                    value: false,
                    type: 'boolean'
                },
                // context menu option.
                'allowColumnFixing': {
                    value: false,
                    type: 'boolean'
                },
                'appearance': {
                    value: {
                        'alternationStart': {
                            value: 0,
                            type: 'int'
                        },
                        'alternationEnd': {
                            value: 0,
                            type: 'int'
                        },
                        'alternationCount': {
                            value: 0,
                            type: 'int'
                        },
                        'allowHover': {
                            value: false,
                            type: 'boolean',
                            defaultReflectToAttribute: true
                        },
                        'allowHeaderHover': {
                            value: true,
                            type: 'boolean',
                            defaultReflectToAttribute: true
                        },
                        'allowRowToggleAnimation': {
                            value: false,
                            type: 'boolean'
                        },
                        'allowRowDetailToggleAnimation': {
                            value: false,
                            type: 'boolean'
                        },
                        'allowSortAnimation': {
                            value: false,
                            type: 'boolean'
                        },
                        'allowColumnLabelAnimation': {
                            value: true,
                            type: 'boolean'
                        },
                        'allowCheckBoxesSelectionAnimation': {
                            value: true,
                            type: 'boolean'
                        },
                        'allowColumnMenuAnimation': {
                            value: true,
                            type: 'boolean'
                        },
                        'allowColumnSortButtonAnimation': {
                            value: true,
                            type: 'boolean'
                        },
                        'allowColumnActionButtonAnimation': {
                            value: true,
                            type: 'boolean'
                        },
                        'allowColumnFilterButtonAnimation': {
                            value: true,
                            type: 'boolean'
                        },
                        'allowColumnStickyPosition': {
                            value: false,
                            type: 'boolean'
                        },
                        'autoShowColumnSortButton': {
                            value: true,
                            type: 'boolean'
                        },
                        'autoShowColumnActionButton': {
                            value: true,
                            type: 'boolean'
                        },
                        'autoShowColumnFilterButton': {
                            value: true,
                            type: 'boolean'
                        },
                        'sortAnimationDuration': {
                            value: 500,
                            type: 'number'
                        },
                        'showRowHeader': {
                            value: false,
                            type: 'boolean'
                        },
                        'showRowNumber': {
                            value: false,
                            type: 'boolean'
                        },
                        'showColumnHeaderLines': {
                            value: true,
                            type: 'boolean',
                            defaultReflectToAttribute: true
                        },
                        'showColumnLines': {
                            value: true,
                            type: 'boolean',
                            defaultReflectToAttribute: true
                        },
                        'showRowLines': {
                            value: true,
                            type: 'boolean',
                            defaultReflectToAttribute: true
                        },
                        'showFilterColumnBackground': {
                            value: true,
                            type: 'boolean'
                        },
                        'showSortColumnBackground': {
                            value: true,
                            type: 'boolean'
                        },
                        'showFrozenColumnBackground': {
                            value: true,
                            type: 'boolean'
                        },
                        'showFrozenRowBackground': {
                            value: true,
                            type: 'boolean'
                        },
                        'showColumnSortButton': {
                            value: true,
                            type: 'boolean'
                        },
                        'showColumnFilterButton': {
                            value: true,
                            type: 'boolean'
                        },
                        'showColumnDescriptionButton': {
                            value: false,
                            type: 'boolean'
                        },
                        'showColumnIcon': {
                            value: false,
                            type: 'boolean'
                        },
                        'showColumnCustomButton': {
                            value: false,
                            type: 'boolean'
                        },
                        'showColumnActionButton': {
                            value: true,
                            type: 'boolean'
                        },
                        'showTooltips': {
                            value: false,
                            type: 'boolean'
                        },
                        'showResizeTooltips': {
                            value: true,
                            type: 'boolean'
                        },
                        'showHorizontalScrollBarOnFixedColumns': {
                            value: false,
                            type: 'boolean'
                        },
                        'showVerticalScrollBarOnFixedColumns': {
                            value: false,
                            type: 'boolean'
                        }
                    },
                    type: 'object'
                },
                'dataExport': {
                    value: {
                        'header': {
                            value: true,
                            type: 'boolean'
                        },
                        'filterBy': {
                            value: null,
                            type: 'object'
                        },
                        'groupBy': {
                            value: null,
                            type: 'object'
                        },
                        'style': {
                            value: null,
                            type: 'object'
                        },
                        'fileName': {
                            value: 'jqxGrid',
                            type: 'string'
                        },
                        'pageOrientation': {
                            value: 'portrait',
                            type: 'string'
                        },
                        'expandChar': {
                            value: '+',
                            type: 'string'
                        },
                        'collapseChar': {
                            value: '-',
                            type: 'string'
                        }
                    },
                    type: 'object'
                },
                'clipboard': {
                    value: {
                        'enabled': {
                            value: true,
                            type: 'boolean'
                        },
                        'autoFillMode': {
                            value: 'copy',
                            allowedValues: ['none', 'copy', 'fillSeries'],
                            type: 'string'
                        },
                        'onPasteValue': {
                            value: null,
                            type: 'any'
                        }
                    },
                    type: 'object'
                },
                'columns': {
                    value: [],
                    type: 'any',
                    reflectToAttribute: false
                },
                'columnWidth': {
                    value: null,
                    type: 'any',
                    reflectToAttribute: false
                },
                'columnChooser': {
                    value: {
                        'allowSearch': {
                            value: false,
                            type: 'boolean'
                        },
                        'visible': {
                            value: false,
                            type: 'boolean'
                        },
                        'label': {
                            value: 'Column Chooser',
                            type: 'string'
                        },
                        'mode': {
                            value: 'dragAndDrop',
                            type: 'string',
                            allowedValues: ['select', 'dragAndDrop']
                        },
                        'placeholder': {
                            value: 'Drag a column here to hide it',
                            type: 'string'
                        },
                        'width': {
                            value: 250,
                            type: 'number'
                        },
                        'height': {
                            value: 200,
                            type: 'number'
                        }
                    },
                    type: 'object'
                },
                'columnMenu': {
                    value: {
                        'autoClose': {
                            value: true,
                            type: 'boolean'
                        },
                        'dataSource': {
                            value: {
                                'columnMenuCustomizeType': { command: 'customizeTypeCommand', enabled: true, visible: false, icon: 'jqx-icon-customize', label: '{{messages}}' },
                                'columnMenuItemRename': { command: 'renameCommand', enabled: true, visible: false, icon: 'jqx-icon-rename', label: '{{messages}}' },
                                'columnMenuItemEditDescription': { command: 'editDescriptionCommand', enabled: true, visible: false, icon: 'jqx-icon-info-circled', label: '{{messages}}' },
                                'columnMenuItemDuplicate': { command: 'duplicateCommand', visible: false, enabled: true, icon: 'jqx-icon-duplicate', label: '{{messages}}' },
                                'columnMenuItemInsertLeft': { command: 'insertLeftCommand', visible: false, enabled: true, icon: 'jqx-icon-insert-left', label: '{{messages}}' },
                                'columnMenuItemInsertRight': { command: 'insertRightCommand', visible: false, enabled: true, icon: 'jqx-icon-insert-right', label: '{{messages}}' },
                                'columnMenuItemSortAsc': { command: 'sortAscCommand', visible: 'auto', enabled: true, iconAlt: 'jqx-icon-sort-number-up', icon: 'jqx-icon-sort-name-up', label: '{{messages}}' },
                                'columnMenuItemSortDesc': { command: 'sortDescCommand', visible: 'auto', enabled: true, iconAlt: 'jqx-icon-sort-number-down', icon: 'jqx-icon-sort-name-down', label: '{{messages}}' },
                                'columnMenuItemRemoveSort': { command: 'removeSortCommand', visible: 'auto', enabled: true, icon: 'jqx-icon-cancel-circled', label: '{{messages}}' },
                                'columnMenuItemFilter': { command: 'addFilterCommand', visible: 'auto', enabled: true, icon: 'jqx-icon-add-filter', label: '{{messages}}' },
                                'columnMenuItemRemoveFilter': { command: 'removeFilterCommand', enabled: true, visible: 'auto', icon: 'jqx-icon-cancel-circled-outline', label: '{{messages}}' },
                                'columnMenuItemGroupBy': { command: 'groupByCommand', enabled: true, visible: 'auto', icon: 'jqx-icon-object-group', label: '{{messages}}' },
                                'columnMenuItemRemoveGroupBy': { command: 'removeGroupByCommand', visible: 'auto', enabled: true, icon: 'jqx-icon-object-ungroup', label: '{{messages}}' },
                                'columnMenuItemHide': { command: 'hideColumnCommand', enabled: true, visible: false, icon: 'jqx-icon-hide', label: '{{messages}}' },
                                'columnMenuItemDelete': { command: 'deleteColumnCommand', enabled: true, visible: false, icon: 'jqx-icon-delete', label: '{{messages}}' }
                            },
                            type: 'object'
                        },
                        'visible': {
                            value: false,
                            type: 'boolean'
                        },
                        'width': {
                            value: 250,
                            type: 'number'
                        },
                        'height': {
                            value: null,
                            type: 'number?'
                        }
                    },
                    type: 'object'
                },
                'columnGroups': {
                    value: [],
                    type: 'array',
                    reflectToAttribute: false
                },
                'columnHeight': {
                    value: null,
                    type: 'any',
                    reflectToAttribute: false
                },
                'columnMinHeight': {
                    value: 30,
                    type: 'any',
                    reflectToAttribute: false
                },
                'columnResizeMode': {
                    value: 'none',
                    type: 'string',
                    allowedValues: ['none', 'split', 'growAndShrink']
                },
                'dataSource': {
                    value: null,
                    type: 'object',
                    reflectToAttribute: false
                },
                'displayLoadingIndicator': {
                    value: false,
                    type: 'boolean'
                },
                'grouping': {
                    value: {
                        'enabled': {
                            value: false,
                            type: 'boolean',
                            reflectToAttribute: false
                        },
                        'allowCollapse': {
                            value: false,
                            type: 'boolean',
                            reflectToAttribute: false
                        },
                        'autoExpandAll': {
                            value: false,
                            type: 'boolean',
                            reflectToAttribute: false
                        },
                        'expandMode': {
                            value: 'buttonClick',
                            type: 'string',
                            allowedValues: ['buttonClick', 'rowClick'],
                            reflectToAttribute: false
                        },
                        'groupRowHeight': {
                            value: 50,
                            type: 'any',
                            reflectToAttribute: false
                        },
                        'toggleButtonIndent': {
                            value: 16,
                            type: 'number',
                            reflectToAttribute: false
                        },
                        'groupIndent': {
                            value: 16,
                            type: 'number',
                            reflectToAttribute: false
                        },
                        'groupBar': {
                            value: {
                                'visible': {
                                    value: false,
                                    type: 'boolean',
                                    reflectToAttribute: false
                                },
                                'allowColumnDragDrop': {
                                    value: false,
                                    type: 'boolean',
                                    reflectToAttribute: false
                                },
                                'allowColumnCloseButtons': {
                                    value: true,
                                    type: 'boolean',
                                    reflectToAttribute: false
                                }
                            },
                            type: 'object'
                        },
                        'groupPanel': {
                            value: {
                                'visible': {
                                    value: false,
                                    type: 'boolean',
                                    reflectToAttribute: false
                                }
                            },
                            type: 'object'
                        },
                        'summaryRow': {
                            value: {
                                'inline': {
                                    value: true,
                                    type: 'boolean'
                                },
                                'visible': {
                                    value: true,
                                    type: 'boolean'
                                }
                            },
                            type: 'object'
                        }
                    },
                    type: 'object'
                },
                'messages': {
                    extend: true,
                    value: {
                        'en': {
                            'invalidColumnProperty': '{{elementType}}: Invalid property name "{{propertyName}}" set for Column: "{{type}}"',
                            'invalidRowProperty': '{{elementType}}: Invalid property name "{{propertyName}}" set for Row"',
                            'frozenColumns': '{{elementType}}: To Pin/Freeze a column group, all columns within it should be frozen.',
                            'frozenRows': '{{elementType}}: To Pin/Freeze a special cell, all rows within it should be frozen.',
                            'columnGroups': '{{elementType}}: Please, check the initialization of the jqxGrid\'s columns array. The columns in a column group are expected to be siblings in the columns array.',
                            'min': 'Min: {{value}}',
                            'max': 'Max: {{value}} ',
                            'sum': 'Sum: {{value}} ',
                            'avg': 'Avg: {{value}} ',
                            'count': 'Count: {{value}} ',
                            'pagerFirstButton': 'First',
                            'pagerLastButton': 'Last',
                            'pagerPreviousButton': 'Previous',
                            'pagerNextButton': 'Next',
                            'pagerNavigateToLabel': 'Go to:',
                            'pagerPageSizeLabel': 'Show:',
                            'pagerNavigateToInputPlaceholder': '',
                            'pagerEllipsis': '...',
                            'pagerSummaryString': 'of',
                            'pagerSummaryPrefix': 'of',
                            'pagerSummarySuffix': '',
                            'columnMenuCustomizeType': 'Customize type',
                            'columnMenuItemRename': 'Rename',
                            'columnMenuItemEditDescription': 'Edit description',
                            'columnMenuItemDuplicate': 'Duplicate',
                            'columnMenuItemInsertLeft': 'Insert left',
                            'columnMenuItemInsertRight': 'Insert right',
                            'columnMenuItemSortAsc': 'Sort {{mode}}',
                            'columnMenuItemSortDesc': 'Sort {{mode}}', //Sort A → Z
                            'columnMenuItemRemoveSort': 'Remove Sort',
                            'columnMenuItemFilter': 'Filter',
                            'columnMenuItemRemoveFilter': 'Remove Filter',
                            'columnMenuItemGroupBy': 'Group by this column',
                            'columnMenuItemRemoveGroupBy': 'Remove Group',
                            'columnMenuItemHide': 'Hide',
                            'columnMenuItemDelete': 'Delete',
                            'commandBarAddRow': 'Add',
                            'commandBarDeleteRow': 'Delete',
                            'commandBarBatchRevert': 'Revert',
                            'commandBarBatchSave': 'Save',
                            'commandColumnEdit': 'Edit',
                            'commandColumnDelete': 'Delete',
                            'commandColumnCancel': 'Cancel',
                            'commandColumnUpdate': 'Update',
                            'commandColumnMenu': '',
                            'addNewRow': 'Click here to add a new row',
                            'dialogEditHeader': 'Edit {{value}}',
                            'dialogAddButtonConfirm': 'ADD',
                            'dialogAddButtonCancel': 'CANCEL',
                            'dialogEditButtonConfirm': 'OK',
                            'dialogEditButtonCancel': 'CANCEL',
                            'dialogDeleteButtonConfirm': 'DELETE',
                            'dialogDeleteButtonCancel': 'CANCEL',
                            'dialogAddHeader': 'Add Row',
                            'dialogDeleteHeader': 'Delete Row',
                            'dialogDeleteContent': 'Are you sure you want to delete this row?'
                        }
                    },
                    type: 'object'
                },
                'onCellValue': {
                    value: null,
                    type: 'any',
                    reflectToAttribute: false
                },
                'onBeforeInit': {
                    value: null,
                    type: 'any',
                    reflectToAttribute: false
                },
                'onInit': {
                    value: null,
                    type: 'any',
                    reflectToAttribute: false
                },
                'onKey': {
                    value: null,
                    type: 'any',
                    reflectToAttribute: false
                },
                'onRender': {
                    value: null,
                    type: 'any',
                    reflectToAttribute: false
                },
                'onRowInit': {
                    value: null,
                    type: 'any',
                    reflectToAttribute: false
                },
                'onRowDetailInit': {
                    value: null,
                    type: 'any',
                    reflectToAttribute: false
                },
                'onRowDetailUpdated': {
                    value: null,
                    type: 'any',
                    reflectToAttribute: false
                },
                'onRowInserted': {
                    value: null,
                    type: 'any',
                    reflectToAttribute: false
                },
                'onRowRemoved': {
                    value: null,
                    type: 'any',
                    reflectToAttribute: false
                },
                'onRowUpdated': {
                    value: null,
                    type: 'any',
                    reflectToAttribute: false
                },
                'onColumnInit': {
                    value: null,
                    type: 'any',
                    reflectToAttribute: false
                },
                'onColumnInserted': {
                    value: null,
                    type: 'any',
                    reflectToAttribute: false
                },
                'onColumnRemoved': {
                    value: null,
                    type: 'any',
                    reflectToAttribute: false
                },
                'onColumnUpdated': {
                    value: null,
                    type: 'any',
                    reflectToAttribute: false
                },
                'onCommand': {
                    value: null,
                    reflectToAttribute: false,
                    type: 'any'
                },
                'filtering': {
                    value: {
                        'enabled': {
                            value: false,
                            type: 'boolean'
                        },
                        'filter': {
                            value: [],
                            type: 'array',
                            reflectToAttribute: false
                        },
                        'filterRow': {
                            value: {
                                'visible': {
                                    value: false,
                                    type: 'boolean'
                                },
                                'menuVisible': {
                                    value: false,
                                    type: 'boolean'
                                },
                                'applyMode': {
                                    value: 'auto',
                                    type: 'string',
                                    allowedValues: ['auto', 'click']
                                },
                                'autoApplyModeDelay': {
                                    value: 300,
                                    type: 'number'
                                }
                            },
                            type: 'object'
                        },
                        'filterMenu': {
                            value: {
                                'visible': {
                                    value: true,
                                    type: 'boolean'
                                },
                                'buttons': {
                                    value: ['cancel', 'clear', 'filter'],
                                    type: 'array'
                                },
                                'dataSource': {
                                    value: null,
                                    type: 'any'
                                },
                                'width': {
                                    value: 250,
                                    type: 'number'
                                },
                                'height': {
                                    value: 200,
                                    type: 'number'
                                }
                            },
                            type: 'object'
                        },
                        'filterBuilder': {
                            value: {
                                'visible': {
                                    value: false,
                                    type: 'boolean'
                                },
                                'height': {
                                    value: null,
                                    type: 'number?'
                                }
                            },
                            type: 'object'
                        }
                    },
                    type: 'object'
                },
                'editing': {
                    value: {
                        'active': {
                            value: false,
                            readonly: true,
                            type: 'boolean'
                        },
                        'enabled': {
                            value: false,
                            type: 'boolean'
                        },
                        'batch': {
                            value: false,
                            type: 'any'
                        },
                        'action': {
                            value: 'click',
                            type: 'string',
                            allowedValues: ['none', 'click', 'doubleClick']
                        },
                        'commandKeys': {
                            value: {
                                'commandKeyEdit': {
                                    value: {
                                        command: 'commandKeyEditCommand',
                                        key: 'F2'
                                    },
                                    type: 'object'
                                },
                                'commandKeyCancel': {
                                    value: {
                                        command: 'commandKeyCancelCommand',
                                        key: 'Escape'
                                    },
                                    type: 'object'
                                },
                                'commandKeyUpdate': {
                                    value: {
                                        command: 'commandKeyUpdateCommand',
                                        key: 'Enter | Tab'
                                    },
                                    type: 'object'
                                }
                            },
                            type: 'object'
                        },
                        'commandBar': {
                            value: {
                                'visible': {
                                    value: false,
                                    type: 'boolean'
                                },
                                'position': {
                                    value: 'near',
                                    allowedValues: ['near', 'far', 'both'],
                                    type: 'string'
                                },
                                'displayMode': {
                                    value: 'labelAndIcon',
                                    allowedValues: ['label', 'icon', 'labelAndIcon'],
                                    type: 'string'
                                },
                                'dataSource': {
                                    value: {
                                        'commandBarAddRow': {
                                            value: {
                                                'command': {
                                                    value: 'commandBarAddRowCommand',
                                                    type: 'any'
                                                },
                                                'icon': {
                                                    value: 'jqx-icon-plus',
                                                    type: 'string'
                                                },
                                                'label': {
                                                    value: '{{messages}}',
                                                    type: 'string'
                                                },
                                                'visible': {
                                                    value: false,
                                                    type: 'any'
                                                }
                                            },
                                            type: 'object'
                                        },
                                        'commandBarDeleteRow': {
                                            value: {
                                                'command': {
                                                    value: 'commandBarDeleteRowCommand',
                                                    type: 'any'
                                                },
                                                'icon': {
                                                    value: 'jqx-icon-delete',
                                                    type: 'string'
                                                },
                                                'label': {
                                                    value: '{{messages}}',
                                                    type: 'string'
                                                },
                                                'visible': {
                                                    value: false,
                                                    type: 'any'
                                                }
                                            },
                                            type: 'object'
                                        },
                                        'commandBarBatchSave': {
                                            value: {
                                                'command': {
                                                    value: 'commandBarBatchSaveCommand',
                                                    type: 'any'
                                                },
                                                'icon': {
                                                    value: 'jqx-icon-ok-squared',
                                                    type: 'string'
                                                },
                                                'label': {
                                                    value: '{{messages}}',
                                                    type: 'string'
                                                },
                                                'visible': {
                                                    value: true,
                                                    type: 'any'
                                                }
                                            },
                                            type: 'object'
                                        },
                                        'commandBarBatchRevert': {
                                            value: {
                                                'command': {
                                                    value: 'commandBarBatchRevertCommand',
                                                    type: 'any'
                                                },
                                                'icon': {
                                                    value: 'jqx-icon-ccw',
                                                    type: 'string'
                                                },
                                                'label': {
                                                    value: '{{messages}}',
                                                    type: 'string'
                                                },
                                                'visible': {
                                                    value: true,
                                                    type: 'any'
                                                }
                                            },
                                            type: 'object'
                                        }
                                    },
                                    type: 'object'
                                }
                            },
                            type: 'object'
                        },
                        'commandColumn': {
                            value: {
                                'visible': {
                                    value: false,
                                    type: 'boolean'
                                },
                                'inline': {
                                    value: false,
                                    type: 'boolean'
                                },
                                'position': {
                                    value: 'far',
                                    allowedValues: ['near', 'far'],
                                    type: 'string'
                                },
                                'displayMode': {
                                    value: 'icon',
                                    allowedValues: ['label', 'icon', 'labelAndIcon'],
                                    type: 'string'
                                },
                                'dataSource': {
                                    value: {
                                        'commandColumnMenu': {
                                            value: {
                                                'command': {
                                                    value: 'commandColumnMenuCommand',
                                                    type: 'any'
                                                },
                                                'icon': {
                                                    value: 'jqx-icon-menu',
                                                    type: 'string'
                                                },
                                                'label': {
                                                    value: '{{messages}}',
                                                    type: 'string'
                                                },
                                                'visible': {
                                                    value: false,
                                                    type: 'any'
                                                }
                                            },
                                            type: 'object'
                                        },
                                        'commandColumnEdit': {
                                            value: {
                                                'command': {
                                                    value: 'commandColumnEditCommand',
                                                    type: 'any'
                                                },
                                                'icon': {
                                                    value: 'jqx-icon-rename',
                                                    type: 'string'
                                                },
                                                'label': {
                                                    value: '{{messages}}',
                                                    type: 'string'
                                                },
                                                'visible': {
                                                    value: 'auto',
                                                    type: 'any'
                                                }
                                            },
                                            type: 'object'
                                        },
                                        'commandColumnDelete': {
                                            value: {
                                                'command': {
                                                    value: 'commandColumnDeleteCommand',
                                                    type: 'any'
                                                },
                                                'icon': {
                                                    value: 'jqx-icon-delete',
                                                    type: 'string'
                                                },
                                                'label': {
                                                    value: '{{messages}}',
                                                    type: 'string'
                                                },
                                                'visible': {
                                                    value: true,
                                                    type: 'any'
                                                }
                                            },
                                            type: 'object'
                                        },
                                        'commandColumnUpdate': {
                                            value: {
                                                'command': {
                                                    value: 'commandColumnUpdateCommand',
                                                    type: 'any'
                                                },
                                                'icon': {
                                                    value: 'jqx-icon-ok-squared',
                                                    type: 'string'
                                                },
                                                'label': {
                                                    value: '{{messages}}',
                                                    type: 'string'
                                                },
                                                'visible': {
                                                    value: 'auto',
                                                    type: 'any'
                                                }
                                            },
                                            type: 'object'
                                        },
                                        'commandColumnCancel': {
                                            value: {
                                                'command': {
                                                    value: 'commandColumnCancelCommand',
                                                    type: 'any'
                                                },
                                                'icon': {
                                                    value: 'jqx-icon-cancel-circled',
                                                    type: 'string'
                                                },
                                                'label': {
                                                    value: '{{messages}}',
                                                    type: 'string'
                                                },
                                                'visible': {
                                                    value: 'auto',
                                                    type: 'any'
                                                }
                                            },

                                            type: 'object'
                                        },
                                        'commandColumnRowMenu': {
                                            value: {
                                                'command': {
                                                    value: 'commandColumnRowMenuCommand',
                                                    type: 'any',
                                                    reflectToAttribute: false
                                                },
                                                'icon': {
                                                    value: 'jqx-icon-ellipsis-vert',
                                                    type: 'string'
                                                },
                                                'label': {
                                                    value: '{{messages}}',
                                                    type: 'string'
                                                },
                                                'visible': {
                                                    value: false,
                                                    type: 'any'
                                                }
                                            },
                                            type: 'object'
                                        },
                                        'commandColumnCustom': {
                                            value: {
                                                'command': {
                                                    value: '',
                                                    type: 'any'
                                                },
                                                'icon': {
                                                    value: 'jqx-icon-ellipsis-vert',
                                                    type: 'string'
                                                },
                                                'label': {
                                                    value: '',
                                                    type: 'string'
                                                },
                                                'visible': {
                                                    value: false,
                                                    type: 'any'
                                                }
                                            },
                                            type: 'object'
                                        }
                                    },
                                    type: 'object'
                                },
                                'width': {
                                    value: null,
                                    type: 'number?'
                                }
                            },
                            reflectToAttribute: false,
                            type: 'object'
                        },
                        'mode': {
                            value: 'cell',
                            allowedValues: ['cell', 'row'],
                            type: 'string'
                        },
                        'addNewRow': {
                            value: {
                                'position': {
                                    value: 'both',
                                    allowedValues: ['near', 'far', 'both'],
                                    type: 'string'
                                },
                                'visible': {
                                    value: false,
                                    type: 'boolean'
                                },
                                'autoCreate': {
                                    value: false,
                                    type: 'boolean'
                                },
                                'autoSave': {
                                    value: true,
                                    type: 'boolean'
                                },
                                'label': {
                                    value: '{{message}}',
                                    type: 'string'
                                },
                                'displayMode': {
                                    value: 'row',
                                    allowedValues: ['row', 'button'],
                                    type: 'string'
                                }
                            },
                            type: 'object'
                        },
                        'dialog': {
                            value: {
                                'header': {
                                    value: '{{message}}',
                                    type: 'string'
                                },
                                'height': {
                                    value: 'auto',
                                    type: 'any'
                                },
                                'width': {
                                    value: 'auto',
                                    type: 'any'
                                },
                                'left': {
                                    value: 'center',
                                    type: 'any'
                                },
                                'top': {
                                    value: 'center',
                                    type: 'any'
                                },
                                'enabled': {
                                    value: false,
                                    type: 'boolean'
                                },
                                'visible': {
                                    value: false,
                                    type: 'boolean'
                                }
                            },
                            type: 'object'
                        },
                        'addDialog': {
                            value: {
                                'header': {
                                    value: '{{message}}',
                                    type: 'string'
                                },
                                'height': {
                                    value: 'auto',
                                    type: 'any'
                                },
                                'width': {
                                    value: 'auto',
                                    type: 'any'
                                },
                                'left': {
                                    value: 'center',
                                    type: 'any'
                                },
                                'top': {
                                    value: 'center',
                                    type: 'any'
                                },
                                'enabled': {
                                    value: false,
                                    type: 'boolean'
                                },
                                'visible': {
                                    value: false,
                                    type: 'boolean'
                                }
                            },
                            type: 'object'
                        },
                        'deleteDialog': {
                            value: {
                                'header': {
                                    value: '{{message}}',
                                    type: 'string'
                                },
                                'height': {
                                    value: 'auto',
                                    type: 'any'
                                },
                                'width': {
                                    value: 'auto',
                                    type: 'any'
                                },
                                'left': {
                                    value: 'center',
                                    type: 'any'
                                },
                                'top': {
                                    value: 'center',
                                    type: 'any'
                                },
                                'enabled': {
                                    value: false,
                                    type: 'boolean'
                                },
                                'visible': {
                                    value: false,
                                    type: 'boolean'
                                }
                            },
                            type: 'object'
                        }
                    },
                    type: 'object'
                },
                'loadingIndicatorPlaceholder': {
                    value: 'Loading...',
                    type: 'string'
                },
                'loadingIndicatorPosition': {
                    value: 'center',
                    allowedValues: ['bottom', 'center', 'top'],
                    type: 'string'
                },
                'paging': {
                    value: {
                        'enabled': {
                            value: false,
                            type: 'boolean'
                        },
                        'spinner': {
                            value: {
                                'enabled': {
                                    value: false,
                                    type: 'boolean'
                                },
                                'step': {
                                    value: 1,
                                    type: 'number'
                                }
                            },
                            type: 'object'
                        },
                        'pageSize': {
                            value: 10,
                            type: 'int',
                            validator: 'pageSizeValidator'
                        },
                        'pageIndex': {
                            value: 0,
                            type: 'int',
                            validator: 'pageIndexValidator'
                        }
                    },
                    type: 'object'
                },
                'pager': {
                    value: {
                        'autoEllipsis': {
                            value: 'both',
                            allowedValues: ['none', 'before', 'after', 'both'],
                            type: 'string'
                        },
                        'position': {
                            value: 'far',
                            allowedValues: ['near', 'far', 'both'],
                            type: 'string'
                        },
                        'template': {
                            value: '',
                            type: 'string'
                        },
                        'pageSizeSelector': {
                            value: {
                                'visible': {
                                    value: false,
                                    type: 'boolean'
                                },
                                'dataSource': {
                                    value: [10, 20, 50],
                                    type: 'object'
                                },
                                'position': {
                                    value: 'far',
                                    allowedValues: ['near', 'far'],
                                    type: 'string'
                                }
                            },
                            type: 'object'
                        },
                        'summary': {
                            value: {
                                'position': {
                                    value: 'far',
                                    allowedValues: ['near', 'far'],
                                    type: 'string'
                                },
                                'visible': {
                                    value: false,
                                    type: 'boolean'
                                }
                            },
                            type: 'object'
                        },
                        'navigationButtons': {
                            value: {
                                'position': {
                                    value: 'both',
                                    allowedValues: ['near', 'far', 'both'],
                                    type: 'string'
                                },
                                'prevNextButtons': {
                                    value: {
                                        'visible': {
                                            value: true,
                                            type: 'boolean'
                                        }
                                    },
                                    type: 'object'
                                },
                                'firstLastButtons': {
                                    value: {
                                        'visible': {
                                            value: true,
                                            type: 'boolean'
                                        }
                                    },
                                    type: 'object'
                                },
                                'labels': {
                                    value: {
                                        'visible': {
                                            value: false,
                                            type: 'boolean'
                                        }
                                    },
                                    type: 'object'
                                }
                            },
                            type: 'object'
                        },
                        'navigationInput': {
                            value: {
                                'position': {
                                    value: 'far',
                                    allowedValues: ['near', 'far'],
                                    type: 'string'
                                },
                                'visible': {
                                    value: false,
                                    type: 'boolean'
                                }
                            },
                            type: 'object'
                        },
                        'pageIndexSelectors': {
                            value: {
                                'visible': {
                                    value: true,
                                    type: 'boolean'
                                },
                                'dataSource': {
                                    value: 10,
                                    type: 'any'
                                }
                            },
                            type: 'object'
                        },
                        'visible': {
                            value: false,
                            type: 'boolean'
                        }
                    },
                    type: 'object',
                    reflectToAttribute: false
                },
                'placeholder': {
                    value: 'No Rows',
                    type: 'string'
                },
                'rowDetail': {
                    value: {
                        'enabled': {
                            value: false,
                            type: 'boolean'
                        },
                        'height': {
                            value: 200,
                            type: 'number'
                        },
                        'position': {
                            value: 'near',
                            allowedValues: ['near', 'far'],
                            type: 'string'
                        },
                        'template': {
                            value: '',
                            type: 'any',
                            reflectToAttribute: false
                        },
                        'visible': {
                            value: true,
                            type: 'boolean'
                        },
                        'dialog': {
                            value: {
                                'header': {
                                    value: '{{message}}',
                                    type: 'string'
                                },
                                'height': {
                                    value: 'auto',
                                    type: 'any'
                                },
                                'width': {
                                    value: 'auto',
                                    type: 'any'
                                },
                                'left': {
                                    value: 'center',
                                    type: 'any'
                                },
                                'top': {
                                    value: 'center',
                                    type: 'any'
                                },
                                'enabled': {
                                    value: false,
                                    type: 'boolean'
                                },
                                'visible': {
                                    value: false,
                                    type: 'boolean'
                                }
                            },
                            type: 'object'
                        }
                    },
                    type: 'object'
                },
                'rowMinHeight': {
                    value: 30,
                    type: 'number'
                },
                'rowHeight': {
                    value: null,
                    type: 'any',
                    reflectToAttribute: false
                },
                'rowResizeMode': {
                    value: 'none',
                    type: 'string',
                    allowedValues: ['none', 'split', 'growAndShrink']
                },
                'summaryRow': {
                    value: {
                        'position': {
                            value: 'far',
                            allowedValues: ['near', 'far'],
                            type: 'string'
                        },
                        'visible': {
                            value: false,
                            type: 'boolean'
                        },
                        'template': {
                            value: '',
                            type: 'string'
                        }
                    },
                    type: 'object'
                },
                'scrollMode': {
                    value: 'physical',
                    allowedValues: ['physical', 'virtual', 'infinite', 'deferred'],
                    type: 'string'
                },
                'columnHeader': {
                    value: {
                        'visible': {
                            value: true,
                            type: 'boolean'
                        }
                    },
                    type: 'object'
                },
                'groupHeader': {
                    value: {
                        'visible': {
                            value: false,
                            type: 'boolean'
                        },
                        'template': {
                            value: '',
                            type: 'string'
                        }
                    },
                    type: 'object'
                },
                'header': {
                    value: {
                        'visible': {
                            value: false,
                            type: 'boolean'
                        },
                        'template': {
                            value: '',
                            type: 'string'
                        }
                    },
                    type: 'object'
                },
                'footer': {
                    value: {
                        'visible': {
                            value: false,
                            type: 'boolean'
                        },
                        'template': {
                            value: '',
                            type: 'string'
                        }
                    },
                    type: 'object'
                },
                'selection': {
                    value: {
                        'enabled': {
                            value: false,
                            type: 'boolean'
                        },
                        'allowRowHeaderSelection': {
                            value: false,
                            type: 'boolean'
                        },
                        'allowColumnHeaderSelection': {
                            value: false,
                            type: 'boolean'
                        },
                        'allowRowSelection': {
                            value: true,
                            type: 'boolean'
                        },
                        'allowCellSelection': {
                            value: false,
                            type: 'boolean'
                        },
                        'allowDragSelection': {
                            value: true,
                            type: 'boolean'
                        },
                        'allowDragSelectionAutoScroll': {
                            value: true,
                            type: 'boolean'
                        },
                        'allowCellDragSelectionHandle': {
                            value: true,
                            type: 'boolean'
                        },
                        'allowCellDragDropSelectionHandle': {
                            value: true,
                            type: 'boolean'
                        },
                        'allowCellDragSelectionAutoFill': {
                            value: true,
                            type: 'boolean'
                        },
                        'selectAllMode': {
                            value: 'page',
                            allowedValues: ['none', 'page', 'all'],
                            type: 'string'
                        },
                        'mode': {
                            value: 'many',
                            type: 'string',
                            allowedValues: ['one', 'many', 'extended']
                        },
                        'action': {
                            value: 'click',
                            type: 'string',
                            allowedValues: ['none', 'click', 'doubleClick']
                        },
                        'checkBoxes': {
                            value: {
                                'enabled': {
                                    value: false,
                                    type: 'boolean'
                                },
                                'autoShow': {
                                    value: false,
                                    type: 'boolean'
                                },
                                'action': {
                                    value: 'click',
                                    type: 'string',
                                    allowedValues: ['none', 'click', 'doubleClick']
                                },
                                'selectAllMode': {
                                    value: 'page',
                                    allowedValues: ['none', 'page', 'all'],
                                    type: 'string'
                                },

                                'position': {
                                    value: 'near',
                                    allowedValues: ['near', 'far'],
                                    type: 'string'
                                }
                            },
                            type: 'object'
                        },
                        'selected': {
                            value: '',
                            type: 'string'
                        }
                    },
                    type: 'object'
                },
                'sorting': {
                    value: {
                        'enabled': {
                            value: false,
                            type: 'boolean'
                        },
                        'sort': {
                            value: [],
                            type: 'array'
                        },
                        'mode': {
                            value: 'one',
                            allowedValues: ['one', 'many'],
                            type: 'string'
                        },
                        'sortToggleThreeStates': {
                            value: true,
                            type: 'boolean'
                        }
                    },
                    type: 'object'
                }
            };
        }
    }, {
        key: 'requires',
        get: function get() {
            return {/*
                    'JQX.Button': 'jqxbutton.js',
                    'JQX.ScrollBar': 'jqxscrollbar.js',
                    'JQX.Menu': 'jqxmenu.js',
                    'JQX.Calendar': 'jqxcalendar.js',
                    'JQX.TimePicker': 'jqxtimepicker.js',
                    'JQX.DateTimePicker': 'jqxdatetimepicker.js',
                    'JQX.Tree': 'jqxtree.js',
                    'JQX.Utilities.Complex': 'jqxcomplex.js',
                    'JQX.Utilities.BigNumber': 'jqxmath.js',
                    'JQX.Utilities.NumericProcessor': 'jqxnumeric.js',    
                    'JQX.NumericTextBox': 'jqxnumerictextbox.js',    
                    'JQX.Pager': 'jqxpager.js',    
                    'JQX.ListBox': 'jqxlistbox.js',    
                    'JQX.DropDownList': 'jqxdropdownlist.js',    
                    'JQX.ComboBox': 'jqxcombobox.js',    
                    'JQX.Utilities.DateTime': 'jqxdate.js',    
                    'JQX.FilterBuilder': 'jqxfilterbuilder.js',              
                    'JQX.FilterPanel': 'jqxfilterpanel.js'      */
            };
        }
    }, {
        key: 'styleUrls',
        get: function get() {
            return ['jqx.grid.css'];
        }
    }, {
        key: 'listeners',
        get: function get() {
            return {
                'focus': '_focusHandler',
                'blur': '_blurHandler',
                'wheel': '_mouseWheelHandler',
                'document.up': '_upHandler',
                'document.move': '_moveHandler',
                'document.down': '_downHandler',
                'document.scroll': '_scrollHandler',
                'keydown': '_keyDownHandler',
                'keyup': '_keyUpHandler',
                'resize': '_resizeHandler',
                'columnHeader.down': '_columnDownHandler',
                'columnHeader.move': '_columnMoveHandler',
                'columnHeader.mouseleave': '_columnMouseLeaveHandler',
                'rowNearContainer.down': '_rowDownHandler',
                'rowContainer.down': '_rowDownHandler',
                'rowFarContainer.down': '_rowDownHandler',
                'selectstart': '_selectStartHandler',
                'styleChanged': '_styleChangedHandler',
                'swipeleft': '_swipeLeftHandler',
                'swiperight': '_swipeRightHandler'
            };
        }
    }]);
    return Grid;
}(JQX.ScrollViewer));

(function () {
    'use strict';

    JQX.Grid.Extend = function (module) {
        var methodNames = Object.getOwnPropertyNames(module.prototype);

        for (var index in methodNames) {
            var methodName = methodNames[index];

            if (methodName === 'constructor') {
                continue;
            }

            JQX.Grid.prototype[methodName] = module.prototype[methodName];
        }
    };

    JQX.Grid.Extend(JQX.Utilities.Grid.Pager);
    JQX.Grid.Extend(JQX.Utilities.Grid.Filter);
    JQX.Grid.Extend(JQX.Utilities.Grid.Sort);
    JQX.Grid.Extend(JQX.Utilities.Grid.Menu);
    JQX.Grid.Extend(JQX.Utilities.Grid.Select);
    JQX.Grid.Extend(JQX.Utilities.Grid.Edit);
    JQX.Grid.Extend(JQX.Utilities.Grid.Group);
    JQX.Grid.Extend(JQX.Utilities.Grid.Tree);
    JQX.Grid.Extend(JQX.Utilities.Grid.Export);

    JQX.Grid.Cell = JQX.Utilities.Grid.Cell;
    JQX.Grid.Row = JQX.Utilities.Grid.Row;
    JQX.Grid.Column = JQX.Utilities.Grid.Column;
})();