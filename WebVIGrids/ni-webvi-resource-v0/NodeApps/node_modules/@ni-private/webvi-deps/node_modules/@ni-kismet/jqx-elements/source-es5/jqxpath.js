'use strict';

JQX('jqx-path', function (_JQX$BaseElement) {
    babelHelpers.inherits(Path, _JQX$BaseElement);

    function Path() {
        babelHelpers.classCallCheck(this, Path);
        return babelHelpers.possibleConstructorReturn(this, (Path.__proto__ || Object.getPrototypeOf(Path)).apply(this, arguments));
    }

    babelHelpers.createClass(Path, [{
        key: 'template',


        /** Elmenet's template. */
        value: function template() {
            return '<div id="container">\n                    <span class="jqx-label" id="label">[[label]]</span>\n                    <div id="content" class="jqx-content">\n                        <div class="jqx-buttons-container" id="buttonsContainer">\n                            <span id="dropDownButton" class="jqx-drop-down-button">\n                                <span id="icon"></span>\n                            </span>\n                            <div id="inputContainer" class="jqx-path-input-container">\n                                <div id="pathWrapper" class="jqx-path-input-wrapper"></div>\n                                <input id="input"  spellcheck="false" type="text" name="[[name]]" class="jqx-input jqx-path-input"/>\n                                <div class="jqx-path-multiline-container jqx-hidden" id="multilineContainer">\n                                    <div id="multiline" contenteditable="true" spellcheck="false" class="jqx-input jqx-path-input"></div>\n                                </div>\n                            </div>\n                            <span id="browseButton" class="jqx-browse-button">\n                                <span id="icon"></span>\n                            </span>\n                        </div>\n                        <div id="dropDownContainer" class="jqx-drop-down jqx-drop-down-container jqx-visibility-hidden"></div>\n                    </div>\n                    <span class="jqx-hint" id="hint">[[hint]]</span>\n                </div>';
        }
    }, {
        key: 'propertyChangedHandler',


        /**
         * Property Change handler
         * @param {any} propertyName
         * @param {any} oldValue
         * @param {any} newValue
         */
        value: function propertyChangedHandler(propertyName, oldValue, newValue) {
            babelHelpers.get(Path.prototype.__proto__ || Object.getPrototypeOf(Path.prototype), 'propertyChangedHandler', this).call(this, propertyName, oldValue, newValue);

            var that = this;

            switch (propertyName) {
                case 'dropDownAppendTo':
                    that._positionDetection.dropDownAppendToChangedHandler();
                    break;
                case 'dataSource':
                    that._dataBind();
                    //Check the new listBox size
                    that._setDropDownSize();
                    that._positionDetection.checkBrowserBounds('vertically');
                    that._positionDetection.positionDropDown();
                    that._positionDetection.checkBrowserBounds('horizontally');
                    break;
                case 'dropDownMinWidth':
                case 'dropDownWidth':
                case 'dropDownMaxWidth':
                case 'dropDownHeight':
                case 'dropDownMinHeight':
                case 'dropDownMaxHeight':
                    that._setDropDownSize();
                    break;
                case 'dropDownOverlay':
                    if (!newValue) {
                        that._positionDetection.removeOverlay();
                    }

                    break;
                case 'wrap':
                    that._setInput();
                    that._handleValue(that.value);

                    if (document.activeElement !== that) {
                        that._trim();
                    }

                    break;
                case 'readonly':
                    that.$.multiline.readOnly = that.$.input.readOnly = newValue;
                    break;
                case 'value':
                case 'pathFormat':
                    that._handleValue(that.value);

                    if (propertyName === 'value' && that.value !== oldValue) {
                        that.$.fireEvent('change', { oldValue: oldValue, value: that.value });
                    }

                    if (document.activeElement !== that) {
                        that._trim();
                    }

                    break;
                case 'placeholder':
                    that.$.input.placeholder = that.$.multiline.placeholder = that.placeholder;
                    break;
            }
        }

        /**
        * Called when the element is attached from the DOM.
        */

    }, {
        key: 'attached',
        value: function attached() {
            var that = this;

            babelHelpers.get(Path.prototype.__proto__ || Object.getPrototypeOf(Path.prototype), 'attached', this).call(this);

            if (!that.isCompleted || !that.$.dropDownContainer) {
                return;
            }

            that._positionDetection.dropDownAttached('_setDropDownSize');
            that._positionDetection.checkBrowserBounds();
        }

        /**
        * Called when the element is detached from the DOM.
        */

    }, {
        key: 'detached',
        value: function detached() {
            var that = this;

            babelHelpers.get(Path.prototype.__proto__ || Object.getPrototypeOf(Path.prototype), 'detached', this).call(this);

            if (!that.$.dropDownContainer) {
                return;
            }

            that.close();
            that._positionDetection.dropDownDetached();
        }

        /**
         * Element's ready method
         */

    }, {
        key: 'ready',
        value: function ready() {
            babelHelpers.get(Path.prototype.__proto__ || Object.getPrototypeOf(Path.prototype), 'ready', this).call(this);

            var that = this;

            //Configure the Input
            that._setInput();

            //Handles the AutoPositioning of the DropDown
            that._positionDetection = new JQX.Utilities.PositionDetection(that, that.$.dropDownContainer, that.$.container, 'close');
            that._positionDetection.getDropDownParent(true);
            that._positionDetection.setDropDownPosition();
            that._calculateDropDownSize();
            that._positionDetection.handleAutoPositioning();
            that._setDropDownSize();

            //Create the DropDowns
            that._dataBind();

            //Validate the value
            that.wrap ? that._wrapRefresh() : that._handleValue(that.value);

            //Trim the value
            that._trim();

            if (that.opened) {
                that.open();
            }
        }

        /**
         * Blurs the element
         */

    }, {
        key: 'blur',
        value: function blur() {
            this.$[this.wrap ? 'multiline' : 'input'].blur();
        }

        /**
         * Focuses the element
         */

    }, {
        key: 'focus',
        value: function focus() {
            this.$[this.wrap ? 'multiline' : 'input'].focus();
        }

        /**
         * Set to 'Not a path' state
         */

    }, {
        key: 'setToNotAPath',
        value: function setToNotAPath() {
            this._setPathTo('//');
        }

        /**
         * Set to 'Not a path' state
         */

    }, {
        key: 'setToEmptyPath',
        value: function setToEmptyPath() {
            this._setPathTo('////');
        }

        /**
         * Handles the 'setToEmptyPath' and 'setToNotAPath' methods
         * @param {any} value
         */

    }, {
        key: '_setPathTo',
        value: function _setPathTo(value) {
            var that = this,
                oldValue = that.value;

            that.set('value', value);
            that.$.input.value = that.$.multiline.value = '';

            if (oldValue !== that.value) {
                that.$.fireEvent('change', { oldValue: oldValue, value: that.value });
            }
        }

        /**
        * Hides the drop down list.
        */

    }, {
        key: 'close',
        value: function close() {
            var that = this;

            if (that.$dropDownContainer.hasClass('jqx-visibility-hidden')) {
                return;
            }

            var isClosingEventPrevented = that.$.fireEvent('closing').defaultPrevented;

            if (isClosingEventPrevented) {
                return;
            }

            that.$dropDownContainer.addClass('jqx-visibility-hidden');
            that.$.fireEvent('close');

            that.opened = false;
            that._preventDropDownClose = false;
            that._positionDetection.removeOverlay(true);

            if (that._edgeMacFF && !that.hasAnimation && that.$.dropDownContainer) {
                that.$.dropDownContainer.style.top = that.$.dropDownContainer.style.left = '';
                that.$dropDownContainer.addClass('not-in-view');
            }
        }

        /**
        * Shows the drop down List.
        */

    }, {
        key: 'open',
        value: function open() {
            var that = this;

            if (that.disabled || !that.offsetHeight) {
                return;
            }

            if (!that.$dropDownContainer.hasClass('jqx-visibility-hidden')) {
                return;
            }

            that._handleItemSelection();

            //Set disabled state where necessary
            that._updateDropDown();

            if (that.$dropDownContainer.hasClass('not-in-view')) {
                that.$dropDownContainer.removeClass('not-in-view');
            }

            that.$.dropDownContainer.style.transition = null;

            if (that.dropDownAppendTo && that.dropDownAppendTo.length > 0) {
                var rect = that.getBoundingClientRect();

                // handles the case, when the dropdown is opened, while it is still part of the dropdownlist's tree. 
                if (that.$.container.contains(that.$.dropDownContainer)) {
                    var iterations = 0;
                    var interval = setInterval(function () {
                        var rect = that.getBoundingClientRect();

                        iterations++;

                        if (rect.top === that._positionTop && iterations < 10) {
                            return;
                        }

                        that.open();
                        clearInterval(interval);
                        that._positionTop = rect.top;
                    }, 100);

                    return;
                } else if (rect.top !== that._positionTop) {
                    that._positionTop = rect.top;
                }
            }

            var isOpeningEventPrevented = that.$.fireEvent('opening').defaultPrevented;

            if (isOpeningEventPrevented) {
                return;
            }

            that.opened = true;

            that._positionDetection.placeOverlay();
            that._positionDetection.checkBrowserBounds('vertically');
            that._positionDetection.positionDropDown();
            that._positionDetection.checkBrowserBounds('horizontally');

            that.$dropDownContainer.removeClass('jqx-visibility-hidden');
            that.$.fireEvent('open');

            that._handleKeyStrokes('Home');

            if (!JQX.Utilities.Core.isMobile) {
                that.wrap ? that.$.multiline.focus() : that.$.input.focus();
            }
        }

        /**
        * Calculates the dropDownSize and creates an object with the sizes
        */

    }, {
        key: '_calculateDropDownSize',
        value: function _calculateDropDownSize() {
            var that = this;

            that._dropDownSize = {};

            var computedStyle = window.getComputedStyle(that.$.dropDownContainer);
            var topBorder = parseFloat(computedStyle.getPropertyValue('border-top-width').trim()),
                bottomBorder = parseFloat(computedStyle.getPropertyValue('border-bottom-width').trim()),
                topMargin = parseFloat(computedStyle.getPropertyValue('margin-top').trim()),
                bottomMargin = parseFloat(computedStyle.getPropertyValue('margin-bottom').trim()),
                topPaddinng = parseFloat(computedStyle.getPropertyValue('padding-top').trim()),
                bottomPaddinng = parseFloat(computedStyle.getPropertyValue('padding-bottom').trim());

            if (JQX.Utilities.Core.CSSVariablesSupport()) {
                that._dropDownSize.width = computedStyle.getPropertyValue('--jqx-drop-down-list-drop-down-width').trim();
                that._dropDownSize.height = computedStyle.getPropertyValue('--jqx-drop-down-list-drop-down-height').trim();
            }

            if (!that._dropDownSize.width || that._dropDownSize.width.indexOf('initial') > -1) {
                that._dropDownSize.width = that.offsetWidth;
            }

            if (!that._dropDownSize.height) {
                that._dropDownSize.height = 'auto';
            }

            that._dropDownSize.minHeight = parseFloat(computedStyle.getPropertyValue('min-height').trim());
            that._dropDownSize.maxHeight = parseFloat(computedStyle.getPropertyValue('max-height').trim());
            that._dropDownSize.borderWidth = (isNaN(topBorder) ? 0 : topBorder) + (isNaN(bottomBorder) ? 0 : bottomBorder);
            that._dropDownSize.paddingWidth = (isNaN(topPaddinng) ? 0 : topPaddinng) + (isNaN(bottomPaddinng) ? 0 : bottomPaddinng);
            that._dropDownSize.marginWidth = (isNaN(topMargin) ? 0 : topMargin) + (isNaN(bottomMargin) ? 0 : bottomMargin);
        }

        /**
         * Input Focus Handler
         * @param {any} event
         */

    }, {
        key: '_focusHandler',
        value: function _focusHandler(event) {
            var that = this;

            //Focusin handling
            if (event.type === 'focusin') {
                that.setAttribute('focus', '');

                //Untrim
                if (that.wrap) {
                    that._wrapRefresh();
                } else {
                    that._handleValue(that.value);
                }

                that._refreshInputSelection(true);
                return;
            }

            if (that._buttonClicked || that._isDropDownClicked) {
                that.focus();
                return;
            }

            that.removeAttribute('focus');

            //FocusOUT handling
            if (that.wrap) {
                var oldValue = that.value;

                that._handleValue(that.$.multiline.value, true);

                if (that.value !== oldValue) {
                    that.$.fireEvent('change', { oldValue: oldValue, value: that.value });
                }
            } else {
                that._handleValue(that.$.input.value, true);
            }

            if (!that._buttonClicked && !that._isDropDownClicked) {
                that.close();
            }

            that._trim();
        }

        /**
         * Configures the Path Input
         */

    }, {
        key: '_setInput',
        value: function _setInput() {
            var that = this;
            var input = that.$.input,
                multiline = that.$.multiline;

            if (!multiline.value) {
                Object.defineProperty(multiline, 'value', {
                    get: function get() {
                        return this.textContent;
                    },
                    set: function set(value) {
                        this.innerHTML = value;

                        if (!value) {
                            this.setAttribute('show-placeholder', '');
                        } else {
                            this.removeAttribute('show-placeholder');
                        }

                        input.value = this.textContent;
                    }
                });
            }

            if (!multiline.readOnly) {
                Object.defineProperty(multiline, 'readOnly', {
                    get: function get() {
                        return this.getAttribute('contenteditable');
                    },
                    set: function set(value) {
                        this.setAttribute('contenteditable', !value);
                    }
                });
            }

            if (that.wrap) {
                input.$.addClass('jqx-hidden');
                that.$multilineContainer.removeClass('jqx-hidden');
            } else {
                input.$.removeClass('jqx-hidden');
                that.$multilineContainer.addClass('jqx-hidden');
            }

            input.placeholder = multiline.placeholder = that.placeholder;
            input.readOnly = multiline.readOnly = that.readonly;

            multiline.value = '';
            multiline.setAttribute('placeholder', that.placeholder);
            multiline.setAttribute('readonly', that.readonly);
        }

        /**
         * Handles the selection of a path item
         * @param {any} pathItem - the selected item
         */

    }, {
        key: '_handleItemSelection',
        value: function _handleItemSelection(pathItem, eventType) {
            var that = this;

            var items = that.$.dropDownContainer.getElementsByClassName('jqx-path-item');

            for (var i = 0; i < items.length; i++) {
                items[i].removeAttribute('active');
            }

            if (!pathItem) {
                return;
            }

            if (eventType) {
                that.$.fireEvent(eventType, {
                    'selected': pathItem.hasAttribute('selected'),
                    'disabled': pathItem.hasAttribute('disabled'),
                    'label': pathItem.label,
                    'value': pathItem.value
                });
            }

            if (pathItem.hasAttribute('disabled')) {
                return;
            }

            var oldValue = that.value;

            pathItem.setAttribute('active', '');

            if (pathItem.value === 'notAPath') {
                that.set('value', '//');
                that.$.input.value = that.$.multiline.value = '';
            } else if (pathItem.value === 'validPath') {
                that.set('value', '////');
                that.$.input.value = that.$.multiline.value = '';
            }

            if (oldValue !== that.value) {
                that.$.fireEvent('change', { oldValue: oldValue, value: that.value });
            }

            that.close();
        }

        /**
         * Handles DropDown keystrokes
         * @param {any} key
         */

    }, {
        key: '_handleKeyStrokes',
        value: function _handleKeyStrokes(key) {
            var that = this,
                items = [].slice.call(that.$.dropDownContainer.children),
                focusedItem = items.find(function (item) {
                return item.hasAttribute('focus');
            }),
                getNonDisableSibling = function getNonDisableSibling(item, type) {
                if (!item) {
                    return;
                }

                var targetItem = void 0;

                targetItem = item[type + 'ElementSibling'];

                while (targetItem) {
                    if (!targetItem.hasAttribute('disabled')) {
                        return targetItem;
                    }

                    targetItem = targetItem[type + 'ElementSibling'];
                }
            };
            var targetItem = void 0;

            if (!items.length) {
                return;
            }

            switch (key) {
                case 'ArrowDown':
                    targetItem = focusedItem ? getNonDisableSibling(focusedItem, 'next') : items.find(function (item) {
                        return !item.hasAttribute('disabled');
                    });
                    break;
                case 'ArrowUp':
                    targetItem = focusedItem ? getNonDisableSibling(focusedItem, 'previous') : items.find(function (item) {
                        return !item.hasAttribute('disabled');
                    });
                    break;
                case 'Home':
                    targetItem = items.find(function (item) {
                        return !item.hasAttribute('disabled');
                    });
                    break;
                case 'End':
                    for (var i = items.length - 1; i >= 0; i--) {
                        if (!items[i].hasAttribute('disabled')) {
                            targetItem = items[i];
                            break;
                        }
                    }

                    break;
            }

            if (targetItem) {
                //unfocus all
                items.map(function (item) {
                    return item.removeAttribute('focus');
                });

                //Focus target
                targetItem.setAttribute('focus', '');
            }
        }

        /**
         * Returns the Type of the path
         * @param {any} value
         */

    }, {
        key: '_getPathType',
        value: function _getPathType(value) {
            if (!value || !value.length) {
                return;
            }

            if (value.indexOf('//rel//') === 0) {
                return 'rel';
            } else if (value.indexOf('//abs//') === 0) {
                return 'abs';
            } else if (value.indexOf('//unc//') === 0) {
                return 'unc';
            }

            if (/(^|[\/\\])(\.{1,2})[\/\\]/g.test(value)) {
                return 'rel';
            } else if (/^[\w\d]{1}:\\/gmi.test(value) || /^\/[\w\d]+\//gmi.test(value)) {
                return 'abs';
            } else if (/^\\\\[\w\d]+\\/gmi.test(value) || /^\/\/[\w\d]+\//gmi.test(value)) {
                return 'unc';
            }

            return 'rel';
        }

        /**
         * Returns the Drive name of the path
         * @param {any} path
         * @param {any} pathType
         */

    }, {
        key: '_getDriveName',
        value: function _getDriveName(path, pathType) {
            var that = this;
            var drive = void 0;

            if (pathType === 'rel') {
                drive = path[0].replace(/[:\\\/]+|\s/gmi, '');

                path[0] = drive;
            } else if (pathType === 'abs') {
                drive = path[0].replace(/[:\\\/]+|[.]{1,}|\s/gmi, '');

                if (that.pathFormat === 'windows') {
                    drive += ':';
                } else if (that.pathFormat === 'unix') {
                    drive = '/' + drive;
                }

                path[0] = drive;
            } else if (pathType === 'unc') {
                drive = path[0].replace(/[:\\/]+|[.]{1,}|\s/gmi, '');

                if (that.pathFormat === 'windows') {
                    drive = '\\\\' + drive;
                } else {
                    drive = '//' + drive;
                }

                path[0] = drive;
            }

            return drive;
        }

        /**
         * Handles the value
         * @param {any} value
         */

    }, {
        key: '_handleValue',
        value: function _handleValue(value) {
            var that = this;

            if (value === '//' || value === '////') {
                that.$.multiline.value = that.$.input.value = '';
                return;
            }

            value = value.trim();

            var pathType = that._getPathType(value);

            if (!value || !value.length || !pathType) {
                that.set('value', '//');
                that.$.multiline.value = that.$.input.value = '';
                return;
            }

            //Remove any uneccessary characters
            value = value.replace(/^(\/+((abs)|(rel)|(unc))\/+)|([?*"<>|]+)/gmi, '');

            var separator = '>';

            //Set the special separators
            value = value.replace(/[\\|\/]+/gmi, separator);

            var path = value.split(separator).filter(function (item) {
                return item.length;
            });

            if (!path.length) {
                that.$.multiline.value = that.$.input.value = '';
                that.set('value', that._formatValue(pathType));
                return;
            }

            for (var p = 0; p < path.length - 1; p++) {
                // '...' is invalid when typing a path manually
                if (path[p] === '...') {
                    path[p] = '';
                    continue;
                }

                // trailing periods (.) in folder names are trimmed; leading periods and periods inside folder names are valid
                if (/^\.+$/g.test(path[p]) === false) {
                    while (path[p].charAt(path[p].length - 1) === '.') {
                        path[p] = path[p].slice(0, path[p].length - 1);
                    }
                }
            }

            if (pathType === 'rel') {
                // Remove period combinations other than '.' and '..'
                for (var _p = 0; _p < path.length - 1; _p++) {
                    if (/^\.{3,}$/g.test(path[_p])) {
                        path[_p] = '';
                    }
                }
            } else {
                //Remove invalid '.' characters from folder names
                for (var _p2 = 0; _p2 < path.length - 1; _p2++) {
                    if (/^\.+$/g.test(path[_p2])) {
                        path[_p2] = '';
                    }
                }
            }

            var drive = that._getDriveName(path, pathType);

            //Construct the value
            that.set('value', that._formatValue(that._constructPath(path, separator, drive), pathType));

            //Construct the path for the input value
            that.$.multiline.value = that.$.input.value = that._constructPath(path, that.pathFormat === 'windows' ? '\\' : '/', drive);
        }

        /**
         * Constructs the final path for the input
         * @param {any} path
         * @param {any} separator
         * @param {any} drive
         */

    }, {
        key: '_constructPath',
        value: function _constructPath(path, separator, drive) {
            var value = '';

            for (var p = 0; p < path.length; p++) {
                var pathSection = path[p];
                var isOnNewLine = pathSection.indexOf('<div>') === 0;

                pathSection = pathSection.replace(/(<div>)|(<\/div>)/gmi, '');

                if (pathSection !== drive) {
                    pathSection = pathSection.replace(/[:\\\/]+|\s+$/gmi, '');
                }

                if (this.wrap) {
                    pathSection = pathSection !== drive ? separator + pathSection : pathSection;
                } else {
                    pathSection = pathSection + separator;
                }

                if (isOnNewLine) {
                    pathSection = '<div>' + pathSection + '</div>';
                }

                value += pathSection;
            }

            //Remove the last separator
            if (!this.wrap && (path.length > 1 || path.length === 1 && path[0].indexOf(':') < 0)) {
                value = value.slice(0, -1);
            }

            return value;
        }

        /**
         * Trims the path
         */

    }, {
        key: '_trim',
        value: function _trim() {
            var that = this;

            if (document.activeElement === that) {
                return;
            }

            var separator = that.pathFormat === 'windows' ? '\\' : '/',
                value = that.value;

            if (!value || value === '//' || value === '////') {
                that.$.multiline.value = that.$.input.value = '';
                return;
            }

            var pathWrapper = that.$.pathWrapper,
                inputWrapper = that.wrap ? that.$.multiline : that.$.input;
            var path = value.replace(/^(\/+((abs)|(rel)|(unc))\/+)|([?*"<>]+)/gmi, '').split('/');
            var isDriveFirst = that._getDriveName(path, that._getPathType(value));

            //Handles multiline trimming
            if (that.wrap) {
                var trimmedPath = that._trimVertically(path, isDriveFirst);

                //Trim Horizontally
                while (pathWrapper.offsetHeight > that.offsetHeight) {
                    var indexToReplace = trimmedPath.length <= 2 ? 0 : 1;

                    if (!trimmedPath.length) {
                        break;
                    }

                    trimmedPath.splice(indexToReplace, 1, '...');
                    trimmedPath = that._trimVertically(trimmedPath, isDriveFirst);
                    pathWrapper.innerHTML = that._constructPath(trimmedPath, separator, isDriveFirst ? trimmedPath[0] : undefined);

                    if (pathWrapper.offsetHeight > that.offsetHeight) {
                        trimmedPath.splice(indexToReplace, 1);
                    }
                }

                path = trimmedPath;
            }

            //Set the width of the pathWrapper to 'auto'
            //pathWrapper.style.width = 'auto';

            pathWrapper.innerHTML = that._constructPath(path, separator, isDriveFirst ? path[0] : undefined);

            while (pathWrapper.offsetWidth > inputWrapper.offsetWidth) {
                var _indexToReplace = path.length <= 2 ? 0 : 1;

                if (!path.length) {
                    break;
                }

                path.splice(_indexToReplace, 1, '...');
                pathWrapper.innerHTML = that._constructPath(path, separator, isDriveFirst ? path[0] : undefined);

                if (pathWrapper.offsetWidth > inputWrapper.offsetWidth) {
                    path.splice(_indexToReplace, 1);
                }
            }

            if (!path.length) {
                pathWrapper.innerHTML = '...';
            }

            //Reset the width of the pathWrapper
            //pathWrapper.style.width = '';

            that.$.multiline.value = that.$.input.value = pathWrapper.innerHTML;
        }

        /**
         * Trims the path vertically for multiline input
         * @param {any} path
         * @param {any} isDriveFirst
         */

    }, {
        key: '_trimVertically',
        value: function _trimVertically(path, isDriveFirst) {
            var that = this,
                pathWrapper = that.$.pathWrapper,
                inputWrapper = that.wrap ? that.$.multiline : that.$.input,
                separator = that.pathFormat === 'windows' ? '\\' : '/',

            //Finds the last single line path segment
            getLastSegmentIndex = function getLastSegmentIndex() {
                var lastIndex = -1;

                for (var p = 0; p < path.length; p++) {
                    if (p !== 0 && path[p].indexOf('<div>') < 0) {
                        lastIndex = p;
                    }
                }

                return lastIndex;
            };

            //Set the width of the pathWrapper to 'auto'
            //pathWrapper.style.width = 'auto';

            //Remove all new lines from path
            for (var i = 0; i < path.length; i++) {
                path[i] = path[i].replace(/(<div>)|(<\/div>)/gmi, '');
            }

            //Separates the path segments in new lines where neccessary
            pathWrapper.innerHTML = that._constructPath(path, separator, isDriveFirst ? path[0] : undefined);

            while (pathWrapper.offsetWidth > inputWrapper.offsetWidth) {
                var pathIndex = getLastSegmentIndex();

                if (pathIndex <= 1 || path[pathIndex] === '...') {
                    break;
                }

                path[pathIndex] = '<div>' + path[pathIndex] + '</div>';

                pathWrapper.innerHTML = that._constructPath(path, separator, isDriveFirst ? path[0] : undefined);
            }

            if (!path.length) {
                pathWrapper.innerHTML = '...';
            }

            that.$.multiline.value = that.$.input.value = pathWrapper.innerHTML;

            //Reset the width of the PathWrapper
            //pathWrapper.style.width = '';

            return path;
        }

        /**
         * Encodes the value
         * @param {any} value
         */

    }, {
        key: '_formatValue',
        value: function _formatValue(value, pathType) {
            var that = this;

            if (!value) {
                value = that.wrap ? that.$.multiline.value : that.$.input.value;
            }

            return !pathType ? '//' : '//' + pathType + '//' + value.replace(/[:]+|\\+|\/+/gmi, '').replace(/>/g, '/');
        }

        /**
         * Input Change event handler
         * @param {any} event
         */

    }, {
        key: '_inputChangeHandler',
        value: function _inputChangeHandler(event) {
            var that = this,
                oldValue = that.value;

            event.preventDefault();
            event.stopPropagation();

            that._handleValue((that.wrap ? that.$.multiline : that.$.input).value, true);

            if (oldValue !== that.value) {
                that.$.fireEvent('change', { oldValue: oldValue, value: that.value });
            }

            that._updateDropDown();
        }

        /**
         * Updates the options inside the DropDown
         */

    }, {
        key: '_updateDropDown',
        value: function _updateDropDown() {
            var that = this;

            var items = that.$.dropDownContainer.children,
                input = that.wrap ? that.$.multiline : that.$.input;
            var notAPathItem = void 0,
                validPath = void 0;

            for (var i = 0; i < items.length; i++) {
                var item = items[i];

                if (item.value === 'notAPath') {
                    notAPathItem = item;
                } else if (item.value === 'validPath') {
                    validPath = item;
                }

                if (notAPathItem && validPath) {
                    break;
                }
            }

            if (notAPathItem) {
                if (!input.value.length || that.indicator) {
                    notAPathItem.setAttribute('disabled', '');

                    if (notAPathItem.hasAttribute('focus')) {
                        notAPathItem.removeAttribute('focus');
                    }
                } else {
                    notAPathItem.removeAttribute('disabled');
                }
            }

            if (validPath) {
                if (input.value.length || that.indicator) {
                    validPath.setAttribute('disabled', '');

                    if (validPath.hasAttribute('focus')) {
                        validPath.removeAttribute('focus');
                    }
                } else {
                    validPath.removeAttribute('disabled');
                }
            }
        }

        /**
         * Update the content of the DropDown
         */

    }, {
        key: '_dataBind',
        value: function _dataBind() {
            var that = this,
                dataSource = that.dataSource;
            var items = [];

            that.$.dropDownContainer.innerHTML = '';

            if (!dataSource || !dataSource.length) {
                return;
            }

            if (typeof dataSource === 'string') {
                that.dataSource = JSON.parse(dataSource);
            }

            if (Array.isArray(dataSource)) {
                var fragment = document.createDocumentFragment();

                for (var i = 0; i < dataSource.length; i++) {
                    var item = dataSource[i],
                        htmlItem = that._createItem(item);

                    items.push(htmlItem);

                    if (fragment) {
                        fragment.appendChild(htmlItem);
                    }
                }

                that.$.dropDownContainer.appendChild(fragment);
            }
        }

        /**
        * Document mouse down event handler.
        */

    }, {
        key: '_documentDownHandler',
        value: function _documentDownHandler(event) {
            var that = this;

            if (that.disabled || that.readonly) {
                return;
            }

            var target = event.originalEvent.target;

            if (target === that._overlay) {
                that._overlayDown = true;
            }

            if (that.enableShadowDOM) {
                target = event.originalEvent.composedPath()[0];

                var rootElement = target.getRootNode().host;

                while (rootElement) {
                    if (rootElement.closest('.jqx-drop-down-container') === that.$.dropDownContainer) {
                        that._isDropDownClicked = true;
                    }

                    rootElement = rootElement.getRootNode().host;
                }
            } else {
                that._isDropDownClicked = target.closest('.jqx-drop-down-container') === that.$.dropDownContainer;
            }

            if (that.contains(target)) {
                that._buttonClicked = target.closest('.jqx-browse-button') || target.closest('.jqx-drop-down-button');
                that._isPathInputDown = target.closest('.jqx-path-input');
            }

            var listItem = target.closest('.jqx-path-item');

            if (!that.$.dropDownContainer.contains(listItem)) {
                listItem = undefined;
            }

            if (listItem) {
                if (that.hasRippleAnimation && !listItem.hasAttribute('disabled') && !listItem.hasAttribute('readonly')) {
                    JQX.Utilities.Animation.Ripple.animate(listItem, event.pageX, event.pageY);
                }

                that._itemClicked = listItem;
                that._preventDropDownClose = true;
            }

            if (that._isDropDownClicked) {
                that._preventDropDownClose = true;
            }
        }

        /**
         * Document Up Event Handler
         * @param {any} event
         */

    }, {
        key: '_documentUpHandler',
        value: function _documentUpHandler(event) {
            var that = this;

            var target = event.originalEvent.target;

            var pathItem = target.closest('.jqx-path-item');

            if (pathItem === that._itemClicked) {
                that._handleItemSelection(pathItem, 'itemClick');
                return;
            }

            that._itemClicked = undefined;

            if (that._buttonClicked) {
                if (that.hasRippleAnimation) {
                    JQX.Utilities.Animation.Ripple.animate(that._buttonClicked, event.pageX + that._buttonClicked.offsetWidth / 4, event.pageY + that._buttonClicked.offsetHeight / 4);
                }

                if (target.closest('.jqx-browse-button') === that._buttonClicked && that._buttonClicked === that.$.browseButton) {
                    that.$.fireEvent('browseButtonClick');
                } else if (target.closest('.jqx-drop-down-button') === that._buttonClicked && that._buttonClicked === that.$.dropDownButton) {
                    that.$.fireEvent('dropDownButtonClick');
                }
            }

            if (target.closest('.jqx-drop-down-button') === that._buttonClicked && that._buttonClicked === that.$.dropDownButton) {
                //Open/Close the dropDownList
                that.$dropDownContainer.hasClass('jqx-visibility-hidden') ? that.open() : that.close();
                that._buttonClicked = undefined;
                return;
            }

            that._buttonClicked = undefined;

            if (that._isPathInputDown === that.$.input || that._isPathInputDown === that.$.multiline) {
                that._isPathInputDown = undefined;
                return;
            }

            target = that._getUpEventTarget(target);

            if (target === undefined) {
                return;
            }

            if (target !== 'dropDownContainer' && target !== 'item' || target === 'item') {
                that.close();
            }
        }

        /**
         * Input keyDown event handler
         * @param {any} event
         */

    }, {
        key: '_inputKeyDownHandler',
        value: function _inputKeyDownHandler(event) {
            var that = this;

            if (that.opened) {
                switch (event.key) {
                    case 'ArrowDown':
                    case 'ArrowUp':
                    case 'Home':
                    case 'End':
                        event.preventDefault();

                        if (event.altKey && event.key === 'ArrowUp') {
                            that.close();
                            return;
                        }

                        that._handleKeyStrokes(event.key);
                        return;
                }
            } else if (event.altKey && event.key === 'ArrowDown') {
                event.preventDefault();
                that.open();
                return;
            } else if (event.key === 'PageDown' || event.key === 'PageUp') {
                event.preventDefault();
                return;
            }

            if (event.key === 'Enter') {
                if (that.wrap) {
                    event.preventDefault();
                }

                if (that.opened) {
                    that._handleItemSelection(that._focusedItem(), 'itemClick');
                    that.close();
                }

                return;
            }

            if (that.opened && event.key === 'Escape') {
                event.preventDefault();
                that.close();
                return;
            }

            var meaniningfullKeys = /^[a-z0-9\/\\.:\s]$/gmi;

            if (meaniningfullKeys.test(event.key)) {
                that.$.multiline.removeAttribute('show-placeholder');
            }
        }

        /**
         * Return the focused item
         */

    }, {
        key: '_focusedItem',
        value: function _focusedItem() {
            var items = this.$.dropDownContainer.children;

            for (var i = 0; i < items.length; i++) {
                if (items[i].hasAttribute('focus')) {
                    return items[i];
                }
            }
        }

        /**
         * Input keyUp event handler
         * @param {any} event
         */

    }, {
        key: '_inputKeyUpHandler',
        value: function _inputKeyUpHandler(event) {
            var that = this;

            if (that.wrap) {
                var value = that.$.multiline.value;

                if (!value) {
                    that.$.multiline.setAttribute('show-placeholder', '');
                }

                that.$.input.value = value;

                if (event.key === 'Enter') {
                    var oldValue = that.value;

                    that._handleValue(value);

                    if (!value) {
                        that.set('value', '//');
                        that.$.multiline.value = that.$.input.value = '';
                    }

                    //Restores the curet position after the valeu is updated
                    if (value) {
                        that._refreshInputSelection();
                    }

                    if (that.value !== oldValue) {
                        that.$.fireEvent('change', { oldValue: oldValue, value: value });
                    }
                }

                that._updateDropDown();
                return;
            }

            if (that.opened) {
                that._inputChangeHandler(event);
            }

            if (event.key === 'Enter' && !that.$.input.value.length) {
                that.set('value', '//');
            }
        }

        /**
         * Refreshes the input selection after unTrimming the value
         */

    }, {
        key: '_refreshInputSelection',
        value: function _refreshInputSelection(isFocusin) {
            var that = this;

            if (that.disabled || that.readonly) {
                return;
            }

            if (!that.wrap) {
                that.$.input.setSelectionRange(0, that.$.input.value.length);
                return;
            }

            var range = new Range(),
                selection = window.getSelection(),
                lastNode = that.$.multiline.childNodes[that.$.multiline.childNodes.length - 1];

            if (!lastNode) {
                return;
            }

            range.setStart(lastNode, lastNode.length);
            range.collapse(true);

            if (isFocusin) {
                range.selectNodeContents(lastNode);
            }

            selection.removeAllRanges();
            selection.addRange(range);
        }

        /**
        * Gets the target of a document up event.
        */

    }, {
        key: '_getUpEventTarget',
        value: function _getUpEventTarget(originalTarget) {
            var that = this;
            var target = originalTarget;

            while (target) {
                if (target.classList.contains('.jqx-path-item')) {
                    if (target.hasAttribute('disabled')) {
                        return;
                    }

                    target = 'item';
                    break;
                } else if (target === that.$.dropDownContainer) {
                    target = 'dropDownContainer';
                    break;
                }

                target = target.parentElement;
            }

            if (that.enableShadowDOM && target !== null) {
                target = originalTarget.getRootNode().host;

                while (target) {
                    if (target === that.$.dropDownContainer) {
                        target = 'dropDownContainer';
                        break;
                    }

                    target = target.parentElement;
                }
            }

            return target;
        }

        /**
         * MouseOver Event Handler
         * @param {any} event
         */

    }, {
        key: '_mouseOverEventHandler',
        value: function _mouseOverEventHandler(event) {
            var target = event.target,
                hoveredElement = target.closest('.jqx-drop-down-button') || target.closest('.jqx-browse-button') || target.closest('.jqx-input') || target.closest('.jqx-path-item');

            if (!hoveredElement || hoveredElement.hasAttribute('disabled')) {
                return;
            }

            if (event.type === 'mouseover') {
                hoveredElement.setAttribute('hover', '');
            } else {
                hoveredElement.removeAttribute('hover');
            }
        }

        /**
         * Creates the items for the drop down
         */

    }, {
        key: '_createItem',
        value: function _createItem(item) {
            var that = this;

            var htmlItem = document.createElement('div');

            if (typeof item === 'number') {
                item = '' + item;
            }

            var getMemberValue = function getMemberValue(memberName, defaultMemberName) {
                if (item[memberName] !== undefined) {
                    return '' + item[memberName];
                }

                return item[defaultMemberName];
            };

            var label = (typeof item === 'string' ? item : getMemberValue(that.displayMember, 'label')) || '',
                value = (typeof item === 'string' ? item : getMemberValue(that.valueMember, 'value')) || '';

            htmlItem.label = htmlItem.innerHTML = '' + (that.localize(label) || label);
            htmlItem.value = '' + (value || label);
            htmlItem.selected = item.selected ? item.selected : false;
            htmlItem.disabled = item.disabled ? item.disabled : false;
            htmlItem.classList.add('jqx-path-item');

            return htmlItem;
        }

        /**
        * Resize handler - recalculate the size of the popup if the element is initialized with a different size.
        */

    }, {
        key: '_resizeHandler',
        value: function _resizeHandler() {
            var that = this;

            //Refresh the Multiline Trimming
            that._wrapRefresh();

            if (that.resizeMode === 'none') {
                that._calculateDropDownSize();
                that._setDropDownSize();
            }

            that._trim();
        }

        /**
         * Checks if trimming is neccessary when wrap is enable
         */

    }, {
        key: '_wrapRefresh',
        value: function _wrapRefresh() {
            var that = this;

            if (!that.wrap) {
                return;
            }

            that._handleValue(that.value);

            that.$.multiline.removeAttribute('position-absolute');

            //Used to prevent the multiline from interfere with the expected height of the element
            //It will not be used if the height of the element is 'auto'
            if (that.offsetHeight < that.$.multiline.offsetHeight) {
                that.$.multiline.setAttribute('position-absolute', '');
            }
        }

        /**
         * Style Changed event handler
         */

    }, {
        key: '_styleChangedHandler',
        value: function _styleChangedHandler() {
            this._trim();
        }

        /**
        * Set DropDown Size.
        */

    }, {
        key: '_setDropDownSize',
        value: function _setDropDownSize() {
            var that = this;

            if (!that._dropDownSize) {
                that._calculateDropDownSize();
            }

            ['dropDownMinWidth', 'dropDownMinHeight', 'dropDownMaxWidth', 'dropDownMaxHeight'].forEach(function (name) {
                that.$.dropDownContainer.style[name.replace('dropDown', '').replace(/^./, 'm')] = that[name] ? that[name] + (that[name].toString().endsWith('%') ? '%' : 'px') : null;
            });

            if (that.dropDownWidth) {
                if (that.dropDownWidth !== 'auto') {
                    that.$.dropDownContainer.style.width = (that.dropDownWidth === 'initial' ? that.offsetWidth : parseFloat(that.dropDownWidth)) + 'px';
                } else {
                    that.$.dropDownContainer.style.width = 'auto';
                }
            } else {
                that.$.dropDownContainer.style.width = that._dropDownSize.width === 'auto' ? 'auto' : (parseFloat(that._dropDownSize.width) || 0) + 'px';
            }

            if (that.dropDownHeight && that.dropDownHeight !== 'auto') {
                that.$.dropDownContainer.style.height = parseFloat(that.dropDownHeight) + ((that.dropDownHeight + '').indexOf('%') > -1 ? '%' : 'px');
            } else {
                that.$.dropDownContainer.style.height = that._dropDownSize.height;
            }
        }
    }], [{
        key: 'properties',

        // Element's properties.
        get: function get() {
            return {
                'value': {
                    value: '',
                    type: 'string'
                },
                'hint': {
                    value: '',
                    type: 'string'
                },
                'label': {
                    value: '',
                    type: 'string'
                },
                'dataSource': {
                    value: [{ label: 'notAPath' }, { label: 'validPath' }],
                    type: 'any',
                    reflectToAttribute: false
                },
                'dropDownAppendTo': {
                    value: null,
                    type: 'any'
                },
                'dropDownPosition': {
                    allowedValues: ['auto', 'top', 'bottom', 'overlay-top', 'overlay-center', 'overlay-bottom', 'center-bottom', 'center-top'],
                    value: 'auto',
                    type: 'string'
                },
                'dropDownMinHeight': {
                    value: '',
                    type: 'any',
                    validator: '_propertyValidator'
                },
                'dropDownHeight': {
                    value: '',
                    type: 'any',
                    validator: '_propertyValidator'
                },
                'dropDownMaxHeight': {
                    value: '',
                    type: 'any',
                    validator: '_propertyValidator'
                },
                'dropDownMinWidth': {
                    value: '',
                    type: 'any',
                    validator: '_propertyValidator'
                },
                'dropDownWidth': {
                    value: '',
                    type: 'any',
                    validator: '_propertyValidator'
                },
                'dropDownMaxWidth': {
                    value: '',
                    type: 'any',
                    validator: '_propertyValidator'
                },
                'dropDownOverlay': {
                    value: false,
                    type: 'boolean'
                },
                'messages': {
                    extend: true,
                    value: {
                        'en': {
                            'incorrectArgument': '{{elementType}}: Incorrect argument {{argumentName}} in method {{methodName}}.',
                            'missingReference': '{{elementType}}: Missing reference to {{file}} in method {{methodName}}.',
                            'notAPath': 'Set to not a path',
                            'validPath': 'Set to valid path'
                        }
                    },
                    type: 'object'
                },
                'name': {
                    value: '',
                    type: 'string'
                },
                'opened': {
                    value: false,
                    type: 'boolean'
                },
                'placeholder': {
                    value: 'Enter a path',
                    type: 'string'
                },
                'pathFormat': {
                    allowedValues: ['windows', 'unix'],
                    value: 'windows',
                    type: 'string'
                },
                'indicator': {
                    value: false,
                    type: 'boolean'
                },
                'displayMember': {
                    value: '',
                    type: 'string'
                },
                'valueMember': {
                    value: '',
                    type: 'string'
                },
                'wrap': {
                    value: false,
                    type: 'boolean'
                }
            };
        }
    }, {
        key: 'listeners',
        get: function get() {
            return {
                'inputContainer.change': '_inputChangeHandler',
                'inputContainer.keydown': '_inputKeyDownHandler',
                'inputContainer.keyup': '_inputKeyUpHandler',
                'document.down': '_documentDownHandler',
                'document.up': '_documentUpHandler',
                'mouseover': '_mouseOverEventHandler',
                'mouseout': '_mouseOverEventHandler',
                'dropDownContainer.mouseover': '_mouseOverEventHandler',
                'dropDownContainer.mouseout': '_mouseOverEventHandler',
                'inputContainer.focusin': '_focusHandler',
                'inputContainer.focusout': '_focusHandler',
                'resize': '_resizeHandler',
                'styleChanged': '_styleChangedHandler'
            };
        }
    }]);
    return Path;
}(JQX.BaseElement));