'use strict';

/**
 * Accordion item custom element.
 */
JQX('jqx-accordion-item', function (_JQX$ContentElement) {
    babelHelpers.inherits(AccordionItem, _JQX$ContentElement);

    function AccordionItem() {
        babelHelpers.classCallCheck(this, AccordionItem);
        return babelHelpers.possibleConstructorReturn(this, (AccordionItem.__proto__ || Object.getPrototypeOf(AccordionItem)).apply(this, arguments));
    }

    babelHelpers.createClass(AccordionItem, [{
        key: 'template',


        /**
         * Expander item's HTML template.
         */
        value: function template() {
            return '<div id="container">\n                    <div id="accordionItemHeader" class ="jqx-accordion-item-header jqx-unselectable">\n                        <span id="arrow" class ="jqx-arrow"></span>\n                        <span id="label" class ="jqx-label" inner-h-t-m-l=\'[[label]]\'></span>\n                    </div>\n                    <div id="accordionItemContent" class ="jqx-accordion-item-content">\n                        <div id="contentContainer" class ="jqx-content-container"><content></content></div>\n                    </div>\n                </div>';
        }

        /**
         * Called when a property is changed.
         */

    }, {
        key: 'propertyChangedHandler',
        value: function propertyChangedHandler(propertyName, oldValue, newValue) {
            babelHelpers.get(AccordionItem.prototype.__proto__ || Object.getPrototypeOf(AccordionItem.prototype), 'propertyChangedHandler', this).call(this, propertyName, oldValue, newValue);

            oldValue = parseInt(oldValue);
            newValue = parseInt(newValue);

            if (propertyName !== 'index' || isNaN(oldValue) || isNaN(newValue)) {
                return;
            }

            var that = this,
                allSiblingsCount = that.parentElement.parentElement._items.length;

            if (newValue < 0) {
                newValue = 0;
            } else if (newValue >= allSiblingsCount) {
                newValue = allSiblingsCount - 1;
            }

            if (newValue !== oldValue) {
                that.$.fireEvent('indexChange', { 'newIndex': newValue, 'oldIndex': oldValue });
            }

            that.index = newValue;
        }

        /**
        * Accordion's header onMouseEnter handler.
        **/

    }, {
        key: '_headerMouseEnterHandler',
        value: function _headerMouseEnterHandler() {
            var that = this;

            if (that.disabled) {
                return;
            }

            that.setAttribute('hovered', '');
        }

        /**
        * Accordion's header onMouseLeave handler.
        **/

    }, {
        key: '_headerMouseLeaveHandler',
        value: function _headerMouseLeaveHandler() {
            var that = this;

            if (that.disabled) {
                return;
            }

            that.removeAttribute('hovered');
        }

        /**
        * Accordion's material ripple effect
        **/

    }, {
        key: '_ripple',
        value: function _ripple(event) {
            var that = this;

            if (that.disabled) {
                return;
            }

            if (that.hasRippleAnimation) {
                JQX.Utilities.Animation.Ripple.animate(that.$.container, event.pageX, event.pageY);
            }
        }

        /**
         * Sets the index without "propertyChangedHandler" being called
         */

    }, {
        key: '_setIndex',
        value: function _setIndex(index) {
            var that = this,
                oldContext = that.context;

            that.context = that;
            that.index = index;
            that.context = oldContext;
        }
    }, {
        key: 'enableShadowDOM',
        get: function get() {
            return false;
        }

        /**
         * Accordion item's event listeners.
         */

    }], [{
        key: 'properties',

        // Accordion item's properties.
        get: function get() {
            return {
                'dragged': {
                    value: false,
                    type: 'boolean'
                },
                'expanded': {
                    value: false,
                    type: 'boolean'
                },
                'focused': {
                    value: false,
                    type: 'boolean'
                },
                'index': {
                    value: null,
                    type: 'number?'
                },
                'label': {
                    value: '',
                    type: 'string'
                }
            };
        }
    }, {
        key: 'listeners',
        get: function get() {
            return {
                'accordionItemHeader.mouseenter': '_headerMouseEnterHandler',
                'accordionItemHeader.mouseleave': '_headerMouseLeaveHandler',
                'accordionItemHeader.down': '_ripple'
            };
        }
    }]);
    return AccordionItem;
}(JQX.ContentElement));

/**
* Accordion custom element.
*/
JQX('jqx-accordion', function (_JQX$BaseElement) {
    babelHelpers.inherits(Accordion, _JQX$BaseElement);

    function Accordion() {
        babelHelpers.classCallCheck(this, Accordion);
        return babelHelpers.possibleConstructorReturn(this, (Accordion.__proto__ || Object.getPrototypeOf(Accordion)).apply(this, arguments));
    }

    babelHelpers.createClass(Accordion, [{
        key: 'template',


        /**
        * Accordion's HTML template.
        */
        value: function template() {
            return '<div id="container">\n                    <content></content>\n                </div>';
        }

        /**
        * CSS files needed for the element (ShadowDOM)
        */

    }, {
        key: 'ready',


        /**
        * Called when the element is ready. Used for one-time configuration of the Accordion.
        */
        value: function ready() {
            babelHelpers.get(Accordion.prototype.__proto__ || Object.getPrototypeOf(Accordion.prototype), 'ready', this).call(this);
            var that = this;

            that._createElement();
        }

        /**
        * Updates the accordion when a property is changed.
        * @param {string} propertyName The name of the property.
        * @param {number/string} oldValue The previously entered value. Max, min and value are of type Number. The rest are of type String.
        * @param {number/string} newValue The new entered value. Max, min and value are of type Number. The rest are of type String.
        */

    }, {
        key: 'propertyChangedHandler',
        value: function propertyChangedHandler(propertyName, oldValue, newValue) {
            var that = this;

            if (propertyName === 'expandedIndexes') {
                if (oldValue.toString() === newValue.toString()) {
                    return;
                }

                var sanitizedNewValue = [];

                if (that._items.length > 0) {
                    for (var i = 0; i < newValue.length; i++) {
                        var sanitizedNewValueSingleItem = parseInt(newValue[i]);

                        if (!isNaN(sanitizedNewValueSingleItem)) {
                            if (that._expandModeIs(['single', 'singleFitHeight', 'toggle'])) {
                                if (sanitizedNewValue.length < 1 && sanitizedNewValueSingleItem >= 0 && sanitizedNewValueSingleItem < that._items.length) {
                                    sanitizedNewValue.push(sanitizedNewValueSingleItem);
                                }

                                break;
                            } else {
                                if (sanitizedNewValueSingleItem >= 0 && sanitizedNewValueSingleItem <= that._items.length && sanitizedNewValue.indexOf(sanitizedNewValueSingleItem) === -1) {
                                    sanitizedNewValue.push(sanitizedNewValueSingleItem);
                                }
                            }
                        }
                    }
                }

                if (sanitizedNewValue.length === 0 && that._expandModeIs(['single', 'singleFitHeight'])) {
                    newValue = oldValue.slice();
                    that.expandedIndexes = newValue;

                    return;
                }

                newValue = sanitizedNewValue;

                var indexes = that._compareExpandedIndexes(oldValue, newValue);

                that._toggleItems('collapse', indexes.collapse);
                that._toggleItems('expand', indexes.expand);

                that.expandedIndexes = newValue;

                return;
            }

            babelHelpers.get(Accordion.prototype.__proto__ || Object.getPrototypeOf(Accordion.prototype), 'propertyChangedHandler', this).call(this, propertyName, oldValue, newValue);

            switch (propertyName) {
                case 'disabled':
                    that._setFocusable();
                    that._enableDisableHandler();
                    break;
                case 'expandMode':
                    if (that._items.length === 0) {
                        break;
                    }

                    if (oldValue === 'multiple' && newValue !== 'none' || oldValue === 'none' && newValue !== 'multiple') {
                        var indexesToCollapse = that.expandedIndexes.slice(1);

                        that._toggleItems('collapse', indexesToCollapse);

                        if (that.expandedIndexes.length === 0 && that._expandModeIs(['single', 'singleFitHeight'])) {
                            expandFirstItem();
                        }
                    } else if (oldValue === 'toggle' && that._expandModeIs(['single', 'singleFitHeight']) && that.expandedIndexes.length === 0) {
                        expandFirstItem();
                    }

                    if (!that._supportCSSVariables || !that._usedCSSVariables) {
                        var expandedIndex = that.expandedIndexes[0];

                        if (oldValue === 'singleFitHeight') {
                            that._items[expandedIndex].$.accordionItemContent.style.height = '';
                        } else if (newValue === 'singleFitHeight') {
                            that._items[expandedIndex].$.accordionItemContent.style.height = that._expandedItemsContainerHeight - 1 + 'px';
                        }
                    }
                    break;
                case 'unfocusable':
                    that._setFocusable();
                    break;
                default:
                    break;
            }

            function expandFirstItem() {
                that._toggleItems('expand', [0]);
                that.expandedIndexes = [0];
            }
        }

        /**
        * Appends a "jqx-accordion-item" node as the last position.
        */

    }, {
        key: 'appendChild',
        value: function appendChild(node) {
            var that = this;

            if (!that.isCompleted || node instanceof HTMLElement && (node.classList.contains('jqx-resize-trigger-container') || node.classList.contains('jqx-measure-element'))) {
                var args = Array.prototype.slice.call(arguments, 2);
                return HTMLElement.prototype.appendChild.apply(that, args.concat(Array.prototype.slice.call(arguments)));
            }

            if (!(node instanceof JQX.AccordionItem)) {
                that.error(that.localize('accordionItemRequired', { method: 'appendChild' }));
            }

            that.insert(that._items.length, node);
        }

        /**
        * Collapse method. Collapses selected item
        */

    }, {
        key: 'collapse',
        value: function collapse(index, programmaticUse) {
            var that = this;

            index = that._validateItemsIndex(index, 'collapse');

            if (isNaN(index)) {
                return;
            }

            var isExpanded = that._items[index].expanded;

            if (!isExpanded || that._expandModeIs(['single', 'singleFitHeight']) && that.expandedIndexes.indexOf(index) > -1) {
                return;
            }

            that._collapseItem(index, programmaticUse);
        }

        /**
        * Expand method.
        */

    }, {
        key: 'expand',
        value: function expand(index, programmaticUse) {
            var that = this;

            index = that._validateItemsIndex(index, 'expand');

            if (isNaN(index)) {
                return;
            }

            var isExpanded = that._items[index].expanded;

            if (isExpanded) {
                return;
            }

            if (that._expandModeIs(['single', 'singleFitHeight', 'toggle'])) {
                that._toggleItems('collapse', that.expandedIndexes);
            }

            that._expandItem(index, programmaticUse);
        }

        /**
        * Inserts items in specific position. It has two parameters - index and item(items).
        */

    }, {
        key: 'insert',
        value: function insert(index, items) {
            var that = this,
                accordionWasEmpty = that._items.length === 0;
            var item = void 0,
                fragment = void 0;

            if (!items) {
                if (typeof index === 'number') {
                    items = [{ label: '', content: '' }];
                } else {
                    items = [{ label: index ? index.toString() : '', content: index ? index.toString() : '' }];
                    index = 0;
                }
            }

            if (items instanceof HTMLElement) {
                if (!(items instanceof JQX.AccordionItem)) {
                    that.error(that.localize('accordionItemRequired', { method: 'insert' }));
                } else {
                    item = items;
                }
            } else if (Array.isArray(items)) {
                fragment = document.createDocumentFragment();

                for (var i = 0; i < items.length; i++) {
                    var fragmentItem = that._createItem(items[i]);

                    fragment.appendChild(fragmentItem);
                }
            } else if (items instanceof Object) {
                item = that._createItem(items);
            } else if (typeof items === 'string' || typeof items === 'number') {
                item = that._createItem({ label: items.toString(), content: items.toString() });
            } else {
                item = that._createItem({ label: '', content: '' });
            }

            if (index > that._items.length) {
                item ? that.$.container.appendChild(item) : that.$.container.appendChild(fragment);
            } else {
                item ? that.$.container.insertBefore(item, that._items[index]) : that.$.container.insertBefore(fragment, that._items[index]);
            }

            item && (item.tabIndex = that._tabIndex);
            that._storeItems();

            if (accordionWasEmpty && that._expandModeIs(['single', 'singleFitHeight'])) {
                that._expandItem(0);
            } else {
                that.expandedIndexes = that._getExpandedIndexes();
            }

            that._updateExpanedContentHeight();
            that._updateInlineHeight();
            that._storeItemsCoordinates();

            that._updateItemsIndexProperty();
        }

        /**
         * Inserts the specified "jqx-accordion-item" node before the reference "jqx-accordion-item" node.
         */

    }, {
        key: 'insertBefore',
        value: function insertBefore(newNode, referenceNode) {
            var that = this;

            if (!that.isCompleted) {
                var args = Array.prototype.slice.call(arguments, 2);

                return HTMLElement.prototype.insertBefore.apply(that, args.concat(Array.prototype.slice.call(arguments)));
            }

            if (newNode === undefined || referenceNode === undefined || !(newNode instanceof JQX.AccordionItem) || !(referenceNode instanceof JQX.AccordionItem)) {
                that.error(that.localize('accordionItemRequired', { method: 'insertBefore' }));
            }

            if (referenceNode !== undefined && referenceNode !== null) {
                if (!that.contains(referenceNode)) {
                    that.error(that.localize('referenceNodeNotChild', { argument: 'referenceNode' }));
                }

                that.insert(that._items.indexOf(referenceNode), newNode);
            } else {
                that.insert(that._items.indexOf(referenceNode), newNode);
            }
        }

        /**
        * Removes an item on specific positions or "jqx-accordion-item" child node.
        */

    }, {
        key: 'remove',
        value: function remove(index) {
            var that = this;
            var item = void 0;

            if (index instanceof HTMLElement) {
                if (!(index instanceof JQX.AccordionItem)) {
                    that.error(that.localize('accordionItemRequired', { method: 'remove' }));
                } else if (!that.contains(index)) {
                    that.error(that.localize('referenceNodeNotChild', { argument: 'node' }));
                }

                item = index;
                index = item.index;
            } else {
                index = that._validateItemsIndex(index, 'remove');

                if (isNaN(index)) {
                    return;
                }

                item = that._items[index];
            }

            if (item) {
                item.parentNode.removeChild(item);
                that._storeItems();

                if (that._expandModeIs(['singleFitHeight'])) {
                    that._preventAnimation = true;
                }

                if (that._expandModeIs(['single', 'singleFitHeight']) && index === that.expandedIndexes[0] && that._items.length > 0) {
                    that._expandItem(0);
                    that._selectedItem = that._items[0];
                    that._selectedItemIndex = 0;
                    that._itemIsFocussed = true;
                }

                that.expandedIndexes = that._getExpandedIndexes();
                that._updateExpanedContentHeight();
                that._updateInlineHeight();
                that._storeItemsCoordinates();

                that._updateItemsIndexProperty();
            }
        }

        /**
         * Removes a child "jqx-accordion-item" node.
         */

    }, {
        key: 'removeChild',
        value: function removeChild(node) {
            var that = this;

            if (!that.isCompleted) {
                var args = Array.prototype.slice.call(arguments, 2);

                return HTMLElement.prototype.removeChild.apply(that, args.concat(Array.prototype.slice.call(arguments)));
            }

            if (!(node instanceof HTMLElement)) {
                that.error(that.localize('accordionItemRequired', { method: 'removeChild' }));
            }

            if (node.className === 'jqx-resize-trigger-container') {
                babelHelpers.get(Accordion.prototype.__proto__ || Object.getPrototypeOf(Accordion.prototype), 'removeChild', this).call(this, node);
                return;
            } else if (!(node instanceof JQX.AccordionItem)) {
                that.error(that.localize('accordionItemRequired', { method: 'removeChild' }));
            }

            if (!that.contains(node)) {
                that.error(that.localize('referenceNodeNotChild', { argument: 'node' }));
            }

            that.remove(node);
        }

        /**
        * Sets tabIndex.
        */

    }, {
        key: '_setFocusable',
        value: function _setFocusable() {
            var that = this;

            if (that.disabled || that.unfocusable) {
                that.removeAttribute('tabindex');
                for (var i = 0; i < that._items.length; i++) {
                    that._items[i].removeAttribute('tabindex');
                }
                return;
            }

            that.tabIndex = that._tabIndex;

            for (var _i = 0; _i < that._items.length; _i++) {
                that._items[_i].tabIndex = that._tabIndex;
            }
        }

        /**
        * Updates an item at a specific index. It has two parameters - index and item.
        */

    }, {
        key: 'update',
        value: function update(index, settings) {
            var that = this;

            index = that._validateItemsIndex(index, 'update');

            if (isNaN(index)) {
                return;
            }

            var item = that._items[index];

            if (!settings) {
                that.error(that.localize('invalidSettings', { elementType: that.nodeName.toLowerCase(), method: 'update' }));
            }

            if (item) {
                if (Array.isArray(settings)) {
                    if (settings.length === 0) {
                        settings = { 'label': '', 'content': '' };
                    } else {
                        settings = settings[0];
                    }
                }

                if (typeof settings === 'string') {
                    item.content = settings;
                } else {
                    for (var property in settings) {
                        item[property] = settings[property];
                    }
                }
            }

            var height = that._getItemsHeights(index);

            that._updateExpanedContentLocalHeight(that._items[index], height);
            that._updateInlineHeight();
            that._storeItemsCoordinates();
        }

        /**
        * Calculates item container's height if items are with set margins
        */

    }, {
        key: '_adjustHeightValue',
        value: function _adjustHeightValue(currentHeight) {
            var that = this,
                itemsCount = that._items.length;
            var expandedItem = void 0,
                collapsedItem = void 0;

            for (var i = 0; i < itemsCount; i++) {
                that._items[i].expanded ? expandedItem = that._items[i] : collapsedItem = that._items[i];

                if (expandedItem && collapsedItem) {
                    break;
                }
            }

            if (!expandedItem) {
                expandedItem = that._items[0];
            }

            if (!expandedItem && !collapsedItem) {
                return;
            }

            var expandedItemState = expandedItem.expanded;

            expandedItem.expanded = true;

            var expandedStyles = window.getComputedStyle(expandedItem, null),
                collapsedStyles = collapsedItem ? window.getComputedStyle(collapsedItem, null) : false,
                expandedOffset = parseInt(expandedStyles.getPropertyValue('margin-top')) + parseInt(expandedStyles.getPropertyValue('margin-bottom')),
                collapsedOffset = collapsedStyles ? parseInt(collapsedStyles.getPropertyValue('margin-top')) + parseInt(collapsedStyles.getPropertyValue('margin-bottom')) : 0;

            expandedItem.expanded = expandedItemState;

            return currentHeight - ((itemsCount - 1) * collapsedOffset + expandedOffset);
        }

        /**
        * Collapses item with specific index.
        */

    }, {
        key: '_collapseItem',
        value: function _collapseItem(index, programmaticUse) {
            var that = this;
            var item = that._items[index];

            if (!item.expanded) {
                return;
            }

            if (that.expandMode === 'none' && programmaticUse) {
                return;
            }

            item.expanded = false;
            that.$.fireEvent('collapsing', {
                'index': index,
                'label': item.label,
                'content': item.content.innerHTML
            });

            if (that.expandedIndexes.indexOf(index) > -1) {
                var positionInExpandedIndexes = that.expandedIndexes.indexOf(index),
                    currentIndexes = that.expandedIndexes.slice();

                currentIndexes.splice(positionInExpandedIndexes, 1);
                that.expandedIndexes = currentIndexes;
            }

            item.$.accordionItemContent.style.height = '';
            that._handleAnimationsDuration(item, index, 'collapsed');
        }

        /**
        * Compares arrays with old and new indexes. Returns which items have to be collapsed and which have to be expanded
        */

    }, {
        key: '_compareExpandedIndexes',
        value: function _compareExpandedIndexes(oldIndexes, newIndexes) {
            var indexesToBeCollapsed = [],
                commonIndexes = [],
                indexesToBeExpanded = [],
                oldIndexesCount = oldIndexes.length,
                newIndexesCount = newIndexes.length;

            for (var i = 0; i < oldIndexesCount; i++) {
                if (newIndexes.indexOf(oldIndexes[i]) === -1) {
                    if (indexesToBeCollapsed.indexOf(oldIndexes[i]) === -1) {
                        indexesToBeCollapsed.push(oldIndexes[i]);
                    }
                } else {
                    if (commonIndexes.indexOf(oldIndexes[i]) === -1) {
                        commonIndexes.push(oldIndexes[i]);
                    }
                }
            }

            for (var _i2 = 0; _i2 < newIndexesCount; _i2++) {
                if (commonIndexes.indexOf(newIndexes[_i2]) === -1) {
                    indexesToBeExpanded.push(newIndexes[_i2]);
                }
            }

            return { collapse: indexesToBeCollapsed, expand: indexesToBeExpanded };
        }

        /**
        * Initializes the element. Used as a callback in ready().
        */

    }, {
        key: '_createElement',
        value: function _createElement() {
            var that = this;

            that._reorderItemsByIndex();
            that._usedCSSVariables = Boolean(window.getComputedStyle(that.$.container).getPropertyValue('--jqx-accordion-animation-duration'));
            that._supportCSSVariables = JQX.Utilities.Core.CSSVariablesSupport();
            that._storeItems();
            that._enableDisableHandler();
            that._expandedIndexesHandler();
            that._updateExpanedContentHeight();
            that._tabIndex = that.tabIndex <= 0 ? 0 : that.tabIndex;
            that._setFocusable();
            that._updateItemsIndexProperty();
            that._updateInlineHeight();

            for (var i = 0; i < that._items.length; i++) {
                that._items[i].$.arrow.classList.add('jqx-animate-trigger');
            }
        }

        /**
         * Creates single jqx-accordion-item
         */

    }, {
        key: '_createItem',
        value: function _createItem(settings) {
            var that = this,
                item = document.createElement('jqx-accordion-item');

            if (!settings) {
                return;
            }

            item.disabled = that.disabled;

            if (that._tabIndex > -1) {
                item.tabIndex = that._tabIndex;
            }

            if (typeof settings === 'string' || typeof settings === 'number') {
                item.label = settings + '';
                item.content = settings + '';

                return item;
            }

            item.label = settings.label || '';
            item.content = settings.content || '';

            return item;
        }

        /**
        * Down Handler
        */

    }, {
        key: '_downHandler',
        value: function _downHandler(event) {
            var that = this;

            if (that.disabled || that.readonly || that.expandMode === 'none' || that._toggled) {
                return;
            }

            var target = that.enableShadowDOM ? that.shadowRoot.elementFromPoint(event.pageX, event.pageY) : event.originalEvent.target,
                clickedHeader = target.closest('.jqx-accordion-item-header');
            var item = target.closest('jqx-accordion-item');

            if (!clickedHeader) {
                if (item) {
                    item.focused = true;
                }

                return;
            }

            that._selectedItem = item;
            that._itemIsPressed = that._itemIsFocussed = true;
            that._reorderedIndex = that._selectedItemIndex = that._items.indexOf(item);

            that._storeItemsCoordinates();
        }

        /**
        * Changes disable state of the internal items.
        */

    }, {
        key: '_enableDisableHandler',
        value: function _enableDisableHandler() {
            var that = this;

            if (that.disabled) {
                for (var i = 0; i < that._items.length; i++) {
                    that._items[i].disabled = true;
                }
            } else {
                for (var _i3 = 0; _i3 < that._items.length; _i3++) {
                    that._items[_i3].disabled = false;
                }
            }
        }

        /**
        * Handles expanded indexes on initialization, according to the chosen 'expandMode'.
        */

    }, {
        key: '_expandedIndexesHandler',
        value: function _expandedIndexesHandler() {
            var that = this;
            var initialExpandedIndexes = that._getExpandedIndexes('initial'),
                initialExpandedIndexesCount = initialExpandedIndexes.length,
                expandedIndexesCount = that.expandedIndexes.length;

            if (that._items.length === 0) {
                return;
            }

            if (expandedIndexesCount === 0 && initialExpandedIndexesCount > 0) {
                that.expandedIndexes = initialExpandedIndexes;
                expandedIndexesCount = initialExpandedIndexesCount;
            }

            if (that._expandModeIs(['multiple', 'none']) || expandedIndexesCount === 1) {
                that._toggleItems('expand', that.expandedIndexes);
                return;
            }

            switch (that.expandMode) {
                case 'single':
                case 'singleFitHeight':
                    if (expandedIndexesCount === 0) {
                        that._toggleItems('expand', [0]);
                    } else if (expandedIndexesCount > 1) {
                        that._toggleItems('collapse', that.expandedIndexes.splice(0, 1));
                        that._toggleItems('expand', that.expandedIndexes);
                    }
                    break;
                case 'toggle':
                    if (expandedIndexesCount > 1) {
                        that._toggleItems('collapse', that.expandedIndexes.splice(0, 1));
                        that._toggleItems('expand', that.expandedIndexes);
                    }
                    break;
                default:
                    break;
            }
        }

        /**
        * Expands item with specific index.
        */

    }, {
        key: '_expandItem',
        value: function _expandItem(index, programmaticUse) {
            var that = this;
            var item = that._items[index];

            if (item.expanded || that.expandMode === 'none' && programmaticUse) {
                return;
            }

            if (!item.$.container.style.getPropertyValue('--jqx-accordion-expanded-content-local-height')) {
                item.expanded = true;
                item.$.container.style.setProperty('--jqx-accordion-expanded-content-local-height', item.$.accordionItemContent.scrollHeight + 'px');
                item.expanded = false;
            }

            item.expanded = true;
            that.$.fireEvent('expanding', {
                'index': index,
                'label': item.label,
                'content': item.content.innerHTML
            });

            if (that.expandedIndexes.indexOf(index) === -1) {
                var currentIndexes = that.expandedIndexes.slice();

                currentIndexes.push(index);
                that.expandedIndexes = currentIndexes;
            }

            if ((!that._supportCSSVariables || !that._usedCSSVariables) && that.expandMode === 'singleFitHeight') {
                item.$.accordionItemContent.style.height = that._expandedItemsContainerHeight - 1 + 'px';
            }

            that._handleAnimationsDuration(item, index, 'expanded');
        }

        /**
        * Check if current expand mode is one of the following.
        */

    }, {
        key: '_expandModeIs',
        value: function _expandModeIs(modesArray) {
            var that = this;

            return modesArray.indexOf(that.expandMode) > -1;
        }

        /**
         * Focus handler.  Sets the focused state of particular item
         */

    }, {
        key: '_focusHandler',
        value: function _focusHandler() {
            var that = this;

            if (that.disabled || that._items.length === 0) {
                return;
            }

            if (that._itemIsFocussed) {
                that._selectedItem.focused = false;
            } else {
                that._items[0].focused = false;
            }
        }

        /**
        * Gets the indexes of all expanded items.
        */

    }, {
        key: '_getExpandedIndexes',
        value: function _getExpandedIndexes(type) {
            var that = this,
                expandedIndexes = [];

            for (var i = 0; i < that._items.length; i++) {
                if (type === 'initial') {
                    if (that._items[i].hasAttribute('expanded')) {
                        expandedIndexes.push(i);
                        that._items[i].removeAttribute('expanded');
                    }
                } else {
                    if (that._items[i].expanded) {
                        expandedIndexes.push(i);
                    }
                }
            }

            return expandedIndexes.slice();
        }

        /**
        * Gets the height of each item. Calculates it via dummy element
        */

    }, {
        key: '_getItemsHeights',
        value: function _getItemsHeights(itemIndex) {
            var that = this,
                items = that._items,
                itemsCount = items.length;
            var itemsHeights = [];

            if (itemsCount === 0) {
                return;
            }

            if (!isNaN(itemIndex) && itemIndex >= 0 && itemIndex < itemsCount) {
                var item = items[itemIndex];
                var height = 0;

                if (item.expanded) {
                    height = item.$.accordionItemContent.scrollHeight;
                } else {
                    item.expanded = true;
                    height = item.$.accordionItemContent.scrollHeight;
                    item.expanded = false;
                }

                return height + 'px';
            }

            for (var i = 0; i < itemsCount; i++) {
                var _item = items[i];
                var _height = 0;

                if (_item.expanded) {
                    _height = _item.$.accordionItemContent.scrollHeight;
                } else {
                    _item.expanded = true;
                    _height = _item.$.accordionItemContent.scrollHeight;
                    _item.expanded = false;
                }

                itemsHeights.push(_height + 'px');
            }

            that._heightCalcAfterInitialization = true;

            return itemsHeights;
        }

        /**
        * Adds jqx-toggle class for the period of the animation and fires an event at the end
        */

    }, {
        key: '_handleAnimationsDuration',
        value: function _handleAnimationsDuration(item, index, type) {
            var that = this,
                intervalOffset = 50;

            if (!that._animationAfterInitialization) {
                that._animationAfterInitialization = true;
                return;
            }

            if (that._items.length === 1 && that.expandMode === 'singleFitHeight') {
                that.$.fireEvent(type, {
                    'index': index,
                    'label': item.label,
                    'content': item.content.innerHTML
                });
                return;
            }

            if (false === that.hasAnimation || !that._supportCSSVariables) {
                that.$.fireEvent(type, {
                    'index': index,
                    'label': item.label,
                    'content': item.content.innerHTML
                });
                return;
            }

            if (that._preventAnimation) {
                that.$.fireEvent(type, {
                    'index': index,
                    'label': item.label,
                    'content': item.content.innerHTML
                });

                that._preventAnimation = false;
                return;
            }

            that._toggled = true;

            var animationDuration = window.getComputedStyle(that).animationDuration,
                animationDurationInMs = void 0;

            if (animationDuration.indexOf('ms') > -1) {
                animationDuration = parseFloat(animationDuration.substring(0, animationDuration.length - 2));
                animationDurationInMs = isNaN(animationDuration) || animationDuration < 0 ? 0 : animationDuration - intervalOffset;
            } else if (animationDuration.indexOf('s') > -1) {
                animationDuration = parseFloat(animationDuration.substring(0, animationDuration.length - 1));
                animationDurationInMs = isNaN(animationDuration) || animationDuration < 0 ? 0 : animationDuration * 1000 - intervalOffset;
            } else {
                that.$.fireEvent(type, {
                    'index': index,
                    'label': item.label,
                    'content': item.content.innerHTML
                });
                return;
            }

            if (item instanceof JQX.AccordionItem) {
                item.$.addClass('jqx-toggled-item');
                that.$container.addClass('jqx-toggling');
                setTimeout(function () {
                    item.$.removeClass('jqx-toggled-item');
                    that.$container.removeClass('jqx-toggling');
                    that.$.fireEvent(type, {
                        'index': index
                    });

                    that._toggled = false;
                }, animationDurationInMs);
            }
        }

        /**
        * Index change handler. Used when items are reordered via their indexes
        */

    }, {
        key: '_indexChangeHandler',
        value: function _indexChangeHandler(event) {
            var that = this,
                items = that._items,
                itemsCount = items.length,
                detail = event.detail;

            if (detail.newIndex >= itemsCount) {
                that.$.container.appendChild(items[detail.oldIndex]);
            } else {
                detail.newIndex > detail.oldIndex ? that.$.container.insertBefore(items[detail.oldIndex], items[detail.newIndex + 1]) : that.$.container.insertBefore(items[detail.oldIndex], items[detail.newIndex]);
            }

            var itemsReordered = that.enableShadowDOM ? that.shadowRoot.querySelectorAll('jqx-accordion-item') : that.getElementsByTagName('jqx-accordion-item');

            that._items = Array.from(itemsReordered);
            that._updateItemsIndexProperty();
        }

        /**
        * KeyDown handler. Navigation between the items via arrows, home, end keys
        */

    }, {
        key: '_keyDownHandler',
        value: function _keyDownHandler(event) {
            var that = this,
                keyCode = event.key;

            if (that.expandMode === 'none' || that.disabled || that.readonly || that._toggled) {
                return;
            }

            if (['ArrowLeft', 'ArrowDown', 'ArrowRight', 'ArrowUp', 'End', 'Home', ' ', 'Enter', 'Tab'].indexOf(keyCode) === -1 || !(document.activeElement instanceof JQX.AccordionItem)) {
                return;
            }

            if (keyCode !== 'Tab') {
                event.preventDefault();
            }

            var selectedItem = void 0,
                selectedIndex = void 0,
                itemsCount = that._items.length,
                lastItemPosition = itemsCount - 1;

            for (var i = 0; i < itemsCount; i++) {
                var item = that._items[i];

                if (item.focused) {
                    selectedItem = item;
                    selectedIndex = i;
                }
            }

            switch (keyCode) {
                case 'Tab':
                    event.shiftKey ? moveSelection('up') : moveSelection('down');
                    break;
                case 'ArrowLeft':
                    that.collapse(selectedIndex);
                    break;
                case 'ArrowDown':
                    moveSelection('down');
                    break;
                case 'ArrowRight':
                    that.expand(selectedIndex);
                    break;
                case 'ArrowUp':
                    moveSelection('up');
                    break;
                case 'End':
                    updateSelectedItem(lastItemPosition);
                    break;
                case 'Home':
                    updateSelectedItem(0);
                    break;
                case ' ':
                case 'Enter':
                    if (selectedItem.expanded) {
                        that.collapse(selectedIndex);
                        return;
                    }

                    that.expand(selectedIndex);
                    break;
                default:
                    return;
            }

            function updateSelectedItem(index) {
                if (index === selectedIndex || isNaN(index)) {
                    return;
                }

                selectedItem.focused = false;
                selectedIndex = index;
                selectedItem = that._items[selectedIndex];
                selectedItem.focused = true;
            }

            function moveSelection(direction) {
                if (direction === 'up') {
                    selectedIndex - 1 < 0 ? updateSelectedItem(0) : updateSelectedItem(selectedIndex - 1);
                    return;
                }

                selectedIndex + 1 > lastItemPosition ? updateSelectedItem(lastItemPosition) : updateSelectedItem(selectedIndex + 1);
            }
        }

        /**
        * Accordion's move handler. Used in reorder functionality
        */

    }, {
        key: '_moveHandler',
        value: function _moveHandler(event) {
            var that = this;

            if (!that._itemIsPressed || !that.reorder || that.readonly || that._items.length < 2) {
                return;
            }

            if (that._dragStart) {
                that.$container.addClass('jqx-reordering');

                if (!that._dragging) {
                    var item = that._selectedItem;

                    that.$.fireEvent('dragStart', {
                        'position': { left: event.pageX, top: event.pageY },
                        'target': event.originalEvent.target,
                        'index': that._selectedItemIndex,
                        'label': item.label,
                        'content': item.content.innerHTML
                    });

                    that._selectedItem.dragged = that._dragging = true;
                }

                var mouseCoordinate = event.clientY;
                var inItem = false;

                for (var i = 0; i < that._itemsCoordinates.length; i++) {
                    var currentCoordinateSet = that._itemsCoordinates[i];

                    if (mouseCoordinate >= currentCoordinateSet.fromY && mouseCoordinate <= currentCoordinateSet.toY) {
                        inItem = i;
                        break;
                    }
                }

                if (that._preventReorder !== true && inItem !== false && inItem !== that._reorderedIndex) {
                    if (Math.abs(that._reorderedIndex - inItem) > 1) {
                        var indexOffset = that._reorderedIndex - inItem < 0 ? -1 : 1;

                        that._swapItems(that._reorderedIndex, inItem + indexOffset);
                    }

                    that._swapItems(that._reorderedIndex, inItem);

                    that._reorderedIndex = inItem;
                    that._storeItemsCoordinates();
                }

                if (mouseCoordinate < that._itemsCoordinates[that._reorderedIndex].fromY || mouseCoordinate > that._itemsCoordinates[that._reorderedIndex].toY) {
                    that._preventReorder = true;
                } else {
                    that._preventReorder = false;
                }

                if (Math.abs(that._reorderedIndex - inItem) > 1) {
                    that._preventReorder = false;
                }
            } else {
                that._dragStart = true;
            }
        }

        /**
        * Reorders the items by their indexes when the accordion is initialized.
        */

    }, {
        key: '_reorderItemsByIndex',
        value: function _reorderItemsByIndex() {
            var that = this;
            var items = that.enableShadowDOM ? that.shadowRoot.querySelectorAll('jqx-accordion-item') : that.getElementsByTagName('jqx-accordion-item'),
                itemsArray = Array.from(items),
                hasInitialIndexes = false,
                itemsIndexes = itemsArray.map(function (item) {
                if (item.index !== null) {
                    hasInitialIndexes = true;
                } else {
                    item.index = 0;
                }

                return item.index;
            });

            if (!hasInitialIndexes) {
                return;
            }

            var itemsCount = itemsArray.length;

            if (itemsCount < 2) {
                return;
            }

            var itemsIndexesSorted = itemsIndexes.slice();

            itemsIndexesSorted.sort(function (a, b) {
                return parseInt(a) - parseInt(b);
            });

            if (itemsIndexes.toString() === itemsIndexesSorted.toString()) {
                return;
            }

            for (var i = 0; i < itemsCount; i++) {
                var reorderedItem = void 0;

                for (var j = 0; j < itemsCount; j++) {
                    if (items[j].index === itemsIndexesSorted[i]) {
                        reorderedItem = items[j];
                    }
                }

                that.$.container.insertBefore(reorderedItem, items[i]);
            }
        }

        /**
        * Resize handler.
        */

    }, {
        key: '_resizeHandler',
        value: function _resizeHandler() {
            var that = this;

            that._updateExpanedContentHeight();
            that._updateInlineHeight();
            that._storeItemsCoordinates();
        }

        /**
        * Stores all items in an Array and updates the animation variables.
        */

    }, {
        key: '_storeItems',
        value: function _storeItems() {
            var that = this,
                items = that.enableShadowDOM ? that.shadowRoot.querySelectorAll('jqx-accordion-item') : that.getElementsByTagName('jqx-accordion-item');

            that._items = Array.from(items);

            if (that._items.length === 0) {
                that.$container.addClass('jqx-empty');
                return;
            }

            that.$container.removeClass('jqx-empty');

            var heights = that._getItemsHeights();

            for (var i = 0; i < that._items.length; i++) {
                that._updateExpanedContentLocalHeight(that._items[i], heights[i]);
            }
        }

        /**
         * Stores the coordinates of all items in an Array.
         */

    }, {
        key: '_storeItemsCoordinates',
        value: function _storeItemsCoordinates() {
            var that = this;

            if (that.disabled || !that.reorder) {
                return;
            }

            var coordinates = [];

            for (var i = 0; i < that._items.length; i++) {
                var currentItemContainer = that._items[i],
                    boundingClientRect = currentItemContainer.getBoundingClientRect();

                coordinates.push({
                    fromY: boundingClientRect.top + (window.scrollY || window.pageYOffset),
                    toY: boundingClientRect.bottom + (window.scrollY || window.pageYOffset)
                });
            }

            that._itemsCoordinates = coordinates;
        }

        /**
         * Switches the positions of two items.
         */

    }, {
        key: '_swapItems',
        value: function _swapItems(firstItemIndex, secondItemIndex) {
            function swap(list, x, y) {
                var temp = list[y];

                list[y] = list[x];
                list[x] = temp;
            }

            var that = this,
                lesserIndex = Math.min(firstItemIndex, secondItemIndex),
                greaterIndex = Math.max(firstItemIndex, secondItemIndex),
                items = that._items;
            var expandedIndexes = that.expandedIndexes.slice();

            if (that._items[firstItemIndex].expanded && !that._items[secondItemIndex].expanded) {
                var indexPosition = expandedIndexes.indexOf(firstItemIndex);

                expandedIndexes[indexPosition] = secondItemIndex;
                that.expandedIndexes = expandedIndexes.slice();
            } else if (that._items[secondItemIndex].expanded && !that._items[firstItemIndex].expanded) {
                var _indexPosition = expandedIndexes.indexOf(secondItemIndex);

                expandedIndexes[_indexPosition] = firstItemIndex;
                that.expandedIndexes = expandedIndexes.slice();
            }

            that.selectedIndex = that.selectedIndex === firstItemIndex ? secondItemIndex : firstItemIndex;
            that.$.container.insertBefore(items[greaterIndex], items[lesserIndex]);
            swap(items, firstItemIndex, secondItemIndex);
            that._items[firstItemIndex].$.removeClass('hovered');

            that._reorderedIndex = secondItemIndex;
        }

        /**
        * Expands/collapses multiple items with particular indexes.
        */

    }, {
        key: '_toggleItems',
        value: function _toggleItems(action, indexes) {
            var that = this,
                indexesCount = indexes.length;

            if (indexesCount > 0) {
                for (var i = 0; i < indexesCount; i++) {
                    that['_' + action + 'Item'](indexes[i]);
                }
            }
        }

        /**
        * Calculates item's content container height and apply it to the current expanded item. Used in singleFitHeight expandMode.
        */

    }, {
        key: '_updateExpanedContentHeight',
        value: function _updateExpanedContentHeight() {
            var that = this;

            that.$.container.style.setProperty('--jqx-accordion-item-header-height', '');

            var itemsCount = that._items.length,
                containersHeight = that.$.container.offsetHeight,
                expanedItem = that._items[that.expandedIndexes[0]];
            var collapsedItemHeight = 0,
                collapsedItemHeaderHeight = 0,
                expanedItemHeaderOffset = 0,
                i = 0;

            if (itemsCount === 1) {
                var item = that._items[0];

                item.expanded = false;
                collapsedItemHeight = item.offsetHeight;
                collapsedItemHeaderHeight = item.$.accordionItemHeader.offsetHeight;
                item.expanded = true;
            } else {
                while (collapsedItemHeight === 0 && i < itemsCount) {
                    var _item2 = that._items[i];

                    if (_item2 instanceof JQX.AccordionItem && !_item2.expanded) {
                        collapsedItemHeight = _item2.offsetHeight;
                        collapsedItemHeaderHeight = _item2.$.accordionItemHeader.offsetHeight;
                    }

                    i++;
                }
            }

            if (itemsCount > 1) {
                if (expanedItem instanceof JQX.AccordionItem) {
                    var expandedItemHeaderHeight = expanedItem.$.accordionItemHeader.offsetHeight;

                    expanedItemHeaderOffset = expandedItemHeaderHeight - collapsedItemHeaderHeight;
                }
            }

            var rootStyle = getComputedStyle(that.$.root);

            var collapsedItemsHeight = collapsedItemHeight * itemsCount;
            var expandedItemsContainerHeight = containersHeight - collapsedItemsHeight - expanedItemHeaderOffset - parseFloat(rootStyle.paddingBottom) - parseFloat(rootStyle.paddingTop);

            if (that.expandMode === 'singleFitHeight') {
                expandedItemsContainerHeight = that._adjustHeightValue(expandedItemsContainerHeight);
            }

            expandedItemsContainerHeight = expandedItemsContainerHeight >= 0 ? expandedItemsContainerHeight : 0;
            that.$.container.style.setProperty('--jqx-accordion-expanded-content-height', expandedItemsContainerHeight + 'px');
            that.$.container.style.setProperty('--jqx-accordion-item-header-height', collapsedItemHeaderHeight + 'px');
            that._expandedItemsContainerHeight = expandedItemsContainerHeight;
        }

        /**
        * Updates the local CSS variable about single item.
        */

    }, {
        key: '_updateExpanedContentLocalHeight',
        value: function _updateExpanedContentLocalHeight(item, height) {
            var that = this;

            if (!that._supportCSSVariables || !that._usedCSSVariables) {
                return;
            }

            item.$.container.style.setProperty('--jqx-accordion-expanded-content-local-height', height);
        }

        /**
         * Updates inline height in 'singleFitHeight' mode in older browsers
         */

    }, {
        key: '_updateInlineHeight',
        value: function _updateInlineHeight() {
            var that = this;

            if (that._supportCSSVariables && that._usedCSSVariables || that.expandMode !== 'singleFitHeight' || that._items.length === 0) {
                return;
            }

            that._items[that.expandedIndexes[0]].$.accordionItemContent.style.height = that._expandedItemsContainerHeight - 1 + 'px';
        }

        /**
         * Updates the index property of all accordion items
         */

    }, {
        key: '_updateItemsIndexProperty',
        value: function _updateItemsIndexProperty() {
            var that = this;
            var newExpandedIndexes = [];

            for (var i = 0; i < that._items.length; i++) {
                that._items[i]._setIndex(i);

                if (that._items[i].expanded) {
                    newExpandedIndexes.push(i);
                }
            }

            that.expandedIndexes = newExpandedIndexes.slice();
        }

        /**
         * Up handler.
         */

    }, {
        key: '_upHandler',
        value: function _upHandler(event) {
            var that = this;

            if (!that._itemIsPressed || that.disabled || that.readonly) {
                return;
            }

            for (var i = 0; i < that._items.length; i++) {
                if (i !== that._selectedItemIndex) {
                    that._items[i].focused = false;
                }
            }

            that._selectedItem.focused = true;

            if (!that._dragging) {
                if (that._selectedItem.expanded) {
                    that.collapse(that._selectedItemIndex, true);
                } else {
                    that.expand(that._selectedItemIndex, true);
                }
            } else {
                var item = that._selectedItem;

                that.$container.removeClass('jqx-reordering');
                that.$.fireEvent('dragEnd', {
                    'position': { left: event.pageX, top: event.pageY },
                    'target': event.originalEvent.target,
                    'index': that._selectedItemIndex,
                    'label': item.label,
                    'content': item.content.innerHTML
                });
            }

            that._reorderedIndex = undefined;
            that._dragStart = false;
            that._dragging = false;
            that._itemIsPressed = false;
            that._selectedItem.dragged = false;

            that._updateItemsIndexProperty();
        }

        /**
        * Validates the values given to the expand and collapse methods.
        */

    }, {
        key: '_validateItemsIndex',
        value: function _validateItemsIndex(index, method) {
            var that = this;

            if (isNaN(parseInt(index)) || index < 0 || index > that._items.length - 1) {
                that.log(that.localize('indexOutOfBound', { elementType: that.nodeName.toLowerCase(), method: method }));
                return;
            }

            return parseInt(index);
        }
    }], [{
        key: 'properties',

        /** 
        * Accordion's properties 
        **/
        get: function get() {
            return {
                'expandedIndexes': {
                    value: [],
                    type: 'array'
                },
                'expandMode': {
                    allowedValues: ['single', 'singleFitHeight', 'multiple', 'toggle', 'none'],
                    value: 'singleFitHeight',
                    type: 'string'
                },
                'messages': {
                    extend: true,
                    value: {
                        'en': {
                            'accordionItemRequired': '{{elementType}}: "{{method}}" requires an item from type "jqx-accordion-item".',
                            'indexOutOfBound': '{{elementType}}: Out of bound index/indexes in "{{method}}" method.',
                            'invalidSettings': '{{elementType}}: "{{method}}" method accepts a string or an object as it\'s second parameter.',
                            'missingReference': '{{elementType}}: Missing reference to {{files}}.',
                            'noItems': '{{elementType}}: No child elements found.',
                            'overridingProperties': '{{elementType}}: Overriding properties {{property1}} and {{property2}} applied. The "{{property1}}" property is used by default.'
                        }
                    },
                    type: 'object'
                },
                'reorder': {
                    value: false,
                    type: 'boolean'
                }
            };
        }

        /**
         * Accordion's event listeners.
         */

    }, {
        key: 'listeners',
        get: function get() {
            return {
                'down': '_downHandler',
                'focus': '_focusHandler',
                'indexChange': '_indexChangeHandler',
                'keydown': '_keyDownHandler',
                'move': '_moveHandler',
                'resize': '_resizeHandler',
                'styleChanged': '_resizeHandler',
                'document.up': '_upHandler'
            };
        }
    }, {
        key: 'styleUrls',
        get: function get() {
            return ['jqx.accordion.css'];
        }
    }]);
    return Accordion;
}(JQX.BaseElement));