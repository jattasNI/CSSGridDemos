'use strict';

/**
 * Pager custom element.
 */
JQX('jqx-pager', function (_JQX$BaseElement) {
    babelHelpers.inherits(Pager, _JQX$BaseElement);

    function Pager() {
        babelHelpers.classCallCheck(this, Pager);
        return babelHelpers.possibleConstructorReturn(this, (Pager.__proto__ || Object.getPrototypeOf(Pager)).apply(this, arguments));
    }

    babelHelpers.createClass(Pager, [{
        key: 'template',


        /**
         * Pager's HTML template.
         */
        value: function template() {
            return '<div id="container">\n                    <div id="nearButtonsContainer" class="jqx-pager-near-buttons-container">\n                        <div id="firstButton" class="jqx-first-button jqx-pager-button jqx-unselectable"></div>\n                        <div id="previousButton" class="jqx-previous-page-button jqx-pager-button jqx-unselectable"></div>\n                    </div>\n                    <div id="middleButtonsContainer" class="jqx-pager-middle-buttons-container">\n                           <span id="previousEllipsisButton" class="jqx-previous-ellipsis-button jqx-pager-page-index-selector"></span>\n                           <div id="pageIndexSelectorsContainer" tabindex="0" class="jqx-pager-page-index-selectors-container"></div>\n                           <span id="nextEllipsisButton" class="jqx-next-ellipsis-button jqx-pager-page-index-selector"></span>\n                    </div>\n                    <div id="farButtonsContainer" class="jqx-pager-far-buttons-container">\n                        <div id="nextButton" class="jqx-next-page-button jqx-pager-button jqx-unselectable"></div>\n                        <div id="lastButton" class="jqx-last-button jqx-pager-button jqx-unselectable"></div>\n                    </div>\n                    <div id="pagerInputAndLabelContainer" class="jqx-pager-input-and-label-container">\n                        <span id="navigateToLabel" class="jqx-pager-label"></span>\n                        <input type="text" id="navigateToInput" class="jqx-pager-input jqx-input" />\n                   </div>\n                 <div id="pagerSizeSelectorAndLabelContainer" class="jqx-pager-size-selector-and-label-container">\n                        <span id="pageSizeLabel" class="jqx-pager-label"></span>\n                        <jqx-drop-down-list id="pageSizeSelector" class="jqx-page-size-selector"\n                                data-source="[[pageSizeSelectorDataSource]]"\n                                drop-down-height="auto"\n                                selection-mode="one"\n                                selected-indexes=[0]\n                                disabled="[[disabled]]">\n                        </jqx-drop-down-list>\n                    </div>\n                  <span id="pagerSummaryContainer" class="jqx-pager-summary-container jqx-pager-label"></span>\n                </div>';
        }

        /**
         * Called when the element is ready.
         */

    }, {
        key: 'ready',
        value: function ready() {
            babelHelpers.get(Pager.prototype.__proto__ || Object.getPrototypeOf(Pager.prototype), 'ready', this).call(this);

            var that = this;

            that._render();
        }

        /**
         * Called when a property is changed.
         */

    }, {
        key: 'propertyChangedHandler',
        value: function propertyChangedHandler(propertyName, oldValue, newValue) {
            babelHelpers.get(Pager.prototype.__proto__ || Object.getPrototypeOf(Pager.prototype), 'propertyChangedHandler', this).call(this, propertyName, oldValue, newValue);

            var that = this;

            switch (propertyName) {
                case 'navigationButtonsPosition':
                    that._renderButtons();
                    return;
                case 'navigationInputPosition':
                case 'pageSizeSelectorPosition':
                case 'summaryPosition':
                    that._renderSettings();
                    return;
            }

            that._render();
        }

        /**
        * Moves to the next page.
        */

    }, {
        key: 'next',
        value: function next() {
            var that = this;

            that.navigateTo(that.pageIndex + 1);
        }

        /**
        * Moves to the previous page.
        */

    }, {
        key: 'prev',
        value: function prev() {
            var that = this;

            that.navigateTo(that.pageIndex - 1);
        }
    }, {
        key: 'beginUpdate',
        value: function beginUpdate() {
            var that = this;

            that._updating = true;
        }
    }, {
        key: 'endUpdate',
        value: function endUpdate() {
            var that = this;

            that._updating = false;
            that._render();
        }
    }, {
        key: '_render',
        value: function _render() {
            var that = this;

            if (that._updating) {
                return;
            }

            that.$.navigateToInput.value = (1 + that.pageIndex).toString();
            that._renderButtons();
            that._renderPageIndexSelectors();
            that._renderSettings();
            that._renderVisibility();
            that._localize();
        }
    }, {
        key: '_resizeHandler',
        value: function _resizeHandler() {
            var that = this;

            that._renderVisibility();
        }
    }, {
        key: '_renderVisibility',
        value: function _renderVisibility() {
            var that = this;
            var pagerWidth = that.offsetWidth - 20;

            if (that.showSummary) {
                that.$pagerSummaryContainer.removeClass('jqx-hidden');
            } else {
                that.$pagerSummaryContainer.addClass('jqx-hidden');
            }

            if (that.showPageIndexSelectors) {
                that.$middleButtonsContainer.removeClass('jqx-hidden');
            } else {
                that.$middleButtonsContainer.addClass('jqx-hidden');
            }

            if (that.showNavigationInput) {
                that.$navigateToLabel.removeClass('jqx-hidden');
                that.$navigateToInput.removeClass('jqx-hidden');
            } else {
                that.$navigateToLabel.addClass('jqx-hidden');
                that.$navigateToInput.addClass('jqx-hidden');
            }

            if (that.showPageSizeSelector) {
                that.$pageSizeLabel.removeClass('jqx-hidden');
                that.$pageSizeSelector.removeClass('jqx-hidden');
            } else {
                that.$pageSizeLabel.addClass('jqx-hidden');
                that.$pageSizeSelector.addClass('jqx-hidden');
            }

            if (that.showFirstLastNavigationButtons) {
                that.$firstButton.removeClass('jqx-hidden');
                that.$lastButton.removeClass('jqx-hidden');
            } else {
                that.$firstButton.addClass('jqx-hidden');
                that.$lastButton.addClass('jqx-hidden');
            }

            if (that.showPrevNextNavigationButtons) {
                that.$previousButton.removeClass('jqx-hidden');
                that.$nextButton.removeClass('jqx-hidden');
            } else {
                that.$previousButton.addClass('jqx-hidden');
                that.$nextButton.addClass('jqx-hidden');
            }

            that.$previousEllipsisButton.addClass('jqx-hidden');
            that.$nextEllipsisButton.addClass('jqx-hidden');

            if (that.autoEllipsis !== 'after' && that.autoEllipsis !== 'none' && that.pageIndex >= that._pageIndexSelectorsCount) {
                that.$previousEllipsisButton.removeClass('jqx-hidden');
            }

            if (that.autoEllipsis !== 'before' && that.autoEllipsis !== 'none' && that.pageIndex < that.pagesCount - that._pageIndexSelectorsCount) {
                that.$nextEllipsisButton.removeClass('jqx-hidden');
            }

            for (var i = 0; i < that._pageIndexSelectorsCount; i++) {
                if (!that.$.pageIndexSelectorsContainer.children[i]) {
                    break;
                }

                that.$.pageIndexSelectorsContainer.children[i].classList.remove('jqx-hidden');
            }

            var pagerSummaryWidth = that.$.pagerSummaryContainer.offsetWidth ? Math.max(100, that.$.pagerSummaryContainer.offsetWidth) : 0;

            var totalWidth = that.$.nearButtonsContainer.offsetWidth + that.$.middleButtonsContainer.offsetWidth + that.$.farButtonsContainer.offsetWidth + pagerSummaryWidth + that.$.pagerInputAndLabelContainer.offsetWidth + that.$.pagerSizeSelectorAndLabelContainer.offsetWidth;

            if (totalWidth > 0 && totalWidth > pagerWidth) {
                totalWidth -= that.$.pagerSummaryContainer.offsetWidth;

                // hides summary.
                that.$pagerSummaryContainer.addClass('jqx-hidden');

                if (totalWidth > pagerWidth) {
                    totalWidth -= that.$.navigateToLabel.offsetWidth;
                    totalWidth -= that.$.navigateToInput.offsetWidth;

                    // hides navigation input and label.
                    that.$navigateToLabel.addClass('jqx-hidden');
                    that.$navigateToInput.addClass('jqx-hidden');

                    if (totalWidth > pagerWidth) {
                        totalWidth -= that.$.pageSizeLabel.offsetWidth;
                        totalWidth -= that.$.pageSizeSelector.offsetWidth;

                        // hides page size selector and label.
                        that.$pageSizeLabel.addClass('jqx-hidden');
                        that.$pageSizeSelector.addClass('jqx-hidden');

                        if (totalWidth > pagerWidth) {
                            that.$previousEllipsisButton.addClass('jqx-hidden');
                            that.$nextEllipsisButton.addClass('jqx-hidden');

                            totalWidth -= that.$.previousEllipsisButton.offsetWidth;
                            totalWidth -= that.$.nextEllipsisButton.offsetWidth;

                            for (var _i = that._pageIndexSelectorsCount - 1; _i >= 0; _i--) {
                                var pageIndexSelector = that.$.pageIndexSelectorsContainer.children[_i];

                                if (totalWidth < pagerWidth || !pageIndexSelector) {
                                    break;
                                }

                                totalWidth -= pageIndexSelector.offsetWidth;
                                pageIndexSelector.classList.add('jqx-hidden');
                            }
                        }

                        if (totalWidth > pagerWidth && that.showFirstLastNavigationButtons) {
                            that.$firstButton.addClass('jqx-hidden');
                            that.$lastButton.addClass('jqx-hidden');
                        }
                    }
                }
            }
        }
    }, {
        key: '_renderSettings',
        value: function _renderSettings() {
            var that = this;

            var summaryStart = that.pageIndex * that.pageSize;
            var summaryEnd = (that.pageIndex + 1) * that.pageSize;
            var totalSummaryEnd = that.pagesCount * that.pageSize;

            that.$pagerSummaryContainer.removeClass('near');
            that.$pagerSizeSelectorAndLabelContainer.removeClass('near');
            that.$pagerInputAndLabelContainer.removeClass('near');

            if (that.summaryPosition === 'near') {
                that.$pagerSummaryContainer.addClass('near');
            }

            if (that.pageSizeSelectorPosition === 'near') {
                that.$pagerSizeSelectorAndLabelContainer.addClass('near');
            }

            if (that.navigationInputPosition === 'near') {
                that.$pagerInputAndLabelContainer.addClass('near');
            }

            that.$.pagerSummaryContainer.innerHTML = '<span class="jqx-summary-start">' + (1 + summaryStart) + '</span> <span class="jqx-summary-hyphen">-</span> <span class="jqx-summary-end">' + summaryEnd + '</span>' + '<span class="jqx-summary-prefix">' + that.localize('summaryPrefix') + '</span> <span class="jqx-summary-total-end">' + totalSummaryEnd + '</span> <span class="jqx-summary-suffix">' + that.localize('summarySuffix') + '</span>';
        }
    }, {
        key: '_renderPageIndexSelectors',


        /**
         * Creates page with pageIndexSelectors, based on pageIndexSelectors and pageIndexSelectors-per-page properties.
         */
        value: function _renderPageIndexSelectors() {
            var that = this;

            if (that.pageIndex < 0 || that.pageIndex >= that.pagesCount) {
                return;
            }

            that.$.pageIndexSelectorsContainer.innerHTML = '';

            var isArray = false;

            if (Array.isArray(that.pageIndexSelectors)) {
                isArray = true;
            }

            var pageIndexSelectorStartIndex = Math.floor(that.pageIndex / that._pageIndexSelectorsCount) * that._pageIndexSelectorsCount;
            var pageIndexSelectorEndIndex = Math.min(that.pagesCount, pageIndexSelectorStartIndex + that._pageIndexSelectorsCount);
            var pageIndexSelectorIndex = 0;

            for (var i = pageIndexSelectorStartIndex; i < pageIndexSelectorEndIndex; i++) {
                var newPageIndexSelector = document.createElement('span');
                var newPageIndexSelectorContent = i + 1;

                newPageIndexSelector.className = 'jqx-pager-page-index-selector';

                if (isArray) {
                    var pageIndexSelector = that.pageIndexSelectors[pageIndexSelectorIndex++];

                    if (pageIndexSelector) {
                        if (pageIndexSelector.label) {
                            newPageIndexSelectorContent = that.pageIndexSelectors[i].label;
                        } else if (typeof pageIndexSelector === 'string') {
                            newPageIndexSelectorContent = pageIndexSelector;
                        }

                        if (pageIndexSelector.value) {
                            newPageIndexSelector.setAttribute('value', that.pageIndexSelectors[i].value);
                        }
                    }
                }

                newPageIndexSelector.index = i;
                newPageIndexSelector.innerHTML = newPageIndexSelectorContent;

                that.$.pageIndexSelectorsContainer.appendChild(newPageIndexSelector);

                if (i === that.pageIndex) {
                    newPageIndexSelector.classList.add('jqx-selected');
                    newPageIndexSelector.setAttribute('selected', '');
                }
            }
        }

        /**
        * Last button click handler.
        */

    }, {
        key: '_lastButtonClickHandler',
        value: function _lastButtonClickHandler() {
            var that = this;

            that.last();
        }
    }, {
        key: 'last',
        value: function last() {
            var that = this;

            that.navigateTo(that.pagesCount - 1);
        }

        /**
        * First button click handler.
        */

    }, {
        key: '_firstButtonClickHandler',
        value: function _firstButtonClickHandler() {
            var that = this;

            that.first();
        }
    }, {
        key: 'first',
        value: function first() {
            var that = this;

            that.navigateTo(0);
        }
    }, {
        key: '_renderButtons',
        value: function _renderButtons() {
            var that = this;

            if (that.pageIndex === 0) {
                that.$.firstButton.setAttribute('disabled', '');
                that.$.previousButton.setAttribute('disabled', '');
            } else {
                that.$.firstButton.removeAttribute('disabled');
                that.$.previousButton.removeAttribute('disabled');
            }

            if (that.pageIndex === that.pagesCount - 1) {
                that.$.nextButton.setAttribute('disabled', '');
                that.$.lastButton.setAttribute('disabled', '');
            } else {
                that.$.nextButton.removeAttribute('disabled');
                that.$.lastButton.removeAttribute('disabled');
            }

            that.$nearButtonsContainer.removeClass('far');
            that.$farButtonsContainer.removeClass('far');
            that.$nearButtonsContainer.removeClass('near');
            that.$farButtonsContainer.removeClass('near');

            switch (that.navigationButtonsPosition) {
                case 'near':
                    that.$nearButtonsContainer.addClass('near');
                    that.$farButtonsContainer.addClass('near');
                    break;
                case 'far':
                    that.$nearButtonsContainer.addClass('far');
                    that.$farButtonsContainer.addClass('far');
                    break;
                case 'both':
                    that.$nearButtonsContainer.addClass('near');
                    that.$farButtonsContainer.addClass('far');
                    break;
            }
        }
    }, {
        key: '_navigateToInputChangeHandler',
        value: function _navigateToInputChangeHandler() {
            var that = this;

            var pageIndex = parseInt(that.$.navigateToInput.value) - 1;

            if (isNaN(pageIndex)) {
                that.$.navigateToInput.value = '1';
                pageIndex = parseInt(that.$.navigateToInput.value - 1);
            }

            that.navigateTo(pageIndex);
        }
    }, {
        key: '_pageIndexSelectorsContainerClickHandler',
        value: function _pageIndexSelectorsContainerClickHandler(event) {
            var that = this,
                closestPageIndexSelector = that.enableShadowDOM ? event.composedPath()[0].closest('.jqx-pager-page-index-selector') : event.target.closest('.jqx-pager-page-index-selector');

            if (!closestPageIndexSelector || closestPageIndexSelector.classList.contains('jqx-selected')) {
                return;
            }

            that.navigateTo(closestPageIndexSelector.index);
        }
    }, {
        key: '_pageSizeSelectorChangeHandler',
        value: function _pageSizeSelectorChangeHandler(event) {
            var that = this;

            if (!that.showPageSizeSelector || that.disabled || that._updating) {
                return;
            }

            that.pageSize = parseInt(event.detail.value);

            that.$.fireEvent('pageSizeChanged', {
                'value': parseInt(event.detail.value)
            });
        }

        /**
        * Pager's keydown event handler.
        */

    }, {
        key: '_keyDownHandler',
        value: function _keyDownHandler(event) {
            var that = this;

            if (that.disabled) {
                return;
            }

            if ((that.enableShadowDOM ? that.shadowRoot.activeElement || document.activeElement : document.activeElement) === that.$.navigateToInput) {
                return;
            }

            if (that.$.pageSizeSelector.getAttribute('focus') !== null) {
                return;
            }

            switch (event.key) {
                case 'End':
                    that.last();
                    event.preventDefault();
                    break;
                case 'Home':
                    that.first();
                    event.preventDefault();
                    break;
                case 'PageDown':
                case 'ArrowDown':
                case 'ArrowLeft':
                    that.prev();
                    event.preventDefault();
                    break;
                case 'PageUp':
                case 'ArrowUp':
                case 'ArrowRight':
                    that.next();
                    event.preventDefault();
                    break;
            }
        }

        /**
        * Next Page button click handler.
        */

    }, {
        key: '_nextButtonClickHandler',
        value: function _nextButtonClickHandler() {
            var that = this;

            that.next();
        }

        /**
        * Previous Page button click handler.
        */

    }, {
        key: '_previousButtonClickHandler',
        value: function _previousButtonClickHandler() {
            var that = this;

            that.prev();
        }
    }, {
        key: 'navigateTo',
        value: function navigateTo(pageIndex) {
            var that = this,
                oldIndex = that.pageIndex;

            if (that.disabled || that.pageIndex === pageIndex || pageIndex < 0 || pageIndex >= that.pagesCount) {
                return;
            }

            that.pageIndex = pageIndex;

            that._render();

            that.$.fireEvent('change', {
                'oldIndex': oldIndex,
                'index': pageIndex
            });
        }

        /**
        * Updates from-to summary block.
        */

    }, {
        key: '_localize',
        value: function _localize() {
            var that = this,
                buttonsArray = ['firstButton', 'lastButton', 'previousButton', 'nextButton'];

            for (var i = 0; i < buttonsArray.length; i++) {
                var button = that.$[buttonsArray[i]];

                if (!that.showNavigationButtonLabels && i < 2) {
                    button.innerHTML = '';
                    if (i === 0) {
                        button.classList.add('jqx-arrow-left-first');
                    } else {
                        button.classList.add('jqx-arrow-right-last');
                    }
                } else if (!that.showNavigationButtonLabels && i >= 2) {
                    button.innerHTML = '';
                    if (i === 2) {
                        button.classList.add('jqx-arrow-left');
                    } else {
                        button.classList.add('jqx-arrow-right');
                    }
                } else {
                    button.classList.remove('jqx-arrow-left');
                    button.classList.remove('jqx-arrow-right');
                    button.classList.remove('jqx-arrow-left-first');
                    button.classList.remove('jqx-arrow-right-last');

                    button.innerHTML = that.localize(buttonsArray[i]);
                }
            }

            that.$.pageSizeLabel.innerHTML = that.localize('pageSizeLabel');
            that.$.navigateToLabel.innerHTML = that.localize('navigateToLabel');
            that.$.previousEllipsisButton.innerHTML = that.localize('ellipsis');
            that.$.nextEllipsisButton.innerHTML = that.localize('ellipsis');
            that.$.navigateToInput.placeholder = that.localize('navigateToInputPlaceholder');
        }
    }, {
        key: '_nextEllipsisButtonClickHandler',
        value: function _nextEllipsisButtonClickHandler() {
            var that = this;

            that.navigateTo(that._pageIndexSelectorsCount + that.pageIndex);
        }
    }, {
        key: '_previousEllipsisButtonClickHandler',
        value: function _previousEllipsisButtonClickHandler() {
            var that = this;

            that.navigateTo(-that._pageIndexSelectorsCount + that.pageIndex);
        }

        /**
        * Updates from-to summary block.
        */

    }, {
        key: '_navigationButtonsClickHandler',
        value: function _navigationButtonsClickHandler(event) {
            var that = this;

            if (that.disabled) {
                return;
            }

            var targetElement = that.enableShadowDOM ? event.composedPath()[0].closest('.jqx-pager-button') : event.target.closest('.jqx-pager-button');

            switch (targetElement) {
                case that.$.firstButton:
                    that._firstButtonClickHandler(event);
                    break;
                case that.$.lastButton:
                    that._lastButtonClickHandler(event);
                    break;
                case that.$.previousButton:
                    that._previousButtonClickHandler(event);
                    break;
                case that.$.nextButton:
                    that._nextButtonClickHandler(event);
                    break;
            }
        }
    }, {
        key: '_navigationButtonsDownHandler',
        value: function _navigationButtonsDownHandler(event) {
            var that = this,
                targetElement = that.enableShadowDOM ? event.originalEvent.composedPath()[0].closest('.jqx-pager-button') || event.originalEvent.composedPath()[0].closest('.jqx-pager-page-index-selector') : event.originalEvent.target.closest('.jqx-pager-button') || event.originalEvent.target.closest('.jqx-pager-page-index-selector');

            if (that.disabled || !targetElement) {
                return;
            }

            if (that.hasRippleAnimation) {
                JQX.Utilities.Animation.Ripple.animate(targetElement, event.pageX, event.pageY);
            }

            if (targetElement === that.$.previousButton || targetElement === that.$.nextButton) {
                that._startRepeat(event, targetElement);
            }
        }
    }, {
        key: '_updateInBoundsFlag',
        value: function _updateInBoundsFlag(event) {
            var that = this,
                button = that.enableShadowDOM ? event.composedPath()[0] : event.target;

            button._isPointerInBounds = true;

            if (event.type === 'mouseleave') {
                button._isPointerInBounds = false;
            }

            var buttons = 'buttons' in event ? event.buttons : event.which;

            if (buttons !== 1) {
                that._stopRepeat(event);
            }
        }
    }, {
        key: '_startRepeat',
        value: function _startRepeat(event, button) {
            var that = this;

            if (!that._initialTimer) {
                that._initialTimer = setTimeout(function () {
                    that._repeatTimer = setInterval(function () {
                        if (button._isPointerInBounds) {
                            if (button === that.$.previousButton) {
                                that._previousButtonClickHandler(event);
                            } else {
                                that._nextButtonClickHandler(event);
                            }
                        }
                    }, 50);
                }, 150);
            }
        }
    }, {
        key: '_stopRepeat',
        value: function _stopRepeat() {
            var that = this;

            if (that._repeatTimer) {
                clearInterval(that._repeatTimer);
                that._repeatTimer = null;
            }

            if (that._initialTimer) {
                clearTimeout(that._initialTimer);
                that._initialTimer = null;
            }
        }
    }, {
        key: '_pageIndexSelectorsCount',
        get: function get() {
            var that = this;

            var pageIndexSelectorsCount = parseInt(that.pageIndexSelectors);

            if (Array.isArray(that.pageIndexSelectors)) {
                pageIndexSelectorsCount = that.pageIndexSelectors.length;
            }

            return pageIndexSelectorsCount;
        }
    }], [{
        key: 'properties',

        // Pager's properties.
        get: function get() {
            return {
                'autoEllipsis': {
                    value: 'none',
                    type: 'string',
                    // After - displays AutoEllipsis only after the Numeric Buttons.
                    // Before - displays AutoEllipsis only before the Numeric Buttons.
                    // Both - displays AutoEllipsis before and after the Numeric Buttons.
                    // None - doesn't display AutoEllipsis.
                    allowedValues: ['none', 'before', 'after', 'both']
                },
                'messages': {
                    value: {
                        'en': {
                            'firstButton': 'First',
                            'lastButton': 'Last',
                            'previousButton': 'Previous',
                            'nextButton': 'Next',
                            'navigateToLabel': 'Go to:',
                            'pageSizeLabel': 'Show:',
                            'navigateToInputPlaceholder': '',
                            'ellipsis': '...',
                            'summaryString': 'of',
                            'summaryPrefix': 'of',
                            'summarySuffix': ''
                        }
                    },
                    type: 'object',
                    extend: true
                },
                'navigationButtonsPosition': {
                    value: 'both',
                    allowedValues: ['near', 'far', 'both'],
                    type: 'string'
                },
                'navigationInputPosition': {
                    value: 'far',
                    allowedValues: ['near', 'far'],
                    type: 'string'
                },
                'pageIndex': {
                    value: 0,
                    type: 'number'
                },
                'pageIndexSelectors': {
                    value: 0,
                    type: 'any'
                },
                'pagesCount': {
                    value: 100,
                    type: 'number'
                },
                'pageSize': {
                    value: 10,
                    type: 'number'
                },
                'pageSizeSelectorPosition': {
                    value: 'far',
                    allowedValues: ['near', 'far'],
                    type: 'string'
                },
                'pageSizeSelectorDataSource': {
                    value: [10, 25, 50],
                    type: 'array'
                },
                'showPrevNextNavigationButtons': {
                    value: false,
                    type: 'boolean'
                },
                'showFirstLastNavigationButtons': {
                    value: false,
                    type: 'boolean'
                },
                'showNavigationButtonLabels': {
                    value: false,
                    type: 'boolean'
                },
                'showNavigationInput': {
                    value: false,
                    type: 'boolean'
                },
                'showSummary': {
                    value: false,
                    type: 'boolean'
                },
                'showPageSizeSelector': {
                    value: false,
                    type: 'boolean'
                },
                'showPageIndexSelectors': {
                    value: false,
                    type: 'boolean'
                },
                'summaryPosition': {
                    value: 'far',
                    allowedValues: ['near', 'far'],
                    type: 'string'
                }
            };
        }

        /**
         * Pager's event listeners.
         */

    }, {
        key: 'listeners',
        get: function get() {
            return {
                'click': '_navigationButtonsClickHandler',
                'nextEllipsisButton.click': '_nextEllipsisButtonClickHandler',
                'previousEllipsisButton.click': '_previousEllipsisButtonClickHandler',
                'down': '_navigationButtonsDownHandler',
                'navigateToInput.change': '_navigateToInputChangeHandler',
                'nextButton.mouseenter': '_updateInBoundsFlag',
                'nextButton.mouseleave': '_updateInBoundsFlag',
                'pageIndexSelectorsContainer.click': '_pageIndexSelectorsContainerClickHandler',
                'pageSizeSelector.change': '_pageSizeSelectorChangeHandler',
                'previousButton.mouseenter': '_updateInBoundsFlag',
                'previousButton.mouseleave': '_updateInBoundsFlag',
                'keydown': '_keyDownHandler',
                'resize': '_resizeHandler',
                'document.up': '_stopRepeat'
            };
        }
    }, {
        key: 'requires',
        get: function get() {
            return {
                'JQX.DropDownList': 'jqxdropdownlist.js'
            };
        }

        /**
        * CSS files needed for the element (ShadowDOM)
        */

    }, {
        key: 'styleUrls',
        get: function get() {
            return ['jqx.pager.css'];
        }
    }]);
    return Pager;
}(JQX.BaseElement));