'use strict';

/**
 * Menu Item custom element.
 */
JQX('jqx-menu-item', function (_JQX$BaseElement) {
    babelHelpers.inherits(MenuItem, _JQX$BaseElement);

    function MenuItem() {
        babelHelpers.classCallCheck(this, MenuItem);
        return babelHelpers.possibleConstructorReturn(this, (MenuItem.__proto__ || Object.getPrototypeOf(MenuItem)).apply(this, arguments));
    }

    babelHelpers.createClass(MenuItem, [{
        key: 'template',


        /**
         * Menu Items Group's HTML template.
         */
        value: function template() {
            return '';
        }
    }, {
        key: 'ready',
        value: function ready() {
            babelHelpers.get(MenuItem.prototype.__proto__ || Object.getPrototypeOf(MenuItem.prototype), 'ready', this).call(this);
            this.$.addClass('jqx-unselectable');
        }
    }, {
        key: 'propertyChangedHandler',
        value: function propertyChangedHandler(propertyName, oldValue, newValue) {
            var that = this;

            if (propertyName !== 'disabled' || newValue === false || !that.checked) {
                return;
            }

            var parentMenu = that.menu;

            if (!parentMenu) {
                return;
            }

            babelHelpers.get(MenuItem.prototype.__proto__ || Object.getPrototypeOf(MenuItem.prototype), 'propertyChangedHandler', this).call(this, propertyName, oldValue, newValue);

            that.checked = false;

            var parentItem = that.parentItem,
                checkMode = parentItem ? parentItem.checkMode : parentMenu.checkMode;

            if (checkMode === 'radioButton') {
                parentMenu._validateRadioButtonSelection(parentItem, that.level, []);
            }
        }
    }, {
        key: 'enableShadowDOM',
        get: function get() {
            return false;
        }
    }], [{
        key: 'properties',

        // Menu Item's properties.
        get: function get() {
            return {
                'checked': {
                    value: false,
                    type: 'boolean'
                },
                'label': {
                    value: '',
                    type: 'any'
                },
                'level': {
                    value: null,
                    type: 'number?'
                },
                'separator': {
                    value: false,
                    type: 'boolean'
                },
                'shortcut': {
                    value: '',
                    type: 'string'
                },
                'value': {
                    value: null,
                    type: 'any'
                }
            };
        }
    }]);
    return MenuItem;
}(JQX.BaseElement));

/**
 * Menu Items Group custom element.
 */
JQX('jqx-menu-items-group', function (_JQX$BaseElement2) {
    babelHelpers.inherits(MenuItemsGroup, _JQX$BaseElement2);

    function MenuItemsGroup() {
        babelHelpers.classCallCheck(this, MenuItemsGroup);
        return babelHelpers.possibleConstructorReturn(this, (MenuItemsGroup.__proto__ || Object.getPrototypeOf(MenuItemsGroup)).apply(this, arguments));
    }

    babelHelpers.createClass(MenuItemsGroup, [{
        key: 'template',


        /**
         * Menu Items Group's HTML template.
         */
        value: function template() {
            return '';
        }
    }, {
        key: 'ready',
        value: function ready() {
            babelHelpers.get(MenuItemsGroup.prototype.__proto__ || Object.getPrototypeOf(MenuItemsGroup.prototype), 'ready', this).call(this);
            this.$.addClass('jqx-unselectable');
        }
    }, {
        key: 'propertyChangedHandler',
        value: function propertyChangedHandler(propertyName, oldValue, newValue) {
            if (['checkable', 'checkMode', 'disabled'].indexOf(propertyName) === -1) {
                return;
            }

            var that = this,
                parentMenu = that.menu;

            if (!parentMenu) {
                return;
            }

            babelHelpers.get(MenuItemsGroup.prototype.__proto__ || Object.getPrototypeOf(MenuItemsGroup.prototype), 'propertyChangedHandler', this).call(this, propertyName, oldValue, newValue);

            switch (propertyName) {
                case 'checkable':
                    if (newValue) {
                        that.itemContainer.setAttribute('checkable', '');
                    } else {
                        that.itemContainer.removeAttribute('checkable');
                    }

                    if (parentMenu._isContainerOpened(that.container.level, that.container) && parentMenu.mode !== 'tree' && !parentMenu._minimized) {
                        parentMenu._closeSubContainers(that.level + 2);
                    }
                    break;
                case 'checkMode':
                    that.itemContainer.setAttribute('check-mode', newValue);
                    parentMenu._changeToRadioButtonMode(newValue, that.itemContainer, that);
                    break;
                case 'disabled':
                    {
                        if (JQX.ListMenu && parentMenu instanceof JQX.ListMenu) {
                            if (parentMenu._view) {
                                while (that.contains(parentMenu._view)) {
                                    parentMenu._backButtonClickHandler();
                                }
                            }
                        } else if (parentMenu._isContainerOpened(that.container.level, that.container)) {
                            parentMenu._closeSubContainers(that.level + 1, that.container);
                        }

                        if (!that.checked) {
                            return;
                        }

                        that.checked = false;

                        var parentItem = that.parentItem,
                            checkMode = parentItem ? parentItem.checkMode : parentMenu.checkMode;

                        if (checkMode === 'radioButton') {
                            parentMenu._validateRadioButtonSelection(parentItem, that.level, []);
                        }

                        break;
                    }
            }
        }
    }, {
        key: 'enableShadowDOM',
        get: function get() {
            return false;
        }
    }], [{
        key: 'properties',

        // Menu Items Group's properties.
        get: function get() {
            return {
                'checkable': {
                    value: false,
                    type: 'boolean'
                },
                'checked': {
                    value: false,
                    type: 'boolean'
                },
                'checkMode': {
                    value: 'checkbox',
                    allowedValues: ['checkbox', 'radioButton'],
                    type: 'string'
                },
                'dropDownHeight': {
                    value: null,
                    type: 'number?'
                },
                'expanded': {
                    value: false,
                    type: 'boolean'
                },
                'label': {
                    value: '',
                    type: 'any'
                },
                'level': {
                    value: null,
                    type: 'number?'
                },
                'separator': {
                    value: false,
                    type: 'boolean'
                },
                'value': {
                    value: null,
                    type: 'any'
                }
            };
        }
    }]);
    return MenuItemsGroup;
}(JQX.BaseElement));

/**
 * Menu custom element.
 */
JQX('jqx-menu', function (_JQX$BaseElement3) {
    babelHelpers.inherits(Menu, _JQX$BaseElement3);

    function Menu() {
        babelHelpers.classCallCheck(this, Menu);
        return babelHelpers.possibleConstructorReturn(this, (Menu.__proto__ || Object.getPrototypeOf(Menu)).apply(this, arguments));
    }

    babelHelpers.createClass(Menu, [{
        key: 'template',


        /**
         * Menu's HTML template.
         */
        value: function template() {
            return '<div id="container">\n                    <div id="minimizedHeader" class ="jqx-header jqx-minimized-header jqx-hidden">\n                        <div id="hamburgerIcon" class ="jqx-hamburger-icon jqx-hidden">\n                            <div id="hamburgerIconLineTop" class ="jqx-hamburger-icon-line jqx-hamburger-icon-line-top"></div>\n                            <div id="hamburgerIconLineCenter" class ="jqx-hamburger-icon-line jqx-hamburger-icon-line-center"></div>\n                            <div id="hamburgerIconLineBottom" class ="jqx-hamburger-icon-line jqx-hamburger-icon-line-bottom"></div>\n                            <div id="customIconContainer" class ="jqx-hamburger-icon-custom-container jqx-hidden"></div>\n                        </div>\n                    </div>\n                    <jqx-repeat-button id="scrollButtonNear" class="jqx-menu-scroll-button jqx-spin-button jqx-scroll-button-near jqx-hidden" animation="[[animation]]" unfocusable>\n                        <div id="arrowNear" class="jqx-arrow"></div>\n                    </jqx-repeat-button>\n                    <div id="mainContainer" class="jqx-menu-main-container">\n                        <content></content>\n                    </div>\n                    <jqx-repeat-button id="scrollButtonFar" class="jqx-menu-scroll-button jqx-spin-button jqx-scroll-button-far jqx-hidden" animation="[[animation]]" unfocusable>\n                        <div id="arrowFar" class="jqx-arrow"></div>\n                    </jqx-repeat-button>\n                </div>';
        }

        /**
         * Called when the element is attached to the DOM.
         */

    }, {
        key: 'attached',
        value: function attached() {
            var that = this;

            babelHelpers.get(Menu.prototype.__proto__ || Object.getPrototypeOf(Menu.prototype), 'attached', this).call(this);

            if (that._element === 'tree' || JQX.ListMenu && that instanceof JQX.ListMenu) {
                return;
            }

            if (that.isCompleted && that.dropDownAppendTo !== null) {
                if (that._minimized) {
                    that._dropDownParent.appendChild(that.$.mainContainer);
                } else {
                    for (var i = 0; i < that._containersInBody.length; i++) {
                        that._dropDownParent.appendChild(that._containersInBody[i]);
                    }
                }

                if (that.mode === 'dropDown') {
                    if (that._dropDownParent === that.parentElement) {
                        if (that._dynamicallyReparented) {
                            delete that._dynamicallyReparented;
                        } else {
                            that._positionRelativeTo = null;
                        }
                    } else {
                        that._positionRelativeTo = that.parentElement;
                        that._dynamicallyReparented = true;
                        setTimeout(function () {
                            that._dropDownParent.appendChild(that);
                        }, 0);
                    }
                }
            }
        }

        /**
         * Called when the element is detached from the DOM.
         */

    }, {
        key: 'detached',
        value: function detached() {
            var that = this;

            babelHelpers.get(Menu.prototype.__proto__ || Object.getPrototypeOf(Menu.prototype), 'detached', this).call(this);

            if (that._element === 'tree' || JQX.ListMenu && that instanceof JQX.ListMenu) {
                return;
            }

            that._close();

            if (that.dropDownAppendTo !== null) {
                if (that._minimized) {
                    that._dropDownParent.removeChild(that.$.mainContainer);
                } else {
                    that._removeContainersInBody();
                }
            }
        }

        /**
         * Called when the element is ready. Used for one-time configuration of the Menu.
         */

    }, {
        key: 'ready',
        value: function ready() {
            babelHelpers.get(Menu.prototype.__proto__ || Object.getPrototypeOf(Menu.prototype), 'ready', this).call(this);

            var that = this;

            that._element = 'menu';
            that._edgeMacFF = JQX.Utilities.Core.Browser.Edge || JQX.Utilities.Core.Browser.Firefox && navigator.platform.toLowerCase().indexOf('mac') !== -1;
            that._containers = [];
            that._containersInBody = [];
            that._openedContainers = [];
            that._containersFixedHeight = [];
            that._menuItemsGroupsToExpand = [];
            that._additionalScrollButtons = [];

            that._createElement();
        }

        /**
         * Adds an item.
         *
         * @param {HTMLElement} item A jqx-menu-item to add to the Menu.
         * @param {HTMLElement/String} parent Optional The jqx-menu-items-group (or its id or numeric path) to add the item to.
         */

    }, {
        key: 'addItem',
        value: function addItem(item, parent) {
            var that = this;

            if (!(item instanceof JQX.MenuItem || item instanceof JQX.MenuItemsGroup)) {
                return;
            }

            var level = void 0,
                container = void 0;

            if (parent === undefined) {
                parent = that.$.mainContainer;
                level = 1;
                container = parent;
            } else {
                parent = that.getItem(parent);

                if (parent instanceof JQX.MenuItemsGroup === false) {
                    return;
                }

                level = parent.level + 1;
                container = parent.itemContainer;
            }

            that._createItemHTMLStructure(item, level, parent, container.childElementCount, 0);

            if (item instanceof JQX.MenuItemsGroup) {
                that._processHTML(item, level + 1);
                that._checkContainersLength();
            }

            container.appendChild(item);
            that._checkOverflowAddRemove(item.level, container);

            if (item instanceof JQX.MenuItemsGroup && (that.mode === 'tree' || that._minimized)) {
                var arrows = item.getElementsByClassName('jqx-menu-items-group-arrow');

                for (var i = 0; i < arrows.length; i++) {
                    arrows[i].className = 'jqx-menu-items-group-arrow down jqx-arrow-down';
                }

                that._expandItemsByDefault();
            }
        }

        /**
         * Checks an item.
         *
         * @param {HTMLElement/String} item jqx-menu-item/jqx-menu-items-group (or its id or numeric path).
         */

    }, {
        key: 'checkItem',
        value: function checkItem(item) {
            var that = this;

            item = that.getItem(item);

            if (item === undefined || item.checked || item.disabled || item.templateApplied) {
                return;
            }

            that._toggleItem(item);
        }

        /**
         * Clears all Menu items.
         */

    }, {
        key: 'clear',
        value: function clear() {
            var that = this;

            that.$.mainContainer.innerHTML = '';
            that._removeContainersInBody();
            that._menuItems = {};
            that._containers = [];
            that._containersInBody = [];
            that._openedContainers = [];
            that._containersFixedHeight = [];
            that._menuItemsGroupsToExpand = [];
            that._additionalScrollButtons = [];
        }

        /**
         * Closes the Menu when "mode" is 'dropDown'.
         */

    }, {
        key: 'close',
        value: function close() {
            var that = this;

            if (that.mode !== 'dropDown' || that.opened === false && that.$.hasClass('jqx-visibility-hidden')) {
                return;
            }

            var closingEvent = that.$.fireEvent('closing', arguments[0] || { trigger: 'programmatic' });

            if (!closingEvent.defaultPrevented) {
                that.opened = false;
                that.$.addClass('jqx-visibility-hidden');
                that._close();
                that.$.fireEvent('close');
            } else {
                that.opened = true;
            }
        }

        /**
         * Collapses an item.
         *
         * @param {HTMLElement/String} item Optional jqx-menu-item/jqx-menu-items-group (or its id or numeric path).
         * @param {Boolean} animation Optional If set to false, disables collapse animation even if animation is enabled for the element.
         */

    }, {
        key: 'collapseItem',
        value: function collapseItem(item, animation) {
            var that = this,
                animationType = that.animation,
                restoreAnimation = animation === false && that.hasAnimation;

            if (item !== undefined) {
                item = that.getItem(item);

                if (item === undefined || item instanceof JQX.MenuItem) {
                    return;
                }
            } else {
                // collapse all
                if (restoreAnimation) {
                    that.animation = 'none';
                }

                that._close();

                if (restoreAnimation) {
                    setTimeout(function () {
                        that.animation = animationType;
                    }, 0);
                }

                return;
            }

            var level = item.level;

            if (that._openedContainers[level + 1] && that._isContainerOpened(level + 1, item.container)) {
                var mode = that.mode;

                if (restoreAnimation) {
                    that.animation = 'none';
                }

                that._closeSubContainers(level + 1, item.container, undefined, arguments[2] !== false);

                if (level === 1 || mode === 'tree') {
                    that._checkOverflow(that.$.mainContainer, mode === 'horizontal', [that.$.scrollButtonNear, that.$.scrollButtonFar]);
                }

                if (restoreAnimation) {
                    that.animation = animationType;
                }
            }
        }

        /**
         * Expands an item.
         *
         * @param {HTMLElement/String} item jqx-menu-item/jqx-menu-items-group (or its id or numeric path).
         * @param {Boolean} animation Optional If set to false, disables expand animation even if animation is enabled for the element.
         */

    }, {
        key: 'expandItem',
        value: function expandItem(item, animation) {
            var that = this;

            item = that.getItem(item);

            if (item === undefined || item instanceof JQX.MenuItemsGroup && that._isContainerOpened(item.level + 1, item.container) && that._isBranchExpanded(item)) {
                return;
            }

            var stack = [item],
                animationType = that.animation,
                restoreAnimation = animation === false && that.hasAnimation;
            var stackItem = item.parentItem;

            if (restoreAnimation) {
                that.animation = 'none';
            }

            that._discardKeyboardHover();

            while (stackItem) {
                stack.unshift(stackItem);
                stackItem = stackItem.parentItem;
            }

            for (var i = 0; i < stack.length; i++) {
                var currentStackItem = stack[i];

                if (i === stack.length - 1 && currentStackItem instanceof JQX.MenuItem) {
                    if (!(currentStackItem.disabled || currentStackItem.templateApplied)) {
                        that._hoverViaKeyboard(currentStackItem);
                    }

                    break;
                }

                if (!that._isContainerOpened(currentStackItem.container.level, currentStackItem.container)) {
                    that._menuItemsGroupSelectionHandler(currentStackItem, { target: currentStackItem, type: 'expand', isTrusted: true }, arguments[2]);
                }
            }

            if (restoreAnimation) {
                that.animation = animationType;
            }
        }

        /**
         * Gets an item by its id or numeric path.
         *
         * @param {String} id The id or numeric path of an item.
         */

    }, {
        key: 'getItem',
        value: function getItem(id) {
            var that = this;
            var item = void 0;

            if (typeof id === 'string') {
                item = that.shadowRoot ? that.shadowRoot.getElementById(id) : document.getElementById(id);

                if (item === null) {
                    return that._menuItems[id];
                }
            } else if (!isNaN(id)) {
                return that._menuItems[id.toString()];
            } else {
                item = id;
            }

            if (!(item instanceof JQX.MenuItem || item instanceof JQX.MenuItemsGroup) || !(that.contains(item) || that.$.mainContainer.contains(item) || item.parentElement.parentElement.ownerElement === that)) {
                return;
            }

            return item;
        }

        /**
         * Maximizes the Menu.
         */

    }, {
        key: 'maximize',
        value: function maximize() {
            var that = this;

            if (!that._minimized) {
                return;
            }

            var animationType = that.animation;

            that.$.mainContainer.style.marginTop = '';
            that.$.mainContainer.style.marginLeft = '';

            if (that.enableShadowDOM && !that.$.mainContainer.id) {
                that.$.mainContainer.id = that.$.mainContainer.getAttribute('jqx-id');
            }

            if (animationType !== 'none') {
                that.animation = 'none';
            }

            that._positionDetection.removeOverlay();
            that._closeSubContainers(2);
            that.$minimizedHeader.addClass('jqx-hidden');

            that._minimized = false;

            if (that._minimizedDropDownOpened) {
                that.$hamburgerIcon.removeClass('jqx-close-button');
                that._minimizedDropDownOpened = false;
            }

            if (that.dropDownAppendTo !== null) {
                that._appendMinimizedContainerToMenu(that.$.mainContainer, that.$.scrollButtonFar);
            }

            if (that.mode !== 'tree') {
                that.$mainContainer.addClass('jqx-menu-main-container');
                that.$mainContainer.removeClass('jqx-menu-minimized-items-container');

                var arrows = that.getElementsByClassName('jqx-menu-items-group-arrow');

                for (var i = 0; i < arrows.length; i++) {
                    that._setArrowDirection(arrows[i], arrows[i].parentElement.parentElement.level + 1);
                }

                if (that.dropDownAppendTo !== null) {
                    that._moveDropDownsToExternalContainer();
                }

                that._applyContainerFixedHeight();
            }

            that.$mainContainer.removeClass('jqx-visibility-hidden');
            that.$hamburgerIcon.addClass('jqx-hidden');

            that.removeAttribute('minimized');

            that._checkOverflow(that.$.mainContainer, that.mode === 'horizontal', [that.$.scrollButtonNear, that.$.scrollButtonFar]);

            if (animationType !== 'none') {
                setTimeout(function () {
                    that.animation = animationType;
                }, 0);
            }
        }

        /**
         * Minimizes the Menu.
         */

    }, {
        key: 'minimize',
        value: function minimize() {
            var that = this;

            if (that._minimized || that.mode === 'dropDown') {
                return;
            }

            that.$minimizedHeader.removeClass('jqx-hidden');

            var differentDropDownParent = that.dropDownAppendTo !== null,
                animationType = that.animation,
                restoreAnimation = that.hasAnimation;

            if (restoreAnimation) {
                that.animation = 'none';
            }

            that._positionDetection.removeOverlay();
            that._closeSubContainers(2);

            if (restoreAnimation && differentDropDownParent) {
                that.animation = animationType;
            }

            if (that.mode !== 'tree') {
                if (differentDropDownParent) {
                    that._moveDropDownsToMenu();
                }

                that._removeContainerFixedHeight();
            }

            that._hideMainContainerScrollButtons();

            that.$mainContainer.removeClass('jqx-menu-main-container');
            that.$mainContainer.addClass('jqx-visibility-hidden');

            if (that.enableShadowDOM) {
                that.$.mainContainer.removeAttribute('id');
            }

            if (that._edgeMacFF) {
                that.$.mainContainer.style.left = '';
                that.$.mainContainer.style.top = '';
                that.$mainContainer.addClass('not-in-view');
            }

            that.$hamburgerIcon.removeClass('jqx-hidden');

            if (differentDropDownParent) {
                that._appendMinimizedContainerToExternalElement(that.$.mainContainer);
            }

            setTimeout(function () {
                that.$mainContainer.addClass('jqx-menu-minimized-items-container');

                if (restoreAnimation && !differentDropDownParent) {
                    that.animation = animationType;
                }
            }, 0);

            that._minimized = true;
            that.setAttribute('minimized', '');

            if (that.mode !== 'tree') {
                var arrows = that.$.mainContainer.getElementsByClassName('jqx-menu-items-group-arrow');

                for (var i = 0; i < arrows.length; i++) {
                    that._setArrowDirection(arrows[i], arrows[i].parentElement.parentElement.level + 1);
                }
            }
        }

        /**
         * Opens the Menu when "mode" is 'dropDown'.
         *
         * @param {Number} left Horizontal position.
         * @param {Number} top Vertical position.
         */

    }, {
        key: 'open',
        value: function open(left, top) {
            var that = this;

            if (that.mode !== 'dropDown') {
                return;
            }

            var openingEvent = that.$.fireEvent('opening');

            if (openingEvent.defaultPrevented) {
                that.opened = false;
                return;
            }

            var actualParentRect = void 0;

            that.opened = true;

            if (that._positionRelativeTo) {
                var targetRect = that._positionRelativeTo.getBoundingClientRect();

                left += targetRect.left;
                top += targetRect.top;

                if (that._positionedParent) {
                    actualParentRect = that._positionedParent.getBoundingClientRect();

                    left -= actualParentRect.left;
                    top -= actualParentRect.top;
                } else {
                    left += window.pageXOffset;
                    top += window.pageYOffset;
                }
            }

            // browser bounds detection
            var overflowLeft = left + that.offsetWidth - document.documentElement.clientWidth,
                overflowTop = top + that.offsetHeight - document.documentElement.clientHeight;

            if (actualParentRect) {
                overflowLeft += actualParentRect.left;
                overflowTop += actualParentRect.top;
            } else {
                overflowLeft -= window.pageXOffset;
                overflowTop -= window.pageYOffset;
            }

            if (overflowLeft > 0) {
                left -= overflowLeft;
            } else if (actualParentRect) {
                left = Math.max(left, -actualParentRect.left);
            } else {
                left = Math.max(left, window.pageXOffset);
            }

            if (overflowTop > 0) {
                top -= overflowTop;
            } else if (actualParentRect) {
                top = Math.max(top, -actualParentRect.top);
            } else {
                top = Math.max(top, window.pageYOffset);
            }
            // browser bounds detection end

            if (!isNaN(left)) {
                that.style.left = left + 'px';
            }

            if (!isNaN(top)) {
                that.style.top = top + 'px';
            }

            that.$.removeClass('jqx-visibility-hidden');
            that.$.fireEvent('open');

            if (!that.hasAnimation && !that._noAutoFocus) {
                that.focus();
            }
        }

        /**
         * Removes an item.
         *
         * @param {HTMLElement/String} item The jqx-menu-item/jqx-menu-items-group (or its id or numeric path) to remove.
         */

    }, {
        key: 'removeItem',
        value: function removeItem(item) {
            var that = this;

            item = that.getItem(item);

            if (item === undefined) {
                return;
            }

            var itemParent = item.parentElement;

            if (item instanceof JQX.MenuItemsGroup) {
                var container = item.container;

                if (that._isContainerOpened(container.level, container)) {
                    that._closeSubContainers(container.level, container);
                }

                if (item.level === 1) {
                    var index = that._containersInBody.indexOf(container);

                    if (index !== -1) {
                        that._containersInBody.splice(index, 1);

                        if (that.dropDownAppendTo !== null && that.mode !== 'tree' && !that._minimized) {
                            that._dropDownParent.removeChild(container);
                        }
                    }
                }
            }

            itemParent.removeChild(item);
            that._refreshContainersArrays();
            that._menuItems = {};
            that._refreshItemPaths(that.$.mainContainer, true);
            that._checkOverflowAddRemove(item.level, itemParent);
        }

        /**
         * Unchecks an item.
         *
         * @param {HTMLElement/String} item jqx-menu-item/jqx-menu-items-group (or its id or numeric path).
         */

    }, {
        key: 'uncheckItem',
        value: function uncheckItem(item) {
            var that = this;

            item = that.getItem(item);

            if (item === undefined || !item.checked || item.disabled || item.templateApplied) {
                return;
            }

            that._toggleItem(item);
        }

        /**
         * Called when a property is changed.
         */

    }, {
        key: 'propertyChangedHandler',
        value: function propertyChangedHandler(propertyName, oldValue, newValue) {
            babelHelpers.get(Menu.prototype.__proto__ || Object.getPrototypeOf(Menu.prototype), 'propertyChangedHandler', this).call(this, propertyName, oldValue, newValue);

            var that = this;

            function checkOverflow() {
                if (that.dropDownAppendTo !== null || that.mode === 'tree') {
                    that._checkOverflow(that.$.mainContainer, that.mode === 'horizontal', [that.$.scrollButtonNear, that.$.scrollButtonFar]);
                }
            }

            function updateAttribute(attribute, container, setAttribute) {
                if (setAttribute) {
                    container.setAttribute(attribute, '');
                } else {
                    container.removeAttribute(attribute);
                }
            }

            switch (propertyName) {
                case 'animation':
                    that.$.mainContainer.setAttribute('animation', newValue);
                    that._additionalScrollButtons.forEach(function (element) {
                        element[0].animation = newValue;
                        element[1].animation = newValue;
                    });

                    if (that._dropDownParent !== null) {
                        that._containers.forEach(function (element) {
                            element.setAttribute('animation', newValue);
                        });
                    }

                    break;
                case 'checkable':
                    if (that.mode !== 'tree' && !that._minimized) {
                        that._closeSubContainers(2);
                    } else if (that._minimized && that.dropDownAppendTo !== null) {
                        updateAttribute('checkable', that.$.mainContainer, newValue);
                    }

                    break;
                case 'checkboxes':
                    that._close();

                    if (that.dropDownAppendTo !== null) {
                        for (var i = 0; i < that._containers.length; i++) {
                            var container = that._containers[i];

                            updateAttribute('checkboxes', container, newValue);
                        }

                        if (that._minimized) {
                            updateAttribute('checkboxes', that.$.mainContainer, newValue);
                        }
                    }

                    break;
                case 'checkMode':
                    that._changeToRadioButtonMode(newValue, that.$.mainContainer);

                    if (that._minimized && that.dropDownAppendTo !== null) {
                        that.$.mainContainer.setAttribute('check-mode', newValue);
                    }

                    break;
                case 'dataSource':
                    {
                        var toMinimize = false;

                        if (that._minimized) {
                            that.maximize();
                            toMinimize = true;
                        }

                        that._removeContainersInBody();
                        that._containersInBody = [];
                        that._menuItems = {};
                        that._processDataSource();
                        that._checkContainersLength();

                        if (toMinimize) {
                            that.minimize();
                        } else {
                            checkOverflow();
                        }

                        that._expandItemsByDefault();

                        that._suppressResizeHandler = true;
                        setTimeout(function () {
                            return delete that._suppressResizeHandler;
                        }, 500);
                        break;
                    }
                case 'dropDownAppendTo':
                    {
                        var oldDropDownParent = that._dropDownParent;

                        that._positionDetection.getDropDownParent();

                        if (that._dropDownParent === oldDropDownParent || that.mode === 'tree' && !that._minimized) {
                            return;
                        }

                        that._close();

                        if (that._minimized) {
                            if (newValue === null) {
                                that._appendMinimizedContainerToMenu(that.$.mainContainer, that.$.scrollButtonFar);
                            } else {
                                that._appendMinimizedContainerToExternalElement(that.$.mainContainer);
                            }

                            return;
                        }

                        if (that._dropDownParent !== null && oldDropDownParent === null) {
                            that._moveDropDownsToExternalContainer();
                        } else if (that._dropDownParent === null && oldDropDownParent !== null) {
                            that._moveDropDownsToMenu();
                        } else if (that._dropDownParent !== null && oldDropDownParent !== null) {
                            for (var _i = 0; _i < that._containersInBody.length; _i++) {
                                that._dropDownParent.appendChild(that._containersInBody[_i]);
                            }
                        }

                        if (newValue === null && !that.$mainContainer.hasClass('simple')) {
                            that._hideMainContainerScrollButtons();
                        } else {
                            that._checkOverflow(that.$.mainContainer, that.mode === 'horizontal', [that.$.scrollButtonNear, that.$.scrollButtonFar]);
                        }

                        for (var _i2 = 0; _i2 < that._containersFixedHeight.length; _i2++) {
                            that._containersFixedHeight[_i2].itemContainer.checkOverflow = true;
                        }

                        if (that.mode === 'dropDown') {
                            that.close({ trigger: 'internal' });
                            that._reparentMenu(true, oldDropDownParent);
                        }

                        break;
                    }
                case 'dropDownOverlay':
                    if (!newValue) {
                        that._positionDetection.removeOverlay();
                    }

                    break;
                case 'disabled':
                    if (newValue) {
                        that._close();
                    }

                    that._setFocusable();
                    that.$.scrollButtonNear.disabled = newValue;
                    that.$.scrollButtonFar.disabled = newValue;

                    if (!newValue && (that.dropDownAppendTo !== null || that.$mainContainer.hasClass('simple') || that.mode === 'tree')) {
                        that._updateScrollButtonVisibility(that.$.mainContainer, that.mode === 'horizontal', [that.$.scrollButtonNear, that.$.scrollButtonFar]);
                    }

                    break;
                case 'dropDownPosition':
                case 'mode':
                    {
                        if (propertyName === 'mode') {
                            delete that._dynamicallyReparented;

                            if (oldValue === 'tree' || that._minimized) {
                                that._closeSubContainersTreeMode(2, undefined, undefined, undefined, true);
                                that._openedContainers = [];
                            } else {
                                that._closeSubContainersDefaultMode(2);
                            }

                            that._discardKeyboardHover(true);

                            if (that._minimized && that._minimizedDropDownOpened) {
                                that.$mainContainer.addClass('jqx-visibility-hidden');
                                that.$hamburgerIcon.removeClass('jqx-close-button');
                                that._minimizedDropDownOpened = false;
                            }

                            if (newValue === 'horizontal' || oldValue === 'horizontal') {
                                that._changeScrollButtonsArrows();
                            }

                            if (that._minimized) {
                                if (newValue === 'dropDown') {
                                    that.mode = oldValue;
                                }

                                return;
                            }

                            if (that.opened === false) {
                                if (newValue === 'dropDown') {
                                    that.$.addClass('jqx-visibility-hidden');
                                } else if (oldValue === 'dropDown') {
                                    that.$.removeClass('jqx-visibility-hidden');
                                }
                            }

                            if (oldValue === 'tree') {
                                if (that.dropDownAppendTo !== null) {
                                    that._moveDropDownsToExternalContainer();
                                }

                                that.$mainContainer.addClass('jqx-menu-main-container');
                                that.$mainContainer.removeClass('jqx-menu-minimized-items-container');

                                that._applyContainerFixedHeight();
                            } else if (newValue === 'tree') {
                                if (that.dropDownAppendTo !== null) {
                                    that._moveDropDownsToMenu();
                                }

                                that._applyTreeMode();
                            }

                            if (that.overflow === 'auto') {
                                that._hideMainContainerScrollButtons();
                            }

                            checkOverflow();
                        }

                        if (that.mode === 'tree' || that._minimized) {
                            if (that._minimizedDropDownOpened) {
                                that._close();
                            }

                            if (that._minimized && that.dropDownAppendTo !== null) {
                                that.$.mainContainer.setAttribute(that.properties[propertyName].attributeName, newValue);
                            }

                            return;
                        } else if (propertyName === 'dropDownPosition') {
                            that._close();
                        }

                        var menuItemsGroups = that.enableShadowDOM ? that.shadowRoot.querySelectorAll('jqx-menu-items-group') : that.getElementsByTagName('jqx-menu-items-group');

                        for (var _i3 = 0; _i3 < menuItemsGroups.length; _i3++) {
                            var currentMenuItemsGroup = menuItemsGroups[_i3];

                            that._setArrowDirection(currentMenuItemsGroup.children[0].children[1], currentMenuItemsGroup.level + 1);
                        }

                        if (that.dropDownAppendTo !== null) {
                            for (var _i4 = 0; _i4 < that._containers.length; _i4++) {
                                var _container = that._containers[_i4];

                                _container.setAttribute(JQX.Utilities.Core.toDash(propertyName), newValue);

                                if (_container.level > 2) {
                                    that._setArrowDirection(_container.menuItemsGroup.children[0].children[1], _container.level);
                                }
                            }
                        }

                        break;
                    }
                case 'minimizeIconTemplate':
                    that._applyMinimizeIconTemplate(newValue, oldValue);
                    break;
                case 'minimizeWidth':
                    that._resizeHandler();
                    break;
                case 'opened':
                    if (newValue) {
                        that.open();
                    } else {
                        that.close({ trigger: 'internal' });
                    }

                    break;
                case 'overflow':
                    that._handleOverflowChange();
                    break;
                case 'theme':
                    if (that.dropDownAppendTo === null || JQX.ListMenu && that instanceof JQX.ListMenu) {
                        return;
                    }

                    if (that._minimized) {
                        if (oldValue !== '') {
                            that.$mainContainer.removeClass(oldValue);
                        }

                        if (newValue !== '') {
                            that.$mainContainer.addClass(newValue);
                        }
                    } else {
                        for (var _i5 = 0; _i5 < that._containers.length; _i5++) {
                            var _container2 = that._containers[_i5];

                            if (oldValue !== '') {
                                _container2.classList.remove(oldValue);
                            }

                            if (newValue !== '') {
                                _container2.classList.add(newValue);
                            }
                        }
                    }

                    break;
                case 'unfocusable':
                    that._setFocusable();
                    break;
            }
        }

        /**
         * Adds a container to the "_openedContainers" array.
         */

    }, {
        key: '_addOpenedContainer',
        value: function _addOpenedContainer(level, container) {
            var that = this;

            if (that.mode === 'tree' || that._minimized) {
                if (!that._openedContainers[level]) {
                    that._openedContainers[level] = [];
                }

                var menuItemsGroup = container.menuItemsGroup;

                menuItemsGroup.set('expanded', true);

                if (that._updateState) {
                    that._updateState('expanded', menuItemsGroup.id, true);
                }

                return that._openedContainers[level].push(container);
            } else {
                that._openedContainers[level] = container;
            }
        }

        /**
         * Appends the minimized items container to external element.
         */

    }, {
        key: '_appendMinimizedContainerToExternalElement',
        value: function _appendMinimizedContainerToExternalElement(itemsContainer) {
            var that = this;

            itemsContainer.ownerElement = that;
            that._dropDownParent.appendChild(itemsContainer);
            itemsContainer.setAttribute('animation', that.animation);

            if (that.theme !== '') {
                itemsContainer.$.addClass(that.theme);
            }

            itemsContainer.$.addClass('jqx-menu-drop-down jqx-drop-down');
            itemsContainer.$.addClass('jqx-drop-down-repositioned');
            itemsContainer.setAttribute('check-mode', that.checkMode);
            itemsContainer.setAttribute('drop-down-position', that.dropDownPosition);
            itemsContainer.setAttribute('mode', that.mode);
            itemsContainer.setAttribute('loading-indicator-position', that.loadingIndicatorPosition);

            if (that.checkable) {
                itemsContainer.setAttribute('checkable', '');
            }

            if (that.checkboxes) {
                itemsContainer.setAttribute('checkboxes', '');
            }

            if (that.$.view && that.detachedChildren.indexOf(that.$.view)) {
                that.detachedChildren.push(that.$.view);
            }
        }

        /**
         * Appends the minimized items container to Menu.
         */

    }, {
        key: '_appendMinimizedContainerToMenu',
        value: function _appendMinimizedContainerToMenu(itemsContainer, sibling) {
            var that = this;

            delete itemsContainer.ownerElement;
            that.$.container.insertBefore(itemsContainer, sibling);

            itemsContainer.removeAttribute('animation');

            if (that.theme !== '') {
                itemsContainer.$.removeClass(that.theme);
            }

            itemsContainer.$.removeClass('jqx-menu-drop-down jqx-drop-down');
            itemsContainer.$.removeClass('jqx-drop-down-repositioned');
            itemsContainer.removeAttribute('checkable');
            itemsContainer.removeAttribute('checkboxes');
            itemsContainer.removeAttribute('check-mode');
            itemsContainer.removeAttribute('drop-down-position');
            itemsContainer.removeAttribute('mode');
            itemsContainer.removeAttribute('loading-indicator-position');
            itemsContainer.removeAttribute('style');
        }

        /**
         * Applies fixed heights to containers.
         */

    }, {
        key: '_applyContainerFixedHeight',
        value: function _applyContainerFixedHeight() {
            var that = this;

            for (var i = 0; i < that._containers.length; i++) {
                var container = that._containers[i];

                if (that._containersFixedHeight.indexOf(container) !== -1) {
                    container.style.height = container.menuItemsGroup.dropDownHeight + 'px';
                    container.itemContainer.checkOverflow = true;
                } else {
                    container.style.height = '';
                }
            }
        }

        /**
         * Applies grouping.
         */

    }, {
        key: '_applyGrouping',
        value: function _applyGrouping(item, noRecursion) {
            var that = this;
            var itemChildren = void 0;

            if (item === that.$.mainContainer) {
                itemChildren = Array.from(item.children);
            } else {
                itemChildren = Array.from(item.container.firstElementChild.children);
            }

            for (var i = 0; i < itemChildren.length; i++) {
                var currentItem = itemChildren[i];

                currentItem.originalIndex = i;

                if (currentItem instanceof JQX.MenuItemsGroup && noRecursion === undefined) {
                    that._applyGrouping(currentItem);
                }
            }

            that._sortItems(item);
        }

        /**
         * Applies minimize icon template.
         */

    }, {
        key: '_applyMinimizeIconTemplate',
        value: function _applyMinimizeIconTemplate(newValue, oldValue) {
            var that = this;

            if (newValue === null) {
                if (oldValue === null) {
                    return;
                }

                that.$customIconContainer.addClass('jqx-hidden');
                that.$.customIconContainer.innerHTML = '';

                that.$hamburgerIconLineTop.removeClass('jqx-hidden');
                that.$hamburgerIconLineCenter.removeClass('jqx-hidden');
                that.$hamburgerIconLineBottom.removeClass('jqx-hidden');
            } else {
                var potentialHTMLTemplate = document.getElementById(newValue);

                if (potentialHTMLTemplate !== null && potentialHTMLTemplate.tagName.toLowerCase() === 'template') {
                    // label is the id of an HTML template
                    var templateContent = document.importNode(potentialHTMLTemplate.content, true);

                    that.$hamburgerIconLineTop.addClass('jqx-hidden');
                    that.$hamburgerIconLineCenter.addClass('jqx-hidden');
                    that.$hamburgerIconLineBottom.addClass('jqx-hidden');

                    that.$.customIconContainer.innerHTML = '';
                    that.$.customIconContainer.appendChild(templateContent);
                    that.$customIconContainer.removeClass('jqx-hidden');
                } else {
                    that.minimizeIconTemplate = oldValue;
                }
            }
        }

        /**
         * Applies mode: 'tree'.
         */

    }, {
        key: '_applyTreeMode',
        value: function _applyTreeMode() {
            var that = this,
                arrows = that.getElementsByClassName('jqx-menu-items-group-arrow');

            that.$mainContainer.removeClass('jqx-menu-main-container');
            that.$mainContainer.addClass('jqx-menu-minimized-items-container');

            if (that.isCompleted) {
                for (var i = 0; i < arrows.length; i++) {
                    arrows[i].className = 'jqx-menu-items-group-arrow down';
                }
            }

            that._removeContainerFixedHeight();
        }

        /**
         * Default left arrow handler.
         */

    }, {
        key: '_arrowLeftHandler',
        value: function _arrowLeftHandler(level, mode, focusedItem, lastOpenedContainer) {
            var that = this;

            if (level === 1) {
                if (mode === 'horizontal') {
                    that._levelOneNavigate('_getLastEnabledChild', focusedItem, lastOpenedContainer);
                }
            } else if (level === 2) {
                that._levelOneNavigateFromLowerLevel('_getPreviousEnabledChild', focusedItem);
            } else {
                that._escapeHandler(focusedItem, level, lastOpenedContainer);
            }
        }

        /**
         * Default right arrow handler.
         */

    }, {
        key: '_arrowRightHandler',
        value: function _arrowRightHandler(level, mode, focusedItem, lastOpenedContainer) {
            var that = this;

            if (level === 1) {
                if (mode === 'horizontal') {
                    that._levelOneNavigate('_getFirstEnabledChild', focusedItem, lastOpenedContainer);
                } else {
                    that._levelOneOpenDropDown(focusedItem);
                }
            } else {
                if (focusedItem instanceof JQX.MenuItemsGroup) {
                    that._selectionHandler({ target: focusedItem, isTrusted: true });
                } else {
                    that._levelOneNavigateFromLowerLevel('_getNextEnabledChild', focusedItem);
                }
            }
        }

        /**
         * Repositions container if it intersects with browser bounds.
         */

    }, {
        key: '_browserBoundsDetection',
        value: function _browserBoundsDetection(container) {
            var that = this;

            if (that.mode === 'tree' && !that._minimized) {
                return;
            }

            container.style.marginTop = '';
            container.style.marginLeft = '';

            if (that.dropDownPosition !== 'auto') {
                return;
            }

            var windowWidth = window.devicePixelRatio === 1 ? document.documentElement.clientWidth : window.innerWidth,
                windowHeight = window.devicePixelRatio === 1 ? document.documentElement.clientHeight : window.innerHeight,
                containerBoundingRect = container.getBoundingClientRect(),
                horizontalCorrection = windowWidth - containerBoundingRect.left - container.offsetWidth,
                verticalCorrection = windowHeight - containerBoundingRect.top - container.offsetHeight;

            if (horizontalCorrection < 10) {
                container.style.marginLeft = Math.min(horizontalCorrection - 10, -10) + 'px';
            }

            if (verticalCorrection < 10) {
                container.style.marginTop = Math.min(verticalCorrection - 10, -10) + 'px';
            }
        }

        /**
         * Changes the direction of scroll button arrows.
         */

    }, {
        key: '_changeScrollButtonsArrows',
        value: function _changeScrollButtonsArrows() {
            var that = this;

            if (that.mode === 'horizontal') {
                that.$arrowNear.removeClass('jqx-arrow-up');
                that.$arrowNear.addClass('jqx-arrow-left');
                that.$arrowFar.removeClass('jqx-arrow-down');
                that.$arrowFar.addClass('jqx-arrow-right');
            } else {
                that.$arrowNear.removeClass('jqx-arrow-left');
                that.$arrowNear.addClass('jqx-arrow-up');
                that.$arrowFar.removeClass('jqx-arrow-right');
                that.$arrowFar.addClass('jqx-arrow-down');
            }
        }

        /**
         * Changes to checkMode: 'radioButton'.
         */

    }, {
        key: '_changeToRadioButtonMode',
        value: function _changeToRadioButtonMode(newValue, container, item) {
            if (newValue === 'radioButton') {
                var checkedChildren = [];

                for (var i = 0; i < container.childElementCount; i++) {
                    var currentItem = container.children[i];

                    if (currentItem.checked && !currentItem.disabled && !currentItem.templateApplied) {
                        checkedChildren.push(currentItem);
                    }
                }

                this._validateRadioButtonSelection(item, item ? item.level + 1 : 1, checkedChildren);
            }
        }

        /**
         * Checks the number of dropdowns.
         */

    }, {
        key: '_checkContainersLength',
        value: function _checkContainersLength(initialization) {
            var that = this;

            if (that._containers.length === 0) {
                that.$mainContainer.addClass('simple');

                if (!initialization) {
                    that._checkOverflow(that.$.mainContainer, that.mode === 'horizontal', [that.$.scrollButtonNear, that.$.scrollButtonFar]);
                }
            } else if (!initialization) {
                that.$mainContainer.removeClass('simple');

                if (that.dropDownAppendTo === null && that.mode !== 'tree') {
                    that.$mainContainer.removeClass('scroll-buttons-shown one-button-shown');
                }
            }
        }

        /**
         * Checks if items overflow and shows/hides scroll buttons.
         */

    }, {
        key: '_checkOverflow',
        value: function _checkOverflow(element, horizontal, scrollButtons) {
            var that = this,
                overflow = element === that.$.mainContainer ? that.overflow : 'auto';

            if (that._minimized || overflow === 'hidden' || that.dropDownAppendTo === null && that.mode !== 'tree' && element === that.$.mainContainer && !that.$mainContainer.hasClass('simple')) {
                return;
            }

            var oldScrollTop = element.scrollTop;

            if (overflow === 'auto') {
                element.classList.remove('scroll-buttons-shown');
                element.classList.remove('one-button-shown');
                scrollButtons[0].$.addClass('jqx-hidden');
                scrollButtons[1].$.addClass('jqx-hidden');
            }

            var overflowing = void 0,
                showNear = void 0,
                showFar = void 0;

            if (horizontal) {
                overflowing = Math.round(element.scrollWidth) > Math.round(element.offsetWidth);
                showNear = Math.round(element.scrollLeft) > 0;
                showFar = Math.round(element.offsetWidth + element.scrollLeft) < Math.round(element.scrollWidth);
            } else {
                overflowing = Math.round(element.scrollHeight) > Math.round(element.offsetHeight);
                showNear = Math.round(element.scrollTop) > 0;
                showFar = Math.round(element.offsetHeight + element.scrollTop) < Math.round(element.scrollHeight);
            }

            if (overflowing) {
                if (overflow === 'auto') {
                    element.classList.add('scroll-buttons-shown');

                    if (showNear) {
                        scrollButtons[0].$.removeClass('jqx-hidden');
                    }

                    if (showFar) {
                        scrollButtons[1].$.removeClass('jqx-hidden');
                    }

                    if ((showNear && showFar) === false) {
                        element.classList.add('one-button-shown');
                    }

                    if (!that.disabled) {
                        scrollButtons[0].disabled = false;
                        scrollButtons[1].disabled = false;
                    }

                    element.scrollTop = oldScrollTop;
                } else {
                    scrollButtons[0].$.removeClass('jqx-hidden');
                    scrollButtons[1].$.removeClass('jqx-hidden');

                    if (that.disabled) {
                        scrollButtons[0].disabled = true;
                        scrollButtons[1].disabled = true;
                    } else {
                        scrollButtons[0].disabled = !showNear;
                        scrollButtons[1].disabled = !showFar;
                    }
                }
            } else if (overflow === 'scroll') {
                scrollButtons[0].disabled = true;
                scrollButtons[1].disabled = true;
            }

            if (element === that.$.mainContainer && that.mode !== 'tree') {
                that._close();
            }
        }

        /**
         * Checks overflow after "addItem" or "removeItem" has been called.
         */

    }, {
        key: '_checkOverflowAddRemove',
        value: function _checkOverflowAddRemove(level, itemParent) {
            var that = this;

            if (level === 1 && that.dropDownAppendTo !== null || that.mode === 'tree') {
                that._checkOverflow(that.$.mainContainer, that.mode === 'horizontal', [that.$.scrollButtonNear, that.$.scrollButtonFar]);
            } else if (level > 1 && itemParent.dropDownHeightSet) {
                if (that._isContainerOpened(level, itemParent.container)) {
                    that._checkOverflow(itemParent, false, [itemParent.container.children[0], itemParent.container.children[2]]);
                } else {
                    itemParent.checkOverflow = true;
                }
            }
        }

        /**
         * Closes any open dropdown containers.
         */

    }, {
        key: '_close',
        value: function _close() {
            var that = this;

            that._positionDetection.removeOverlay();
            that._closeSubContainers(2);
            that._discardKeyboardHover(true);

            if (that._minimized && that._minimizedDropDownOpened) {
                that.$mainContainer.addClass('jqx-visibility-hidden');

                if (that._edgeMacFF) {
                    that.$.mainContainer.style.left = '';
                    that.$.mainContainer.style.top = '';
                    that.$mainContainer.addClass('not-in-view');
                }

                that.$hamburgerIcon.removeClass('jqx-close-button');
                that._minimizedDropDownOpened = false;
            }
        }

        /**
         * Closes sub-containers.
         */

    }, {
        key: '_closeSubContainers',
        value: function _closeSubContainers(level, container, preserveClass, fireEvent) {
            var that = this;

            if (that.mode !== 'tree' && !that._minimized) {
                that._closeSubContainersDefaultMode(level, container, preserveClass);
            } else {
                that._closeSubContainersTreeMode(level, container, preserveClass, fireEvent);
            }
        }

        /**
         * Closes sub-containers (in horizontal/vertical/dropDown mode).
         */

    }, {
        key: '_closeSubContainersDefaultMode',
        value: function _closeSubContainersDefaultMode(level, container, preserveClass) {
            var that = this,
                openedContainers = that._openedContainers;

            function applyClasses(i) {
                var menuItemsGroup = openedContainers[i].menuItemsGroup;

                if (!(preserveClass && i === level)) {
                    menuItemsGroup.$.removeClass('focus');
                    menuItemsGroup.removeAttribute('focus');
                    menuItemsGroup.$.removeClass('hover');
                    menuItemsGroup.removeAttribute('hover');
                }

                menuItemsGroup.$.removeClass('jqx-menu-items-group-opened');
                openedContainers[i].$.addClass('jqx-visibility-hidden');

                if (that._edgeMacFF && i === 2 && !that.hasAnimation) {
                    openedContainers[i].style.left = '';
                    openedContainers[i].style.top = '';
                    openedContainers[i].$.addClass('not-in-view');
                }

                if (that._minimized) {
                    that._browserBoundsDetection(that.$.mainContainer);
                }

                that.$.fireEvent('collapse', {
                    'item': menuItemsGroup,
                    'label': menuItemsGroup.label,
                    'path': menuItemsGroup.path,
                    'value': menuItemsGroup.value,
                    'children': menuItemsGroup.itemContainer.children
                });

                openedContainers[i] = undefined;
            }

            for (var i = openedContainers.length - 1; i >= level; i--) {
                if (openedContainers[i] === undefined) {
                    continue;
                }

                applyClasses(i, true);
            }
        }

        /**
         * Closes sub-containers (in tree/minimized mode).
         */

    }, {
        key: '_closeSubContainersTreeMode',
        value: function _closeSubContainersTreeMode(level, container, preserveClass, fireEvent, modeChanged) {
            var that = this;

            if (fireEvent) {
                var _menuItemsGroup = container.menuItemsGroup,
                    collapsingEvent = that.$.fireEvent('collapsing', {
                    'item': _menuItemsGroup,
                    'label': _menuItemsGroup.label,
                    'path': _menuItemsGroup.path,
                    'value': _menuItemsGroup.value,
                    'children': container.itemContainer.children
                });

                if (collapsingEvent.defaultPrevented) {
                    return;
                }
            }

            if (container === undefined) {
                that._collapseAll(false, modeChanged);
                return;
            }

            var menuItemsGroup = container.menuItemsGroup;

            menuItemsGroup.set('expanded', false);

            if (that._element === 'menu') {
                if (preserveClass) {
                    var currentFocus = that.$.mainContainer.getElementsByClassName('focus')[0];

                    if (currentFocus) {
                        currentFocus.$.removeClass('focus');
                        currentFocus.removeAttribute('focus');
                    }

                    menuItemsGroup.$.addClass('focus');
                    menuItemsGroup.setAttribute('focus', '');
                    that._focusedViaKeyboard = menuItemsGroup;
                } else {
                    menuItemsGroup.$.removeClass('focus');
                    menuItemsGroup.removeAttribute('focus');
                }
            } else {
                that._updateState('expanded', menuItemsGroup.id, false);
            }

            menuItemsGroup.$.removeClass('jqx-' + that._element + '-items-group-opened');

            if (modeChanged || !that.hasAnimation) {
                menuItemsGroup.$.removeClass('jqx-' + that._element + '-items-group-expanded');
                container.$.addClass('jqx-visibility-hidden');

                if (that._minimized) {
                    that._browserBoundsDetection(that.$.mainContainer);
                }
            } else {
                that._collapseSection(container);
            }

            if (fireEvent) {
                var eventDetail = {
                    'item': menuItemsGroup,
                    'label': menuItemsGroup.label,
                    'path': menuItemsGroup.path,
                    'value': menuItemsGroup.value,
                    'children': menuItemsGroup.itemContainer.children
                };

                if (that.toggleCallback) {
                    eventDetail.type = 'collapse';
                    that.toggleCallback(eventDetail);
                } else {
                    that.$.fireEvent('collapse', eventDetail);
                }
            }

            if (!that._openedContainers[level]) {
                return;
            }

            var index = that._openedContainers[level].indexOf(container);

            if (index !== -1) {
                that._openedContainers[level].splice(index, 1);
            }
        }

        /**
         * Collapses all items (in tree/minimized mode).
         */

    }, {
        key: '_collapseAll',
        value: function _collapseAll(fireEvent, modeChanged) {
            var that = this;

            for (var i = that._openedContainers.length - 1; i >= 2; i--) {
                if (that._openedContainers[i] === undefined) {
                    break;
                }

                for (var j = that._openedContainers[i].length - 1; j >= 0; j--) {
                    that._closeSubContainersTreeMode(i, that._openedContainers[i][j], undefined, fireEvent, modeChanged);
                }
            }

            if (!that.hasAnimation) {
                that._checkOverflow(that.$.mainContainer, false, [that.$.scrollButtonNear, that.$.scrollButtonFar]);
            }

            for (var _i6 = that._openedContainers.length - 1; _i6 >= 2; _i6--) {
                var currentSet = that._openedContainers[_i6];

                if (currentSet === undefined || currentSet.length === 0) {
                    that._openedContainers.splice(_i6, 1);
                } else {
                    break;
                }
            }

            if (that._openedContainers.length === 2) {
                that._openedContainers = [];
            }
        }

        /**
         * Collapses a section (in tree/minimized mode).
         */

    }, {
        key: '_collapseSection',
        value: function _collapseSection(element) {
            var that = this,
                sectionHeight = element.scrollHeight + 'px';

            that._treeAnimationInProgress = element;
            element.style.transition = 'none';

            requestAnimationFrame(function () {
                if (that.mode !== 'tree' && !that._minimized) {
                    element.style.transition = '';
                    return;
                }

                element.style.height = sectionHeight;
                element.style.transition = '';

                requestAnimationFrame(function () {
                    element.style.height = '0px';

                    if (that.tagName.toLowerCase() === 'jqx-tree') {
                        element.$.addClass('jqx-visibility-hidden');
                    }

                    if (sectionHeight === '0px') {
                        that._transitionendHandlerCollapse(that, element);
                    }
                });
            });

            element.addEventListener('transitionend', that._transitionendHandlerCollapse);
        }

        /**
         * Applies initial settings to the Menu element.
         */

    }, {
        key: '_createElement',
        value: function _createElement() {
            var that = this,
                mode = that.mode;

            that._positionDetection = new JQX.Utilities.PositionDetection(that);
            that._positionDetection.getDropDownParent();
            that._reparentMenu();

            if (that.disabled) {
                that.$.scrollButtonNear.disabled = true;
                that.$.scrollButtonFar.disabled = true;
            }

            if (that.dataSource === null && that.$.mainContainer.firstElementChild instanceof HTMLUListElement) {
                that._processUList();
            }

            var items = that.getElementsByTagName('jqx-menu-item');

            var itemsReady = function itemsReady() {
                var animationType = that.animation;

                that._changeScrollButtonsArrows();

                that._setFocusable();

                if (mode === 'dropDown' && that.opened === false) {
                    if (that.hasAnimation) {
                        that.animation = 'none';
                        that.$.addClass('jqx-visibility-hidden');
                        that.animation = animationType;
                    } else {
                        that.$.addClass('jqx-visibility-hidden');
                    }
                }

                that._menuItems = {};

                that.$.mainContainer.setAttribute('animation', animationType);

                if (that.dataSource === null) {
                    that._processHTML(that.$.mainContainer, 1);
                } else {
                    that._processDataSource();
                }

                that._checkContainersLength(true);

                if ((that.dropDownAppendTo !== null || that.$mainContainer.hasClass('simple') || that.mode === 'tree') && that.overflow === 'scroll') {
                    that.$mainContainer.addClass('scroll-buttons-shown');
                    that.$scrollButtonNear.removeClass('jqx-hidden');
                    that.$scrollButtonFar.removeClass('jqx-hidden');
                    that._updateScrollButtonVisibility(that.$.mainContainer, mode === 'horizontal', [that.$.scrollButtonNear, that.$.scrollButtonFar]);
                }

                that._applyMinimizeIconTemplate(that.minimizeIconTemplate, null);

                if (mode === 'tree') {
                    that._applyTreeMode();
                }

                if (that.minimizeWidth !== null && that.offsetWidth <= that.minimizeWidth) {
                    that.minimize();
                } else {
                    that._checkOverflow(that.$.mainContainer, mode === 'horizontal', [that.$.scrollButtonNear, that.$.scrollButtonFar]);
                }

                that._expandItemsByDefault();

                if (that.__onCompleted) {
                    that._onCompleted = that.__onCompleted;
                    that.__onCompleted = null;
                    that._onCompleted();
                }
            };

            if (items.length === 0) {
                itemsReady();
            } else {
                if (that._onCompleted) {
                    that.__onCompleted = that._onCompleted;
                    that._onCompleted = null;
                }
                that._ensureItemsReady(items, itemsReady);
            }
        }
    }, {
        key: '_ensureItemsReady',
        value: function _ensureItemsReady(nodes, callback) {
            var that = this;

            var contextCallback = function contextCallback() {
                var setContext = function setContext(context) {
                    for (var i = 0; i < nodes.length; i++) {
                        nodes[i].context = context === 'node' ? nodes[i] : document;
                    }
                };

                setContext('node');
                callback();
                setContext();
            };

            if (nodes.length === 0) {
                contextCallback();
            } else {
                that._nodesReadyListeners = 0;

                for (var i = 0; i < nodes.length; i++) {
                    var node = nodes[i];

                    var readyEventHandler = function () {
                        that._nodesReadyListeners--;
                        if (that._nodesReadyListeners === 0) {
                            contextCallback();

                            delete that._nodesReadyListeners;
                        }
                    }.bind(that);

                    if (!node.isCompleted) {
                        that._nodesReadyListeners++;
                        node.completeHandlers = [];
                        node._onCompleted = readyEventHandler;
                    }
                }

                if (that._nodesReadyListeners === 0) {
                    contextCallback();
                }
            }
        }

        /**
         * Creates the necessary HTML structure for a jqx-menu-item/jqx-menu-items-group.
         */

    }, {
        key: '_createItemHTMLStructure',
        value: function _createItemHTMLStructure(currentItem, level, item, index) {
            var that = this,
                labelContainer = document.createElement('div'),
                labelElement = document.createElement('div'),
                labelFragment = document.createDocumentFragment();
            var currentItemPath = void 0;

            currentItem.menu = that;

            if (level > 1) {
                currentItem.originalIndex = index;
                currentItemPath = item.path + '.' + currentItem.originalIndex;
                currentItem.parentItem = item;
            } else {
                currentItem.originalIndex = index;
                currentItemPath = '' + index;
            }

            currentItem.path = currentItemPath;
            that._menuItems[currentItemPath] = currentItem;

            labelContainer.className = 'jqx-' + that._element + '-item-label-container';
            labelElement.className = 'jqx-' + that._element + '-item-label-element';

            if (that._element === 'tree') {
                // Tree item indentation
                that._setIndentation(labelContainer, level, that.rightToLeft ? 'paddingRight' : 'paddingLeft');
            }

            var currentItemChildNodes = Array.from(currentItem.childNodes);

            for (var i = 0; i < currentItemChildNodes.length; i++) {
                var currentNode = currentItemChildNodes[i];

                if (currentNode instanceof JQX.MenuItem || currentNode instanceof JQX.MenuItemsGroup) {
                    break;
                }

                labelElement.appendChild(currentNode);
            }

            if (labelElement.innerHTML.trim() === '') {
                var currentItemLabel = currentItem.label || currentItem.getAttribute('label');

                if (currentItemLabel && currentItemLabel !== '') {
                    that._setLabel(currentItemLabel, labelElement, currentItem, true);
                } else {
                    currentItem.set('label', 'Item ' + index);
                    labelElement.innerHTML = 'Item ' + index;
                }
            } else {
                currentItem.set('label', labelElement.innerHTML.trim());
            }

            if (currentItem instanceof JQX.MenuItemsGroup && currentItem.titleLabel === undefined) {
                currentItem.titleLabel = currentItem.label;
            }

            labelElement.innerHTML = '<span>' + labelElement.innerHTML + '</span>';
            labelFragment.appendChild(labelElement);
            currentItem.set('level', level);
            currentItem.set('shortcut', currentItem.shortcut || currentItem.getAttribute('shortcut') || '');

            if (currentItem.shortcut && currentItem instanceof JQX.MenuItem) {
                var shortcutElement = document.createElement('div');

                shortcutElement.className = 'jqx-' + that._element + '-item-shortcut';
                shortcutElement.innerHTML = currentItem.shortcut;

                labelFragment.appendChild(shortcutElement);
            }

            labelContainer.appendChild(labelFragment);
            currentItem.insertBefore(labelContainer, currentItem.children[0]);

            if (!currentItem.id) {
                currentItem.id = that.id + 'ItemP' + currentItem.path.replace(/\./g, '_') + 'L' + currentItem.label.replace(/<|\/|>|"|'|=|\s/g, '');
            }
        }

        /**
         * Creates the dropdown container of jqx-menu-items-group.
         */

    }, {
        key: '_createMenuItemsGroupContainer',
        value: function _createMenuItemsGroupContainer(item, level) {
            var that = this,
                container = document.createElement('div'),
                itemContainer = document.createElement('div');

            container.className = 'jqx-' + that._element + '-drop-down jqx-visibility-hidden';

            if (that._edgeMacFF && level === 2 && that.mode !== 'tree') {
                container.className += ' not-in-view';
            }

            container.$ = JQX.Utilities.Extend(container);
            container.level = level;
            container.setAttribute('level', level);
            container.menuItemsGroup = item;

            itemContainer.className = 'jqx-' + that._element + '-item-container';
            itemContainer.$ = JQX.Utilities.Extend(itemContainer);
            itemContainer.container = container;
            itemContainer.menuItemsGroup = item;

            if (item.checkable) {
                itemContainer.setAttribute('checkable', '');
            }

            itemContainer.setAttribute('check-mode', item.checkMode);

            container.itemContainer = itemContainer;
            container.appendChild(itemContainer);

            if (item.dropDownHeight !== null) {
                var repeatButtonNear = document.createElement('jqx-repeat-button'),
                    repeatButtonFar = document.createElement('jqx-repeat-button');

                repeatButtonNear.className = 'jqx-menu-scroll-button jqx-spin-button jqx-scroll-button-near jqx-hidden';
                repeatButtonNear.innerHTML = '<div id="arrowNear" class="jqx-arrow jqx-arrow-up"></div>';
                repeatButtonNear.animation = that.animation;
                repeatButtonNear.unfocusable = true;
                repeatButtonFar.className = 'jqx-menu-scroll-button jqx-spin-button jqx-scroll-button-far jqx-hidden';
                repeatButtonFar.innerHTML = '<div id="arrowNear" class="jqx-arrow jqx-arrow-down"></div>';
                repeatButtonFar.animation = that.animation;
                repeatButtonFar.unfocusable = true;

                container.insertBefore(repeatButtonNear, itemContainer);
                container.appendChild(repeatButtonFar);

                container.$.addClass('drop-down-height-set');
                itemContainer.dropDownHeightSet = true;
                itemContainer.checkOverflow = true;
                container.style.height = item.dropDownHeight + 'px';
                that._containersFixedHeight.push(container);
                that._additionalScrollButtons.push([repeatButtonNear, repeatButtonFar]);
            }

            return container;
        }

        /**
         * Removes "focused" class added by keyboard navigation.
         */

    }, {
        key: '_discardKeyboardHover',
        value: function _discardKeyboardHover(overrideCheck) {
            var that = this;

            if (!that._focusedViaKeyboard) {
                return;
            }

            if (!overrideCheck && that._focusedViaKeyboard instanceof JQX.MenuItemsGroup && that._isContainerOpened(that._focusedViaKeyboard.level + 1, that._focusedViaKeyboard.container)) {
                return;
            }

            that._focusedViaKeyboard.$.removeClass('focus');
            that._focusedViaKeyboard.removeAttribute('focus');
            that._focusedViaKeyboard.$.removeClass('hover');
            that._focusedViaKeyboard.removeAttribute('hover');

            that._focusedViaKeyboard = undefined;
        }

        /**
         * Document down handler.
         */

    }, {
        key: '_documentDownHandler',
        value: function _documentDownHandler(event) {
            var that = this;

            if (that.closeAction === 'down') {
                that._closeOnDocumentInteraction(event.originalEvent);
            }
        }

        /**
         * Document up handler.
         */

    }, {
        key: '_documentUpHandler',
        value: function _documentUpHandler(event) {
            var that = this,
                target = event.originalEvent.target;

            if (that.disabled || that.displayLoadingIndicator || !target.closest) {
                return;
            }

            var closed = that.closeAction === 'up' ? that._closeOnDocumentInteraction(event.originalEvent) : false;

            if (closed) {
                return;
            }

            var activeElement = void 0,
                isInsideElement = void 0;

            if (JQX.EnableShadowDOM) {
                activeElement = that.isInShadowRoot ? that.getRootNode().activeElement : that.shadowRoot ? that.shadowRoot.activeElement || document.activeElement : document.activeElement;
                isInsideElement = that.$.container.contains(event.originalEvent.composedPath()[0]);
            } else {
                activeElement = document.activeElement;
                isInsideElement = that.contains(target);
            }

            if (!closed && that !== activeElement && activeElement.closest('[template-applied]') === null) {
                if (isInsideElement || target.closest('.jqx-list-menu-view') === that.$.view) {
                    that.focus();
                    return;
                }

                var closestDropDown = target.closest('.jqx-drop-down-repositioned');

                if (closestDropDown && closestDropDown.ownerElement === that) {
                    that.focus();
                }
            }
        }

        /**
         * Closes Menu drop downs on interaction with the document.
         */

    }, {
        key: '_closeOnDocumentInteraction',
        value: function _closeOnDocumentInteraction(event) {
            var that = this,
                target = event.target;
            var shadowRootTarget = void 0,
                isInsideElement = void 0;

            if (JQX.EnableShadowDOM) {
                shadowRootTarget = event.composedPath()[0];
                isInsideElement = that.$.container.contains(shadowRootTarget);
            } else {
                isInsideElement = that.contains(target);
            }

            if (that.mode === 'dropDown' && that.opened) {
                var closestDropDown = target.closest('.jqx-drop-down-repositioned');

                if (!isInsideElement && (!closestDropDown || closestDropDown.ownerElement !== that)) {
                    that.close({ trigger: 'interaction', target: JQX.EnableShadowDOM ? shadowRootTarget : target });
                    return true;
                }
            }

            if (!isInsideElement && target.closest('.jqx-menu-drop-down') === null || shadowRootTarget && shadowRootTarget === that.$.mainContainer || target === that.$.mainContainer) {
                if (that.mode === 'tree') {
                    return true;
                }

                that._close();
                return true;
            }
        }

        /**
         * Ends swiping and scrolls kinetically.
         */

    }, {
        key: '_endSwiping',
        value: function _endSwiping(event, now, noBounce) {
            var that = this;

            if (!that._dragStartDetails) {
                return;
            }

            var mainContainer = that.$.mainContainer,
                timeDifference = Math.abs(that._dragStartDetails.startTime - now),
                speed = 300 / timeDifference,
                distanceDifference = (that._dragStartDetails.startY - event.pageY) * speed;
            var remaining = Math.abs(distanceDifference);

            var scrollable = function scrollable() {
                if (distanceDifference > 0 && mainContainer.scrollTop === mainContainer.scrollHeight - mainContainer.offsetHeight || distanceDifference < 0 && mainContainer.scrollTop === 0) {
                    return false;
                }

                return true;
            };

            var scrollStep = 0.03 * Math.abs(distanceDifference) * speed;

            var kineticScrolling = function kineticScrolling() {
                if (scrollStep > 5) {
                    var remainingPart = (remaining - scrollStep) / Math.abs(distanceDifference);

                    if (remainingPart < 0.1) {
                        scrollStep /= 1.25;
                    } else if (remainingPart < 0.15) {
                        scrollStep /= 1.2;
                    } else if (remainingPart < 0.2) {
                        scrollStep /= 1.15;
                    } else if (remainingPart < 0.25) {
                        scrollStep /= 1.1;
                    } else if (remainingPart < 0.3) {
                        scrollStep /= 1.05;
                    }
                }

                var oldScrollTop = mainContainer.scrollTop;

                if (distanceDifference > 0) {
                    mainContainer.scrollTop = Math.min(oldScrollTop + scrollStep, mainContainer.scrollHeight - mainContainer.offsetHeight);
                } else {
                    mainContainer.scrollTop = Math.max(oldScrollTop - scrollStep, 0);
                }

                remaining -= scrollStep;

                that._updateScrollButtonVisibility(that.$.mainContainer, that.mode === 'horizontal', [that.$.scrollButtonNear, that.$.scrollButtonFar]);

                var canBeScrolled = scrollable();

                if (remaining > 0 && canBeScrolled) {
                    that._scrollingAnimationFrame = window.requestAnimationFrame(kineticScrolling);
                } else {
                    that._wheelInProgress = false;

                    if (!canBeScrolled) {
                        if (that._fireScrollBottomReachedEvent) {
                            that._fireScrollBottomReachedEvent(oldScrollTop);
                        }

                        if (noBounce !== true) {
                            var initialScrollTop = that.$.mainContainer.scrollTop;

                            if (initialScrollTop === 0) {
                                that._bounceTop();
                            } else {
                                that._bounceBottom(initialScrollTop);
                            }
                        }
                    }
                }
            };

            if (that._scrollingAnimationFrame) {
                cancelAnimationFrame(that._scrollingAnimationFrame);
            }

            if (timeDifference < 1000 && scrollable()) {
                that._scrollingAnimationFrame = window.requestAnimationFrame(kineticScrolling);
            } else {
                that._wheelInProgress = false;
            }

            delete that._dragStartDetails;
        }

        /**
         * Makes sure a jqx-menu-item/jqx-menu-items-group is visible by scrolling to it.
         */

    }, {
        key: '_ensureVisible',
        value: function _ensureVisible(scrollTarget) {
            var that = this;

            if (that._minimized) {
                return;
            }

            var mode = that.mode;
            var parent = void 0,
                scrollButtons = void 0;

            if (mode !== 'tree' && scrollTarget.parentElement !== that.$.mainContainer) {
                if (scrollTarget.dropDownHeight === null) {
                    return;
                }

                parent = scrollTarget.parentElement;
                scrollButtons = [parent.container.children[0], parent.container.children[2]];
            } else {
                parent = that.$.mainContainer;
                scrollButtons = [that.$.scrollButtonNear, that.$.scrollButtonFar];
            }

            if (parent === that.$.mainContainer && (that.dropDownAppendTo === null && that.mode !== 'tree' && !that.$mainContainer.hasClass('simple') || !parent.$.hasClass('scroll-buttons-shown') && that.overflow !== 'hidden')) {
                return;
            }

            var parentBoundingRect = parent.getBoundingClientRect(),
                scrollTargetBoundingRect = scrollTarget.getBoundingClientRect();

            if (mode === 'tree') {
                that._ensureVisibleTreeMode(scrollTarget, scrollTargetBoundingRect, parent, parentBoundingRect, 0);
                return;
            }

            function setTargetScrollValue(scrollValue, scrollDimension, dimension) {
                var targetScrollValue = scrollTarget.firstElementChild[dimension] + scrollValue - parent[dimension];

                if (targetScrollValue < 0) {
                    targetScrollValue = scrollValue;
                }

                parent['scroll' + scrollDimension] = targetScrollValue;
            }

            function scrollTo(scrollDimension, dimension) {
                var scrollValue = scrollTarget['offset' + scrollDimension],
                    oldParentDimension = parent[dimension];

                if (scrollDimension === 'Top' && parent !== that.$.mainContainer && !scrollButtons[0].$.hasClass('jqx-hidden')) {
                    scrollValue -= scrollButtons[0][dimension];
                }

                setTargetScrollValue(scrollValue, scrollDimension, dimension);
                that._updateScrollButtonVisibility(parent, scrollDimension === 'Left', scrollButtons);

                if (oldParentDimension !== parent[dimension]) {
                    setTargetScrollValue(scrollValue, scrollDimension, dimension);
                }
            }

            if (parent === that.$.mainContainer && mode === 'horizontal' && (parentBoundingRect.left > scrollTargetBoundingRect.left || parentBoundingRect.right < scrollTargetBoundingRect.right)) {
                scrollTo('Left', 'offsetWidth');
            } else if (parentBoundingRect.top > scrollTargetBoundingRect.top || parentBoundingRect.bottom < scrollTargetBoundingRect.bottom) {
                scrollTo('Top', 'offsetHeight');
            }
        }

        /**
         * Makes sure a jqx-menu-item/jqx-menu-items-group is visible by scrolling to it (when "mode" is 'tree').
         */

    }, {
        key: '_ensureVisibleTreeMode',
        value: function _ensureVisibleTreeMode(item, scrollTargetBoundingRect, parent, parentBoundingRect, padding) {
            var that = this;

            if ((that._element === 'menu' || that.scrollMode === 'scrollButtons') && !parent.$.hasClass('scroll-buttons-shown') && that.overflow !== 'hidden') {
                return;
            }

            var oldHeight = parent.offsetHeight,
                scrollButtonNearHidden = that.$scrollButtonNear.hasClass('jqx-hidden');
            var newScrollTop = void 0;

            if (parentBoundingRect.top > scrollTargetBoundingRect.top) {
                newScrollTop = that._getOffsetTop(item);
            } else {
                var itemHeight = !item.expanded ? item.offsetHeight : item.firstElementChild.offsetHeight + parseInt(window.getComputedStyle(item.children[1]).marginTop, 10);

                if (that._element === 'tree') {
                    itemHeight += parseFloat(getComputedStyle(that).getPropertyValue('--jqx-tree-item-vertical-offset')) || 0;
                }

                if (parentBoundingRect.bottom < scrollTargetBoundingRect.top + itemHeight) {
                    newScrollTop = that._getOffsetTop(item) - oldHeight + itemHeight + padding;
                } else {
                    return;
                }
            }

            parent.scrollTop = newScrollTop;

            if (that._element === 'menu' || that.scrollMode === 'scrollButtons') {
                that._updateScrollButtonVisibility(parent, false, [that.$.scrollButtonNear, that.$.scrollButtonFar]);
            }

            if (that.overflow === 'auto' && scrollButtonNearHidden && !that.$scrollButtonNear.hasClass('jqx-hidden')) {
                parent.scrollTop += oldHeight - parent.offsetHeight;
            }
        }

        /**
         * Escape key handler.
         */

    }, {
        key: '_escapeHandler',
        value: function _escapeHandler(focusedItem, level, lastOpenedContainer) {
            var that = this;

            if (focusedItem) {
                focusedItem.$.removeClass('focus');
                focusedItem.removeAttribute('focus');
            }

            that._closeSubContainers(level, undefined, undefined, true);
            that._hoverViaKeyboard(lastOpenedContainer.menuItemsGroup);
        }

        /**
         * Expand items by default.
         */

    }, {
        key: '_expandItemsByDefault',
        value: function _expandItemsByDefault(collapseBeforehand) {
            var that = this;

            if (that._menuItemsGroupsToExpand.length === 0 && !collapseBeforehand || that.mode !== 'tree' && !that._minimized) {
                return;
            }

            var restoreAnimation = that.hasAnimation,
                animationType = that.animation;

            if (restoreAnimation) {
                that.animation = 'none';
            }

            if (collapseBeforehand) {
                that._collapseAll(false);
            }

            for (var i = 0; i < that._menuItemsGroupsToExpand.length; i++) {
                that.expandItem(that._menuItemsGroupsToExpand[i].path, undefined, false);
            }

            if (restoreAnimation) {
                that.animation = animationType;
            }

            that._menuItemsGroupsToExpand = [];
        }

        /**
         * Expands a section (in tree/minimized mode).
         */

    }, {
        key: '_expandSection',
        value: function _expandSection(element) {
            var that = this,
                oldHeight = element.style.height,
                sectionHeight = element.scrollHeight + 'px';

            element.style.height = sectionHeight;
            that._treeAnimationInProgress = element;

            if (oldHeight === sectionHeight || !parseFloat(oldHeight) && !parseFloat(sectionHeight)) {
                that._transitionendHandlerExpand(that, element);
                return;
            }

            element.addEventListener('transitionend', that._transitionendHandlerExpand);
        }

        /**
         * Filter input keyup handler.
         */

    }, {
        key: '_filterInputKeyupHandler',
        value: function _filterInputKeyupHandler() {
            var that = this;

            if (that._filterTimer) {
                clearTimeout(that._filterTimer);
            }

            that._filterTimer = setTimeout(function () {
                var context = that.context;

                that.context = that;
                that._applyFilter(that.$.filterInput.value, that._view);
                that._checkOverflow();
                that.context = context;
            }, 300);
        }

        /**
         * Finds an item based on filter criteria.
         */

    }, {
        key: '_findItem',
        value: function _findItem(item, filterQuery) {
            if (filterQuery === '') {
                return item;
            }

            var that = this;

            switch (that.filterMode) {
                case 'startsWith':
                    if (item.label.indexOf(filterQuery) === 0) {
                        return item;
                    }

                    break;
                case 'startsWithIgnoreCase':
                    if (item.label.toLowerCase().indexOf(filterQuery.toLowerCase()) === 0) {
                        return item;
                    }

                    break;
                case 'doesNotContain':
                    if (item.label.indexOf(filterQuery) < 0) {
                        return item;
                    }

                    break;
                case 'doesNotContainIgnoreCase':
                    if (item.label.toLowerCase().indexOf(filterQuery.toLowerCase()) < 0) {
                        return item;
                    }

                    break;
                case 'contains':
                    if (item.label.indexOf(filterQuery) > -1) {
                        return item;
                    }

                    break;
                case 'containsIgnoreCase':
                    if (item.label.toLowerCase().indexOf(filterQuery.toLowerCase()) > -1) {
                        return item;
                    }

                    break;
                case 'equals':
                    if (item.label.localeCompare(filterQuery) === 0) {
                        return item;
                    }

                    break;
                case 'equalsIgnoreCase':
                    if (item.label.toLowerCase().localeCompare(filterQuery.toLowerCase()) === 0) {
                        return item;
                    }

                    break;
                case 'endsWith':
                    if (item.label.endsWith(filterQuery)) {
                        return item;
                    }

                    break;
                case 'endsWithIgnoreCase':
                    if (item.label.toLowerCase().endsWith(filterQuery.toLowerCase())) {
                        return item;
                    }

                    break;
            }

            return null;
        }

        /**
         * Returns the first MenuItem/MenuItemsGroup that is not disabled.
         */

    }, {
        key: '_getFirstEnabledChild',
        value: function _getFirstEnabledChild(parent) {
            var children = parent.children;

            for (var i = 0; i < children.length; i++) {
                if (this._isChildEnabled(children[i])) {
                    return children[i];
                }
            }
        }

        /**
         * Returns the last MenuItem/MenuItemsGroup that is not disabled.
         */

    }, {
        key: '_getLastEnabledChild',
        value: function _getLastEnabledChild(parent) {
            var children = parent.children;

            for (var i = children.length - 1; i >= 0; i--) {
                if (this._isChildEnabled(children[i])) {
                    return children[i];
                }
            }
        }

        /**
         * Returns the next MenuItem/MenuItemsGroup that is not disabled.
         */

    }, {
        key: '_getNextEnabledChild',
        value: function _getNextEnabledChild(child) {
            if (!child) {
                return;
            }

            while (child.nextElementSibling) {
                var nextElementSibling = child.nextElementSibling;

                if (this._isChildEnabled(nextElementSibling)) {
                    return nextElementSibling;
                }

                child = nextElementSibling;
            }
        }

        /**
         * Gets an item's offset from the top of the main container.
         */

    }, {
        key: '_getOffsetTop',
        value: function _getOffsetTop(target) {
            var offsetTop = target.offsetTop;

            while (target.offsetParent !== this.$.mainContainer) {
                target = target.offsetParent;
                offsetTop += target.offsetTop;
            }

            return offsetTop;
        }

        /**
         * Returns the previous MenuItem/MenuItemsGroup that is not disabled.
         */

    }, {
        key: '_getPreviousEnabledChild',
        value: function _getPreviousEnabledChild(child) {
            if (!child) {
                return;
            }

            while (child.previousElementSibling) {
                var previousElementSibling = child.previousElementSibling;

                if (this._isChildEnabled(previousElementSibling)) {
                    return previousElementSibling;
                }

                child = previousElementSibling;
            }
        }

        /**
         * Hamburger icon click handler.
         */

    }, {
        key: '_hamburgerIconClickHandler',
        value: function _hamburgerIconClickHandler(event, itemContainer) {
            if (event) {
                event.stopPropagation();
            }

            var that = this;

            if (itemContainer === undefined) {
                if (JQX.ListMenu && that instanceof JQX.ListMenu) {
                    itemContainer = that.$.view;
                } else {
                    itemContainer = that.$.mainContainer;
                }
            }

            if (that.disabled) {
                return;
            }

            if (!that._minimizedDropDownOpened) {
                that._positionDetection.placeOverlay();

                if (that.dropDownAppendTo !== null) {
                    var dropDownPosition = that.dropDownPosition,
                        menuBoundingRect = that.getBoundingClientRect(),
                        dropDownOffset = that._positionDetection.getDropDownOffset();

                    if (dropDownPosition.indexOf('right') !== -1 || dropDownPosition === 'auto') {
                        itemContainer.style.left = menuBoundingRect.left + dropDownOffset.x + 'px';
                        itemContainer.style.right = 'initial';
                    } else if (dropDownPosition.indexOf('left') !== -1) {
                        itemContainer.style.left = menuBoundingRect.right - itemContainer.offsetWidth + dropDownOffset.x + 'px';
                        itemContainer.style.right = 'initial';
                    }

                    if (dropDownPosition.indexOf('bottom') !== -1 || dropDownPosition.indexOf('overlay') !== -1 || dropDownPosition === 'auto') {
                        itemContainer.style.top = menuBoundingRect.bottom + dropDownOffset.y + 'px';
                    } else if (dropDownPosition.indexOf('top') !== -1) {
                        itemContainer.style.top = menuBoundingRect.top + dropDownOffset.y + 'px';
                    }
                }

                if (that._edgeMacFF) {
                    itemContainer.$.removeClass('not-in-view');
                }

                itemContainer.$.removeClass('jqx-visibility-hidden');
                that.$hamburgerIcon.addClass('jqx-close-button');
                that._minimizedDropDownOpened = true;

                that._browserBoundsDetection(itemContainer);
            } else {
                that._close();
            }
        }

        /**
         * Handles change to the "overflow" property.
         */

    }, {
        key: '_handleOverflowChange',
        value: function _handleOverflowChange() {
            var that = this;

            if ((that._minimized || that.dropDownAppendTo === null && !that.$mainContainer.hasClass('simple') && that.mode !== 'tree') && !(JQX.ListMenu && that instanceof JQX.ListMenu)) {
                return;
            }

            var overflow = that.overflow;
            var horizontal = void 0;

            if (that.mode === 'horizontal') {
                horizontal = true;
                that.$.mainContainer.scrollLeft = 0;
            } else {
                horizontal = false;
                that.$.mainContainer.scrollTop = 0;
            }

            if (overflow === 'hidden') {
                that.$mainContainer.removeClass('scroll-buttons-shown');
                that.$scrollButtonNear.addClass('jqx-hidden');
                that.$scrollButtonFar.addClass('jqx-hidden');
            } else {
                that.$.scrollButtonNear.disabled = that.disabled;
                that.$.scrollButtonFar.disabled = that.disabled;

                if (overflow === 'auto') {
                    that.$scrollButtonNear.addClass('jqx-hidden');
                    that.$scrollButtonFar.addClass('jqx-hidden');
                    that._checkOverflow(that.$.mainContainer, horizontal, [that.$.scrollButtonNear, that.$.scrollButtonFar]);
                } else {
                    that.$mainContainer.addClass('scroll-buttons-shown');
                    that.$mainContainer.removeClass('one-button-shown');
                    that.$scrollButtonNear.removeClass('jqx-hidden');
                    that.$scrollButtonFar.removeClass('jqx-hidden');
                    that._updateScrollButtonVisibility(that.$.mainContainer, horizontal, [that.$.scrollButtonNear, that.$.scrollButtonFar]);
                }
            }
        }

        /**
         * Hides main container scroll buttons.
         */

    }, {
        key: '_hideMainContainerScrollButtons',
        value: function _hideMainContainerScrollButtons() {
            var that = this;

            that.$scrollButtonNear.addClass('jqx-hidden');
            that.$scrollButtonFar.addClass('jqx-hidden');
            that.$mainContainer.removeClass('scroll-buttons-shown');
            that.$mainContainer.removeClass('one-button-shown');
        }

        /**
         * Hovers an item via the keyboard.
         */

    }, {
        key: '_hoverViaKeyboard',
        value: function _hoverViaKeyboard(item) {
            if (!item) {
                return;
            }

            var that = this;

            item.$.addClass('focus');
            item.setAttribute('focus', '');

            that._focusedViaKeyboard = item;
            that._ensureVisible(item);
        }

        /**
         * Checks if all items in a tree branch are expanded.
         */

    }, {
        key: '_isBranchExpanded',
        value: function _isBranchExpanded(item) {
            var that = this;

            if (that.mode !== 'tree') {
                return true;
            }

            var expanded = true;

            while (item.parentItem) {
                expanded = expanded && item.parentItem.expanded;
                item = item.parentItem;
            }

            return expanded;
        }

        /**
         * Checks if an item can be focused.
         */

    }, {
        key: '_isChildEnabled',
        value: function _isChildEnabled(child) {
            return !(child.disabled || child.templateApplied || child.hidden || child instanceof HTMLDivElement || child.offsetHeight === 0);
        }

        /**
         * Checks if a container is opened.
         */

    }, {
        key: '_isContainerOpened',
        value: function _isContainerOpened(level, container) {
            var that = this;

            if (that.mode === 'tree' || that._minimized) {
                if (!that._openedContainers[level]) {
                    that._openedContainers[level] = [];
                }

                return that._openedContainers[level].indexOf(container) !== -1;
            } else {
                return that._openedContainers[level] === container;
            }
        }

        /**
         * Keydown event handler.
         */

    }, {
        key: '_keydownHandler',
        value: function _keydownHandler(event) {
            var that = this,
                key = event.key;

            if (document.activeElement !== that || ['ArrowDown', 'ArrowLeft', 'ArrowRight', 'ArrowUp', 'End', 'Enter', 'Escape', 'Home', ' '].indexOf(key) === -1 || that.disabled) {
                return;
            }

            event.preventDefault();

            var mode = that.mode;

            if (mode === 'tree' || that._minimized) {
                that._keydownHandlerTreeMode(key);
                return;
            }

            var dropDownPosition = that.dropDownPosition,
                leftOrientation = dropDownPosition.indexOf('left') !== -1,
                topOrientation = dropDownPosition === 'top-left' || dropDownPosition === 'top-right',
                openedContainers = that._openedContainers;
            var lastOpenedContainer = that.$.mainContainer,
                level = 1,
                focusedItem = void 0;

            for (var i = openedContainers.length - 1; i >= 0; i--) {
                if (openedContainers[i] !== undefined) {
                    lastOpenedContainer = openedContainers[i];
                    level = lastOpenedContainer.level;
                    lastOpenedContainer = lastOpenedContainer.itemContainer;
                    break;
                }
            }

            focusedItem = lastOpenedContainer.querySelector('[focus][level="' + level + '"]');

            switch (key) {
                case 'ArrowDown':
                    if (level === 1) {
                        if (mode === 'horizontal' && !topOrientation) {
                            that._levelOneOpenDropDown(focusedItem);
                        } else if (mode !== 'horizontal') {
                            that._levelOneNavigate('_getFirstEnabledChild', focusedItem, lastOpenedContainer);
                        }
                    } else {
                        that._navigate('_getNextEnabledChild', focusedItem, lastOpenedContainer);
                    }

                    break;
                case 'ArrowLeft':
                    if (!leftOrientation) {
                        that._arrowLeftHandler(level, mode, focusedItem, lastOpenedContainer);
                    } else {
                        if (level === 1) {
                            if (mode === 'horizontal') {
                                that._levelOneNavigate('_getLastEnabledChild', focusedItem, lastOpenedContainer);
                            } else {
                                that._levelOneOpenDropDown(focusedItem);
                            }
                        } else {
                            if (focusedItem instanceof JQX.MenuItemsGroup) {
                                that._selectionHandler({ target: focusedItem, isTrusted: true });
                            } else {
                                that._levelOneNavigateFromLowerLevel('_getPreviousEnabledChild', focusedItem);
                            }
                        }
                    }
                    break;
                case 'ArrowRight':
                    if (!leftOrientation) {
                        that._arrowRightHandler(level, mode, focusedItem, lastOpenedContainer);
                    } else {
                        if (level === 1) {
                            if (mode === 'horizontal') {
                                that._levelOneNavigate('_getFirstEnabledChild', focusedItem, lastOpenedContainer);
                            }
                        } else {
                            if (level === 2) {
                                that._levelOneNavigateFromLowerLevel('_getNextEnabledChild', focusedItem);
                            } else {
                                that._escapeHandler(focusedItem, level, lastOpenedContainer);
                            }
                        }
                    }
                    break;
                case 'ArrowUp':
                    if (level === 1) {
                        if (mode === 'horizontal' && topOrientation) {
                            that._levelOneOpenDropDown(focusedItem);
                        } else if (mode !== 'horizontal') {
                            that._levelOneNavigate('_getLastEnabledChild', focusedItem, lastOpenedContainer);
                        }
                    } else {
                        that._navigate('_getPreviousEnabledChild', focusedItem, lastOpenedContainer);
                    }

                    break;
                case 'End':
                case 'Home':
                    {
                        var enabledChild = key === 'End' ? that._getLastEnabledChild(lastOpenedContainer) : that._getFirstEnabledChild(lastOpenedContainer);

                        if (!enabledChild || focusedItem === enabledChild) {
                            return;
                        }

                        if (focusedItem) {
                            focusedItem.$.removeClass('focus');
                            focusedItem.removeAttribute('focus');
                        }

                        that._hoverViaKeyboard(enabledChild);
                        break;
                    }
                case 'Enter':
                    if (focusedItem) {
                        that._selectionHandler({ target: focusedItem, isTrusted: true });
                    }

                    break;
                case 'Escape':
                    if (level > 1) {
                        if (level === 2) {
                            that._positionDetection.removeOverlay();
                        }

                        that._escapeHandler(focusedItem, level, lastOpenedContainer);
                    } else if (mode === 'dropDown' && that.opened) {
                        that.close({ trigger: 'interaction', target: 'Escape' });
                    }

                    break;
                case ' ':
                    if (focusedItem) {
                        that._toggleItem(focusedItem);
                    }

                    break;
            }
        }

        /**
         * Keydown event handler.
         */

    }, {
        key: '_keydownHandlerTreeMode',
        value: function _keydownHandlerTreeMode(key) {
            var that = this,
                menuItems = Array.from(that.$.mainContainer.querySelectorAll('jqx-menu-item, jqx-menu-items-group')),
                focusedItem = that.$.mainContainer.getElementsByClassName('focus')[0];

            function canItemBefocused(item) {
                var level = item.level;

                return item.disabled === false && item.templateApplied !== true && (level === 1 || level > 1 && that._isContainerOpened(level, item.parentElement.container) && item.getBoundingClientRect().height > 0);
            }

            function moveDown(startIndex) {
                for (var i = startIndex; i < menuItems.length; i++) {
                    var currentItem = menuItems[i];

                    if (canItemBefocused(currentItem)) {
                        if (focusedItem) {
                            if (focusedItem === currentItem) {
                                break;
                            }

                            focusedItem.$.removeClass('focus');
                            focusedItem.removeAttribute('focus');
                        }

                        that._hoverViaKeyboard(currentItem);
                        break;
                    }
                }
            }

            function moveUp(startIndex) {
                for (var i = startIndex; i >= 0; i--) {
                    var currentItem = menuItems[i];

                    if (canItemBefocused(currentItem)) {
                        if (focusedItem) {
                            if (focusedItem === currentItem) {
                                break;
                            }

                            focusedItem.$.removeClass('focus');
                            focusedItem.removeAttribute('focus');
                        }

                        that._hoverViaKeyboard(currentItem);
                        break;
                    }
                }
            }

            function navigateToParentItem() {
                if (focusedItem.level > 1) {
                    focusedItem.$.removeClass('focus');
                    focusedItem.removeAttribute('focus');
                    that._hoverViaKeyboard(focusedItem.parentItem);
                }
            }

            var startIndex = void 0;

            switch (key) {
                case 'ArrowDown':
                    if (focusedItem) {
                        startIndex = menuItems.indexOf(focusedItem) + 1;
                    } else {
                        startIndex = 0;
                    }

                    moveDown(startIndex);
                    break;
                case 'ArrowLeft':
                    if (!focusedItem) {
                        return;
                    }

                    if (focusedItem instanceof JQX.MenuItem) {
                        navigateToParentItem();
                    } else {
                        if (that._isContainerOpened(focusedItem.level + 1, focusedItem.container)) {
                            that._closeSubContainers(focusedItem.level + 1, focusedItem.container, true, true);
                            return;
                        }

                        navigateToParentItem();
                    }
                    break;
                case 'ArrowRight':
                    if (!focusedItem || focusedItem instanceof JQX.MenuItem) {
                        return;
                    }

                    if (that._isContainerOpened(focusedItem.level + 1, focusedItem.container)) {
                        focusedItem.$.removeClass('focus');
                        focusedItem.removeAttribute('focus');
                        that._hoverViaKeyboard(that._getFirstEnabledChild(focusedItem.itemContainer));
                    } else {
                        that._selectionHandler({ target: focusedItem, type: 'keydown', isTrusted: true }, focusedItem);
                    }

                    break;
                case 'ArrowUp':
                    if (focusedItem) {
                        startIndex = menuItems.indexOf(focusedItem) - 1;
                    } else {
                        startIndex = menuItems.length - 1;
                    }

                    moveUp(startIndex);
                    break;
                case 'End':
                    moveUp(menuItems.length - 1);
                    break;
                case 'Enter':
                    if (that._minimized && !that._minimizedDropDownOpened) {
                        that._hamburgerIconClickHandler(undefined, that.$.mainContainer);
                    } else if (focusedItem) {
                        that._selectionHandler({ target: focusedItem, type: 'keydown', isTrusted: true });
                    }

                    break;
                case 'Escape':
                    if (that._minimized && that._minimizedDropDownOpened) {
                        that._close();
                    }

                    break;
                case 'Home':
                    moveDown(0);
                    break;
                case ' ':
                    if (focusedItem) {
                        that._toggleItem(focusedItem);
                    }

                    break;
            }
        }

        /**
         * Navigates through first-level items.
         */

    }, {
        key: '_levelOneNavigate',
        value: function _levelOneNavigate(method, focusedItem, lastOpenedContainer) {
            var that = this;

            if (!focusedItem) {
                var enabledChild = that[method](lastOpenedContainer);

                if (enabledChild) {
                    that._hoverViaKeyboard(enabledChild);
                }
            } else {
                if (method === '_getLastEnabledChild') {
                    that._navigate('_getPreviousEnabledChild', focusedItem, lastOpenedContainer);
                } else {
                    that._navigate('_getNextEnabledChild', focusedItem, lastOpenedContainer);
                }
            }
        }

        /**
         * Navigates to a first-level item.
         */

    }, {
        key: '_levelOneNavigateFromLowerLevel',
        value: function _levelOneNavigateFromLowerLevel(method, focusedItem) {
            var that = this,
                firstLevelItem = that[method](that._openedContainers[2].menuItemsGroup);

            if (firstLevelItem) {
                if (focusedItem) {
                    focusedItem.$.removeClass('focus');
                    focusedItem.removeAttribute('focus');
                }

                that._closeSubContainers(2);

                if (firstLevelItem instanceof JQX.MenuItemsGroup) {
                    that._selectionHandler({ target: firstLevelItem, isTrusted: true });
                } else {
                    that._hoverViaKeyboard(firstLevelItem);
                }
            }
        }

        /**
         * Opens first-level dropdown containers via the keyboard.
         */

    }, {
        key: '_levelOneOpenDropDown',
        value: function _levelOneOpenDropDown(focusedItem) {
            if (focusedItem && focusedItem instanceof JQX.MenuItemsGroup) {
                this._selectionHandler({ target: focusedItem, isTrusted: true });
            }
        }

        /**
         * External main container handler.
         */

    }, {
        key: '_mainContainerHandler',
        value: function _mainContainerHandler(event) {
            var that = this;

            if (!that._minimized || that.dropDownAppendTo === null) {
                return;
            }

            switch (event.type) {
                case 'click':
                    that._selectionHandler(event);
                    break;
                case 'mouseleave':
                    that._mouseleaveHandler(event);
                    break;
                case 'mouseout':
                    that._mouseoutMouseoverHandler(event);
                    break;
                case 'mouseover':
                    that._mouseoutMouseoverHandler(event);
                    break;
            }
        }

        /**
         * jqx-menu-item selection handler.
         */

    }, {
        key: '_menuItemSelectionHandler',
        value: function _menuItemSelectionHandler(closestItem, event) {
            var that = this;

            function focus() {
                if (that.enableShadowDOM && (that.shadowRoot.activeElement || document.activeElement) !== that && that.dropDownAppendTo !== null && event.type === 'click' && !that.shadowRoot.contains(closestItem)) {
                    that.focus();
                } else if (document.activeElement !== that && that.dropDownAppendTo !== null && event.type === 'click' && !that.contains(closestItem)) {
                    that.focus();
                }
            }

            if (closestItem.disabled || closestItem.templateApplied) {
                focus();
                return;
            }

            if (!that._toggleItem(closestItem)) {
                that.$.fireEvent('itemClick', { 'item': closestItem, 'label': closestItem.label, 'value': closestItem.value });

                if (that.mode !== 'tree') {
                    that._close();

                    if (that.mode === 'dropDown') {
                        that._ripple(closestItem, event);
                        that.close({ trigger: 'interaction', target: closestItem });
                        return;
                    }
                }
            }

            that._ripple(closestItem, event);
            focus();
        }

        /**
         * jqx-menu-items-group selection handler.
         */

    }, {
        key: '_menuItemsGroupSelectionHandler',
        value: function _menuItemsGroupSelectionHandler(closestItemsGroup, event, fireEvent) {
            var that = this,
                mode = that.mode,
                container = closestItemsGroup.container,
                level = container.level,
                defaultView = mode !== 'tree' && !that._minimized;

            if (that._treeAnimationInProgress === container) {
                return;
            }

            that._discardKeyboardHover();

            if (document.activeElement !== that && that.dropDownAppendTo !== null && event.type === 'click' && !that.contains(event.target)) {
                that.focus();
            }

            if (event.type === 'click' && (!event.target.classList.contains('jqx-' + that._element + '-items-group-arrow') && that._toggleItem(closestItemsGroup) || that.selectionMode === 'mouseenter' && mode !== 'tree' && !that._minimized)) {
                return;
            }

            var animation = that.hasAnimation;

            if (that._isContainerOpened(level, container)) {
                that._closeSubContainers(level, container, true, fireEvent !== false);

                if (defaultView && closestItemsGroup.hasAttribute('focus')) {
                    that._focusedViaKeyboard = closestItemsGroup;
                }
            } else {
                var expandingEvent = that.$.fireEvent('expanding', {
                    'item': closestItemsGroup,
                    'label': closestItemsGroup.label,
                    'path': closestItemsGroup.path,
                    'value': closestItemsGroup.value,
                    'children': closestItemsGroup.itemContainer.children
                });

                if (expandingEvent.defaultPrevented) {
                    return;
                }

                that._positionDetection.placeOverlay();

                if (defaultView) {
                    that._closeSubContainers(level);
                }

                if (animation && !defaultView) {
                    if (event.type !== 'expand') {
                        that._ensureVisibleOnTransitionend = closestItemsGroup;
                    }

                    that._expandSection(container);
                }

                if (that._edgeMacFF && level === 2 && defaultView) {
                    container.$.removeClass('not-in-view');
                }

                container.$.removeClass('jqx-visibility-hidden');

                if (defaultView || event.type !== 'expand') {
                    if (!defaultView) {
                        var currentFocus = that.$.mainContainer.getElementsByClassName('focus')[0];

                        if (currentFocus) {
                            currentFocus.$.removeClass('focus');
                            currentFocus.removeAttribute('focus');
                        }

                        that._focusedViaKeyboard = closestItemsGroup;
                    } else if (event.type === 'keydown') {
                        that._focusedViaKeyboard = closestItemsGroup;
                    }

                    closestItemsGroup.$.addClass('focus');
                    closestItemsGroup.setAttribute('focus', '');
                }

                closestItemsGroup.$.addClass('jqx-' + that._element + '-items-group-opened');
                closestItemsGroup.$.addClass('jqx-' + that._element + '-items-group-expanded');

                that._addOpenedContainer(level, container);

                if (defaultView) {
                    that._ensureVisible(closestItemsGroup);

                    if (closestItemsGroup.level > 1 && closestItemsGroup.parentElement.dropDownHeightSet) {
                        var dropDownPosition = that.dropDownPosition,
                            top = closestItemsGroup.getBoundingClientRect().top - closestItemsGroup.parentElement.container.getBoundingClientRect().top;

                        if (dropDownPosition.indexOf('bottom') !== -1 || dropDownPosition === 'auto') {
                            container.style.top = top + 'px';
                        } else if (dropDownPosition.indexOf('top') !== -1) {
                            container.style.top = top + closestItemsGroup.offsetHeight + 'px';
                        } else {
                            container.style.top = top + closestItemsGroup.offsetHeight / 2 + 'px';
                        }
                    }

                    if (container.itemContainer.checkOverflow && container.itemContainer.dropDownHeightSet) {
                        that._checkOverflow(container.itemContainer, false, [container.children[0], container.children[2]]);
                        delete container.itemContainer.checkOverflow;
                    }
                }

                that._positionExternalContainer(container, closestItemsGroup);

                if (mode !== 'tree' && !that._minimized) {
                    that._browserBoundsDetection(container);
                } else if (!animation) {
                    that._browserBoundsDetection(that.$.mainContainer);
                }

                if (event.type === undefined) {
                    that._hoverViaKeyboard(that._getFirstEnabledChild(closestItemsGroup.itemContainer));
                }

                if (fireEvent !== false) {
                    that.$.fireEvent('expand', {
                        'item': closestItemsGroup,
                        'label': closestItemsGroup.label,
                        'path': closestItemsGroup.path,
                        'value': closestItemsGroup.value,
                        'children': closestItemsGroup.itemContainer.children
                    });
                }
            }

            if (defaultView) {
                that._ripple(closestItemsGroup, event);
            } else if (mode === 'tree' && !animation) {
                that._checkOverflow(that.$.mainContainer, false, [that.$.scrollButtonNear, that.$.scrollButtonFar]);

                if (!that._minimized && event.type !== 'expand') {
                    that._ensureVisible(closestItemsGroup);
                }
            }
        }

        /**
         * Mouseenter handler.
         */

    }, {
        key: '_mouseenterHandler',
        value: function _mouseenterHandler() {
            var that = this;

            if (that.autoFocusOnMouseenter && document.activeElement !== that) {
                that.focus();
            }
        }

        /**
         * Mouseleave handler.
         */

    }, {
        key: '_mouseleaveHandler',
        value: function _mouseleaveHandler(event) {
            var that = this;

            if (that.selectionMode === 'mouseenter' && that.mode !== 'tree' && !that._minimized) {
                if (that.dropDownAppendTo !== null && event.relatedTarget) {
                    if (that.contains(event.target)) {
                        var externalContainer = event.relatedTarget.closest('.jqx-menu-drop-down');

                        if (externalContainer && externalContainer.ownerElement === that) {
                            return;
                        }
                    } else if (that.contains(event.relatedTarget)) {
                        return;
                    }
                }

                that._isElementHovered = false;

                that._autoCloseTimeout = setTimeout(function () {
                    var context = that.context;

                    clearTimeout(that._autoCloseTimeout);

                    if (!that._isElementHovered) {
                        that.context = that;
                        that._close();
                        that.context = context;
                    }
                }, that.autoCloseDelay);
            }
        }

        /**
         * Mouseout/mouseover handler.
         */

    }, {
        key: '_mouseoutMouseoverHandler',
        value: function _mouseoutMouseoverHandler(event) {
            var that = this;

            if (that.disabled || that.displayLoadingIndicator) {
                return;
            }

            var closestItem = event.target.closest('jqx-menu-item') || event.target.closest('jqx-menu-items-group');

            if (that.enableShadowDOM) {
                closestItem = event.composedPath()[0].closest('jqx-menu-item') || event.composedPath()[0].closest('jqx-menu-items-group') || closestItem;
            }

            if (event.type === 'mouseover') {
                that._isElementHovered = true;
            }

            if (closestItem === null || closestItem.disabled || closestItem.templateApplied) {
                return;
            }

            if ((that.mode === 'tree' || that._minimized) && closestItem.hasAttribute('focus') && event.relatedTarget && (event.target.parentElement === event.relatedTarget || event.relatedTarget.parentElement === event.target)) {
                return;
            }

            that._discardKeyboardHover(false);

            if (event.type === 'mouseover') {
                if (that.selectionMode === 'mouseenter' && that.mode !== 'tree' && !that._minimized) {
                    if (closestItem instanceof JQX.MenuItemsGroup && !closestItem.hasAttribute('hover')) {
                        that._selectionHandler(event, closestItem);
                    } else if (closestItem instanceof JQX.MenuItem) {
                        that._closeSubContainers(closestItem.level + 1);
                    }
                }

                var closestDropDown = event.target.closest('.jqx-menu-drop-down');

                if (!closestDropDown || closestDropDown && !closestItem.contains(closestDropDown)) {
                    closestItem.$.addClass('hover');
                    closestItem.setAttribute('hover', '');
                    that._discardKeyboardHover(true);
                }
            } else {
                if (that.mode !== 'tree' && !that._minimized) {
                    if (that.selectionMode === 'mouseenter' && event.relatedTarget === that.$.mainContainer) {
                        that._close();
                    }

                    if (closestItem instanceof JQX.MenuItemsGroup && closestItem.container && !closestItem.container.$.hasClass('jqx-visibility-hidden')) {
                        return;
                    }
                }

                closestItem.$.removeClass('hover');
                closestItem.removeAttribute('hover');
            }
        }

        /**
         * Moves dropdowns to external container.
         */

    }, {
        key: '_moveDropDownsToExternalContainer',
        value: function _moveDropDownsToExternalContainer() {
            var that = this;

            for (var i = 0; i < that._containersInBody.length; i++) {
                var container = that._containersInBody[i];

                that._dropDownParent.appendChild(container);

                container.$.listen('click', that._selectionHandler.bind(that));
                container.$.listen('mouseleave', that._mouseleaveHandler.bind(that));
                container.$.listen('mouseout', that._mouseoutMouseoverHandler.bind(that));
                container.$.listen('mouseover', that._mouseoutMouseoverHandler.bind(that));
            }

            for (var _i7 = 0; _i7 < that._containers.length; _i7++) {
                var _container3 = that._containers[_i7];

                _container3.ownerElement = that;

                if (that.theme !== '') {
                    _container3.classList.add(that.theme);
                }

                _container3.classList.add('jqx-drop-down-repositioned');
                _container3.setAttribute('mode', that.mode);
                _container3.setAttribute('drop-down-position', that.dropDownPosition);

                if (that.checkboxes) {
                    _container3.setAttribute('checkboxes', '');
                }
            }
        }

        /**
         * Moves dropdowns to the Menu.
         */

    }, {
        key: '_moveDropDownsToMenu',
        value: function _moveDropDownsToMenu() {
            var that = this;

            for (var i = 0; i < that._containersInBody.length; i++) {
                var container = that._containersInBody[i];

                container.$.unlisten('click');
                container.$.unlisten('mouseleave');
                container.$.unlisten('mouseout');
                container.$.unlisten('mouseover');

                container.style.left = '';
                container.style.right = '';
                container.style.top = '';
                container.style.marginLeft = '';
                container.style.marginTop = '';

                container.menuItemsGroup.appendChild(container);
            }

            for (var _i8 = 0; _i8 < that._containers.length; _i8++) {
                var _container4 = that._containers[_i8];

                if (that.theme !== '') {
                    _container4.classList.remove(that.theme);
                }

                _container4.classList.remove('jqx-drop-down-repositioned');
                _container4.removeAttribute('mode');
                _container4.removeAttribute('drop-down-position');
                _container4.removeAttribute('checkboxes');
            }
        }

        /**
         * Navigates to an item via the keyboard.
         */

    }, {
        key: '_navigate',
        value: function _navigate(method, focusedItem, lastOpenedContainer) {
            var that = this;

            if (!focusedItem) {
                if (method === '_getNextEnabledChild') {
                    that._hoverViaKeyboard(that._getFirstEnabledChild(lastOpenedContainer));
                } else {
                    that._hoverViaKeyboard(that._getLastEnabledChild(lastOpenedContainer));
                }

                return;
            }

            var navigateToChild = that[method](focusedItem);

            if (navigateToChild) {
                focusedItem.$.removeClass('focus');
                focusedItem.removeAttribute('focus');

                that._hoverViaKeyboard(navigateToChild);
            }
        }

        /**
         * Positions an external dropdown container.
         */

    }, {
        key: '_positionExternalContainer',
        value: function _positionExternalContainer(container, menuItemsGroup) {
            var that = this;

            if (that.dropDownAppendTo === null || container.level !== 2) {
                return;
            }

            var dropDownPosition = that.dropDownPosition,
                mode = that.mode,
                menuItemsGroupRect = menuItemsGroup.getBoundingClientRect(),
                dropDownOffset = that._positionDetection.getDropDownOffset(),
                top = menuItemsGroupRect.top + dropDownOffset.y,
                bottom = menuItemsGroupRect.bottom + dropDownOffset.y;
            var left = menuItemsGroupRect.left + dropDownOffset.x;

            container.style.left = '';
            container.style.right = '';
            container.style.top = '';

            if (dropDownPosition.indexOf('left') !== -1) {
                left -= container.offsetWidth;

                if (mode === 'horizontal' || dropDownPosition === 'overlay-left') {
                    left += menuItemsGroupRect.width;
                }

                container.style.left = left + 'px';
                container.style.right = 'initial';
            } else if (mode === 'horizontal' || dropDownPosition === 'overlay-right') {
                container.style.left = left + 'px';
            } else {
                container.style.left = left + menuItemsGroupRect.width + 'px';
            }

            switch (dropDownPosition) {
                case 'bottom-right':
                case 'bottom-left':
                case 'auto':
                    if (mode === 'horizontal') {
                        container.style.top = bottom + 'px';
                    } else {
                        container.style.top = top + 'px';
                    }

                    break;
                case 'top-right':
                case 'top-left':
                    if (mode === 'horizontal') {
                        container.style.top = top - container.offsetHeight + 'px';
                    } else {
                        container.style.top = bottom - container.offsetHeight + 'px';
                    }

                    break;
                case 'overlay-right':
                case 'overlay-left':
                    container.style.top = top + menuItemsGroupRect.height / 2 + 'px';
                    break;
            }
        }

        /**
         * Processes "dataSource" object.
         */

    }, {
        key: '_processDataSource',
        value: function _processDataSource() {
            var that = this,
                dataSource = that.dataSource,
                displayMember = that.displayMember,
                itemsMember = that.itemsMember,
                valueMember = that.valueMember;

            function processItem(item, parent) {
                var element = void 0;

                if (Array.isArray(item[itemsMember]) && item[itemsMember].length > 0) {
                    element = document.createElement('jqx-' + that._element + '-items-group');

                    if (item.checkable === true) {
                        element.set('checkable', true);
                    }

                    if (item.checkMode === 'checkbox' || item.checkMode === 'radioButton') {
                        element.set('checkMode', item.checkMode);
                    }

                    if (item.dropDownHeight) {
                        element.set('dropDownHeight', item.dropDownHeight);
                    }

                    if (item.expanded === true && that.mode === 'tree') {
                        element.set('expanded', true);
                    }

                    for (var i = 0; i < item[itemsMember].length; i++) {
                        processItem(item[itemsMember][i], element);
                    }
                } else {
                    element = document.createElement('jqx-' + that._element + '-item');

                    if (item.shortcut !== undefined) {
                        element.set('shortcut', item.shortcut);
                    }

                    if (item.customAttribute) {
                        element.setAttribute(item.customAttribute, '');
                    }
                }

                if (item.checked === true) {
                    element.set('checked', true);
                }

                if (item.disabled === true) {
                    element.set('disabled', true);
                }

                if (item[displayMember] !== undefined) {
                    element.set('label', item[displayMember]);
                }

                if (item.selected === true) {
                    element.set('selected', true);
                }

                if (item.separator === true) {
                    element.set('separator', true);
                }

                if (item[valueMember] !== undefined) {
                    element.set('value', item[valueMember]);
                }

                parent.appendChild(element);
            }

            that.$.mainContainer.innerHTML = '';

            for (var i = 0; i < dataSource.length; i++) {
                var currentItem = dataSource[i];

                processItem(currentItem, that.$.mainContainer);
            }

            that._processHTML(that.$.mainContainer, 1);
        }

        /**
         * Processes initial HTML structure.
         */

    }, {
        key: '_processHTML',
        value: function _processHTML(item, level, autoSort) {
            var that = this;
            var container = void 0,
                itemContainer = void 0;

            if (level > 1) {
                container = that._createMenuItemsGroupContainer(item, level);
                itemContainer = container.itemContainer;

                if ((item.expanded || item.hasAttribute('expanded')) && that.mode === 'tree') {
                    that._menuItemsGroupsToExpand.push(item);
                } else {
                    item.set('expanded', false);
                    item.removeAttribute('expanded');
                }
            }

            var itemChildren = Array.from(item.children),
                checkedChildren = [],
                itemFragment = document.createDocumentFragment();
            var pathOffset = 0;

            for (var i = 0; i < itemChildren.length; i++) {
                if (level > 1 && i === 0) {
                    pathOffset++;
                    continue;
                }

                var currentItem = itemChildren[i];

                if (!(currentItem instanceof JQX.MenuItem || currentItem instanceof JQX.MenuItemsGroup)) {
                    currentItem.parentElement.removeChild(currentItem);
                    pathOffset++;
                    continue;
                }

                that._createItemHTMLStructure(currentItem, level, item, i - pathOffset);

                if (currentItem.checked || currentItem.hasAttribute('checked')) {
                    if (!currentItem.disabled && !currentItem.hasAttribute('disabled') && !currentItem.templateApplied) {
                        checkedChildren.push(currentItem);
                    } else {
                        currentItem.set('checked', false);
                        currentItem.removeAttribute('checked');
                    }
                }

                if (level > 1) {
                    itemFragment.appendChild(currentItem);
                }

                if (currentItem instanceof JQX.MenuItemsGroup) {
                    that._processHTML(currentItem, level + 1);
                }
            }

            if (level > 1) {
                itemContainer.appendChild(itemFragment);
                item.container = container;
                item.itemContainer = itemContainer;

                if (item instanceof JQX.MenuItemsGroup) {
                    var arrowElement = document.createElement('div');

                    arrowElement.className = 'jqx-' + that._element + '-items-group-arrow';
                    that._setArrowDirection(arrowElement, level);

                    item.firstElementChild.appendChild(arrowElement);
                }

                that._containers.push(container);

                if (level === 2) {
                    that._containersInBody.push(container);

                    if (that._edgeMacFF) {
                        container.addEventListener('transitionend', function (event) {
                            if (event.target === this && this.$.hasClass('jqx-visibility-hidden')) {
                                this.style.left = '';
                                this.style.top = '';
                                this.$.addClass('not-in-view');
                            }
                        });
                    }
                }

                if (that.dropDownAppendTo === null || that.mode === 'tree' || that._minimized) {
                    item.appendChild(container);
                } else {
                    container.ownerElement = that;

                    container.classList.add('jqx-drop-down-repositioned');
                    container.setAttribute('mode', that.mode);
                    container.setAttribute('drop-down-position', that.dropDownPosition);

                    if (that.checkboxes) {
                        container.setAttribute('checkboxes', '');
                    }

                    if (that.theme !== '') {
                        container.$.addClass(that.theme);
                    }

                    container.setAttribute('animation', that.animation);

                    if (level === 2) {
                        that._dropDownParent.appendChild(container);

                        container.$.listen('click', that._selectionHandler.bind(that));
                        container.$.listen('mouseleave', that._mouseleaveHandler.bind(that));
                        container.$.listen('mouseout', that._mouseoutMouseoverHandler.bind(that));
                        container.$.listen('mouseover', that._mouseoutMouseoverHandler.bind(that));
                    } else {
                        item.appendChild(container);
                    }
                }
            }

            that._validateRadioButtonSelection(item, level, checkedChildren);

            if (that._sortItems && autoSort !== false) {
                that._sortItems(item);
            }
        }

        /**
         * Processes initial HTML structure with <ul> element.
         */

    }, {
        key: '_processUList',
        value: function _processUList() {
            var that = this,
                menuItemsGroupOpeningTagRegex = new RegExp(/<li>(.(?!<\/li>)|\n)*?<ul>/),
                menuItemsGroupClosingTagRegex = new RegExp(/<\/ul>(.|\n)*?<\/li>/);
            var innerHTML = that.$.mainContainer.firstElementChild.innerHTML;

            innerHTML = innerHTML.replace(/\r?\n|\r/g, '');
            innerHTML = innerHTML.replace(/<li(.|\n)*?>/g, '<li>');
            innerHTML = innerHTML.replace(/<li><\/li>/g, '<li> </li>');
            innerHTML = innerHTML.replace(/<ul(.|\n)*?>/g, '<ul>');

            while (menuItemsGroupOpeningTagRegex.test(innerHTML)) {
                var match = menuItemsGroupOpeningTagRegex.exec(innerHTML),
                    content = '<jqx-' + that._element + '-items-group>' + match[0].slice(4, match[0].length - 4);

                innerHTML = innerHTML.replace(match[0], content);
            }

            while (menuItemsGroupClosingTagRegex.test(innerHTML)) {
                var _match = menuItemsGroupClosingTagRegex.exec(innerHTML),
                    _content = '</jqx-' + that._element + '-items-group>';

                innerHTML = innerHTML.replace(_match[0], _content);
            }

            innerHTML = innerHTML.replace(/li>/g, 'jqx-' + that._element + '-item>');

            that.$.mainContainer.innerHTML = innerHTML;
        }

        /**
         * Refreshes the "_containers" and "_containersFixedHeight" arrays.
         */

    }, {
        key: '_refreshContainersArrays',
        value: function _refreshContainersArrays() {
            var that = this;

            for (var i = that._containers.length - 1; i >= 0; i--) {
                var container = that._containers[i];

                if (!document.body.contains(container)) {
                    that._containers.splice(i, 1);

                    var index = that._containersFixedHeight.indexOf(container);

                    if (index > -1) {
                        that._containersFixedHeight.splice(index, 1);
                        that._additionalScrollButtons.splice(index, 1);
                    }
                }
            }

            that._checkContainersLength();
        }

        /**
         * Refreshes numeric item paths.
         */

    }, {
        key: '_refreshItemPaths',
        value: function _refreshItemPaths(item, firstLevel, getChildren, resetOriginalIndex) {
            var that = this;
            var container = void 0;

            if (firstLevel) {
                container = item;
            } else {
                container = item.container.itemContainer;
            }

            var children = getChildren ? getChildren(item) : container.children;

            for (var i = 0; i < children.length; i++) {
                var currentItem = children[i];
                var currentItemPath = void 0;

                if (resetOriginalIndex) {
                    currentItem.originalIndex = i;
                }

                if (!firstLevel) {
                    currentItemPath = item.path + '.' + i;
                } else {
                    currentItemPath = '' + i;
                }

                currentItem.path = currentItemPath;
                that._menuItems[currentItemPath] = currentItem;

                if (currentItem instanceof JQX.MenuItemsGroup) {
                    that._refreshItemPaths(currentItem, undefined, getChildren, resetOriginalIndex);
                }
            }
        }

        /**
         * Removes fixed heights of containers.
         */

    }, {
        key: '_removeContainerFixedHeight',
        value: function _removeContainerFixedHeight() {
            var that = this;

            for (var i = 0; i < that._containersFixedHeight.length; i++) {
                var container = that._containersFixedHeight[i];

                container.style.height = '';
                container.itemContainer.$.removeClass('scroll-buttons-shown');
                container.itemContainer.$.removeClass('one-button-shown');
                container.children[0].$.addClass('jqx-hidden');
                container.children[2].$.addClass('jqx-hidden');
                container.itemContainer.checkOverflow = true;
            }
        }

        /**
         * Removes containers added to the body or a custom external element.
         */

    }, {
        key: '_removeContainersInBody',
        value: function _removeContainersInBody() {
            var that = this;

            if (that.dropDownAppendTo !== null && !that._minimized) {
                for (var i = 0; i < that._containersInBody.length; i++) {
                    that._dropDownParent.removeChild(that._containersInBody[i]);
                }
            }
        }

        /**
         * Changes the parent of a Menu in 'dropDown' mode.
         */

    }, {
        key: '_reparentMenu',
        value: function _reparentMenu(dynamicChange, oldDropDownParent) {
            var that = this;

            if (that.mode !== 'dropDown' || that._dropDownParent === null && !dynamicChange || that._dropDownParent === that.parentElement) {
                return;
            }

            if (!dynamicChange || oldDropDownParent === null) {
                that._positionRelativeTo = that.parentElement;
            } else if (that._dropDownParent === null) {
                that._positionRelativeTo.appendChild(that);
                that._positionRelativeTo = null;
                return;
            }

            that._dropDownParent.appendChild(that);
        }

        /**
         * Resize handler.
         */

    }, {
        key: '_resizeHandler',
        value: function _resizeHandler() {
            var that = this;

            if (that._suppressResizeHandler) {
                delete that._suppressResizeHandler;
                return;
            }

            var minimizeWidth = that.minimizeWidth,
                mode = that.mode;

            if (minimizeWidth !== null && mode !== 'dropDown') {
                if (that.offsetWidth <= minimizeWidth && !that._minimized) {
                    that.minimize();
                    return;
                } else if (that.offsetWidth > minimizeWidth) {
                    that.maximize();
                }
            }

            if (that.dropDownAppendTo !== null || mode === 'tree') {
                that._checkOverflow(that.$.mainContainer, mode === 'horizontal', [that.$.scrollButtonNear, that.$.scrollButtonFar]);
            }
        }

        /**
         * Triggers ripple effect.
         */

    }, {
        key: '_ripple',
        value: function _ripple(target, event) {
            var that = this;

            if (that.hasRippleAnimation && event.type === 'click') {
                JQX.Utilities.Animation.Ripple.animate(target, event.pageX, event.pageY);
                return true;
            }
        }

        /**
         * Scrolls using scroll buttons.
         */

    }, {
        key: '_scroll',
        value: function _scroll(scrollButton) {
            if (scrollButton.closest('[template-applied]')) {
                return;
            }

            var that = this,
                mode = that.mode,
                scrollCoefficient = scrollButton.classList.contains('jqx-scroll-button-near') ? -1 : 1;

            if (scrollButton.parentElement === that.$.container) {
                var mainContainer = that.$.mainContainer;

                if (mode !== 'tree') {
                    that._closeSubContainers(2);
                }

                if (that.mode === 'horizontal') {
                    mainContainer.scrollLeft = mainContainer.scrollLeft + scrollCoefficient * 10;
                    that._updateScrollButtonVisibility(mainContainer, true, [that.$.scrollButtonNear, that.$.scrollButtonFar]);
                } else {
                    mainContainer.scrollTop = mainContainer.scrollTop + scrollCoefficient * 10;
                    that._updateScrollButtonVisibility(mainContainer, false, [that.$.scrollButtonNear, that.$.scrollButtonFar]);
                }
            } else {
                var container = scrollButton.parentElement,
                    itemContainer = container.itemContainer;

                that._closeSubContainers(container.level + 1);

                itemContainer.scrollTop = itemContainer.scrollTop + scrollCoefficient * 10;
                that._updateScrollButtonVisibility(itemContainer, false, [container.children[0], container.children[2]]);
            }
        }

        /**
         * Selection handler.
         */

    }, {
        key: '_selectionHandler',
        value: function _selectionHandler(event, closestItemsGroup) {
            var that = this,
                target = event.target;

            if (target.closest('[template-applied]')) {
                event.stopPropagation();
            }

            if (that.disabled || that.displayLoadingIndicator) {
                return;
            }

            if (closestItemsGroup === undefined) {
                if (event.type === 'click') {
                    var closestScrollButton = target.closest('jqx-repeat-button');

                    if (closestScrollButton) {
                        that._scroll(closestScrollButton, event);
                        return;
                    }
                }

                if (!event.isTrusted) {
                    return;
                }

                var closestItem = target.closest('jqx-' + that._element + '-item');

                if (closestItem) {
                    that._menuItemSelectionHandler(closestItem, event);
                    return;
                }

                closestItemsGroup = target.closest('jqx-' + that._element + '-items-group');

                if (closestItemsGroup && (target === closestItemsGroup.container || target === closestItemsGroup.container.firstElementChild)) {
                    return;
                }
            }

            if (closestItemsGroup && !closestItemsGroup.disabled) {
                that._menuItemsGroupSelectionHandler(closestItemsGroup, event);
            }
        }

        /**
         * Sets direction of arrows.
         */

    }, {
        key: '_setArrowDirection',
        value: function _setArrowDirection(arrowElement, level) {
            var that = this,
                mode = that.mode;

            if (mode === 'tree' || that._minimized) {
                arrowElement.className = 'jqx-' + that._element + '-items-group-arrow down jqx-arrow-down';
                return;
            }

            if (that.dropDownPosition.slice(0, 7) !== 'overlay') {
                if (level === 2 && mode === 'horizontal') {
                    if (that.dropDownPosition.slice(0, 3) !== 'top') {
                        arrowElement.className = 'jqx-menu-items-group-arrow down jqx-arrow-down';
                    } else {
                        arrowElement.className = 'jqx-menu-items-group-arrow up jqx-arrow-up';
                    }
                } else {
                    arrowElement.className = 'jqx-menu-items-group-arrow right jqx-arrow-right';
                }
            } else {
                arrowElement.className = 'jqx-menu-items-group-arrow minus';
            }
        }

        /**
         * Sets whether the element can be focused.
         */

    }, {
        key: '_setFocusable',
        value: function _setFocusable() {
            var that = this;

            if (that.disabled || that.unfocusable) {
                that.removeAttribute('tabindex');
                return;
            }

            var tabindex = that.getAttribute('tabindex');

            if (tabindex === null || tabindex < 0) {
                that.setAttribute('tabindex', 0);
            }
        }

        /**
         * Sets the HTML content of an item's label or shortcut.
         */

    }, {
        key: '_setLabel',
        value: function _setLabel(label, labelElement, item, labelSet) {
            var potentialHTMLTemplate = document.getElementById(label);

            if (potentialHTMLTemplate !== null && potentialHTMLTemplate.tagName.toLowerCase() === 'template') {
                // label is the id of an HTML template
                var templateContent = document.importNode(potentialHTMLTemplate.content, true);

                if (item instanceof JQX.MenuItem) {
                    labelElement.appendChild(templateContent);

                    if (labelSet) {
                        item.setAttribute('template-applied', '');
                        item.templateApplied = true;
                    }
                } else if (JQX.ListMenu && this instanceof JQX.ListMenu) {
                    var regex = new RegExp(/{{title="(.*)"}}/);

                    for (var i = 0; i < templateContent.childNodes.length; i++) {
                        if (regex.test(templateContent.childNodes[i].innerHTML)) {
                            item.titleLabel = regex.exec(templateContent.childNodes[i].innerHTML)[1];
                            templateContent.childNodes[i].innerHTML = templateContent.childNodes[i].innerHTML.replace(regex, '');
                        } else if (regex.test(templateContent.childNodes[i].textContent)) {
                            item.titleLabel = regex.exec(templateContent.childNodes[i].textContent)[1];
                            templateContent.childNodes[i].textContent = templateContent.childNodes[i].textContent.replace(regex, '');
                        }
                    }

                    if (item.titleLabel === undefined) {
                        item.titleLabel = templateContent.textContent;
                    }

                    labelElement.appendChild(templateContent);
                } else {
                    labelElement.innerHTML = label;
                    item.titleLabel = label;
                }
            } else {
                labelElement.innerHTML = label;

                if (item instanceof JQX.MenuItemsGroup) {
                    item.titleLabel = label;
                }
            }
        }

        /**
         * Toggles an item's checked state.
         */

    }, {
        key: '_toggleItem',
        value: function _toggleItem(item) {
            var that = this;

            if (that.checkboxes) {
                var parent = item.level === 1 ? that : item.parentItem;

                if (parent.checkable) {
                    var fireItemClick = false;

                    if (parent.checkMode === 'checkbox') {
                        fireItemClick = true;
                        item.set('checked', !item.checked);
                        that.$.fireEvent('itemCheckChange', { 'item': item, 'label': item.label, 'value': item.value, checked: item.checked });
                    } else if (!item.checked) {
                        fireItemClick = true;
                        item.set('checked', true);
                        that._uncheckSiblings(item);
                        that.$.fireEvent('itemCheckChange', { 'item': item, 'label': item.label, 'value': item.value, checked: true });
                    }

                    if (item instanceof JQX.MenuItem && fireItemClick) {
                        that.$.fireEvent('itemClick', { 'item': item, 'label': item.label, 'value': item.value });
                    }

                    if (that.mode !== 'tree' && that.elementName !== 'ListMenu') {
                        that._close();
                        that.close();
                    }

                    return true;
                }
            }

            return false;
        }

        /**
         * transitionend handler.
         */

    }, {
        key: '_transitionendHandler',
        value: function _transitionendHandler(event) {
            var that = this;

            if (that.mode === 'dropDown' && that.opened && event.target === that && document.activeElement !== that && !that._noAutoFocus) {
                that.focus();
            }
        }

        /**
         * Collapse animation transitionend handler.
         */

    }, {
        key: '_transitionendHandlerCollapse',
        value: function _transitionendHandlerCollapse() {
            var menu = void 0,
                container = void 0;

            if (arguments.length === 1) {
                if (arguments[0].propertyName === 'visibility') {
                    return;
                }

                container = this;
                menu = container.menuItemsGroup.menu;
            } else {
                menu = arguments[0];
                container = arguments[1];
            }

            container.menuItemsGroup.$.removeClass('jqx-' + menu._element + '-items-group-expanded');
            container.removeEventListener('transitionend', menu._transitionendHandlerCollapse);
            container.style.height = null;
            container.$.addClass('jqx-visibility-hidden');
            menu._checkOverflow(menu.$.mainContainer, false, [menu.$.scrollButtonNear, menu.$.scrollButtonFar]);

            if (menu._minimized) {
                menu._browserBoundsDetection(menu.$.mainContainer);
            }

            delete menu._treeAnimationInProgress;
        }

        /**
         * Expand animation transitionend handler.
         */

    }, {
        key: '_transitionendHandlerExpand',
        value: function _transitionendHandlerExpand() {
            var menu = void 0,
                container = void 0;

            if (arguments.length === 1) {
                if (arguments[0].propertyName === 'visibility') {
                    return;
                }

                container = this;
                menu = container.menuItemsGroup.menu;
            } else {
                menu = arguments[0];
                container = arguments[1];
            }

            container.removeEventListener('transitionend', menu._transitionendHandlerExpand);
            container.style.height = null;
            menu._checkOverflow(menu.$.mainContainer, false, [menu.$.scrollButtonNear, menu.$.scrollButtonFar]);

            if (menu._minimized) {
                menu._browserBoundsDetection(menu.$.mainContainer);
            }

            if (menu._ensureVisibleOnTransitionend) {
                menu._ensureVisible(menu._ensureVisibleOnTransitionend);
                delete menu._ensureVisibleOnTransitionend;
            }

            delete menu._treeAnimationInProgress;
        }

        /**
         * Unchecks siblings (when "checkMode" is 'radioButton').
         */

    }, {
        key: '_uncheckSiblings',
        value: function _uncheckSiblings(item) {
            for (var i = 0; i < item.parentElement.childElementCount; i++) {
                var currentItem = item.parentElement.children[i];

                if (currentItem !== item && currentItem.checked) {
                    currentItem.set('checked', false);
                    this.$.fireEvent('itemCheckChange', { 'item': currentItem, 'label': currentItem.label, 'value': currentItem.value, checked: false });
                }
            }
        }

        /**
         * Unsorts items.
         */

    }, {
        key: '_unsortItems',
        value: function _unsortItems(item, noRecursion) {
            var that = this;
            var itemChildren = void 0,
                parent = void 0,
                originalOrder = [];

            if (item === that.$.mainContainer) {
                parent = item;
                itemChildren = item.children;
            } else {
                parent = item.container.firstElementChild;
                itemChildren = parent.children;
            }

            for (var i = 0; i < itemChildren.length; i++) {
                var currentItem = itemChildren[i];

                originalOrder[currentItem.originalIndex] = currentItem;

                if (currentItem instanceof JQX.MenuItemsGroup && noRecursion === undefined) {
                    that._unsortItems(currentItem);
                }
            }

            if (originalOrder.length < 2) {
                return;
            }

            for (var _i9 = 0; _i9 < originalOrder.length; _i9++) {
                parent.appendChild(originalOrder[_i9]);
            }
        }

        /**
         * Updates scroll button visibility.
         */

    }, {
        key: '_updateScrollButtonVisibility',
        value: function _updateScrollButtonVisibility(element, horizontal, scrollButtons) {
            var that = this,
                overflow = that.overflow,
                mainContainer = element === that.$.mainContainer;

            if (mainContainer && overflow === 'hidden') {
                return;
            }

            var showNear = true,
                showFar = true,
                scrollDirection = void 0,
                dimension = void 0,
                scrollDimension = void 0;

            if (horizontal) {
                scrollDirection = 'scrollLeft';
                dimension = 'offsetWidth';
                scrollDimension = 'scrollWidth';
            } else {
                scrollDirection = 'scrollTop';
                dimension = 'offsetHeight';
                scrollDimension = 'scrollHeight';
            }

            if (Math.round(element[scrollDirection]) === 0) {
                showNear = false;
            }

            if (Math.round(element[dimension] + element[scrollDirection]) >= Math.round(element[scrollDimension])) {
                showFar = false;
            }

            if (!mainContainer || overflow === 'auto') {
                if (showNear && showFar) {
                    scrollButtons[0].$.removeClass('jqx-hidden');
                    scrollButtons[1].$.removeClass('jqx-hidden');
                    element.classList.remove('one-button-shown');
                    return;
                }

                if (showNear) {
                    scrollButtons[0].$.removeClass('jqx-hidden');
                } else {
                    scrollButtons[0].$.addClass('jqx-hidden');
                }

                if (showFar) {
                    scrollButtons[1].$.removeClass('jqx-hidden');
                } else {
                    scrollButtons[1].$.addClass('jqx-hidden');
                }

                element.classList.add('one-button-shown');
            } else if (overflow === 'scroll' && !that.disabled) {
                scrollButtons[0].disabled = !showNear;
                scrollButtons[1].disabled = !showFar;
            }
        }

        /**
         * Validates radio button selection.
         */

    }, {
        key: '_validateRadioButtonSelection',
        value: function _validateRadioButtonSelection(item, level, checkedChildren) {
            var that = this;

            if (that.checkboxes) {
                var parentItem = void 0,
                    parentElement = void 0;

                if (level === 1) {
                    parentItem = that;
                    parentElement = that.$.mainContainer;
                } else {
                    parentItem = item;
                    parentElement = item.itemContainer;
                }

                if (parentItem.checkMode === 'radioButton' && parentItem.checkable) {
                    if (checkedChildren.length > 1) {
                        for (var i = checkedChildren.length - 2; i >= 0; i--) {
                            checkedChildren[i].set('checked', false);
                        }
                    } else if (checkedChildren.length === 0) {
                        var firstEnabledChild = that._getFirstEnabledChild(parentElement);

                        if (firstEnabledChild) {
                            firstEnabledChild.set('checked', true);
                        }
                    }
                }
            }
        }

        /**
         * wheel handler.
         */

    }, {
        key: '_wheelHandler',
        value: function _wheelHandler(event) {
            var that = this;

            if (!that.enableMouseWheelAction || that._wheelInProgress || that.disabled || that.displayLoadingIndicator || that.$.mainContainer.offsetHeight === that.$.mainContainer.scrollHeight) {
                if (that._wheelInProgress) {
                    event.preventDefault();
                }

                return;
            }

            event.preventDefault();

            that._dragStartDetails = { startY: event.pageY, x: event.pageX, y: event.pageY, startTime: Date.now(), target: event.target };
            that._wheelInProgress = true;

            var swipeInfo = { pageY: event.pageY + (event.deltaY > 0 ? -1 : 1) * 50 };

            that._endSwiping(swipeInfo, that._dragStartDetails.startTime + 100, true);
        }
    }, {
        key: 'items',


        /**
         * Menu's items.
         */
        get: function get() {
            return this._menuItems;
        }
    }], [{
        key: 'properties',

        // Menu's properties.
        get: function get() {
            return {
                'autoCloseDelay': {
                    value: 100,
                    type: 'number'
                },
                'autoFocusOnMouseenter': {
                    value: false,
                    type: 'boolean'
                },
                'checkable': {
                    value: false,
                    type: 'boolean'
                },
                'checkboxes': {
                    value: false,
                    type: 'boolean'
                },
                'checkMode': {
                    value: 'checkbox',
                    allowedValues: ['checkbox', 'radioButton'],
                    type: 'string'
                },
                'closeAction': {
                    value: 'up',
                    allowedValues: ['up', 'down', 'none'],
                    type: 'string'
                },
                'dataSource': {
                    value: null,
                    type: 'array?',
                    reflectToAttribute: false
                },
                'displayMember': {
                    value: 'label',
                    type: 'string'
                },
                'dropDownAppendTo': {
                    value: null,
                    type: 'any?'
                },
                'dropDownOverlay': {
                    value: false,
                    type: 'boolean'
                },
                'dropDownPosition': {
                    value: 'auto',
                    allowedValues: ['top-left', 'top-right', 'bottom-left', 'bottom-right', 'overlay-left', 'overlay-right', 'auto'],
                    type: 'string'
                },
                'enableMouseWheelAction': {
                    value: false,
                    type: 'boolean'
                },
                'itemsMember': {
                    value: 'items',
                    type: 'string'
                },
                'minimizeIconTemplate': {
                    value: null,
                    type: 'string?'
                },
                'minimizeWidth': {
                    value: null,
                    type: 'number?'
                },
                'mode': {
                    value: 'horizontal',
                    allowedValues: ['horizontal', 'vertical', 'dropDown', 'tree'],
                    type: 'string'
                },
                'opened': {
                    value: false,
                    type: 'boolean'
                },
                'overflow': {
                    value: 'auto',
                    allowedValues: ['auto', 'hidden', 'scroll'],
                    type: 'string'
                },
                'selectionMode': {
                    value: 'click',
                    allowedValues: ['click', 'mouseenter'],
                    type: 'string'
                },
                'valueMember': {
                    value: 'value',
                    type: 'string'
                }
            };
        }

        /**
         * Menu's event listeners.
         */

    }, {
        key: 'listeners',
        get: function get() {
            return {
                'container.click': '_selectionHandler',
                'keydown': '_keydownHandler',
                'mouseenter': '_mouseenterHandler',
                'mouseleave': '_mouseleaveHandler',
                'container.mouseout': '_mouseoutMouseoverHandler',
                'container.mouseover': '_mouseoutMouseoverHandler',
                'resize': '_resizeHandler',
                'transitionend': '_transitionendHandler',
                'hamburgerIcon.click': '_hamburgerIconClickHandler',
                'mainContainer.click': '_mainContainerHandler',
                'mainContainer.mouseleave': '_mainContainerHandler',
                'mainContainer.mouseout': '_mainContainerHandler',
                'mainContainer.mouseover': '_mainContainerHandler',
                'document.down': '_documentDownHandler',
                'document.up': '_documentUpHandler'
            };
        }

        /**
         * Menu's required files.
         */

    }, {
        key: 'requires',
        get: function get() {
            return {
                'JQX.RepeatButton': 'jqxbutton.js'
            };
        }

        /**
         * CSS files needed for the element (ShadowDOM)
         */

    }, {
        key: 'styleUrls',
        get: function get() {
            return ['jqx.button.css', 'jqx.menu.css'];
        }
    }]);
    return Menu;
}(JQX.BaseElement));