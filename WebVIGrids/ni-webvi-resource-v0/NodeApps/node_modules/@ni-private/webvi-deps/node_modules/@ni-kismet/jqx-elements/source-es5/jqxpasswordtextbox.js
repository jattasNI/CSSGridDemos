'use strict';

/**
* PasswordTextBox custom element.
*/
JQX('jqx-password-text-box', function (_JQX$TextBox) {
    babelHelpers.inherits(PasswordTextBox, _JQX$TextBox);

    function PasswordTextBox() {
        babelHelpers.classCallCheck(this, PasswordTextBox);
        return babelHelpers.possibleConstructorReturn(this, (PasswordTextBox.__proto__ || Object.getPrototypeOf(PasswordTextBox)).apply(this, arguments));
    }

    babelHelpers.createClass(PasswordTextBox, [{
        key: 'template',


        /**
        * PasswordTextBox's HTML template.
        */
        value: function template() {
            return '<div id="container">\n                    <span id="label" inner-h-t-m-l="[[label]]" class ="jqx-label"></span>\n                    <div id="innerContainer" class="jqx-inner-container">\n                            <input class ="jqx-input" type="password" id="input"\n                                disabled="[[disabled]]"\n                                maxlength="[[maxLength]]"\n                                minlength="[[minLength]]"\n                                name="[[name]]"\n                                placeholder="[[placeholder]]"\n                                value="[[value]]">\n                            <span id="passwordIcon" title="Show Password" class ="jqx-password-icon jqx-hidden">&#xe80a; </span>\n                    </div>\n                    <span id="hint" class ="jqx-hint"></span>\n                    <jqx-tooltip id="tooltip"\n                        open-mode="manual"\n                        arrow="[[tooltipArrow]]"\n                        tooltip-template="[[tooltipTemplate]]"\n                        position="[[tooltipPosition]]"\n                        delay="[[tooltipDelay]]">\n                     </jqx-tooltip>\n                </div>';
        }

        /**
        * Updates the PasswordTextBox when a property is  changed.
        * @param {string} propertyName The name of the property.
        * @param {number/string} oldValue The previously entered value.
        * @param {number/string} newValue The new entered value.
        */

    }, {
        key: 'propertyChangedHandler',
        value: function propertyChangedHandler(propertyName, oldValue, newValue) {
            var that = this;
            var strength = void 0;

            switch (propertyName) {
                case 'locale':
                case 'messages':
                case 'passwordStrength':
                    strength = that._evaluatePasswordStrength();

                    that._updateTooltipString(strength);
                    that.$.passwordIcon.setAttribute('title', that.localize('showPassword'));
                    that._updatePasswordStrengthStyles(strength);
                    break;
                case 'tooltipPosition':
                    that.$.tooltip.position = that.tooltipPosition;
                    break;
                case 'tooltipTemplate':
                    that.$.tooltip.tooltipTemplate = that.tooltipTemplate;
                    break;
                case 'value':
                    strength = that._evaluatePasswordStrength();

                    that._updateTooltipString(strength);
                    that._updatePasswordStrengthStyles(strength);
                    break;
                case 'disabled':
                    that._setFocusable();
                    break;
                case 'readonly':
                    break;
                default:
                    babelHelpers.get(PasswordTextBox.prototype.__proto__ || Object.getPrototypeOf(PasswordTextBox.prototype), 'propertyChangedHandler', this).call(this, propertyName, oldValue, newValue);
                    break;
            }
        }

        /**
         * Element's create method
         */

    }, {
        key: '_createElement',
        value: function _createElement() {
            var that = this;

            if (that.autoFocus) {
                that.$.input.focus();
            }

            that._setFocusable();
            that.$.tooltip.selector = that.$.innerContainer;
            that.$.passwordIcon.setAttribute('title', that.localize('showPassword'));
            that._updateTooltipString('short');
            that._updatePasswordStrengthStyles();
            that._initializationValue = that.value;
            that.value.length > 0 ? that.$.addClass('has-value') : that.$.removeClass('has-value');
            that._handleHintContainer();
        }

        /**
        * PasswordTextBox focus handler.
        */

    }, {
        key: '_focusHandler',
        value: function _focusHandler() {
            var that = this;

            if (that.disabled) {
                return;
            }

            if (that.selectAllOnFocus) {
                that.$.input.select();
            }

            if (that.showPasswordIcon) {
                that.$passwordIcon.removeClass('jqx-hidden');
            }

            that.setAttribute('focus', '');

            that._valueBeforeChange = that.value;

            if (!that.showPasswordStrength) {
                return;
            }

            if (!that._tooltipOpened) {
                that.$.tooltip.open();
                that._tooltipOpened = true;
            }
        }

        /**
        * PasswordTextBox blur handler.
        */

    }, {
        key: '_blurHandler',
        value: function _blurHandler() {
            var that = this;

            if (that.disabled || that._passwordIconPressed) {
                return;
            }

            if (that._valueBeforeChange !== that.value) {
                that.$.fireEvent('change', {
                    'newValue': that.value,
                    'oldValue': that._valueBeforeChange
                });
                that._valueBeforeChange = '';
            }

            if (that.showPasswordIcon) {
                that.$passwordIcon.addClass('jqx-hidden');
            }

            that.removeAttribute('focus');
            that.value.length > 0 ? that.$.addClass('has-value') : that.$.removeClass('has-value');

            if (!that._tooltipOpened) {
                return;
            }

            that.$.tooltip.close();
            that._tooltipOpened = false;
        }

        /**
        * Shows password if show passwor icon is pressed.
        */

    }, {
        key: '_showPassword',
        value: function _showPassword() {
            var that = this;

            if (that.disabled || !that.showPasswordIcon) {
                return;
            }

            that.$.input.type = 'text';
            that._passwordIconPressed = true;
        }

        /**
        * Hides password.
        */

    }, {
        key: '_documentUpHandler',
        value: function _documentUpHandler() {
            var that = this;

            if (that.disabled || !that.showPasswordIcon || !that._passwordIconPressed) {
                return;
            }

            that.$.input.type = 'password';
            that._passwordIconPressed = false;
            that.$.input.focus();
        }

        /**
        *  PasswordTextBox change handler.
        */

    }, {
        key: '_textBoxChangeHandler',
        value: function _textBoxChangeHandler() {
            var that = this;

            if (that.disabled || that.readonly) {
                return;
            }

            that.value = that.$.input.value;
            var strength = that._evaluatePasswordStrength();

            that._updateTooltipString(strength);
            that._updatePasswordStrengthStyles(strength);
        }

        /**
        *  Updates container's styles related to the password strength.
        */

    }, {
        key: '_updatePasswordStrengthStyles',
        value: function _updatePasswordStrengthStyles(strength) {
            var that = this,
                passwordStrengthOptions = ['short', 'weak', 'far', 'good', 'strong'];

            strength = strength || 'short';

            for (var i = 0; i < passwordStrengthOptions.length; i++) {
                that.$container.removeClass('jqx-password-' + passwordStrengthOptions[i]);
            }

            if (that.disabled) {
                return;
            }

            that.$container.addClass('jqx-password-' + strength);
        }

        /**
        *  Evaluates the strength of the password string.
        */

    }, {
        key: '_evaluatePasswordStrength',
        value: function _evaluatePasswordStrength() {
            var that = this,
                password = that.$.input.value,
                passwordLength = password.length,
                allowedSymbols = '<>@!#$%^&*()_+[]{}?:;|\'"\\,./~`-=';

            if (that.disabled) {
                return;
            }

            if (that.passwordStrength) {
                return that.passwordStrength(password, allowedSymbols);
            }

            var letters = 0,
                numbers = 0,
                specials = 0,
                passwordStrength = 0;

            for (var i = 0; i < passwordLength; i++) {
                var charAt = password.charAt(i),
                    charCodeAt = password.charCodeAt(i);

                if (charCodeAt > 64 && charCodeAt < 91 || charCodeAt > 96 && charCodeAt < 123 || charCodeAt > 127 && charCodeAt < 155 || charCodeAt > 159 && charCodeAt < 166) {
                    letters += 1;
                    continue;
                }
                if (isNaN(charAt) === false) {
                    numbers += 1;
                    continue;
                }
                if (allowedSymbols.indexOf(charAt) !== -1) {
                    specials += 1;
                    continue;
                }
            }

            passwordStrength = letters + numbers + 2 * specials + letters * numbers / 2 + passwordLength;

            if (passwordLength < 8) {
                return 'short';
            } else {
                if (passwordStrength < 20) {
                    return 'weak';
                } else if (passwordStrength < 30) {
                    return 'far';
                } else if (passwordStrength < 40) {
                    return 'good';
                } else {
                    return 'strong';
                }
            }
        }
    }, {
        key: '_keyUpHandler',
        value: function _keyUpHandler() {}
    }, {
        key: '_mouseWheelHandler',
        value: function _mouseWheelHandler() {}
    }, {
        key: '_resizeHandler',
        value: function _resizeHandler() {}
    }, {
        key: '_selectStartHandler',
        value: function _selectStartHandler() {}
    }, {
        key: '_setDropDownSize',
        value: function _setDropDownSize() {}
    }, {
        key: '_styleChangedHandler',
        value: function _styleChangedHandler() {}
    }, {
        key: '_updateTooltipString',
        value: function _updateTooltipString(strength) {
            var that = this;

            that.$.tooltip.value = '<span class="password-strength-label">' + that.localize('passwordStrength') + ':</span><span class="password-strength-value">' + that.localize(strength) + '</span>';
        }
    }], [{
        key: 'properties',

        /** 
        * PasswordTextBox's properties 
        */
        get: function get() {
            return {
                'messages': {
                    value: {
                        'en': {
                            'passwordStrength': 'Password strength',
                            'short': 'Short',
                            'weak': 'Weak',
                            'far': 'Far',
                            'good': 'Good',
                            'strong': 'Strong',
                            'showPassword': 'Show password'
                        }
                    },
                    type: 'object',
                    extend: true
                },
                'passwordStrength': {
                    value: null,
                    type: 'function?',
                    reflectToAttribute: false
                },
                'showPasswordIcon': {
                    value: false,
                    type: 'boolean'
                },
                'showPasswordStrength': {
                    value: false,
                    type: 'boolean'
                },
                'tooltipArrow': {
                    value: false,
                    type: 'boolean'
                },
                'tooltipDelay': {
                    value: 0,
                    type: 'number'
                },
                'tooltipPosition': {
                    allowedValues: ['bottom', 'top', 'left', 'right', 'absolute'],
                    value: 'top',
                    type: 'string'
                },
                'tooltipTemplate': {
                    value: null,
                    type: 'string?'
                },
                'type': {
                    value: 'password',
                    type: 'string',
                    defaultReflectToAttribute: true,
                    readonly: true
                },
                'value': {
                    value: '',
                    reflectToAttribute: false,
                    type: 'string'
                }
            };
        }
    }, {
        key: 'requires',
        get: function get() {
            return {
                'JQX.Tooltip': 'jqxtooltip.js'
            };
        }

        /**
        * PasswordTextBox's event listeners.
        */

    }, {
        key: 'listeners',
        get: function get() {
            return {
                'document.up': '_documentUpHandler',
                'blur': '_blurHandler',
                'focus': '_focusHandler',
                'mouseenter': '_mouseEventsHandler',
                'mouseleave': '_mouseEventsHandler',
                'passwordIcon.down': '_showPassword',
                'input.change': '_textBoxChangeHandler',
                'input.paste': '_textBoxChangeHandler',
                'input.keyup': '_textBoxChangeHandler',
                'input.blur': '_blurHandler',
                'input.focus': '_focusHandler'
            };
        }
    }]);
    return PasswordTextBox;
}(JQX.TextBox));