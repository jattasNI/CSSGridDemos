'use strict';

JQX.Utilities.Assign('Grid.Menu', function () {
    function Menu() {
        babelHelpers.classCallCheck(this, Menu);
    }

    babelHelpers.createClass(Menu, [{
        key: 'openMenu',
        value: function openMenu(dataField) {
            var that = this;

            var column = that.columnByDataField[dataField];

            if (!column) {
                return;
            }

            that._openMenu(column);
        }
    }, {
        key: '_openColumnChooserMenu',
        value: function _openColumnChooserMenu(column) {
            var that = this;

            if (!column) {
                column = that._commandColumn;
            }

            if (!column || that.menu && that.menu.column === column && column.element.hasAttribute('aria-controls')) {
                that.closeMenu();
                return;
            }

            if (!that.menu) {
                that.menu = document.createElement('div');
                that.menu.classList.add('jqx-grid-column-menu');
                that.menu.id = that.id + '_' + that.tagName.toLowerCase() + '_menu_' + Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);
            }

            if (that.appearance.allowColumnMenuAnimation) {
                that.menu.classList.add('jqx-animate');
            } else {
                that.menu.classList.remove('jqx-animate');
            }

            that._createColumnChooserMenuItems(column);

            that.menu.style.height = that.columnMenu.height ? that.columnMenu.height + 'px' : 'auto';

            if (that.menu.column && that.menu.column !== column) {
                that.menu.column.setProperty('menu', null);
                that.menu.column = null;
            }

            document.body.appendChild(that.menu);

            column.setProperty('menu', that.menu);

            var columnRect = column.element.getBoundingClientRect();

            that.menu.column = column;

            var left = columnRect.right - column.element.actionButton.getBoundingClientRect().width + window.pageXOffset;
            var top = columnRect.bottom + window.pageYOffset;

            if (left + that.menu.offsetWidth > window.innerWidth) {
                left = columnRect.right + window.pageXOffset - that.menu.offsetWidth;

                if (left + that.menu.offsetWidth > window.innerWidth) {
                    left = window.innerWidth - that.menu.offsetWidth;
                }
            }

            that.menu.style.left = left + 'px';
            that.menu.style.top = top + 'px';

            that.menu.classList.remove('jqx-hidden');
            that.menu.classList.add('open');
        }
    }, {
        key: '_openMenu',
        value: function _openMenu(column) {
            var that = this;

            if (!column || that.menu && that.menu.column === column && column.element.hasAttribute('aria-controls')) {
                that.closeMenu();
                return;
            }

            if (!that.menu) {
                that.menu = document.createElement('div');
                that.menu.classList.add('jqx-grid-column-menu');
                that.menu.id = that.id + '_' + that.tagName.toLowerCase() + '_menu_' + Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);
            }

            if (that.appearance.allowColumnMenuAnimation) {
                that.menu.classList.add('jqx-animate');
            } else {
                that.menu.classList.remove('jqx-animate');
            }

            that._createMenuItems(column);
            that._createFilterPanel(column);
            that._filterMenuItemsVisibility(column);

            that.menu.style.height = that.columnMenu.height ? that.columnMenu.height + 'px' : 'auto';

            if (that.menu.column && that.menu.column !== column) {
                that.menu.column.setProperty('menu', null);
                that.menu.column = null;
            }

            document.body.appendChild(that.menu);

            column.setProperty('menu', that.menu);

            var columnRect = column.element.getBoundingClientRect();

            that.menu.column = column;

            var left = columnRect.right - column.element.actionButton.getBoundingClientRect().width + window.pageXOffset;
            var top = columnRect.bottom + window.pageYOffset;

            if (left + that.menu.offsetWidth > window.innerWidth) {
                left = columnRect.right + window.pageXOffset - that.menu.offsetWidth;

                if (left + that.menu.offsetWidth > window.innerWidth) {
                    left = window.innerWidth - that.menu.offsetWidth;
                }
            }

            that.menu.style.left = left + 'px';
            that.menu.style.top = top + 'px';

            if (!that.hasColumnMenu(column)) {
                that.closeMenu();
            } else {
                that.menu.classList.remove('jqx-hidden');
            }

            that.menu.classList.add('open');
        }
    }, {
        key: '_menuItemClick',
        value: function _menuItemClick(event) {
            var that = this;
            var details = event.detail;
            var menuItem = details.value;

            if (menuItem && menuItem.properties) {
                var command = menuItem.properties.command;

                if (typeof command === 'function') {
                    command.apply(that, [menuItem.column]);
                } else if (that[command]) {
                    that[command].apply(that, [menuItem.column]);
                }

                if (menuItem.column.autoCloseMenu) {
                    that.closeMenu();
                }
            }
        }
    }, {
        key: 'removeGroupByCommand',
        value: function removeGroupByCommand(column) {
            var that = this;

            that.removeGroup(column.dataField);
        }
    }, {
        key: 'groupByCommand',
        value: function groupByCommand(column) {
            var that = this;

            if (!that.dataSource) {
                return;
            }

            that.addGroup(column.dataField);
        }
    }, {
        key: 'sortAscCommand',
        value: function sortAscCommand(column) {
            var that = this;

            that.sortBy(column.dataField, 'asc');
        }
    }, {
        key: 'sortDescCommand',
        value: function sortDescCommand(column) {
            var that = this;

            that.sortBy(column.dataField, 'desc');
        }
    }, {
        key: 'removeSortCommand',
        value: function removeSortCommand(column) {
            var that = this;

            that.sortBy(column.dataField, null);
        }

        /*
        { 'columnMenuCustomizeType': {command: 'customizeTypeCommand', enabled: true, visible: false, icon: 'jqx-icon-customize', label: '{{messages}}'}},
        { 'columnMenuItemRename': { command: 'renameCommand', enabled: true, visible: false, icon: 'jqx-icon-rename', label: '{{messages}}' } },
        { 'columnMenuItemEditDescription': { command: 'editDescriptionCommand', enabled: true, visible: false, icon: 'jqx-icon-description', label: '{{messages}}' } },
        { 'columnMenuItemDuplicate': { command: 'duplicateCommand', visible: false, enabled: true, icon: 'jqx-icon-duplicate', label: '{{messages}}' } },
        { 'columnMenuItemInsertLeft': { command: 'insertLeftCommand', visible: false, enabled: true, icon: 'jqx-icon-insert-left', label: '{{messages}}' } },
        { 'columnMenuItemInsertRight': { command: 'insertRightCommand', visible: false, enabled: true, icon: 'jqx-icon-insert-right', label: '{{messages}}' } },
        { 'columnMenuItemSortAsc': { command: 'sortAscCommand', visible: 'auto', enabled: true, icon: 'jqx-icon-sort-a-z', label: '{{messages}}' } },
        { 'columnMenuItemSortDesc': { command: 'sortDescCommand', visible: 'auto', enabled: true, icon: 'jqx-icon-sort-z-a', label: '{{messages}}' } },
        { 'columnMenuItemRemoveSort': { command: 'removeSortCommand', visible: 'auto', enabled: true, icon: 'jqx-icon-cancel-circled', label: '{{messages}}' } },
        { 'columnMenuItemFilter': { command: 'addFilterCommand', visible: 'auto', enabled: true, icon: 'jqx-icon-add-filter', label: '{{messages}}' } },
        { 'columnMenuItemRemoveFilter': { command: 'removeFilterCommand', enabled: true, visible: 'auto', icon: 'jqx-icon-cancel-circled-outline', label: '{{messages}}' } },
        { 'columnMenuItemGroupBy': { command: 'groupByCommand', enabled: true, visible: 'auto', icon: 'jqx-icon-group-by', label: '{{messages}}' } },
        { 'columnMenuItemHide': { command: 'hideColumnCommand', enabled: true, visible: false, icon: 'jqx-icon-hide', label: '{{messages}}' } },
        { 'columnMenuItemDelete': { command: 'deleteColumnCommand', enabled: true, visible: false, icon: 'jqx-icon-delete', label: '{{messages}}' } }
        */

    }, {
        key: '_removeMenu',
        value: function _removeMenu() {
            var that = this;
            var verticalMenu = that.menu.querySelector('jqx-menu');

            if (verticalMenu) {
                that.menu.removeChild(verticalMenu);
            }
        }
    }, {
        key: '_createColumnChooserMenuItems',
        value: function _createColumnChooserMenuItems() /*column*/{
            var that = this;

            that._removeMenu();

            var verticalMenu = document.createElement('jqx-menu');
            var menuContent = document.createDocumentFragment();

            verticalMenu.mode = 'vertical';
            verticalMenu.dropDownAppendTo = 'body';
            verticalMenu.checkboxes = true;
            verticalMenu.checkable = true;
            verticalMenu.classList.add('jqx-grid-column-chooser-menu');

            for (var i = 0; i < that.columns.length; i++) {
                var column = that.columns[i];
                var menuItem = document.createElement('jqx-menu-item');
                var icon = column.showIcon ? column.icon : column.visible ? 'jqx-icon-eye' : 'jqx-icon-eye-off';

                menuItem.checked = column.visible;

                if (!column.allowHide) {
                    continue;
                }

                column.command = function (column) {
                    column.visible = !column.visible;
                };

                menuItem.label = that.localize(column.label) || column.label || column.dataField;
                menuItem.value = { column: column, properties: column };

                if (icon) {
                    menuItem.label = '<span class="jqx-grid-icon ' + icon + '"></span>' + menuItem.label;
                }

                menuContent.appendChild(menuItem);
            }

            verticalMenu.appendChild(menuContent);
            that.menu.appendChild(verticalMenu);

            that.menu.itemCheckChange = that._menuItemClick.bind(that);

            that.menu.addEventListener('itemCheckChange', that.menu.itemCheckChange);
            that.menu.addEventListener('keydown', that._keyDownHandler.bind(that));
        }
    }, {
        key: '_createMenuItems',
        value: function _createMenuItems(column) {
            var that = this;

            that._removeMenu();

            var verticalMenu = document.createElement('jqx-menu');
            var menuContent = document.createDocumentFragment();
            var dataSource = column.menuItems || that.columnMenu.dataSource;

            verticalMenu.mode = 'vertical';
            verticalMenu.dropDownAppendTo = 'body';

            for (var item in dataSource) {
                var properties = dataSource[item];
                var menuItem = document.createElement('jqx-menu-item');
                var icon = properties.icon;

                menuItem.label = that.localize(item);
                menuItem.value = { column: column, properties: properties };

                var sortString = function sortString(asc) {
                    if (asc) {
                        if (column.dataType === 'string') {
                            return 'A → Z';
                        } else if (column.dataType === 'number' || column.dataType === 'date' || column.dataType === 'time') {
                            return '1 → 9';
                        } else if (column.dataType === 'bool' || column.dataType === 'boolean') {
                            return '0 → 1';
                        }
                    } else {
                        if (column.dataType === 'string') {
                            return 'Z → A';
                        } else if (column.dataType === 'number' || column.dataType === 'date' || column.dataType === 'time') {
                            return '9 → 1';
                        } else if (column.dataType === 'bool' || column.dataType === 'boolean') {
                            return '1 → 0';
                        }
                    }
                };

                if (item === 'columnMenuItemSortAsc') {
                    menuItem.label = that.localize(item, { mode: sortString(true) });

                    if (column.dataType !== 'string') {
                        if (properties.iconAlt) {
                            icon = properties.iconAlt;
                        }
                    }
                } else if (item === 'columnMenuItemSortDesc') {
                    menuItem.label = that.localize(item, { mode: sortString(false) });

                    if (column.dataType !== 'string') {
                        if (properties.iconAlt) {
                            icon = properties.iconAlt;
                        }
                    }
                }

                if (icon) {
                    menuItem.label = '<span class="jqx-grid-icon ' + icon + '"></span>' + menuItem.label;
                }

                menuContent.appendChild(menuItem);
            }

            verticalMenu.appendChild(menuContent);

            if (that._filterContainer) {
                that.menu.insertBefore(verticalMenu, that._filterContainer);
            } else {
                that.menu.appendChild(verticalMenu);
            }

            that.menu.itemClick = that._menuItemClick.bind(that);

            that.menu.addEventListener('itemClick', that.menu.itemClick);
            that.menu.addEventListener('keydown', that._keyDownHandler.bind(that));
        }
    }, {
        key: '_getFilterType',
        value: function _getFilterType(column) {
            var dataType = column.dataType.endsWith('?') ? column.dataType.substring(0, column.dataType.length - 1) : column.dataType;

            var filterType = 'string';

            switch (dataType) {
                case 'number':
                case 'int':
                case 'float':
                case 'int64':
                    filterType = 'numeric';
                    break;
                case 'bool':
                case 'boolean':
                    filterType = 'bool';
                    break;
                case 'date':
                case 'time':
                case 'datetime':
                    filterType = 'date';
                    break;
                case 'any':
                    filterType = 'any';
                    break;
            }

            return filterType;
        }
    }, {
        key: '_createFilterPanel',
        value: function _createFilterPanel(column) {
            var that = this;

            if (!JQX.FilterPanel) {
                return;
            }

            if (that.filtering.enabled && that.filtering.filterMenu.visible && column.allowFilter) {
                var filterType = that._getFilterType(column);

                if (that._filterPanel) {
                    that._filterPanel.parentNode.removeChild(that._filterPanel);
                }

                that._filterPanel = that._filterPanels[filterType];
                that._filterPanel.dataField = column.dataField;

                if (!that._filterContainer) {
                    var filterContainer = document.createElement('div');

                    filterContainer.classList.add('jqx-filter-container');
                    that._filterContainer = filterContainer;

                    requestAnimationFrame(function () {
                        that.menu.appendChild(filterContainer);
                    });

                    that._applyFilterHandler = function () {
                        that.addFilter(that._filterPanel.dataField, that._filterPanel.getFilter());

                        var column = that.columnByDataField[that._filterPanel.dataField];
                        column._filterState = that._filterPanel.getState();
                    };

                    that._clearFilterHandler = function () {
                        requestAnimationFrame(function () {
                            that.removeFilter(that._filterPanel.dataField);

                            var column = that.columnByDataField[that._filterPanel.dataField];
                            column._filterState = null;
                        });
                    };
                }

                that._filterContainer.appendChild(that._filterPanel);

                that._filterPanel.classList.remove('jqx-hidden');
                that._filterPanel.removeEventListener('filter', that._applyFilterHandler);
                that._filterPanel.removeEventListener('clear', that._clearFilterHandler);

                that._filterPanel.addEventListener('filter', that._applyFilterHandler);
                that._filterPanel.addEventListener('clear', that._clearFilterHandler);

                if (column.filterMenuMode === 'none' || !that.filtering.filterMenu.visible || !JQX.FilterPanel) {
                    that._filterContainer.classList.add('jqx-hidden');
                } else {
                    that._filterContainer.classList.remove('jqx-hidden');
                }

                that._filterPanel.reset();

                if (column._filterState) {
                    that._filterPanel.loadState(column._filterState);
                } else if (column.filter) {
                    var columnFilterGroup = column.filter;
                    var _filterType = that._getFilterType(column);
                    var filters = columnFilterGroup.getFilters();

                    while (filters.length > 0 && filters[0].type === 'FilterGroup') {
                        filters = filters[0].value;
                    }

                    var conditions = columnFilterGroup.getConditions(_filterType);

                    var firstFilterComparison = filters.length > 0 ? conditions.indexOf(filters[0].condition) : -1;
                    var secondFilterComparison = filters.length > 1 ? conditions.indexOf(filters[1].condition) : -1;
                    var firstFilterValue = filters.length > 0 ? filters[0].value : '';
                    var secondFilterValue = filters.length > 1 ? filters[1].value : '';
                    var logicalOperator = filters.length > 1 ? ['and', 'or'].indexOf(filters[1].logicalOperator) : 0;

                    column._filterState = {
                        firstFilterComparison: firstFilterComparison,
                        firstFilterValue: firstFilterValue,
                        logicalOperator: logicalOperator,
                        secondFilterComparison: secondFilterComparison,
                        secondFilterValue: secondFilterValue
                    };

                    that._filterPanel.loadState(column._filterState);
                }
            } else if (that._filterPanel) {
                that._filterPanel.parentNode.removeChild(that._filterPanel);
                column._filterState = null;
            }
        }
    }, {
        key: 'hasColumnMenu',
        value: function hasColumnMenu(column) {
            var that = this;

            var dataSource = column.menuItems || that.columnMenu.dataSource;

            var hiddenMenuItemsCount = 0;
            var length = 0;

            for (var item in dataSource) {
                var properties = dataSource[item];

                length++;

                if (properties.visible === false) {
                    hiddenMenuItemsCount++;
                } else if (properties.visible === 'auto') {
                    if (item === 'columnMenuItemFilter' || item === 'columnMenuItemRemoveFilter') {
                        if (that.filtering.filterMenu.visible || that.filtering.filterBuilder.visible) {
                            hiddenMenuItemsCount++;
                        }
                    }

                    if (item === 'columnMenuItemGroupBy' || item === 'columnMenuItemRemoveGroupBy') {
                        if (!column.allowGroup || !that.grouping.enabled) {
                            hiddenMenuItemsCount++;
                        }
                    }

                    if (item === 'columnMenuItemFilter' && !column.allowFilter) {
                        hiddenMenuItemsCount++;
                    }

                    if (item === 'columnMenuItemRemoveFilter' && !column.allowFilter) {
                        hiddenMenuItemsCount++;
                    }

                    if (item === 'columnMenuItemGroupBy' && !column.allowGroup) {
                        hiddenMenuItemsCount++;
                    }

                    if (item === 'columnMenuItemSortAsc' || item === 'columnMenuItemSortDesc' || item === 'columnMenuItemRemoveSort') {

                        if (!column.allowSort || !that.sorting.enabled) {
                            hiddenMenuItemsCount++;
                        }
                    }
                }
            }

            var hasFilter = that.filtering.enabled && that.filtering.filterMenu.visible && column.filterMenuMode !== 'none';

            if ((!hasFilter || !JQX.FilterPanel) && (!JQX.Menu || hiddenMenuItemsCount >= length)) {
                return false;
            }

            return true;
        }
    }, {
        key: '_filterMenuItemsVisibility',
        value: function _filterMenuItemsVisibility(column) {
            var that = this;
            var menuItems = that.menu.querySelectorAll('jqx-menu-item');
            var dataSource = column.menuItems || that.columnMenu.dataSource;
            var index = 0;
            for (var item in dataSource) {
                var menuItem = menuItems[index++];
                var properties = dataSource[item];

                menuItem.disabled = !properties.enabled;
                menuItem.classList.remove('jqx-hidden');

                if (item === 'columnMenuItemRemoveSort') {
                    if (column.sortOrder) {
                        menuItem.disabled = false;
                    } else {
                        menuItem.disabled = true;
                    }
                }

                if (item === 'columnMenuItemSortAsc' && column.sortOrder === 'asc') {
                    menuItem.disabled = true;
                } else if (item === 'columnMenuItemSortDesc' && column.sortOrder === 'desc') {
                    menuItem.disabled = true;
                }

                if (properties.visible === true) {
                    menuItem.classList.remove('jqx-hidden');
                } else if (properties.visible === false) {
                    menuItem.classList.add('jqx-hidden');
                } else if (properties.visible === 'auto') {
                    if (item === 'columnMenuItemFilter' || item === 'columnMenuItemRemoveFilter') {
                        if (that.filtering.enabled === false) {
                            menuItem.classList.add('jqx-hidden');
                        } else {
                            if (that.filtering.filterMenu.visible || that.filtering.filterBuilder.visible) {
                                menuItem.classList.add('jqx-hidden');
                            } else if (that.filtering.filterBuilder.visible) {
                                menuItem.classList.remove('jqx-hidden');
                            }
                        }
                    }

                    if (item === 'columnMenuItemGroupBy') {
                        if (that.grouping.enabled && column.allowGroup) {
                            menuItem.classList.remove('jqx-hidden');
                        } else {
                            menuItem.classList.add('jqx-hidden');
                        }

                        var groupIndex = that.dataSource.groupBy.indexOf(column.dataField);

                        if (groupIndex >= 0) {
                            menuItem.disabled = true;
                        } else {
                            menuItem.disabled = false;
                        }
                    }

                    if (item === 'columnMenuItemRemoveGroupBy') {
                        if (that.grouping.enabled && column.allowGroup) {
                            menuItem.classList.remove('jqx-hidden');
                        } else {
                            menuItem.classList.add('jqx-hidden');
                        }

                        var _groupIndex = that.dataSource.groupBy.indexOf(column.dataField);

                        if (_groupIndex < 0) {
                            menuItem.disabled = true;
                        } else {
                            menuItem.disabled = false;
                        }
                    }

                    if (item === 'columnMenuItemFilter' && !column.allowFilter) {
                        menuItem.classList.add('jqx-hidden');
                    }

                    if (item === 'columnMenuItemRemoveFilter' && !column.allowFilter) {
                        menuItem.classList.add('jqx-hidden');
                    }

                    if (item === 'columnMenuItemSortAsc' || item === 'columnMenuItemSortDesc' || item === 'columnMenuItemRemoveSort') {

                        if (column.allowSort && that.sorting.enabled) {
                            menuItem.classList.remove('jqx-hidden');
                        } else {
                            menuItem.classList.add('jqx-hidden');
                        }
                    }
                }
            }
        }
    }, {
        key: 'hasMenu',
        value: function hasMenu() {
            var that = this;

            if (that.menu && that.menu.column) {
                if (that.menu.parentNode) {
                    return true;
                }
            }

            return false;
        }
    }, {
        key: 'closeMenu',
        value: function closeMenu() {
            var that = this;

            if (that.menu && that.menu.column) {
                if (that.menu.column) {
                    that.menu.column.setProperty('menu', null);
                    that.menu.column = null;
                }

                if (that.menu.parentNode) {
                    that.menu.classList.remove('open');

                    if (!that.appearance.allowColumnMenuAnimation) {
                        that.menu.parentNode.removeChild(that.menu);
                    }
                }

                that.menu.removeEventListener('keydown', that._keyDownHandler.bind(that));
                that.menu.removeEventListener('itemClick', that.menu.itemClick);
                that.menu.removeEventListener('itemCheckChange', that.menu.itemCheckChange);

                that.focus();
            }
        }
    }]);
    return Menu;
}());