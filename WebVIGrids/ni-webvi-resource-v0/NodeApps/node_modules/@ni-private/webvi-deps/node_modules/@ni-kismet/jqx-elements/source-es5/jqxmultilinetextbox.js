'use strict';

/**
* MultilineTextBox custom element.
*/
JQX('jqx-multiline-text-box', function (_JQX$TextBox) {
    babelHelpers.inherits(MultilineTextBox, _JQX$TextBox);

    function MultilineTextBox() {
        babelHelpers.classCallCheck(this, MultilineTextBox);
        return babelHelpers.possibleConstructorReturn(this, (MultilineTextBox.__proto__ || Object.getPrototypeOf(MultilineTextBox)).apply(this, arguments));
    }

    babelHelpers.createClass(MultilineTextBox, [{
        key: 'attached',


        /**
         * Called when the element is attached to the DOM.
         */
        value: function attached() {
            var that = this;

            babelHelpers.get(MultilineTextBox.prototype.__proto__ || Object.getPrototypeOf(MultilineTextBox.prototype), 'attached', this).call(this);

            if (!that._scrollView) {
                that._scrollView = new JQX.Utilities.Scroll(that.$.input, that.$.horizontalScrollBar, that.$.verticalScrollBar);
            }
        }
    }, {
        key: 'detached',
        value: function detached() {
            var that = this;

            babelHelpers.get(MultilineTextBox.prototype.__proto__ || Object.getPrototypeOf(MultilineTextBox.prototype), 'detached', this).call(this);

            if (that._scrollView) {
                that._scrollView.unlisten();
                delete that._scrollView;
            }
        }
    }, {
        key: 'template',


        /**
        * MultilineTextBox's HTML template.
        */
        value: function template() {
            return '<div id="container">\n                    <span id="label" inner-h-t-m-l="[[label]]" class="jqx-label"></span>\n                    <div id="innerContainer" class="jqx-inner-container">\n                            <textarea class="jqx-input" id="input"\n                                autocapitalize="[[autoCapitalize]]"\n                                autocomplete="off"\n                                cols="[[cols]]"\n                                disabled="[[disabled]]"\n                                maxlength="[[maxLength]]"\n                                minlength="[[minLength]]"\n                                name="[[name]]"\n                                placeholder="[[placeholder]]"\n                                readonly="[[readonly]]"\n                                required="[[required]]"\n                                rows="[[rows]]"\n                                spellcheck="[[spellCheck]]"\n                                wrap="[[wrap]]"></textarea>\n                            <jqx-scroll-bar id="verticalScrollBar" animation="[[animation]]" disabled="[[disabled]]" orientation="vertical"></jqx-scroll-bar>\n                            <jqx-scroll-bar id="horizontalScrollBar" animation="[[animation]]" disabled="[[disabled]]"></jqx-scroll-bar>\n                            <div id="resizeElement" class="jqx-resize-element"></div>\n                    </div>\n                            <textarea id="textBoxHidden"\n                                class="jqx-text-box-hidden"\n                                autocapitalize="[[autoCapitalize]]"\n                                autocomplete="off"\n                                cols="[[cols]]"\n                                disabled="[[disabled]]"\n                                inner-h-t-m-l="[[value]]"\n                                maxlength="[[maxLength]]"\n                                minlength="[[minLength]]"\n                                name="[[name]]"\n                                placeholder="[[placeholder]]"\n                                readonly="[[readonly]]"\n                                required="[[required]]"\n                                rows="[[rows]]"\n                                spellcheck="[[spellCheck]]"\n                                wrap="[[wrap]]"></textarea>\n                    <span id="hint" class="jqx-hint"></span>\n                </div>';
        }

        /**
        * Updates the TextBox when a property is changed.
        * @param {string} propertyName The name of the property.
        * @param {number/string} oldValue The previously entered value. Max, min and value are of type Number. The rest are of type String.
        * @param {number/string} newValue The new entered value. Max, min and value are of type Number. The rest are of type String.
        */

    }, {
        key: 'propertyChangedHandler',
        value: function propertyChangedHandler(propertyName, oldValue, newValue) {
            var that = this;

            switch (propertyName) {
                case 'displayMode':
                    switch (newValue) {
                        case 'escaped':
                            that.$.input.value = that._toEscapedDisplayMode(that.value);
                            break;
                        default:
                            that.$.input.value = that.value = that._toDefaultDisplayMode(that.$.input.value);
                            break;
                    }

                    that._autoExpandUpdate();
                    that._handleScrollbarsDisplay();
                    break;
                case 'value':
                    if (that._preventProgramaticValueChange) {
                        that._userValue = that.displayMode === 'escaped' ? that._toDefaultDisplayMode(that.$.input.value) : that.$.input.value;
                        that._programmaticValue = newValue;
                    } else {
                        that._userValue = that._programmaticValue = newValue;
                    }

                    switch (that.displayMode) {
                        case 'escaped':
                            that.$.input.value = that._toEscapedDisplayMode(that._userValue);
                            break;
                        default:
                            that.$.input.value = that._userValue;
                            break;
                    }

                    that._oldValue = oldValue;
                    that._autoExpandUpdate();
                    that._handleScrollbarsDisplay();
                    break;
                case 'horizontalScrollBarVisibility':
                case 'verticalScrollBarVisibility':
                case 'singleLine':
                case 'wrap':
                case 'resizable':
                case 'placeholder':
                    that._autoExpandUpdate();
                    that._handleScrollbarsDisplay();
                    break;
                case 'selectionEnd':
                case 'selectionStart':
                    that._handleSelectedText();
                    break;
                case 'rows':
                case 'cols':
                    that._updateSizeRowsCols();
                    break;
                case 'disabled':
                    that._setFocusable();
                    break;
                case 'animation':
                case 'readonly':
                    break;
                default:
                    babelHelpers.get(MultilineTextBox.prototype.__proto__ || Object.getPrototypeOf(MultilineTextBox.prototype), 'propertyChangedHandler', this).call(this, propertyName, oldValue, newValue);
                    break;
            }
        }

        /**
        * Gets selected text in relation to a display mode
        */

    }, {
        key: 'selection',
        value: function selection(displayMode) {
            var that = this;
            var start = that.$.input.selectionStart,
                end = that.$.input.selectionEnd,
                value = that.value;

            if (that.displayMode === 'escaped') {
                value = that.$.input.value.substring(start, end);

                if (displayMode === 'escaped') {
                    return value;
                } else {
                    return that._toDefaultDisplayMode(value);
                }
            }

            if (displayMode === 'escaped') {
                value = value.substring(start, end);
                return that._toEscapedDisplayMode(value);
            }

            value = value.substring(start, end);
            return value;
        }

        /**
        * Select Method 
        */

    }, {
        key: 'select',
        value: function select(start, end) {
            var that = this,
                args = Array.from(arguments).slice(0, 2);

            var selectionStart = void 0,
                selectionEnd = void 0;

            for (var i in args) {
                args[i] = parseInt(args[i]) || 0;
            }

            if (args.length === 2) {
                selectionStart = Math.min([start, end]);
                selectionEnd = Math.max([start, end]);
            } else {
                selectionStart = args[0];
            }

            if (args.length === 2) {
                selectionStart = parseInt(selectionStart);

                if (selectionStart > 0) {
                    selectionStart = selectionStart < that.$.input.length ? that.$.input.length : selectionStart;
                } else {
                    selectionStart = 0;
                }

                if (selectionEnd < selectionStart) {
                    selectionEnd = selectionStart;
                } else if (selectionEnd > that.$.input.length) {
                    selectionStart = 0;
                }

                that.$.input.focus();
                that.$.input.setSelectionRange(selectionStart, selectionEnd);

                return;
            } else if (args.length === 1) {
                that.$.input.focus();
                that.$.input.setSelectionRange(selectionStart, selectionStart + 1);

                return;
            }

            that.$.input.select();
        }

        /**
        * Updates the height of the multiline text box according to the number of text rows
        */

    }, {
        key: '_autoExpandUpdate',
        value: function _autoExpandUpdate() {
            var that = this;

            if (!that.autoExpand) {
                return;
            }

            that.$.textBoxHidden.value = that.$.input.value;
            that.$.textBoxHidden.style.cssText = 'height:0px';
            that.$.input.style.cssText = 'height:' + that.$.textBoxHidden.scrollHeight + 'px';
        }
    }, {
        key: '_blurHandler',
        value: function _blurHandler() {
            var that = this;

            if (that._outsideAutoScroll) {
                clearInterval(that._outsideAutoScroll); // new
            }

            that.removeAttribute('focus');
            that._preventProgramaticValueChange = false;
            that._oldValue = that.value;
            that.value = that._userValue || that.value;
        }

        /**
        * MultilineTextBox create element method.
        */

    }, {
        key: '_createElement',
        value: function _createElement() {
            var that = this;

            if (that.autoFocus) {
                //that.$.input.focus();
                if (navigator.userAgent.match(/Edge/)) {
                    setTimeout(function () {
                        that.$.input.focus();
                        that.setAttribute('focus', '');
                    }, 10);
                } else {
                    that.$.input.focus();
                    that.setAttribute('focus', '');
                }
            }

            //  that.autoExpand = (that.theme.indexOf('material') > -1 || that.autoExpand) ? true : false;//

            var wrappedText = that.$.input.innerHTML;

            if (that.value) {
                that.$.input.innerHTML = that.displayMode === 'escaped' ? that._toEscapedDisplayMode(that.value) : that.value;
            } else if (wrappedText.length > 0 && that.displayMode === 'escaped') {
                that.value = wrappedText;
                that.$.input.innerHTML = that._toEscapedDisplayMode(wrappedText);
            } else if (wrappedText.length > 0) {
                that.value = wrappedText;
            }

            that._setFocusable();
            that._syncTextBoxContentOnInitialization();
            that._scrollView = new JQX.Utilities.Scroll(that.$.input, that.$.horizontalScrollBar, that.$.verticalScrollBar);
            that._autoExpandUpdate();
            that._handleScrollbarsDisplay();
            that._initializationValue = that._oldValue = that.value;
            that.value.length > 0 ? that.$.addClass('has-value') : that.$.removeClass('has-value');
            that._handleHintContainer();
        }

        /**
        * Handles the display of the scrollbars, based on set properties and text length.
        */

    }, {
        key: '_handleScrollbarsDisplay',
        value: function _handleScrollbarsDisplay(event) {
            var that = this,
                textBox = that.$.input;

            setTimeout(function () {
                switch (that.horizontalScrollBarVisibility) {
                    case 'disabled':
                        that.$container.addClass('hscroll');
                        that.$.horizontalScrollBar.disabled = true;
                        break;
                    case 'hidden':
                        that.$container.removeClass('hscroll');
                        break;
                    case 'visible':
                        that.$container.addClass('hscroll');
                        that._scrollView.scrollWidth = textBox.scrollWidth - textBox.clientWidth;
                        that._scrollView.scrollTo(that.$.input.scrollLeft, true);
                        that.$.horizontalScrollBar.disabled = false;
                        break;
                    default:
                        if (textBox.scrollWidth > textBox.clientWidth) {
                            that.$container.addClass('hscroll');

                            that._scrollView.scrollWidth = textBox.scrollWidth - textBox.clientWidth;

                            if (event && event.type === 'resize') {
                                that.$.input.scrollLeft = that._scrollView.scrollLeft;
                            } else {
                                that._scrollView.scrollTo(that.$.input.scrollLeft, true);
                            }
                        } else {
                            that.$container.removeClass('hscroll');
                        }
                        that.$.horizontalScrollBar.disabled = false;
                }

                switch (that.verticalScrollBarVisibility) {
                    case 'disabled':
                        that.$container.addClass('vscroll');
                        that.$.verticalScrollBar.disabled = true;
                        break;
                    case 'hidden':
                        that.$container.removeClass('vscroll');
                        break;
                    case 'visible':
                        that.$container.addClass('vscroll');
                        that._scrollView.scrollHeight = textBox.scrollHeight - textBox.clientHeight;
                        that._scrollView.scrollTo(that.$.input.scrollTop);
                        that.$.verticalScrollBar.disabled = false;
                        break;
                    default:
                        if (textBox.scrollHeight > textBox.clientHeight) {
                            that.$container.addClass('vscroll');

                            that._scrollView.scrollHeight = textBox.scrollHeight - textBox.clientHeight;

                            if (event && event.type === 'resize') {
                                that.$.input.scrollTop = that._scrollView.scrollTop;
                            } else {
                                that._scrollView.scrollTo(that.$.input.scrollTop);
                            }
                        } else {
                            that.$container.removeClass('vscroll');
                        }
                        that.$.verticalScrollBar.disabled = false;
                }
            }, 0);
        }

        /**
        * Focus handler. Selects whole text in element's text area on selectAllOnFocus: true
        */

    }, {
        key: '_focusHandler',
        value: function _focusHandler(event) {
            var that = this;

            if (that.disabled) {
                return;
            }

            if (event.target === that) {
                that.$.input.focus();
                that._edgeSelect = false;
                return;
            }

            that.setAttribute('focus', '');

            if (that.selectAllOnFocus) {
                if (navigator.userAgent.match(/Edge/)) {
                    var scrollTop = that.$.input.scrollTop;

                    if (that._edgeSelect) {
                        that._edgeSelect = false;
                        return;
                    }

                    setTimeout(function () {
                        that._edgeSelect = true;
                        that.$.input.select();
                        that.$.input.scrollTop = scrollTop;
                    }, 5);
                } else {
                    that.$.input.select();
                }
            }
        }

        /**
        * Horizontal scrollbar handler.
        */

    }, {
        key: '_horizontalScrollbarHandler',
        value: function _horizontalScrollbarHandler(event) {
            var that = this;

            if (that.disabled || that.horizontalScrollBarVisibility === 'hidden' || that.horizontalScrollBarVisibility === 'disabled') {
                return;
            }

            event.stopPropagation();
            that.$.input.scrollLeft = event.detail.value;
        }

        /**
        * keyDown event handler.
        */

    }, {
        key: '_keyDownHandler',
        value: function _keyDownHandler(event) {
            var that = this,
                key = event.key,
                shiftKey = event.shiftKey,
                ctrlKey = event.ctrlKey,
                value = that.$.input.value;

            function replaceEscapedKeyWith(newValue) {
                var selectionStart = that.$.input.selectionStart,
                    selectionEnd = that.$.input.selectionEnd,
                    value = that.$.input.value;

                event.preventDefault();
                that.$.input.value = value.substring(0, selectionStart) + newValue + value.substring(selectionEnd, value.length);
                that.value = that._toDefaultDisplayMode(that.$.input.value);

                that.$.input.selectionStart = selectionStart + 2;
                that.$.input.selectionEnd = selectionStart + 2;
            }

            if (that.allowVerticalScrollbar && that.$.input.selectionEnd > that.$.input.value.length - 5) {
                that._scrollView.scrollTo(that._scrollView.scrollTop + (event.deltaY < 0 ? -that.offsetHeight : that.offsetHeight));
            }

            if (key.indexOf('Arrow') > -1) {
                event.stopPropagation();
                return;
            }

            switch (key) {
                case 'Enter':
                    {
                        if (that.enterKeyBehavior === 'newLine' && !ctrlKey && !shiftKey) {
                            if (that.displayMode === 'escaped') {
                                replaceEscapedKeyWith('\\n');
                            }

                            break;
                        }

                        event.preventDefault();

                        that._userValue = that.displayMode === 'escaped' ? that._toDefaultDisplayMode(that.$.input.value) : that.$.input.value;
                        that.value = that._userValue;

                        if (value !== '' && that._userValue !== that._oldValue) {
                            that.$.fireEvent('change', {
                                'oldValue': that._oldValue,
                                'value': value,
                                'type': 'submit'
                            });
                        }

                        if (that.enterKeyBehavior === 'clearOnSubmit') {
                            that.$.input.value = '';
                        }

                        that._oldValue = that.value = that._toDefaultDisplayMode(that.$.input.value);
                        that._submitted = true;

                        if (that.displayMode === 'escaped' && that.enterKeyBehavior.toLowerCase().indexOf('submit') < 0 && !ctrlKey && !shiftKey) {
                            replaceEscapedKeyWith('\\n');
                        }

                        if (that.enterKeyBehavior === 'submit' || that.enterKeyBehavior === 'newLine' && ctrlKey) {
                            that.$.input.blur();
                        }

                        break;
                    }
                case 'Escape':
                    if (that.escKeyMode === 'none') {
                        return;
                    }

                    switch (that.escKeyMode) {
                        case 'none':
                            break;
                        case 'clearValue':
                            that.value = that.$.input.value = '';
                            break;
                        case 'previousValue':
                            that.$.input.value = that.displayMode === 'escaped' ? that._toEscapedDisplayMode(that._oldValue) : that._oldValue;
                            break;
                    }

                    break;
                case ' ':
                    if (that.displayMode === 'escaped') {
                        replaceEscapedKeyWith('\\s');
                    }
                    break;
                case 'Backspace':
                    if (that.displayMode === 'escaped' && that.$.input.selectionStart === that.$.input.selectionEnd) {
                        var carretPosition = that.$.input.selectionStart;

                        if (value[carretPosition - 2] === '\\' && (value[carretPosition - 1] === 's' || value[carretPosition - 1] === 'n')) {
                            that.$.input.value = that.$.input.value.substring(0, carretPosition - 2) + that.$.input.value.substring(carretPosition - 2, that.$.input.value.length);
                            that.$.input.selectionStart = carretPosition - 2;
                        }
                    }

                    if (that._scrollView) {
                        that._handleScrollbarsDisplay();
                    }
                    break;
            }
        }

        /**
        * TextBox keyUp event handler.
        */

    }, {
        key: '_keyUpHandler',
        value: function _keyUpHandler(event) {
            var that = this,
                key = event.key;

            switch (key) {
                case 'ArrowLeft':
                case 'ArrowUp':
                case 'ArrowDown':
                    that._handlePointerInEscapedSymbol();
                    break;
                case 'ArrowRight':
                    that._handlePointerInEscapedSymbol('next');
                    break;
            }

            that._autoExpandUpdate();
            that._userValue = that.displayMode === 'escaped' ? that._toDefaultDisplayMode(that.$.input.value) : that.$.input.value;

            that._submitKeyUpHandler();
        }

        /**
        * MultilineTextBox keyDown event handler.
        */

    }, {
        key: '_textBoxKeyDownHandler',
        value: function _textBoxKeyDownHandler(event) {
            var that = this,
                key = event.key;

            if (that._scrollView) {
                that._handleScrollbarsDisplay();
            }

            that._autoExpandUpdate();
            that.value && that.value.length > 0 ? that.$.addClass('has-value') : that.$.removeClass('has-value');

            if (['Enter', 'Escape'].indexOf(key) === -1) {
                that._preventProgramaticValueChange = true;
            }

            if (['ArrowLeft', 'ArrowUp', 'ArrowDown', 'ArrowRight'].indexOf(key) > -1) {
                that._scrollView.scrollTo(that.$.input.scrollTop);
            }

            if (['PageUp', 'PageDown'].indexOf(key) > -1 && JQX.Utilities.Core.Browser.Chrome) {
                if (event.key === 'PageUp') {
                    that.$.input.setSelectionRange(0, 0);
                    that.$.input.scrollTop = 0;
                }

                if (event.key === 'PageDown') {
                    that.$.input.setSelectionRange(that.$.input.value.length, that.$.input.value.length);
                    that.$.input.scrollTop = that._scrollView.verticalScrollBar.max;
                }

                event.preventDefault();
            }
        }

        /**
        * Mouse wheel handler.
        */

    }, {
        key: '_mouseWheelHandler',
        value: function _mouseWheelHandler(event) {
            var that = this;

            if (that.disabled || that.$.verticalScrollBar.disabled) {
                return;
            }

            that._scrollView.scrollTo(that._scrollView.scrollTop + (event.deltaY < 0 ? -that.offsetHeight : that.offsetHeight));
            that.$.input.scrollTop += event.deltaY < 0 ? -that.offsetHeight : that.offsetHeight;

            if (that.$.input.scrollTop > 0) {
                event.preventDefault();
            }
        }

        /**
        * Gets the text in the TextBox before widget's initialization
        */

    }, {
        key: '_syncTextBoxContentOnInitialization',
        value: function _syncTextBoxContentOnInitialization() {
            var that = this;
            var value = void 0;

            if (that.value === '') {
                value = that.innerHTML;
            } else {
                value = that.value;
            }

            if (that.displayMode === 'escaped') {
                if (value.match(/\r\n|\n\r|\n|\r|\s|\t|\f|\r/g)) {
                    that.value = that._initializationValue = value;
                    that.$.input.value = that._toEscapedDisplayMode(value);
                } else {
                    that.value = that._initializationValue = that._toDefaultDisplayMode(value);
                    that.$.input.value = value;
                }

                return;
            }

            that.$.input.value = that.value = that._initializationValue = value;
        }

        /**
        * TextBox change handler.
        */

    }, {
        key: '_textBoxChangeHandler',
        value: function _textBoxChangeHandler(event) {
            var that = this,
                clipboardData = event.clipboardData || event.originalEvent && event.originalEvent.clipboardData || window.clipboardData,
                oldValue = that.value;

            if (that.displayMode === 'escaped') {
                var selectionStart = that.$.input.selectionStart,
                    selectionEnd = that.$.input.selectionEnd;

                if (clipboardData) {
                    var clipboardValue = clipboardData.getData('text'),
                        value = that.$.input.value;

                    event.preventDefault();
                    clipboardValue = that._toEscapedDisplayMode(clipboardValue);
                    that.$.input.value = value.substring(0, selectionStart) + clipboardValue + value.substring(selectionEnd, value.length);
                }

                that.value = that._toDefaultDisplayMode(that.$.input.value);
            } else {
                that.value = that.$.input.value;
            }

            that._handleScrollbarsDisplay();
            that.value.length > 0 ? that.$.addClass('has-value') : that.$.removeClass('has-value');

            if (!clipboardData) {
                that.$.fireEvent('change', {
                    'value': that.value,
                    'oldValue': oldValue,
                    'type': 'blur'
                });
            }

            that._handleHintContainer();
        }

        /**
        * Resize Element down handler.
        */

    }, {
        key: '_resizeDownHandler',
        value: function _resizeDownHandler() {
            var that = this;

            if (that.disabled || !that.resizable) {
                return;
            }

            that._resizeStarted = true;
            that.$container.addClass('jqx-resize');

            if (!that.readonly) {
                that.$.input.setAttribute('readonly', '');
            }
        }

        /**
        * Resize Element move handler.
        */

    }, {
        key: '_resizeMoveHandler',
        value: function _resizeMoveHandler(event) {
            var that = this;

            if (that.disabled || !that.resizable || !that._resizeStarted) {
                return;
            }

            var rectObject = that.getBoundingClientRect(),
                min = { width: 50, height: 50 },
                newWidth = event.clientX - rectObject.left,
                newHeight = event.clientY - rectObject.top;

            if (newWidth > min.width) {
                that.style.width = newWidth + 'px';
            }

            if (newHeight > min.height) {
                that.style.height = newHeight + 'px';
            }
        }

        /**
        * Update size on cols and rows change.
        */

    }, {
        key: '_updateSizeRowsCols',
        value: function _updateSizeRowsCols() {
            var that = this;

            that.$.container.removeAttribute('style');

            setTimeout(function () {
                if ((that.horizontalScrollBarVisibility === 'disabled' || that.horizontalScrollBarVisibility === 'hidden') && (that.verticalScrollBarVisibility === 'disabled' || that.verticalScrollBarVisibility === 'hidden')) {
                    return;
                }

                var rectObject = that.getBoundingClientRect();

                that.$.container.style.width = rectObject.width + 'px';
                that.$.container.style.height = rectObject.height + 'px';
            }, 0);
        }

        /**
        * Up handler.
        */

    }, {
        key: '_upHandler',
        value: function _upHandler(event) {
            var that = this;

            that._selectionStarted = false;

            if (that.disabled) {
                return;
            }

            if (event.originalEvent.target === that.$.input) {
                that._handlePointerInEscapedSymbol();
                return;
            }

            that.$container.removeClass('jqx-resize');

            if (!that.readonly) {
                that.$.input.removeAttribute('readonly');
            }

            if (that._resizeStarted) {
                that.$.input.focus();
            }

            that._resizeStarted = false;
        }

        /**
        * Vertical scrollbar handler.
        */

    }, {
        key: '_verticalScrollbarHandler',
        value: function _verticalScrollbarHandler(event) {
            var that = this;

            if (that.disabled || that.verticalScrollBarVisibility === 'disabled' || that.verticalScrollBarVisibility === 'hidden') {
                return;
            }

            event.stopPropagation();
            that.$.input.scrollTop = event.detail.value;
        }

        /**
        * Used in drag outside support.
        */

    }, {
        key: '_documentDownHandler',
        value: function _documentDownHandler(event) {
            var that = this;

            that._selectionStarted = false;

            if (!event.originalEvent || !that.contains(event.originalEvent.target)) {
                return;
            }

            that._selectionStarted = true;
            that._selectionStartTime = new Date();
            that._pointerDown = { pageX: event.pageX, pageY: event.pageY };
            that._edgeSelect = false;
        }
    }, {
        key: '_documentSelectionOutsideHandler',
        value: function _documentSelectionOutsideHandler(event) {
            var that = this,
                coordOffset = 10;

            clearInterval(that._outsideAutoScroll);

            if (!that._selectionStarted) {
                return;
            }

            var inputCoord = that.$.input.getBoundingClientRect(),
                topBound = inputCoord.y + coordOffset,
                bottomBound = inputCoord.y + inputCoord.height - coordOffset;

            if (event.pageY > topBound && event.pageY < bottomBound) {
                return;
            }

            var standardClickDelay = 300;
            var isClick = new Date() - that._selectionStartTime < standardClickDelay;
            var isDrag = !isClick && (Math.abs(that._pointerDown.pageX - event.pageX) >= 3 || Math.abs(that._pointerDown.pageY - event.pageY) >= 3);

            if (!isDrag) {
                return;
            }

            that._outsideAutoScroll = setInterval(function () {
                scrollElement();
                scrollElement(true);
            }, 10);

            function scrollElement(horizontally) {
                var elementCoordinates = that.getBoundingClientRect(),
                    documentElement = document.documentElement,
                    pointerOffset = horizontally ? elementCoordinates.left + documentElement.scrollLeft - event.pageX : elementCoordinates.top + documentElement.scrollTop - event.pageY,
                    suffix = horizontally ? 'Left' : 'Top';

                if (pointerOffset > 0) {
                    that.$.input['scroll' + suffix] -= 10;
                    that._scrollView['scroll' + suffix] -= 10;
                } else {
                    that.$.input['scroll' + suffix] += 10;
                    that._scrollView['scroll' + suffix] += 10;
                }
            }
        }
    }, {
        key: '_selectStartHandler',
        value: function _selectStartHandler() {}
    }, {
        key: '_styleChangedHandler',
        value: function _styleChangedHandler() {}
    }], [{
        key: 'properties',

        /** 
        * MultilineTextBox's properties 
        */
        get: function get() {
            return {
                'autoCapitalize': {
                    value: 'none',
                    allowedValues: ['none', 'words', 'characters'],
                    type: 'string'
                },
                'autoComplete': {
                    value: 'off',
                    allowedValues: ['on', 'off'],
                    type: 'string'
                },
                'autoExpand': {
                    value: false,
                    type: 'boolean'
                },
                'cols': {
                    value: 20,
                    type: 'number?'
                },
                'enterKeyBehavior': {
                    value: 'newLine',
                    allowedValues: ['submit', 'clearOnSubmit', 'newLine'],
                    type: 'string'
                },
                'horizontalScrollBarVisibility': {
                    type: 'string',
                    value: 'auto',
                    allowedValues: ['auto', 'disabled', 'hidden', 'visible']
                },
                'minLength': {
                    value: 0,
                    type: 'number'
                },
                'resizable': {
                    value: false,
                    type: 'boolean'
                },
                'rows': {
                    value: 5,
                    type: 'number?'
                },
                'selectionDirection': {
                    value: 'none',
                    allowedValues: ['forward', 'backward', 'none'],
                    type: 'string'
                },
                'selectionEnd': {
                    value: 0,
                    reflectToAttribute: false,
                    type: 'number'
                },
                'selectionStart': {
                    value: 0,
                    reflectToAttribute: false,
                    type: 'number'
                },
                'spellCheck': {
                    value: false,
                    type: 'boolean'
                },
                'type': {
                    value: 'textarea',
                    type: 'string',
                    defaultReflectToAttribute: true,
                    readonly: true
                },
                'verticalScrollBarVisibility': {
                    type: 'string',
                    value: 'auto',
                    allowedValues: ['auto', 'disabled', 'hidden', 'visible']
                },
                'wrap': {
                    value: 'soft',
                    allowedValues: ['hard', 'soft', 'off'],
                    type: 'string'
                }
            };
        }

        /**
        * MultilineTextBox's event listeners.
        */

    }, {
        key: 'listeners',
        get: function get() {
            return {
                'down': '_documentDownHandler',
                'document.mousemove': '_documentSelectionOutsideHandler',
                'container.resize': '_handleScrollbarsDisplay',
                'document.move': '_resizeMoveHandler',
                'document.up': '_upHandler',
                'focus': '_focusHandler',
                'horizontalScrollBar.change': '_horizontalScrollbarHandler',
                'keydown': '_keyDownHandler',
                'mouseenter': '_mouseEventsHandler',
                'mouseleave': '_mouseEventsHandler',
                'resize': '_handleScrollbarsDisplay',
                'resizeElement.down': '_resizeDownHandler',
                'styleChanged': '_handleScrollbarsDisplay',
                'input.change': '_textBoxChangeHandler',
                'input.focus': '_focusHandler',
                'input.blur': '_blurHandler',
                'input.keydown': '_textBoxKeyDownHandler',
                'input.keyup': '_keyUpHandler',
                'input.paste': '_textBoxChangeHandler',
                'input.select': '_textBoxSelectHandler',
                'wheel': '_mouseWheelHandler',
                'verticalScrollBar.change': '_verticalScrollbarHandler'
            };
        }
    }, {
        key: 'requires',
        get: function get() {
            return {
                'JQX.ScrollBar': 'jqxscrollbar.js'
            };
        }
    }]);
    return MultilineTextBox;
}(JQX.TextBox));