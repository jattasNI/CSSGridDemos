/**
* PasswordTextBox custom element.
*/
JQX('jqx-password-text-box', class PasswordTextBox extends JQX.TextBox {
    /** 
    * PasswordTextBox's properties 
    */
    static get properties() {
        return {
            'messages': {
                value: {
                    'en': {
                        'passwordStrength': 'Password strength',
                        'short': 'Short',
                        'weak': 'Weak',
                        'far': 'Far',
                        'good': 'Good',
                        'strong': 'Strong',
                        'showPassword': 'Show password'
                    }
                },
                type: 'object',
                extend: true
            },
            'passwordStrength': {
                value: null,
                type: 'function?',
                reflectToAttribute: false
            },
            'showPasswordIcon': {
                value: false,
                type: 'boolean'
            },
            'showPasswordStrength': {
                value: false,
                type: 'boolean'
            },
            'tooltipArrow': {
                value: false,
                type: 'boolean'
            },
            'tooltipDelay': {
                value: 0,
                type: 'number'
            },
            'tooltipPosition': {
                allowedValues: ['bottom', 'top', 'left', 'right', 'absolute'],
                value: 'top',
                type: 'string'
            },
            'tooltipTemplate': {
                value: null,
                type: 'string?'
            },
			'type': {
				value: 'password',
				type: 'string',
				defaultReflectToAttribute: true,
				readonly: true
			},		
            'value': {
                value: '',
                reflectToAttribute: false,
                type: 'string'
            }
        }
    }

    static get requires() {
        return {
            'JQX.Tooltip': 'jqxtooltip.js'
        }
    }

    /**
    * PasswordTextBox's event listeners.
    */
    static get listeners() {
        return {
            'document.up': '_documentUpHandler',
            'blur': '_blurHandler',
            'focus': '_focusHandler',
            'mouseenter': '_mouseEventsHandler',
            'mouseleave': '_mouseEventsHandler',
            'passwordIcon.down': '_showPassword',
            'input.change': '_textBoxChangeHandler',
            'input.paste': '_textBoxChangeHandler',
            'input.keyup': '_textBoxChangeHandler',
            'input.blur': '_blurHandler',
            'input.focus': '_focusHandler'
        }
    }

    /**
    * PasswordTextBox's HTML template.
    */
    template() {
        return `<div id="container">
                    <span id="label" inner-h-t-m-l="[[label]]" class ="jqx-label"></span>
                    <div id="innerContainer" class="jqx-inner-container">
                            <input class ="jqx-input" type="password" id="input"
                                disabled="[[disabled]]"
                                maxlength="[[maxLength]]"
                                minlength="[[minLength]]"
                                name="[[name]]"
                                placeholder="[[placeholder]]"
                                value="[[value]]">
                            <span id="passwordIcon" title="Show Password" class ="jqx-password-icon jqx-hidden">&#xe80a; </span>
                    </div>
                    <span id="hint" class ="jqx-hint"></span>
                    <jqx-tooltip id="tooltip"
                        open-mode="manual"
                        arrow="[[tooltipArrow]]"
                        tooltip-template="[[tooltipTemplate]]"
                        position="[[tooltipPosition]]"
                        delay="[[tooltipDelay]]">
                     </jqx-tooltip>
                </div>`;
    }

    /**
    * Updates the PasswordTextBox when a property is  changed.
    * @param {string} propertyName The name of the property.
    * @param {number/string} oldValue The previously entered value.
    * @param {number/string} newValue The new entered value.
    */
    propertyChangedHandler(propertyName, oldValue, newValue) {
        const that = this;
        let strength;

        switch (propertyName) {
            case 'locale':
            case 'messages':
            case 'passwordStrength':
                strength = that._evaluatePasswordStrength();

                that._updateTooltipString(strength);
                that.$.passwordIcon.setAttribute('title', that.localize('showPassword'));
                that._updatePasswordStrengthStyles(strength);
                break;
            case 'tooltipPosition':
                that.$.tooltip.position = that.tooltipPosition;
                break;
            case 'tooltipTemplate':
                that.$.tooltip.tooltipTemplate = that.tooltipTemplate;
                break;
            case 'value':
                strength = that._evaluatePasswordStrength();

                that._updateTooltipString(strength);
                that._updatePasswordStrengthStyles(strength);
                break;
            case 'disabled':
                that._setFocusable();
                break;
            case 'readonly':
                break;
            default:
                super.propertyChangedHandler(propertyName, oldValue, newValue);
                break;
        }
    }

    /**
     * Element's create method
     */
    _createElement() {
        const that = this;

        if (that.autoFocus) {
            that.$.input.focus();
        }

        that._setFocusable();
        that.$.tooltip.selector = that.$.innerContainer;
        that.$.passwordIcon.setAttribute('title', that.localize('showPassword'));
        that._updateTooltipString('short');
        that._updatePasswordStrengthStyles();
        that._initializationValue = that.value;
        that.value.length > 0 ? that.$.addClass('has-value') : that.$.removeClass('has-value');
        that._handleHintContainer();
    }

    /**
    * PasswordTextBox focus handler.
    */
    _focusHandler() {
        const that = this;

        if (that.disabled) {
            return;
        }

        if (that.selectAllOnFocus) {
            that.$.input.select();
        }

        if (that.showPasswordIcon) {
            that.$passwordIcon.removeClass('jqx-hidden');
        }

        that.setAttribute('focus', '');

        that._valueBeforeChange = that.value;

        if (!that.showPasswordStrength) {
            return;
        }

        if (!that._tooltipOpened) {
            that.$.tooltip.open();
            that._tooltipOpened = true;
        }
    }

    /**
    * PasswordTextBox blur handler.
    */
    _blurHandler() {
        const that = this;

        if (that.disabled || that._passwordIconPressed) {
            return;
        }

        if (that._valueBeforeChange !== that.value) {
            that.$.fireEvent('change', {
                'newValue': that.value,
                'oldValue': that._valueBeforeChange
            });
            that._valueBeforeChange = '';
        }

        if (that.showPasswordIcon) {
            that.$passwordIcon.addClass('jqx-hidden');
        }

        that.removeAttribute('focus');
        that.value.length > 0 ? that.$.addClass('has-value') : that.$.removeClass('has-value');

        if (!that._tooltipOpened) {
            return;
        }

        that.$.tooltip.close();
        that._tooltipOpened = false;
    }

    /**
    * Shows password if show passwor icon is pressed.
    */
    _showPassword() {
        const that = this;

        if (that.disabled || !that.showPasswordIcon) {
            return;
        }

        that.$.input.type = 'text';
        that._passwordIconPressed = true;
    }

    /**
    * Hides password.
    */
    _documentUpHandler() {
        const that = this;

        if (that.disabled || !that.showPasswordIcon || !that._passwordIconPressed) {
            return;
        }

        that.$.input.type = 'password';
        that._passwordIconPressed = false;
        that.$.input.focus();
    }

    /**
    *  PasswordTextBox change handler.
    */
    _textBoxChangeHandler() {
        const that = this;

        if (that.disabled || that.readonly) {
            return;
        }

        that.value = that.$.input.value;
        let strength = that._evaluatePasswordStrength();

        that._updateTooltipString(strength);
        that._updatePasswordStrengthStyles(strength);
    }

    /**
    *  Updates container's styles related to the password strength.
    */
    _updatePasswordStrengthStyles(strength) {
        const that = this,
            passwordStrengthOptions = ['short', 'weak', 'far', 'good', 'strong'];

        strength = strength || 'short';

        for (let i = 0; i < passwordStrengthOptions.length; i++) {
            that.$container.removeClass('jqx-password-' + passwordStrengthOptions[i]);
        }

        if (that.disabled) {
            return;
        }

        that.$container.addClass('jqx-password-' + strength);
    }

    /**
    *  Evaluates the strength of the password string.
    */
    _evaluatePasswordStrength() {
        const that = this,
            password = that.$.input.value,
            passwordLength = password.length,
            allowedSymbols = '<>@!#$%^&*()_+[]{}?:;|\'"\\,./~`-=';

        if (that.disabled) {
            return;
        }

        if (that.passwordStrength) {
            return that.passwordStrength(password, allowedSymbols);
        }

        let letters = 0,
            numbers = 0,
            specials = 0,
            passwordStrength = 0;

        for (var i = 0; i < passwordLength; i++) {
            const charAt = password.charAt(i),
                charCodeAt = password.charCodeAt(i);

            if ((charCodeAt > 64 && charCodeAt < 91) || (charCodeAt > 96 && charCodeAt < 123) || (charCodeAt > 127 && charCodeAt < 155) || (charCodeAt > 159 && charCodeAt < 166)) {
                letters += 1;
                continue
            }
            if (isNaN(charAt) === false) {
                numbers += 1;
                continue
            }
            if (allowedSymbols.indexOf(charAt) !== -1) {
                specials += 1;
                continue
            }
        }

        passwordStrength = letters + numbers + 2 * specials + letters * numbers / 2 + passwordLength;

        if (passwordLength < 8) {
            return 'short';
        }
        else {
            if (passwordStrength < 20) {
                return 'weak';
            }
            else if (passwordStrength < 30) {
                return 'far';
            }
            else if (passwordStrength < 40) {
                return 'good';
            }
            else {
                return 'strong';
            }
        }
    }

    _keyUpHandler() { }
    _mouseWheelHandler() { }
    _resizeHandler() { }
    _selectStartHandler() { }
    _setDropDownSize() { }
    _styleChangedHandler() { }

    _updateTooltipString(strength) {
        const that = this;

        that.$.tooltip.value = '<span class="password-strength-label">' + that.localize('passwordStrength') + ':</span><span class="password-strength-value">' + that.localize(strength) + '</span>';
    }
});