'use strict';

/**
 * Multi Split Button custom element.
 */
JQX('jqx-multi-split-button', function (_JQX$DropDownList) {
    babelHelpers.inherits(MultiSplitButton, _JQX$DropDownList);

    function MultiSplitButton() {
        babelHelpers.classCallCheck(this, MultiSplitButton);
        return babelHelpers.possibleConstructorReturn(this, (MultiSplitButton.__proto__ || Object.getPrototypeOf(MultiSplitButton)).apply(this, arguments));
    }

    babelHelpers.createClass(MultiSplitButton, [{
        key: 'template',
        value: function template() {
            return '<div id="container">\n                    <span class="jqx-label" id="label">[[label]]</span>\n                    <div id="content" class="jqx-content">\n                        <div id="actionButton" class ="jqx-input jqx-action-button">\n                         <template>\n                                 <div class="jqx-multi-split-button-buttons" *items={{buttonsDataSource}}><span class="jqx-action-split-button" inner-H-T-M-L={{item}}></span></div>\n                          </template>\n                        </div>\n                        <span id="dropDownButton" class="jqx-drop-down-button">\n                            <span id="arrow"></span>\n                        </span>\n                        <div id="dropDownContainer" class="jqx-drop-down jqx-drop-down-container jqx-visibility-hidden">\n                            <jqx-list-box id="listBox" unfocusable\n                                    animation="[[animation]]"\n                                    data-source="[[dataSource]]"\n                                    disabled="[[disabled]]"\n                                    display-loading-indicator="[[displayLoadingIndicator]]"\n                                    display-member="[[displayMember]]"\n                                    filterable="[[filterable]]"\n                                    filter-mode="[[filterMode]]"\n                                    filter-input-placeholder="[[filterInputPlaceholder]]"\n                                    grouped="[[grouped]]"\n                                    group-member="[[groupMember]]"\n                                    item-height="[[itemHeight]]"\n                                    item-template="[[itemTemplate]]"\n                                    incremental-search-delay="[[incrementalSearchDelay]]"\n                                    incremental-search-mode="[[incrementalSearchMode]]"\n                                    loading-indicator-placeholder="[[loadingIndicatorPlaceholder]]"\n                                    loading-indicator-position="[[loadingIndicatorPosition]]"\n                                    name="[[name]]"\n                                    placeholder="[[dropDownPlaceholder]]"\n                                    readonly="[[readonly]]"\n                                    selected-indexes="{{selectedIndexes}}"\n                                    selection-mode="[[selectionMode]]"\n                                    selected-values="{{selectedValues}}"\n                                    sorted="[[sorted]]"\n                                    theme="[[theme]]"\n                                    value-member="[[valueMember]]"\n                                    horizontal-scroll-bar-visibility="[[horizontalScrollBarVisibility]]"\n                                    vertical-scroll-bar-visibility="[[verticalScrollBarVisibility]]"\n                                    virtualized="[[virtualized]]">\n                                <content></content>\n                            </jqx-list-box>\n                            <div id="resizeBar" class="jqx-drop-down-resize-bar">\n                                <div></div>\n                            </div>\n                         </div>\n                    </div>\n                    <span class="jqx-hint" id="hint">[[hint]]</span>\n                </div>';
        }
    }, {
        key: '_blurEventHandler',


        /**
         * ActionButton / DropDownButton Blur event handler
         */
        value: function _blurEventHandler() {
            var that = this;

            that.removeAttribute('focus');

            if (!that._preventDropDownClose) {
                that.close();
            }
        }

        /**
         * ActionButton / DropDownButton Focus event handler
         */

    }, {
        key: '_focusEventHandler',
        value: function _focusEventHandler() {
            this.setAttribute('focus', '');
        }
    }, {
        key: '_documentUpHandler',
        value: function _documentUpHandler(event) {
            var that = this;

            babelHelpers.get(MultiSplitButton.prototype.__proto__ || Object.getPrototypeOf(MultiSplitButton.prototype), '_documentUpHandler', this).call(this, event);

            var splitButtons = that.querySelectorAll('.jqx-action-split-button');

            for (var i = 0; i < splitButtons.length; i++) {
                var splitButton = splitButtons[i];

                splitButton.removeAttribute('active');
            }

            that.removeAttribute('active');
        }
    }, {
        key: '_dropDownButtonMouseEventsHandler',
        value: function _dropDownButtonMouseEventsHandler(event) {
            var that = this;

            if (event.type === 'mouseleave') {
                that.$.dropDownButton.removeAttribute('hover');
                that.removeAttribute('hover');
            } else {
                that.$.dropDownButton.setAttribute('hover', '');
                that.setAttribute('hover', '');
            }
        }
    }, {
        key: '_buttonsDownHandler',
        value: function _buttonsDownHandler(event) {
            var that = this;

            var splitButtons = that.querySelectorAll('.jqx-action-split-button');

            for (var i = 0; i < splitButtons.length; i++) {
                var splitButton = splitButtons[i];
                var rect = splitButton.getBoundingClientRect();

                if (event.type !== 'mouseleave') {
                    that.setAttribute('active', '');
                    splitButtons[i].removeAttribute('active');
                    if (rect.left <= event.pageX && event.pageX <= rect.width + rect.left) {
                        splitButtons[i].setAttribute('active', '');
                        that.$.fireEvent('buttonClick', {
                            'index': i,
                            'label': that.buttonsDataSource[i]
                        });
                    }
                } else {
                    splitButtons[i].removeAttribute('active');
                    that.removeAttribute('active', '');
                }
            }
        }
    }, {
        key: '_buttonsMouseEventsHandler',
        value: function _buttonsMouseEventsHandler(event) {
            var that = this;

            var splitButtons = that.querySelectorAll('.jqx-action-split-button');

            for (var i = 0; i < splitButtons.length; i++) {
                var splitButton = splitButtons[i];
                var rect = splitButton.getBoundingClientRect();

                if (event.type !== 'mouseleave') {
                    that.setAttribute('hover', '');
                    splitButtons[i].removeAttribute('hover');
                    if (rect.left <= event.pageX && event.pageX <= rect.width + rect.left) {
                        splitButtons[i].setAttribute('hover', '');
                    }
                } else {
                    splitButtons[i].removeAttribute('hover');
                    that.removeAttribute('hover', '');
                }
            }
        }
    }, {
        key: '_applySelection',
        value: function _applySelection() {
            var that = this;

            if (that.buttonsDataSource.length === 0) {
                if (that.selectionDisplayMode === 'placeholder' || that.selectedIndexes.length === 0) {
                    that.querySelector('.jqx-template-container').innerHTML = that.placeholder;
                    return;
                }

                if (!that.$.listBox._items || that.$.listBox._items.length === 0) {
                    return;
                }

                that.querySelector('.jqx-template-container').innerHTML = '<div class="jqx-multi-split-button-buttons"><span class="jqx-action-split-button"></span></div>';
                that.$.actionButton.querySelector('.jqx-action-split-button').appendChild(that._createToken());
            }
        }
    }, {
        key: 'propertyChangedHandler',
        value: function propertyChangedHandler(propertyName, oldValue, newValue) {
            var that = this;

            if (propertyName === 'dataSource' || propertyName === 'displayMember') {
                //Check the new listBox size
                that._setDropDownSize();
                that._positionDetection.checkBrowserBounds('vertically');
                that._positionDetection.positionDropDown();
                that._positionDetection.checkBrowserBounds('horizontally');
            } else {
                babelHelpers.get(MultiSplitButton.prototype.__proto__ || Object.getPrototypeOf(MultiSplitButton.prototype), 'propertyChangedHandler', this).call(this, propertyName, oldValue, newValue);
            }
        }
    }], [{
        key: 'properties',

        //Multi Split Button's properties.
        get: function get() {
            return {
                'buttonsDataSource': {
                    value: [],
                    type: 'array'
                },
                'dropDownOpenMode': {
                    allowedValues: ['none', 'dropDownButton', 'auto'],
                    value: 'dropDownButton',
                    type: 'string'
                }
            };
        }
    }, {
        key: 'listeners',
        get: function get() {
            return {
                'actionButton.down': '_buttonsDownHandler',
                'actionButton.mouseenter': '_buttonsMouseEventsHandler',
                'actionButton.move': '_buttonsMouseEventsHandler',
                'actionButton.mouseleave': '_buttonsMouseEventsHandler',
                'dropDownButton.mouseenter': '_dropDownButtonMouseEventsHandler',
                'dropDownButton.mouseleave': '_dropDownButtonMouseEventsHandler',
                'actionButton.focus': '_focusEventHandler',
                'actionButton.blur': '_blurEventHandler',
                'dropDownButton.focus': '_focusEventHandler',
                'dropDownButton.blur': '_blurEventHandler'
            };
        }
    }]);
    return MultiSplitButton;
}(JQX.DropDownList));