'use strict';

JQX.Utilities.Assign('Grid.Pager', function () {
    function Pager() {
        babelHelpers.classCallCheck(this, Pager);
    }

    babelHelpers.createClass(Pager, [{
        key: '_refreshPaging',
        value: function _refreshPaging(pageIndexChanged) {
            var that = this;

            requestAnimationFrame(function () {
                that._refreshLayout();
                that._refreshSelection();

                if (!pageIndexChanged) {
                    that._initializeRowElements();
                    that._refreshLayout();
                }

                if (that.dataSource && that.dataSource.virtualDataSource) {
                    that._virtualDataRequest(!pageIndexChanged ? 'pageSizeChange' : 'pageIndexChange');
                } else {
                    that._recycle(false);
                }

                var first = that.paging.pageIndex * that.paging.pageSize;
                var last = first + that.paging.pageSize;

                that.$.fireEvent('page', {
                    'data': {
                        first: first,
                        last: last,
                        size: last - first
                    }
                });
            });
        }
    }, {
        key: '_renderPagers',
        value: function _renderPagers() {
            var that = this;
            if (that.pager.visible) {
                requestAnimationFrame(function () {
                    var headerPager = document.createElement('jqx-pager');
                    var footerPager = document.createElement('jqx-pager');

                    that.$.headerPager.innerHTML = '';
                    that.$.footerPager.innerHTML = '';

                    that.$.headerPager.appendChild(headerPager);
                    that.$.footerPager.appendChild(footerPager);

                    var localizePager = function localizePager(pager) {
                        var messages = pager.messages[that.locale];
                        if (!messages) {
                            pager.messages[that.locale] = {};
                        }

                        Object.assign(pager.messages[that.locale], {
                            'firstButton': that.localize('pagerFirstButton'),
                            'lastButton': that.localize('pagerLastButton'),
                            'previousButton': that.localize('pagerPreviousButton'),
                            'nextButton': that.localize('pagerNextButton'),
                            'navigateToLabel': that.localize('pagerNavigateToLabel'),
                            'pageSizeLabel': that.localize('pagerPageSizeLabel'),
                            'navigateToInputPlaceholder': that.localize('pagerNavigateToInputPlaceholder'),
                            'ellipsis': that.localize('pagerEllipsis'),
                            'summaryString': that.localize('pagerSummaryString'),
                            'summaryPrefix': that.localize('pagerSummaryPrefix'),
                            'summarySuffix': that.localize('pagerSummarySuffix')
                        });
                    };

                    var getPagesCount = function getPagesCount() {
                        var visibleRows = that.getVisibleRows();

                        var rowsCount = visibleRows.length;

                        if (that.rowHierarchy) {
                            rowsCount = 0;

                            for (var i = 0; i < visibleRows.length; i++) {
                                var row = visibleRows[i];

                                if (row.level === 0 && !row.parent) {
                                    rowsCount++;
                                }
                            }

                            if (that.dataSource.virtualDataSourceLength) {
                                rowsCount = that.dataSource.virtualDataSourceLength;
                            }
                        }

                        return Math.ceil(rowsCount / that.paging.pageSize);
                    };

                    var addPropertyBindings = function addPropertyBindings(pager, pagerPosition) {
                        var id = pagerPosition + 'GridPager';

                        pager.setAttribute('jqx-id', id);
                        that.$[id] = pager;
                        that['$' + id] = JQX.Utilities.Extend(pager);

                        pager.beginUpdate();
                        that.addPropertyBinding('[[pager_navigationButtons_position]]', 'navigationButtonsPosition', pager);
                        that.addPropertyBinding('[[pager_navigationButtons_firstLastButtons_visible]]', 'showFirstLastNavigationButtons', pager);
                        that.addPropertyBinding('[[pager_navigationButtons_prevNextButtons_visible]]', 'showPrevNextNavigationButtons', pager);
                        that.addPropertyBinding('[[pager_navigationButtons_labels_visible]]', 'showNavigationButtonLabels', pager);
                        that.addPropertyBinding('[[pager_pageIndexSelectors_visible]]', 'showPageIndexSelectors', pager);
                        that.addPropertyBinding('[[pager_pageIndexSelectors_dataSource]]', 'pageIndexSelectors', pager);
                        that.addPropertyBinding('[[pager_summary_visible]]', 'showSummary', pager);
                        that.addPropertyBinding('[[pager_summary_position]]', 'summaryPosition', pager);
                        that.addPropertyBinding('[[pager_navigationInput_visible]]', 'showNavigationInput', pager);
                        that.addPropertyBinding('[[pager_navigationInput_position]]', 'navigationInputPosition', pager);
                        that.addPropertyBinding('[[pager_pageSizeSelector_visible]]', 'showPageSizeSelector', pager);
                        that.addPropertyBinding('[[pager_pageSizeSelector_dataSource]]', 'pageSizeSelectorDataSource', pager);
                        that.addPropertyBinding('[[pager_pageSizeSelector_position]]', 'pageSizeSelectorPosition', pager);
                        that.addPropertyBinding('[[pager_autoEllipsis]]', 'autoEllipsis', pager);
                        that.addPropertyBinding('[[!paging_enabled]]', 'disabled', pager);
                        that.addPropertyBinding('{{paging_pageIndex}}', 'pageIndex', pager);
                        that.addPropertyBinding('{{paging_pageSize}}', 'pageSize', pager);

                        pager.pagesCount = getPagesCount();
                        pager.$.pageSizeSelector.dropDownAppendTo = 'body';
                        pager.$.pageSizeSelector.selectedIndexes = [0];

                        that['$' + id].listen('change', function (event) {
                            pager.pagesCount = getPagesCount();
                            if (that.paging.pageIndex > pager.pagesCount) {
                                that.paging.pageIndex = pager.pagesCount - 1;
                            }

                            headerPager.refresh();
                            footerPager.refresh();

                            that._refreshPaging(event.detail.index !== undefined);
                        });

                        pager.endUpdate();
                    };

                    addPropertyBindings(headerPager, 'header');
                    addPropertyBindings(footerPager, 'footer');
                    localizePager(headerPager);
                    localizePager(footerPager);
                });
            }
        }
    }]);
    return Pager;
}());