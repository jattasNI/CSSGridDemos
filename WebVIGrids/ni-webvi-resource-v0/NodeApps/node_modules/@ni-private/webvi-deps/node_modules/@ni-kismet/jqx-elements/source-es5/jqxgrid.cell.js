'use strict';

JQX.Utilities.Assign('Grid.Cell', function () {
    function Cell(row, column) {
        babelHelpers.classCallCheck(this, Cell);

        var that = this;

        that.row = row;
        that.column = column;
        that.grid = row.grid;
        that.rowSpan = 1;
        that.colSpan = 1;
        that.value = undefined;
        that.fontSize = null;
        that.fontWeight = null;
        that.fontFamily = null;
        that.color = null;
        that.background = null;
        that.borderColor = null;
        that.tooltip = null;
        that.align = null;
        that.verticalAlign = null;
        that.readonly = false;
        that.oldValue = undefined;
        that._updating = false;
        that.styleChanged = true;
        that.editor = null;
        that.template = null;
        that.isEditing = false;
        that.canNotify = true;
        that.selected = false;
        that.focused = false;

        var proxy = new Proxy(that, {
            deleteProperty: function deleteProperty(target, property) {
                delete target[property];
                return true;
            },
            get: function get(target, property) {
                if (property === 'value') {
                    var cellValue = !that.column.displayField ? that.row.data[that.column.dataField] : that.row.data[that.column.displayField];

                    return cellValue;
                } else if (property === 'editor' || property === 'template') {
                    return target[property] || that.column[property];
                } else if (property === 'focused') {
                    if (that.grid.selection.allowCellSelection && that.grid._selection.focusedCell && that.grid._selection.focusedCell.row.id === that.row.id && that.grid._selection.focusedCell.column.dataField === that.column.dataField) {
                        return true;
                    }

                    var parent = that.parent();

                    if (parent && that.grid.selection.allowCellSelection && that.grid._selection.focusedCell && that.grid._selection.focusedCell.row.id === parent.row.id && that.grid._selection.focusedCell.column.dataField === parent.column.dataField) {
                        return true;
                    }

                    return false;
                }
                if (property === 'selected') {
                    if (that.row.getProperty('selected') === true) {
                        return true;
                    }

                    if (that.column.getProperty('selected') === true) {
                        return true;
                    }

                    return that.grid._selection.cells['row' + that.row.id] ? that.grid._selection.cells['row' + that.row.id][that.column.dataField] : false;
                } else if (property === 'modifiedValue') {
                    var tempValue = that.grid._cellsUpdatedValues[that.row.id + '_' + that.column.dataField];

                    if (tempValue !== undefined) {
                        return tempValue;
                    }

                    return target['value'];
                }

                return target[property];
            },
            set: function set(target, propertyName, value) {
                var oldValue = this.get(target, propertyName);

                if (oldValue === value) {
                    return true;
                }

                target[propertyName] = value;

                if (propertyName === 'element' || propertyName === 'isEditing' || propertyName === 'oldValue' || propertyName === '_updating' || propertyName === 'notifyFn' || propertyName.startsWith('_') || propertyName === 'canNotify') {
                    return true;
                }

                if (propertyName === 'focused') {
                    that.grid._selection.focusedCell = that;
                }

                if (propertyName === 'colSpan' || propertyName === 'rowSpan') {
                    if (value >= 0 && that.grid._cellsMerge.indexOf(that) === -1) {
                        that.grid._cellsMerge.push(that);
                    }
                }

                if (propertyName === 'row' || propertyName === 'column' || propertyName === 'grid' || propertyName === 'styleChanged') {
                    return true;
                }

                if (propertyName === 'background' || propertyName === 'fontSize' || propertyName === 'fontWeight' || propertyName === 'fontFamily' || propertyName === 'color' || propertyName === 'borderColor' || propertyName === 'fontStyle') {
                    that._styleChanged = true;
                }

                if (propertyName === 'value') {
                    if (that.oldValue === undefined) {
                        that.oldValue = oldValue;
                    }

                    that.grid.dataSource.boundSource.canNotify = false;

                    if (value !== null && value.label && value.value) {
                        that.row.data[that.column.displayField] = value.label;
                        that.row.data[that.column.dataField] = value.value;
                    } else {
                        if (that.column.valueField) {
                            that.row.data[that.column.valueField] = value;
                        }

                        that.row.data[that.column.dataField] = value;
                    }

                    var dataItem = that.grid.dataSource.dataItemById[that.row.id];

                    if (dataItem) {
                        var index = dataItem.$.index;

                        if (value !== that.grid.dataSource[index][that.column.dataField]) {
                            that.grid.dataSource[index][that.column.dataField] = value;
                        }
                    }

                    that.grid.dataSource.boundSource.canNotify = true;
                }

                if (propertyName === 'selected') {
                    if (that.grid._selection.cells['row' + that.row.id]) {
                        delete that.grid._selection.cells['row' + that.row.id][that.column.dataField];

                        if (Object.getOwnPropertyNames(that.grid._selection.cells['row' + that.row.id]).length === 1) {
                            delete that.grid._selection.cells['row' + that.row.id];
                        }
                    }

                    if (that.grid._selection.cells['column' + that.column.dataField]) {
                        delete that.grid._selection.cells['column' + that.column.dataField][that.row.id];

                        if (Object.getOwnPropertyNames(that.grid._selection.cells['column' + that.column.dataField]).length === 1) {
                            delete that.grid._selection.cells['column' + that.column.dataField];
                        }
                    }

                    if (value) {
                        if (!that.grid._selection.cells['row' + that.row.id]) {
                            that.grid._selection.cells['row' + that.row.id] = [];
                        }

                        if (!that.grid._selection.cells['column' + that.column.dataField]) {
                            that.grid._selection.cells['column' + that.column.dataField] = [];
                        }

                        that.grid._selection.cells['row' + that.row.id][that.column.dataField] = true;
                        that.grid._selection.cells['column' + that.column.dataField][that.row.id] = true;
                    }
                }

                if (that._updating || !that.canNotify) {
                    return true;
                }

                if (!that.row.canNotify) {
                    return true;
                }

                that.grid._recycle();

                if (that.propertyChanged) {
                    that.propertyChanged(name.substring(1), oldValue /*, newValue*/);
                }

                return true;
            }
        });

        return proxy;
    }

    babelHelpers.createClass(Cell, [{
        key: 'setStyle',
        value: function setStyle(element) {
            var that = this;

            if (that._styleChanged) {
                element.style.background = that.background;
                element.style.borderColor = that.borderColor;
                element.style.color = that.color;
                element.style.fontSize = that.fontSize;
                element.style.fontFamily = that.fontFamily;
                element.style.fontWeight = that.fontWeight;
                element.style.fontStyle = that.fontStyle;
                element.style.paddingBottom = '';

                that._styleChanged = false;
            }
        }
    }, {
        key: 'getFormattedValue',
        value: function getFormattedValue(value, format) {
            var that = this;

            if (value === undefined || value === null || value === '') {
                return value;
            }

            if (that.column.dataType === 'date' || that.column.dataType === 'datetime' || that.column.dataType === 'time') {
                return that.formatDate(value, format);
            }

            if (that.column.dataType === 'int' || that.column.dataType === 'int64' || that.column.dataType === 'float' || that.column.dataType === 'number') {
                return that.formatNumber(value, format);
            }

            return value;
        }

        /**
        * Formats a date.
        */

    }, {
        key: 'formatDate',
        value: function formatDate(value, format) {
            if (!JQX.Utilities.DateTime) {
                return value;
            }

            try {
                return new JQX.Utilities.DateTime(value).toString(format);
            } catch (e) {
                return value;
            }
        }

        /**
         * Formats a number.
         */

    }, {
        key: 'formatNumber',
        value: function formatNumber(value, format) {
            if (!JQX.Utilities.NumberRenderer) {
                return value;
            }

            var renderer = new JQX.Utilities.NumberRenderer(),
                result = renderer.formatNumber(value, format);

            if (result === undefined) {
                return value;
            }

            return result;
        }
    }, {
        key: 'refresh',
        value: function refresh() {
            var that = this;

            if (that.element) {
                var htmlCellContent = that.element.firstChild;

                that.setStyle(htmlCellContent);
            }
        }
    }, {
        key: 'setProperties',
        value: function setProperties(properties) {
            var that = this;

            that._updating = true;

            for (var propertyName in properties) {
                that[propertyName] = properties[propertyName];
            }

            that._updating = false;

            that.grid._recycle();
        }
    }, {
        key: 'createElement',
        value: function createElement() {
            var that = this;
            var element = document.createElement('jqx-grid-cell');

            that.element = element;

            element._initialize(that);

            return element;
        }
    }, {
        key: 'render',
        value: function render() {
            var that = this;

            if (!that.element) {
                return;
            }

            that.element._render();
        }
    }, {
        key: 'parent',
        value: function parent(getSiblingsData) {
            var that = this;
            var row = that.row;
            var dataField = that.column.dataField;
            var grid = that.grid;

            if (!grid._cellsMerge.length) {
                return null;
            }

            if (that.__parentCells) {
                if (that.__parentCells['row' + row.id + '_column_' + dataField] !== undefined) {
                    return that.__parentCells['row' + row.id + '_column_' + dataField];
                }
            }

            var visibleRows = grid.getVisibleRows();

            if (grid.paging.enabled && grid.selection.selectAllMode === 'page') {
                visibleRows = visibleRows.slice(grid.paging.pageIndex * grid.paging.pageSize, (grid.paging.pageIndex + 1) * grid.paging.pageSize);
            }

            if (!that.__parentCells) {
                that.__parentCells = [];
            }

            for (var i = 0; i < grid._cellsMerge.length; i++) {
                var cell = grid._cellsMerge[i];

                var rows = [];
                var columns = [];

                rows.push(cell.row);

                if (cell.rowSpan > 1) {
                    var startRowIndex = visibleRows.indexOf(cell.row);

                    if (startRowIndex >= 0) {
                        for (var r = startRowIndex; r < startRowIndex + cell.rowSpan; r++) {
                            if (visibleRows[r] && rows.indexOf(visibleRows[r]) === -1) {
                                rows.push(visibleRows[r]);
                            }
                        }
                    }
                }

                columns.push(cell.column.dataField);

                if (cell.colSpan > 1) {
                    var startColumnIndex = grid.columns.indexOf(grid.columnByDataField[cell.column.dataField]);

                    for (var _r = startColumnIndex; _r < startColumnIndex + cell.colSpan; _r++) {
                        if (grid.columns[_r] && columns.indexOf(grid.columns[_r].dataField) === -1) {
                            columns.push(grid.columns[_r].dataField);
                        }
                    }
                }

                if (rows.indexOf(row) >= 0 && columns.indexOf(dataField) >= 0) {
                    if (getSiblingsData) {
                        var _parentCell = { cell: cell.row.getCell(cell.column.dataField), rows: rows, columns: columns, row: cell.row, column: cell.column, endRow: rows[rows.length - 1], endColumn: grid.columnByDataField[columns[columns.length - 1]] };

                        that.__parentCells['row' + row.id + '_column_' + dataField] = _parentCell;

                        return _parentCell;
                    }

                    var parentCell = cell.row.getCell(cell.column.dataField);

                    that.__parentCells['row' + row.id + '_column_' + dataField] = parentCell;

                    return parentCell;
                }
            }

            that.__parentCells['row' + row.id + '_column_' + dataField] = null;

            return null;
        }
    }]);
    return Cell;
}());

JQX('jqx-grid-cell', function (_JQX$BaseElement) {
    babelHelpers.inherits(Cell, _JQX$BaseElement);

    function Cell() {
        babelHelpers.classCallCheck(this, Cell);
        return babelHelpers.possibleConstructorReturn(this, (Cell.__proto__ || Object.getPrototypeOf(Cell)).apply(this, arguments));
    }

    babelHelpers.createClass(Cell, [{
        key: 'addThemeClass',
        value: function addThemeClass() {}
    }, {
        key: 'addDefaultClass',
        value: function addDefaultClass() {}
    }, {
        key: '_initialize',
        value: function _initialize(cell) {
            var that = this;
            var content = document.createElement('div');
            var column = cell.column;
            var row = cell.row;
            var grid = cell.grid;

            that.cell = cell;
            that.appendChild(content);

            var shouldAddToggleButton = false;

            if (column && column._treeColumn && grid.dataSource.boundHierarchy) {
                shouldAddToggleButton = true;

                if (!grid.grouping.enabled && grid.dataSource.groupBy && grid.dataSource.groupBy.length > 0) {
                    shouldAddToggleButton = false;
                }
            }

            if (shouldAddToggleButton) {
                var indent = document.createElement('div');
                var button = document.createElement('button');
                var label = document.createElement('div');
                var container = document.createElement('div');

                if (row.expanded) {
                    button.setAttribute('toggled', '');
                } else {
                    button.removeAttribute('toggled', '');
                }

                that.toggleButton = button;
                content.appendChild(indent);
                content.appendChild(container);

                container.setAttribute('content', '');
                indent.setAttribute('indent', '');
                label.setAttribute('label', '');
                button.setAttribute('toggle-button', '');

                that.setAttribute('has-toggle-button', '');
                container.appendChild(button);
                container.appendChild(label);
                that.content = label;
                return;
            } else {
                var _label = document.createElement('div');

                content.appendChild(_label);
            }

            that.content = content;
        }
    }, {
        key: '_renderCommands',
        value: function _renderCommands() {
            var that = this;

            var grid = that.cell.grid;

            if (grid.__cellsCommandTemplate) {
                that.firstChild.innerHTML = grid.__cellsCommandTemplate;

                grid._updateCommandColumnCommandsVisibility(that.firstChild, that.cell.row);
                return;
            }

            var commandHTML = grid._getCommandColumnCommandsTemplate();

            that.firstChild.innerHTML = commandHTML;
            grid._updateCommandColumnCommandsVisibility(that.firstChild, that.cell.row);
            grid.__cellsCommandTemplate = commandHTML;
        }
    }, {
        key: '_renderGroupCell',
        value: function _renderGroupCell() {
            var that = this;
            var grid = that.cell.grid;
            var column = that.cell.column;
            var row = that.cell.row;
            //const data = row.data;

            [].concat(babelHelpers.toConsumableArray(that.attributes)).forEach(function (attr) {
                return that.removeAttribute(attr.name);
            });

            if (that.style.width !== column.computedWidth + 'px') {
                that.style.width = column.computedWidth + 'px';
            }

            if (that.style.left !== column.left + 'px') {
                that.style.left = column.left + 'px';
            }

            if (that.classList.contains('jqx-hidden')) {
                that.classList.remove('jqx-hidden');
            }

            var cellValue = row.label;

            if (row.label !== undefined) {
                var summary = '';

                if (grid.grouping.summaryRow.visible) {
                    var getAllSubRows = function getAllSubRows(dataField, rows, subRows) {
                        for (var i = 0; i < rows.length; i++) {
                            var _row = rows[i];

                            if (_row[dataField] !== undefined) {
                                subRows.push(_row);
                            }

                            if (_row.summaryRow) {
                                continue;
                            }

                            if (_row['children']) {
                                getAllSubRows(dataField, _row['children'], subRows);
                            } else if (_row.data && _row.data['children']) {
                                getAllSubRows(dataField, _row['children'], subRows);
                            }
                        }

                        return subRows;
                    };

                    var subRows = getAllSubRows(column.dataField, row.summaryRow ? row.parent.data['children'] : row.data['children'], []);
                    var summaryObject = {};
                    var summaryFunctions = column._treeColumn ? column.summary.length > 0 ? column.summary : ['count'] : column.summary;

                    summaryObject[column.dataField] = summaryFunctions;

                    var summaryResult = summaryFunctions.length > 0 ? grid.dataSource.summarize([summaryObject], subRows) : null;

                    if (summaryResult) {
                        for (var i = 0; i < summaryFunctions.length; i++) {
                            var summaryFunction = summaryFunctions[i];

                            summary += '<span summary>' + grid.localize(summaryFunction, { value: summaryResult[column.dataField][summaryFunction] });+'</span>';
                        }
                    }
                }

                if (column._treeColumn) {
                    if (!row.summaryRow) {
                        cellValue = '<div header><span group>' + grid.columnByDataField[row.groupDataField].label + '</span><span value>' + row.label + '</span></div>';
                    } else {
                        cellValue = '<div header><span group></span><span value></span></div>';
                    }

                    if (summary) {
                        cellValue += '<div summary>';
                        cellValue += summary;
                        cellValue += '</div>';
                    }

                    that.setAttribute('has-toggle-button', '');
                } else {
                    //let columnLabel = '';
                    //let groupLabel = '';

                    cellValue = '<div content><div label><div header><span group></span><span value></span></div>';

                    if (summary) {
                        cellValue += '<div summary>';
                        cellValue += summary;
                        cellValue += '</div>';
                    }

                    cellValue += '</div></div>';
                }
            }

            var htmlCellContent = that.firstChild;

            if (grid.dataSource.boundHierarchy && that.toggleButton) {
                var indent = htmlCellContent.children[0];
                var toggleButton = htmlCellContent.children[1].children[0];
                var content = htmlCellContent.children[1].children[1];

                indent.setAttribute('indent', '');

                if (!row.leaf) {
                    toggleButton.classList.remove('jqx-visibility-hidden');
                    if (row.expanded) {
                        toggleButton.setAttribute('toggled', '');
                    } else {
                        toggleButton.removeAttribute('toggled', '');
                    }
                } else {
                    toggleButton.classList.add('jqx-visibility-hidden');
                }

                var indentDiv = '';

                if (!column._treeColumn) {
                    that.toggleButton.classList.add('jqx-hidden');
                } else {
                    that.toggleButton.classList.remove('jqx-hidden');
                }

                if (column._treeColumn) {
                    if (grid.grouping.enabled && grid.dataSource.groupBy.length > 0) {
                        var level = row.level;

                        if (undefined === row.label) {
                            level--;
                        }

                        indentDiv += '<div style="width: ' + (1 + level) * grid.grouping.groupIndent + 'px;"></div>';
                    } else {
                        for (var _i = 0; _i < row.level; _i++) {
                            indentDiv += '<div class=\'jqx-indent\'></div>';
                        }
                    }
                }

                if (grid._adaptiveLayout > 0) {
                    toggleButton.classList.add('jqx-hidden');
                    indentDiv = '';
                }

                if (undefined === row.label) {
                    toggleButton.classList.add('jqx-hidden');
                } else {
                    toggleButton.classList.remove('jqx-hidden');
                    toggleButton.style.marginLeft = '';

                    if (column._treeColumn && grid.grouping.enabled && grid.grouping.toggleButtonIndent > 0) {
                        toggleButton.style.marginLeft = row.level * (grid.grouping.toggleButtonIndent - grid.grouping.groupIndent) + 'px';
                    }
                }

                indent.innerHTML = indentDiv;
                content.innerHTML = cellValue;

                if (grid.appearance.showTooltips) {
                    content.setAttribute('title', row.label ? row.label : cellValue);
                } else if (content.hasAttribute('title')) {
                    content.removeAttribute('title');
                }
            } else if (row.label !== undefined && grid.grouping.enabled && !that.toggleButton) {
                htmlCellContent.innerHTML = cellValue;
            }

            if (grid.grouping.enabled && grid.dataSource.groupBy && grid.dataSource.groupBy.length > 0) {
                var _indent = grid.grouping.groupIndent * (1 + row.level);

                if (column.dataField === grid.columns[grid.columns.length - 1].dataField) {
                    that.style.width = column.computedWidth - _indent + 'px';
                    if (grid.appearance.showColumnLines) {
                        htmlCellContent.firstChild.classList.add('jqx-grid-column-border');
                    }
                }
            }

            var cellContentClassName = 'jqx-label';

            if (htmlCellContent.className !== cellContentClassName) {
                htmlCellContent.className = cellContentClassName;
            }

            if (column.formatFunction) {
                var formatObject = {
                    row: row,
                    column: column,
                    cell: that.cell,
                    value: null,
                    template: null,
                    group: {
                        value: cellValue,
                        template: null
                    }
                };

                column.formatFunction(formatObject);

                if (formatObject.group.value !== cellValue) {
                    htmlCellContent.innerHTML = formatObject.group.value;
                }

                if (formatObject.group.template !== null) {
                    htmlCellContent.innerHTML = formatObject.group.template;
                }
            }
        }
    }, {
        key: '_render',
        value: function _render() {
            var that = this;
            var grid = that.cell.grid;
            var column = that.cell.column;
            var row = that.cell.row;
            var data = row.data;

            if (grid.grouping.enabled && grid.dataSource.groupBy.length > 0 && row.label !== undefined) {
                that._renderGroupCell();
                return;
            }

            if (grid.grouping.enabled && grid.dataSource.groupBy.length > 0 && that.toggleButton) {
                that.toggleButton.classList.remove('jqx-hidden');
                that.toggleButton.classList.remove('jqx-visibility-hidden');
                that.toggleButton.style.marginLeft = '';

                if (column._treeColumn && grid.grouping.enabled && grid.grouping.toggleButtonIndent > 0) {
                    that.toggleButton.style.marginLeft = row.level * (grid.grouping.toggleButtonIndent - grid.grouping.groupIndent) + 'px';
                }
            }

            if (!column.visible) {
                that.style.width = '0px';
                return;
            }

            if (grid.appearance.showSortColumnBackground) {
                column.sorted ? that.setAttribute('sort', '') : that.removeAttribute('sort');
            } else if (column.sorted && that.hasAttribute('sort')) {
                that.removeAttribute('sort');
            }

            if (grid.appearance.showFilterColumnBackground) {
                column.filtered ? that.setAttribute('filter', '') : that.removeAttribute('filter');
            } else if (column.filtered && that.hasAttribute('filter')) {
                that.removeAttribute('filter');
            }

            var cellValue = !column.displayField ? data[column.dataField] : data[column.displayField];

            if (grid.editing.batch) {
                if (grid._cellsUpdatedValues) {
                    that.removeAttribute('update');

                    var tempValue = grid._cellsUpdatedValues[row.id + '_' + column.dataField];

                    if (tempValue !== undefined) {
                        that.setAttribute('update', '');
                        cellValue = tempValue;
                    }
                }

                if (grid._rowsDeleted) {
                    if (grid._rowsDeleted.indexOf(row) >= 0) {
                        that.setAttribute('delete', '');
                    } else {
                        that.removeAttribute('delete');
                    }
                }

                if (grid._rowsAdded) {
                    if (grid._rowsAdded.indexOf(row.id) >= 0) {
                        that.setAttribute('add', '');
                    } else {
                        that.removeAttribute('add');
                    }
                }
            }

            if (grid.onCellValue && !(column.rowNumbersColumn || column.selectionColumn)) {
                that.cell._updating = true;
                grid.onCellValue(that.cell);
                that.cell._updating = false;

                cellValue = that.cell.value;
            }

            if (cellValue === undefined) {
                cellValue = '';
            }

            var formattedValue = cellValue;

            if (column.cellsFormat) {
                formattedValue = that.cell.getFormattedValue(cellValue, column.cellsFormat);
            }

            var htmlCellContent = that.firstChild;

            if (grid.onCellRender || column.onCellRender) {
                requestAnimationFrame(function () {
                    if (!column._cellsCachedValues) {
                        column._cellsCachedValues = [];
                    }

                    if (column._cellsCachedValues[row.index]) {
                        var cellContent = column._cellsCachedValues[row.index];

                        if (htmlCellContent.firstChild) {
                            htmlCellContent.removeChild(htmlCellContent.firstChild);
                        }

                        htmlCellContent.appendChild(cellContent);
                    } else {
                        grid.onCellRender ? grid.onCellRender(that.cell) : column.onCellRender(that.cell);

                        if (that.cell.template !== column.template) {
                            var _cellContent = document.createElement('div');

                            if (htmlCellContent.firstChild) {
                                htmlCellContent.removeChild(htmlCellContent.firstChild);
                            }

                            if (that.cell.template instanceof HTMLTemplateElement) {
                                _cellContent.appendChild(that.cell.template.cloneNode(true));
                            } else {
                                _cellContent.appendChild(that.cell.template);
                            }

                            htmlCellContent.appendChild(_cellContent);

                            column._cellsCachedValues[row.index] = _cellContent;

                            return;
                        }
                    }
                });
            }

            if (!column.autoGenerated) {
                that.setAttribute('data-field', column.dataField);
            }

            if (that.cell.focused) {
                that.setAttribute('focus', '');
            } else {
                that.removeAttribute('focus');
            }

            if (that.cell.selected) {
                that.setAttribute('selected', '');
            } else {
                that.removeAttribute('selected');
            }

            if (grid.rowDetail.enabled && row.showDetail) {
                that.style.height = row.cellHeight + 'px';
                that.style.lineHeight = row.cellHeight + 'px';
            }

            if (row.adaptiveDetailExpanded || grid.adaptivityMode.responsiveLayout.autoShowHiddenCells && row.adaptiveHeight) {
                that.style.height = row.cellHeight + 'px';
                that.style.lineHeight = row.cellHeight + 'px';
            }

            if (row.expanded && row.expandHeight > 0) {
                that.style.height = row.cellHeight + 'px';
                that.style.lineHeight = row.cellHeight + 'px';
            }

            var alignment = that._getCellAlignment(row, column);
            var hasTemplate = that.cell.template !== '' && grid.isInitialized;

            var cellContentClassName = '';

            if (alignment.align) {
                cellContentClassName += alignment.align + ' ';
            }

            if (alignment.verticalAlign) {
                cellContentClassName += alignment.verticalAlign + ' ';
            }

            cellContentClassName += 'jqx-label';

            if (that.style.width !== column.computedWidth + 'px') {
                var isLastColumn = grid._isLastVisibleColumn(column);

                if (column.autoGenerated || isLastColumn) {
                    that.style.width = column.computedWidth + 'px';
                } else {
                    that.style.width = column.computedWidth - grid._columnGap + 'px';
                }
            }

            if (grid.grouping.enabled && grid.dataSource.groupBy && grid.dataSource.groupBy.length > 0) {
                var indent = grid.grouping.groupIndent * (1 + row.level);

                if (column.dataField === grid.columns[grid.columns.length - 1].dataField) {
                    that.style.width = column.computedWidth - indent + grid.grouping.groupIndent + 'px';

                    if (grid.appearance.showColumnLines) {
                        that.classList.add('jqx-grid-column-border');
                    }
                }
            }

            if (column === grid._firstVisibleColumn) {
                that.classList.add('jqx-grid-column-border-collapse');
            } else {
                that.classList.remove('jqx-grid-column-border-collapse');
            }

            if (grid._columnGap > 0 && grid.appearance.showColumnLines) {
                that.classList.add('jqx-grid-column-border');
            }

            if (grid._rowGap > 0) {
                that.classList.add('jqx-grid-row-border');
            }

            if (!grid.appearance.showColumnLines) {
                that.classList.add('jqx-grid-vertical-border-collapse');
            } else {
                that.classList.remove('jqx-grid-vertical-border-collapse');
            }

            if (!grid.appearance.showRowLines) {
                that.classList.add('jqx-grid-horizontal-border-collapse');
            } else {
                that.classList.remove('jqx-grid-horizontal-border-collapse');
            }

            var left = column.left;

            if (that.style.left !== left + 'px') {
                that.style.left = left + 'px';
            }

            if (that.classList.contains('jqx-hidden')) {
                that.classList.remove('jqx-hidden');
            }

            if (that.hasAttribute('template')) {
                that.removeAttribute('template');
            }

            if (that.hasAttribute('freeze')) {
                that.removeAttribute('freeze');
            }

            if (that.hasAttribute('adaptive')) {
                that.removeAttribute('adaptive');
            }

            if (that.hasAttribute('detail')) {
                that.removeAttribute('detail');
            }

            if (row.filterRow) {
                that.classList.add('jqx-grid-filter-row-cell');
            } else if (row.summaryRow) {
                that.classList.add('jqx-grid-summary-row-cell');
            } else if (column.freeze || row.freeze) {
                if (column.selectionColumn) {
                    that.setAttribute('checkbox', '');
                    cellContentClassName += ' jqx-input';

                    if (column.grid.selection.checkBoxes.enabled && column.grid.selection.checkBoxes.autoShow) {
                        that.setAttribute('auto-show', '');
                    } else {
                        that.removeAttribute('auto-show');
                    }
                }

                if (column.rowNumbersColumn || column.selectionColumn) {
                    that.setAttribute('header', '');
                }

                if (column.rowDetailColumn) {
                    that.setAttribute('header', '');
                    that.setAttribute('detail', '');
                    that.setAttribute('has-toggle-button', '');
                }

                if (column.commandColumn) {
                    that.setAttribute('command', '');
                }

                if (grid.appearance.showFrozenColumnBackground && column.freeze) {
                    that.setAttribute('freeze', '');
                }

                if (grid.appearance.showFrozenRowBackground && row.freeze) {
                    that.setAttribute('freeze', '');
                }
            }

            if (column.cellsRotationAngle) {
                var rotateResult = that._rotateCellContent(htmlCellContent, column, cellValue);

                if (!rotateResult) {
                    return;
                }
            } else {
                if (row.filterRow) {
                    if (column.adaptiveColumn || column.toggleColumn || column.rowNumbersColumn) {
                        htmlCellContent.innerHTML = '';
                    } else {
                        if (!column.filterEditorInitialized) {
                            column.filterEditorInitialized = true;
                        }
                    }
                } else if (row.summaryRow) {
                    if (column.adaptiveColumn || column.toggleColumn || column.rowNumbersColumn) {
                        htmlCellContent.innerHTML = '';
                    } else {
                        if (column.summary.length > 0 && grid._summaryItems) {
                            var summaryItem = grid._summaryItems[column.dataField];

                            var index = 0;

                            for (var summaryItemFunction in summaryItem) {
                                if (index === row.summaryRowIndex) {
                                    htmlCellContent.innerHTML = grid.localize(summaryItemFunction, { value: summaryItem[summaryItemFunction] });
                                }
                                index++;
                            }
                        }
                    }
                } else {
                    if (grid.rowDetail.enabled && column.rowDetailColumn) {
                        if (htmlCellContent.innerHTML !== '') {
                            if (row.showDetail) {
                                htmlCellContent.innerHTML = '<button class="jqx-animate" toggled toggle-button></button>';
                            } else {
                                htmlCellContent.innerHTML = '<button class="jqx-animate" toggle-button></button>';
                            }

                            row.element.toggleDetailButton = that.querySelector('button');
                        }
                    } else if (column.adaptiveColumn) {
                        that.removeAttribute('expanded');

                        if (row.adaptiveDetailExpanded) {
                            that.setAttribute('expanded', '');
                        }

                        if (new Date() - grid._lastPointerDownTime < 300) {
                            cellContentClassName += ' jqx-animate';
                        }
                    } else if (column.commandColumn) {
                        that._renderCommands();
                    } else if (grid.appearance.showRowNumber && column.rowNumbersColumn) {
                        if (row.addNewRow) {
                            htmlCellContent.textContent = '';
                        } else {
                            if (grid._rowsAdded) {
                                if (grid._rowsAdded.indexOf(row.id) >= 0) {
                                    htmlCellContent.textContent = '';
                                } else {
                                    htmlCellContent.textContent = row.visibleIndex + 1;
                                }
                            } else {
                                htmlCellContent.textContent = row.visibleIndex + 1;
                            }
                        }
                    } else if (hasTemplate) {

                        that.removeAttribute('readonly');

                        switch (that.cell.template) {
                            case 'checkBox':
                            case 'switchButton':
                            case 'radioButton':
                                if (htmlCellContent.textContent !== '') {
                                    htmlCellContent.textContent = '';
                                }

                                if (!grid.editing.enabled || !column.allowEdit || that.cell.readonly || grid.editing.enabled && grid.editing.commandColumn.visible && grid.editing.editRow !== that.cell.row) {
                                    that.setAttribute('readonly', '');
                                }

                                if (htmlCellContent.innerHTML !== '<span class="jqx-input"></span>') {
                                    htmlCellContent.innerHTML = '<span class="jqx-input"></span>';
                                }

                                if (cellValue) {
                                    htmlCellContent.firstChild.setAttribute('checked', '');
                                } else if (cellValue === null) {
                                    htmlCellContent.firstChild.setAttribute('checked', 'indeterminate');
                                } else {
                                    htmlCellContent.firstChild.removeAttribute('checked');
                                }

                                that.setAttribute('template', that.cell.template);
                                break;
                            default:
                                {
                                    var template = null;
                                    that.setAttribute('template', '');

                                    if (typeof that.cell.template === 'function') {
                                        var formatObject = {
                                            row: row,
                                            column: column,
                                            cell: that.cell,
                                            oldValue: that.cell.oldValue,
                                            value: cellValue,
                                            template: null
                                        };

                                        var cellTemplate = htmlCellContent.querySelector('.jqx-grid-cell-template');

                                        if (cellTemplate) {
                                            formatObject.template = cellTemplate.firstElementChild;
                                        }

                                        that.cell.template(formatObject);

                                        if (!cellTemplate && formatObject.template) {
                                            if (formatObject.template instanceof HTMLElement) {
                                                var templateContainer = document.createElement('div');

                                                templateContainer.classList.add('jqx-grid-cell-template');

                                                htmlCellContent.appendChild(templateContainer);
                                                templateContainer.appendChild(formatObject.template);
                                            } else {
                                                htmlCellContent.innerHTML = '<div class="jqx-grid-cell-template">' + formatObject.template + '</div>';
                                            }
                                        } else if (!cellTemplate && formatObject.template === null) {
                                            htmlCellContent.innerHTML = cellValue;
                                        }

                                        if (that.cell._styleChanged) {
                                            that.cell.setStyle(htmlCellContent);
                                        }
                                    } else {
                                        if (htmlCellContent.textContent !== '') {
                                            htmlCellContent.textContent = '';
                                        }

                                        if (that.cell.template.startsWith('#')) {
                                            template = document.querySelector(that.cell.template);
                                        }

                                        if (template) {
                                            var templateContent = template.content.cloneNode(true).firstElementChild;

                                            cellValue = cellValue.toString();
                                            cellValue = cellValue.replace(/'/ig, '\\\'');
                                            cellValue = cellValue.replace(/"/ig, '\\"');

                                            var html = templateContent.outerHTML.replace(/{{value}}/ig, cellValue).replace(/{{id}}/ig, row.id);

                                            if (html.indexOf('{{value=') >= 0) {
                                                if (!cellValue) {
                                                    html = html.replace(/{{value=/ig, '');
                                                    html = html.replace(/}}/ig, '');
                                                } else {
                                                    html = html.substring(0, html.indexOf('{{value=')) + cellValue + html.substring(html.indexOf('}'));
                                                    html = html.replace(/}/ig, '');
                                                    html = html.replace(/{/ig, '');
                                                }
                                            }

                                            if (htmlCellContent.innerHTML !== html) {
                                                htmlCellContent.innerHTML = html;
                                            }
                                        } else {
                                            var _html = that.cell.template.replace(/{{value}}/ig, cellValue).replace(/{{id}}/ig, row.id);

                                            if (htmlCellContent.innerHTML !== _html) {
                                                htmlCellContent.innerHTML = _html;
                                            }
                                        }
                                    }
                                }
                        }
                    } else if (column.selectionColumn) {
                        if (grid.selectionMode === 'checkBox') {

                            if (row.getProperty('selected')) {
                                that.setAttribute('selected', '');
                            } else {
                                if (that.getAttribute('selected')) {
                                    that.removeAttribute('selected');
                                }
                            }
                        }
                    } else {
                        var firstChild = htmlCellContent.firstChild;

                        if (firstChild && firstChild.classList && that.toggleButton) {
                            var _indent2 = htmlCellContent.children[0];
                            var toggleButton = htmlCellContent.children[1].children[0];
                            var content = htmlCellContent.children[1].children[1];

                            var indentDiv = '';

                            if (column._treeColumn) {
                                if (grid.grouping.enabled) {
                                    var level = row.level - 1;

                                    indentDiv += '<div style="width: ' + (1 + level) * grid.grouping.groupIndent + 'px;"></div>';
                                } else {
                                    for (var i = 0; i < row.level; i++) {
                                        indentDiv += '<div class=\'jqx-indent\'></div>';
                                    }
                                }
                            }

                            _indent2.innerHTML = indentDiv;

                            toggleButton.classList.add('jqx-visibility-hidden');

                            if (!row.leaf) {
                                toggleButton.classList.remove('jqx-visibility-hidden');
                                if (row.expanded) {
                                    toggleButton.setAttribute('toggled', '');
                                } else {
                                    toggleButton.removeAttribute('toggled', '');
                                }
                            } else {
                                toggleButton.classList.add('jqx-visibility-hidden');
                            }

                            if (row.data.isEmpty) {
                                toggleButton.classList.add('jqx-visibility-hidden');
                            }

                            content.innerHTML = formattedValue;

                            if (grid.appearance.showTooltips) {
                                content.setAttribute('title', formattedValue);
                            } else if (content.hasAttribute('title')) {
                                content.removeAttribute('title');
                            }
                        } else {
                            var cell = row['column_' + column.dataField];

                            if (that.getAttribute('rowspan')) {
                                that.removeAttribute('rowspan');
                                that.style.height = '';
                            }

                            if (that.getAttribute('colspan')) {
                                that.removeAttribute('colspan');
                            }

                            if (cell) {
                                if (cell.colSpan > 1) {

                                    var startColumnIndex = grid.columns.indexOf(column);
                                    var width = 0;
                                    for (var m = startColumnIndex; m < startColumnIndex + cell.colSpan; m++) {
                                        var viewColumn = grid.columns[m];

                                        if (viewColumn && viewColumn.visible) {
                                            width += viewColumn.computedWidth;
                                        }
                                    }

                                    that.style.width = width + 'px';

                                    that.setAttribute('colspan', '');
                                    cell._styleChanged = true;
                                }

                                if (cell.rowSpan > 1) {
                                    var startRowIndex = grid.rows.indexOf(row);
                                    var height = 0;

                                    row.element.setAttribute('rowspan', '');

                                    for (var _m = startRowIndex; _m <= startRowIndex + cell.rowSpan - 1; _m++) {
                                        var viewRow = grid.rows[_m];

                                        if (viewRow && viewRow.visible && viewRow.filtered) {
                                            height += viewRow.cellHeight;
                                        }
                                    }

                                    that.style.height = height + 'px';

                                    that.setAttribute('rowspan', '');
                                    cell._styleChanged = true;
                                }

                                if (cell.colSpan === 1 && that.hasAttribute('colspan') || that.hasAttribute('rowspan') && cell.rowSpan === 1) {
                                    that.style.height = '';
                                    that.style.width = '';
                                    that.removeAttribute('colspan');
                                    that.removeAttribute('rowspan');
                                    cell._styleChanged = true;
                                }

                                if (htmlCellContent.textContent !== formattedValue && !column.formatFunction) {
                                    htmlCellContent.textContent = formattedValue;
                                }

                                cell.setStyle(htmlCellContent);

                                if (grid.appearance.showTooltips) {
                                    htmlCellContent.setAttribute('title', cell.tooltip || formattedValue);
                                } else if (htmlCellContent.hasAttribute('title')) {
                                    htmlCellContent.removeAttribute('title');
                                }
                            } else {
                                htmlCellContent.textContent = formattedValue;
                            }
                        }
                    }
                }
            }

            if (htmlCellContent.className !== cellContentClassName) {
                htmlCellContent.className = cellContentClassName;
            }

            if (column.formatFunction && !row.data.isEmpty && grid.isInitialized) {
                var _formatObject = {
                    row: row,
                    column: column,
                    cell: that.cell,
                    oldValue: that.cell.oldValue,
                    value: cellValue,
                    formattedValue: formattedValue,
                    template: null
                };

                that.cell.canNotify = false;
                row.canNotify = false;

                var cellStyle = Object.assign({}, {
                    background: that.cell.background,
                    borderColor: that.cell.borderColor,
                    color: that.cell.color,
                    fontSize: that.cell.fontSize,
                    fontFamily: that.cell.fontFamily,
                    fontWeight: that.cell.fontWeight,
                    fontStyle: that.cell.fontStyle
                });

                column.formatFunction(_formatObject);

                if (htmlCellContent.style.background !== cellStyle.background || htmlCellContent.style.borderColor !== cellStyle.borderColor || htmlCellContent.style.color !== cellStyle.color || htmlCellContent.style.fontSize !== cellStyle.fontSize || htmlCellContent.style.fontWeight !== cellStyle.fontWeight || htmlCellContent.style.fontStyle !== cellStyle.fontStyle) {
                    that.cell._styleChanged = true;
                    that.cell.setStyle(htmlCellContent);
                }

                var requiresUpdate = true;

                if (_formatObject.value !== cellValue) {
                    if (that.toggleButton) {
                        var _content = htmlCellContent.children[1].children[1];

                        _content.innerHTML = _formatObject.value;
                    } else {
                        htmlCellContent.innerHTML = _formatObject.value;
                    }

                    requiresUpdate = false;
                }

                if (_formatObject.template !== null) {
                    if (that.toggleButton) {
                        var _content2 = htmlCellContent.children[1].children[1];

                        if (_content2.innerHTML !== _formatObject.template) {
                            _content2.innerHTML = _formatObject.template;
                        }
                    } else if (htmlCellContent.innerHTML !== _formatObject.template) {
                        var checkTemplateElement = document.createElement('div');

                        checkTemplateElement.innerHTML = _formatObject.template;

                        if (checkTemplateElement.innerHTML !== htmlCellContent.innerHTML) {
                            htmlCellContent.innerHTML = _formatObject.template;
                        }
                    }

                    requiresUpdate = false;
                }

                if (requiresUpdate) {
                    htmlCellContent.textContent = cellValue;
                }

                that.cell.canNotify = true;
                row.canNotify = true;
            }
        }
    }, {
        key: '_rotateCellContent',
        value: function _rotateCellContent(columnHeaderCellContentElement, column, cellValue) {
            var that = this;
            var textElement = document.createElement('span');

            columnHeaderCellContentElement.innerHTML = '';
            textElement.innerHTML = cellValue;
            columnHeaderCellContentElement.appendChild(textElement);

            textElement.className = 'rotate';
            textElement.style.transform = 'rotate(' + column.cellsRotationAngle + 'deg)';

            return that.grid._recycleRotate(columnHeaderCellContentElement, textElement, column.cellsAlign, column.cellsVerticalAlign, cellValue);
        }
    }, {
        key: '_getCellAlignment',
        value: function _getCellAlignment(row, column) {
            var cell = row['column_' + column.dataField];
            var align = cell ? cell.align || column.cellsAlign : column.cellsAlign;
            var verticalAlign = cell ? cell.verticalAlign || column.cellsVerticalAlign : column.cellsVerticalAlign;
            var alignment = { align: '', verticalAlign: '' };

            switch (align) {
                case 'left':
                    alignment.align = 'align-left';
                    break;
                case 'center':
                case 'middle':
                    alignment.align = 'align-center';
                    break;
                case 'right':
                    alignment.align = 'align-right';
                    break;
            }

            switch (verticalAlign) {
                case 'top':
                    alignment.verticalAlign = 'align-top';
                    break;
                case 'center':
                case 'middle':
                    alignment.verticalAlign = 'align-middle';
                    break;
                case 'bottom':
                    alignment.verticalAlign = 'align-bottom';
                    break;
            }

            return alignment;
        }
    }, {
        key: 'template',
        value: function template() {
            return '';
        }
    }, {
        key: 'hasStyleObserver',
        get: function get() {
            return false;
        }
    }, {
        key: 'enableShadowDOM',
        get: function get() {
            return false;
        }
    }, {
        key: 'isUtilityElement',
        get: function get() {
            return true;
        }
    }], [{
        key: 'properties',
        get: function get() {
            return {};
        }
    }]);
    return Cell;
}(JQX.BaseElement));