'use strict';

/**
* MaskedTextBox custom element.
*/
JQX('jqx-masked-text-box', function (_JQX$TextBox) {
    babelHelpers.inherits(MaskedTextBox, _JQX$TextBox);

    function MaskedTextBox() {
        babelHelpers.classCallCheck(this, MaskedTextBox);
        return babelHelpers.possibleConstructorReturn(this, (MaskedTextBox.__proto__ || Object.getPrototypeOf(MaskedTextBox)).apply(this, arguments));
    }

    babelHelpers.createClass(MaskedTextBox, [{
        key: 'template',


        /**
        * MaskedTextBox's HTML template.
        */
        value: function template() {
            return '<div id="container">\n                    <span id="label" inner-h-t-m-l="[[label]]" class ="jqx-label"></span>\n                    <input type="text" id="input"\n                        autocomplete="off"\n                        autocorrect="off"\n                        autocapitalize="off"\n                        disabled="[[disabled]]"\n                        maxlength="[[maxLength]]"\n                        minlength="[[minLength]]"\n                        name="[[name]]"\n                        placeholder="[[placeholder]]"\n                        readonly="[[readonly]]">\n                    <span id="hint" inner-h-t-m-l="[[hint]]" class ="jqx-hint"></span>\n                </div>';
        }

        /**
        * Updates the MaskedTextBox when a property is  changed.
        * @param {string} propertyName The name of the property.
        * @param {number/string} oldValue The previously entered value.
        * @param {number/string} newValue The new entered value.
        */

    }, {
        key: 'propertyChangedHandler',
        value: function propertyChangedHandler(propertyName, oldValue, newValue) {
            // super.propertyChangedHandler(propertyName, oldValue, newValue);

            var that = this;
            var maskValue = void 0;

            switch (propertyName) {
                case 'hidePromptOnLeave':
                    if (newValue && !that._focused) {
                        that._hidePrompt();
                    } else if (that._promptHidden) {
                        that._showPrompt();
                    }
                    break;
                case 'maxLength':
                    if (that.mask.length > 0) {
                        that.maxLength = oldValue;
                    }
                    break;
                case 'maskCompleted':
                case 'maskFull':
                    that[propertyName] = oldValue;
                    break;
                case 'promptChar':
                    that._updatePromptChar();
                    break;
                case 'placeholder':
                    if (that._isPlaceholderRequired()) {
                        that.$.input.value = '';
                        that.$.removeClass('has-value');
                    } else {
                        that._updatePromptChar();
                    }
                    that._updatePromptChar();
                    break;
                case 'mask':
                    maskValue = that._getValueWithTextMaskFormat({ start: 0, end: that._mask.length }, 'excludePromptAndLiterals');

                    if (that._isPlaceholderRequired()) {
                        that.$.input.value = '';
                        that.$.removeClass('has-value');
                    } else {
                        that._initializeMask();
                        that._setValueToMask(maskValue);
                        that._setMaskToInput();
                        that.maxLength = that._mask.length;

                        if (that._promptHidden) {
                            that._hidePrompt();
                        }
                    }
                    break;
                case 'value':
                    that._overwrite = true;
                    that._setValueToMask(newValue);
                    that._overwrite = false;

                    that._setMaskToInput();

                    if (that._promptHidden) {
                        that._hidePrompt();
                    }
                    break;
                case 'disabled':
                    that._setFocusable();
                    break;
                case 'readonly':
                    break;
                default:
                    babelHelpers.get(MaskedTextBox.prototype.__proto__ || Object.getPrototypeOf(MaskedTextBox.prototype), 'propertyChangedHandler', this).call(this, propertyName, oldValue, newValue);
                    break;
            }

            that.value = that._getValueWithTextMaskFormat({ start: 0, end: that._mask.length }, that.textMaskFormat);
        }

        /**
        * MaskedTextBox create element method.
        */

    }, {
        key: '_createElement',
        value: function _createElement() {
            var that = this;

            if (that.autoFocus) {
                that.$.input.focus();
            }

            that._setFocusable();
            that._initializeMask();
            that._updateMaxLength();

            if (that._isPlaceholderRequired()) {
                that.$.input.value = '';
                that.$.removeClass('has-value');
            } else {
                that._setValueToMask(that.value);
                that._setMaskToInput();
                that._updateMaskFullAndCompleted();
                that.$.addClass('has-value');
            }

            that.$.input.selectionStart = that.$.input.selectionEnd = 0;
            that._initializationValue = that._value = that.value;
            that._rejectInput = false;
        }

        /**
        * MaskedTextBox blur handler.
        */

    }, {
        key: '_blurHandler',
        value: function _blurHandler() {
            var that = this,
                requiresPlaceholder = that._isPlaceholderRequired();

            if (that.disabled) {
                return;
            }

            if (that._valueBeforeChange !== that.value) {
                that.$.fireEvent('change', {
                    'newValue': that.value,
                    'oldValue': that._valueBeforeChange
                });
                that._valueBeforeChange = '';
            }

            that._hidePrompt();
            that._focused = false;
            that._validateMaskValue();

            that.removeAttribute('focus');
            that.$.input.value.length > 0 ? that.$.addClass('has-value') : that.$.removeClass('has-value');

            if (requiresPlaceholder) {
                that.$.input.value = '';
                that.$.removeClass('has-value');
            }
        }

        /*
        * Controlls maskFull and maskCompleted readonly properties
        */

    }, {
        key: '_updateMaskFullAndCompleted',
        value: function _updateMaskFullAndCompleted() {
            var that = this;
            var maskFull = true,
                maskCompleted = true,
                hasRequiredChar = false;

            for (var i = 0; i < that._mask.length; i++) {
                var maskElement = that._mask[i];

                if (maskElement.type === 'mask') {
                    if (maskElement.required) {
                        hasRequiredChar = true;
                    }

                    if (maskElement.character === '') {
                        if (maskElement.required) {
                            maskCompleted = false;
                        }

                        maskFull = false;
                    }
                }
            }

            if (!maskFull && maskCompleted && !hasRequiredChar) {
                maskCompleted = false;
            }

            that.maskFull = maskFull;
            that.maskCompleted = maskCompleted;
        }
    }, {
        key: '_isPlaceholderRequired',
        value: function _isPlaceholderRequired() {
            var that = this,
                hasValue = that.value && that.value.length > 0,
                hasPlaceholder = that.placeholder.length > 0,
                isRequired = !hasValue && (hasPlaceholder || that.autoShowMask);

            return isRequired;
        }

        /*
        * Updates mask items with new value, based on the mask settings
        */

    }, {
        key: '_cleanMask',
        value: function _cleanMask(startsAt, endsAt) {
            var that = this;

            startsAt = startsAt ? startsAt : 0;
            endsAt = endsAt ? endsAt : that._mask.length;

            for (var i = startsAt; i < endsAt; i++) {
                var maskElement = that._mask[i];

                if (maskElement.type === 'mask') {
                    that._mask[i].character = '';
                }
            }
        }

        /**
        *  Updates the clipboard data on cut/copy. The format of the value depends on cutCopyMaskFormat - ['excludePromptAndLiterals', 'includePrompt', 'includeLiterals', 'includePromptAndLiterals']
        */

    }, {
        key: '_cutCopyHandler',
        value: function _cutCopyHandler(event, type) {
            var that = this,
                selectionStart = parseInt(that.$.input.selectionStart, 10),
                selectionEnd = parseInt(that.$.input.selectionEnd, 10),
                selection = that._getValueWithTextMaskFormat({ start: selectionStart, end: selectionEnd });

            if (window.clipboardData) {
                window.clipboardData.setData('text/plain', selection);
                window.clipboardData.setData('text/html', selection);
            }

            if (event) {
                that._preventDefault(event);
            }

            if (type === 'Copy') {
                return selection;
            }

            that._cleanMask(selectionStart, selectionEnd);
            that.value = that._getValueWithTextMaskFormat({ start: 0, end: that._mask.length }, that.textMaskFormat);
            that._setMaskToInput();
            that.$.input.selectionStart = that.$.input.selectionEnd = selectionStart;
            that.maskFull = that.maskCompleted = false;

            return selection;
        }
    }, {
        key: '_documentUpHandler',
        value: function _documentUpHandler() {}

        /**
        *  Delete handler. Removes single character if selectionStart=selectionEnd or all selected chars aind replaces them with a mask fragment
        */

    }, {
        key: '_deleteHandler',
        value: function _deleteHandler(event) {
            var that = this,
                selectionStart = that.$.input.selectionStart,
                selectionEnd = that.$.input.selectionEnd,
                key = event.key;

            var newSelectionStart = selectionStart;

            that._preventDefault(event);

            if (selectionStart === selectionEnd) {
                if (key === 'Backspace') {
                    for (var i = selectionStart; i > 0; i--) {
                        var maskItem = that._mask[i - 1];

                        if (maskItem.type === 'mask') {
                            newSelectionStart = i - 1;
                            maskItem.character = '';
                            break;
                        } else {
                            newSelectionStart = selectionStart - 1;
                            break;
                        }
                    }
                } else {
                    for (var _i = selectionStart; _i < that._mask.length; _i++) {
                        var _maskItem = that._mask[_i];

                        if (_maskItem.type === 'mask') {
                            newSelectionStart = _i + 1;
                            _maskItem.character = '';
                            break;
                        } else {
                            newSelectionStart = selectionStart + 1;
                            break;
                        }
                    }
                }
            } else {
                that._cleanMask(selectionStart, selectionEnd);
                if (key === 'Delete') {
                    newSelectionStart = selectionEnd;
                }
            }

            that._setMaskToInput();
            that._updateMaskFullAndCompleted();
            that.value = that._getValueWithTextMaskFormat({ start: 0, end: that._mask.length }, that.textMaskFormat);
            that.$.input.selectionStart = that.$.input.selectionEnd = newSelectionStart;
        }
    }, {
        key: '_findNextOccupiedPosition',
        value: function _findNextOccupiedPosition(start) {
            var that = this,
                maskLength = that._mask.length;
            var nextOccupiedPosition = start;

            for (var i = start; i < maskLength; i++) {
                var maskElement = that._mask[i];

                if (maskElement.type === 'mask' && maskElement.character === '') {
                    nextOccupiedPosition++;
                } else {
                    break;
                }
            }

            return nextOccupiedPosition;
        }

        /**
        * MaskedTextBox focus handler
        */

    }, {
        key: '_focusHandler',
        value: function _focusHandler(event) {
            var that = this;

            if (event.context.nodeName.toUpperCase() !== 'INPUT') {
                that.$.input.focus();
                return;
            }

            if (that.disabled) {
                return;
            }

            that.setAttribute('focus', '');

            if (that.selectAllOnFocus) {
                that.$.input.select();
            }

            that._showPrompt();
            that._focused = true;

            if (that._isPlaceholderRequired()) {
                that._initializeMask();
                that._setValueToMask(that.value);
                that._setMaskToInput();

                var selectionStart = that._getEditableSelectionStart(0);
                that.$.input.selectionStart = that.$.input.selectionEnd = selectionStart;
            }
        }

        /*
        * Combines mask elements into string and updates input's value
        */

    }, {
        key: '_setMaskToInput',
        value: function _setMaskToInput() {
            var that = this;
            var mask = '';

            for (var i = 0; i < that._mask.length; i++) {
                var maskElement = that._mask[i];
                var newCharacter = void 0;

                if (maskElement.type === 'literal' || maskElement.type === 'separator' || maskElement.type === 'placeholder' || maskElement.type === 'currency') {
                    newCharacter = maskElement.character;
                } else if (maskElement.type === 'mask' && maskElement.character !== '') {
                    switch (maskElement.escapeSymbol) {
                        case '>':
                            newCharacter = maskElement.character.toUpperCase();
                            break;
                        case '<':
                            newCharacter = maskElement.character.toLowerCase();
                            break;
                        case '|':
                            newCharacter = maskElement.character;
                            break;
                        case '\\':
                            newCharacter = maskElement.character;
                            break;
                        default:
                            newCharacter = maskElement.character;
                            break;
                    }
                } else {
                    newCharacter = maskElement.defaultCharacter;
                }

                mask = mask + newCharacter;
            }

            that.$.input.value = mask;
        }

        /**
        *  Check if the entered character is format symbol
        */

    }, {
        key: '_getEditableSelectionStart',
        value: function _getEditableSelectionStart(selectionStart, key) {
            var that = this;

            for (var i = selectionStart; i < that._mask.length; i++) {
                var maskItem = that._mask[i];

                if (maskItem.type !== 'mask') {
                    continue;
                }

                if (maskItem.character !== '' && !that.isOverwriteMode && !(key === ' ' && that.resetOnSpace) && !(key === that.promptChar && that.resetOnPrompt)) {
                    continue;
                }

                return i;
            }

            return -1;
        }
    }, {
        key: '_getNonEditableSelectionStart',
        value: function _getNonEditableSelectionStart(selectionStart, key) {
            var that = this;

            for (var i = selectionStart; i < that._mask.length; i++) {
                var maskItem = that._mask[i];

                if (maskItem.type === 'mask') {
                    continue;
                }

                if (maskItem.character === key) {
                    return i;
                }
            }

            return -1;
        }

        /**
        *  Updates value in relation to the textMaskFormat
        */

    }, {
        key: '_getValueWithTextMaskFormat',
        value: function _getValueWithTextMaskFormat(range, maskFormat) {
            var that = this,
                rangeStart = range ? range.start : 0,
                rangeEnd = range ? range.end : that._mask.length || that.$.input.value.length;
            var value = '';

            maskFormat = maskFormat ? maskFormat : that.cutCopyMaskFormat;

            if (maskFormat === 'includePromptAndLiterals') {
                return that.$.input.value.substring(rangeStart, rangeEnd);
            }

            for (var i = rangeStart; i < rangeEnd; i++) {
                var maskElement = that._mask[i];

                switch (maskFormat) {
                    case 'excludePromptAndLiterals':
                        if (maskElement.type !== 'mask') {
                            continue;
                        }

                        value = maskElement.character === '' ? value + ' ' : value + maskElement.character;
                        break;
                    case 'includePrompt':
                        if (maskElement.type !== 'mask') {
                            continue;
                        }

                        value = maskElement.character === '' ? value + maskElement.defaultCharacter : value + maskElement.character;
                        break;
                    case 'includeLiterals':
                        if (maskElement.type === 'mask' && maskElement.character === '') {
                            continue;
                        }

                        value = value + maskElement.character;
                        break;
                }
            }

            return value.trim();
        }

        /**
        *  Hides prompt characters on blur when promt is hidden on hidePromptOnLeave=true
        */

    }, {
        key: '_hidePrompt',
        value: function _hidePrompt() {
            var that = this,
                regex = new RegExp(that.promptChar, 'g');

            if (that.disabled || !that.hidePromptOnLeave || that.mask.length === 0) {
                return;
            }

            that.$.input.value = that.$.input.value.replace(regex, ' ');
            that._promptHidden = true;
        }

        /**
         *  Mask string is transformed to array of mask items
         */

    }, {
        key: '_initializeMask',
        value: function _initializeMask() {
            var that = this;
            var maskLength = that.mask.length,
                escapeSymbol = void 0;

            that._mask = [];

            if (that.mask === undefined || that.mask === null || that.mask.length === 0) {
                return;
            }

            for (var i = 0; i < maskLength; i++) {
                var maskChar = that.mask.charAt(i);
                var maskElement = {};

                maskElement.defaultCharacter = that.promptChar;

                switch (maskChar) {
                    case '0':
                        maskElement.editable = true;
                        maskElement.required = true;
                        maskElement.escapeSymbol = escapeSymbol;
                        maskElement.type = maskElement.escapeSymbol === '\\' ? 'literal' : 'mask'; // types : mask, literal, placeholder, separator, currency
                        maskElement.maskCharacter = '0';
                        maskElement.regex = '\\d';
                        maskElement.character = maskElement.escapeSymbol === '\\' ? maskElement.maskCharacter : '';
                        maskElement.defaultCharacter = that.promptChar;

                        escapeSymbol = null;
                        break;
                    case '9':
                        maskElement.editable = true;
                        maskElement.required = false;
                        maskElement.escapeSymbol = escapeSymbol;
                        maskElement.type = maskElement.escapeSymbol === '\\' ? 'literal' : 'mask';
                        maskElement.maskCharacter = '9';
                        maskElement.regex = '(\\d|\\s)';
                        maskElement.character = maskElement.escapeSymbol === '\\' ? maskElement.maskCharacter : '';
                        maskElement.defaultCharacter = that.promptChar;

                        escapeSymbol = null;
                        break;
                    case '#':
                        maskElement.editable = true;
                        maskElement.required = false;
                        maskElement.escapeSymbol = escapeSymbol;
                        maskElement.type = maskElement.escapeSymbol === '\\' ? 'literal' : 'mask';
                        maskElement.maskCharacter = '#';
                        maskElement.regex = '(\\d|\\s|[+]|[-])';
                        maskElement.character = maskElement.escapeSymbol === '\\' ? maskElement.maskCharacter : '';
                        maskElement.defaultCharacter = that.promptChar;

                        escapeSymbol = null;
                        break;
                    case 'L':
                        maskElement.editable = true;
                        maskElement.required = true;
                        maskElement.escapeSymbol = escapeSymbol;
                        maskElement.type = maskElement.escapeSymbol === '\\' ? 'literal' : 'mask';
                        maskElement.maskCharacter = 'L';
                        maskElement.regex = '([a-zA-Zа-яА-Я])';
                        maskElement.character = maskElement.escapeSymbol === '\\' ? maskElement.maskCharacter : '';
                        maskElement.defaultCharacter = that.promptChar;

                        escapeSymbol = null;
                        break;
                    case '?':
                        maskElement.editable = true;
                        maskElement.required = false;
                        maskElement.escapeSymbol = escapeSymbol;
                        maskElement.type = maskElement.escapeSymbol === '\\' ? 'literal' : 'mask';
                        maskElement.maskCharacter = '?';
                        maskElement.regex = '[a-zA-Zа-яА-Я]?';
                        maskElement.character = maskElement.escapeSymbol === '\\' ? maskElement.maskCharacter : '';
                        maskElement.defaultCharacter = that.promptChar;

                        escapeSymbol = null;
                        break;
                    case '&':
                        maskElement.editable = true;
                        maskElement.required = true;
                        maskElement.escapeSymbol = escapeSymbol;
                        maskElement.type = maskElement.escapeSymbol === '\\' ? 'literal' : 'mask';
                        maskElement.maskCharacter = '&';
                        maskElement.regex = '[^\\s]';
                        maskElement.character = maskElement.escapeSymbol === '\\' ? maskElement.maskCharacter : '';
                        maskElement.defaultCharacter = that.promptChar;

                        escapeSymbol = null;
                        break;
                    case 'C':
                        maskElement.editable = true;
                        maskElement.required = false;
                        maskElement.escapeSymbol = escapeSymbol;
                        maskElement.type = maskElement.escapeSymbol === '\\' ? 'literal' : 'mask';
                        maskElement.maskCharacter = 'C';
                        maskElement.regex = '.';
                        maskElement.character = maskElement.escapeSymbol === '\\' ? maskElement.maskCharacter : '';
                        maskElement.defaultCharacter = that.promptChar;

                        escapeSymbol = null;
                        break;
                    case 'A':
                        maskElement.editable = true;
                        maskElement.required = true;
                        maskElement.escapeSymbol = escapeSymbol;
                        maskElement.type = maskElement.escapeSymbol === '\\' ? 'literal' : 'mask';
                        maskElement.maskCharacter = 'A';
                        maskElement.regex = '[a-zA-Zа-яА-Я]'; //'[a-zA-Zа-яА-Я]'
                        maskElement.character = maskElement.escapeSymbol === '\\' ? maskElement.maskCharacter : '';
                        maskElement.defaultCharacter = that.promptChar;

                        escapeSymbol = null;
                        break;
                    case 'a':
                        maskElement.editable = true;
                        maskElement.required = false;
                        maskElement.escapeSymbol = escapeSymbol;
                        maskElement.type = maskElement.escapeSymbol === '\\' ? 'literal' : 'mask';
                        maskElement.maskCharacter = 'a';
                        maskElement.regex = '[a-zA-Zа-яА-Я]?'; //'[a-zA-Zа-яА-Я]'
                        maskElement.character = maskElement.escapeSymbol === '\\' ? maskElement.maskCharacter : '';
                        maskElement.defaultCharacter = that.promptChar;

                        escapeSymbol = null;
                        break;
                    case '.':
                        maskElement.editable = false;
                        maskElement.required = true;
                        maskElement.escapeSymbol = escapeSymbol;
                        maskElement.type = 'placeholder';
                        maskElement.maskCharacter = '.';
                        maskElement.regex = null;
                        maskElement.character = '.';
                        maskElement.defaultCharacter = that.promptChar;

                        escapeSymbol = null;
                        break;
                    case ',':
                        maskElement.editable = false;
                        maskElement.required = true;
                        maskElement.escapeSymbol = escapeSymbol;
                        maskElement.type = 'placeholder';
                        maskElement.maskCharacter = ',';
                        maskElement.regex = null;
                        maskElement.character = ',';
                        maskElement.defaultCharacter = that.promptChar;

                        escapeSymbol = null;
                        break;
                    case ':':
                        maskElement.editable = false;
                        maskElement.required = true;
                        maskElement.escapeSymbol = escapeSymbol;
                        maskElement.type = 'separator';
                        maskElement.maskCharacter = ':';
                        maskElement.regex = null;
                        maskElement.character = ':';
                        maskElement.defaultCharacter = that.promptChar;

                        escapeSymbol = null;
                        break;
                    case '/':
                        maskElement.editable = false;
                        maskElement.required = true;
                        maskElement.escapeSymbol = escapeSymbol;
                        maskElement.type = 'separator';
                        maskElement.maskCharacter = '/';
                        maskElement.regex = null;
                        maskElement.character = '/';
                        maskElement.defaultCharacter = that.promptChar;

                        escapeSymbol = null;
                        break;
                    case '$':
                        maskElement.editable = false;
                        maskElement.required = true;
                        maskElement.escapeSymbol = escapeSymbol;
                        maskElement.type = 'currency';
                        maskElement.maskCharacter = '$';
                        maskElement.regex = null;
                        maskElement.character = '$';
                        maskElement.defaultCharacter = that.promptChar;

                        escapeSymbol = null;
                        break;
                    case '<':
                        //  escapeSymbol = escapeSymbol === '|' ? null : '<';
                        if (escapeSymbol) {
                            if (escapeSymbol === '|') {
                                escapeSymbol = null;
                            } else if (escapeSymbol === '\\') {
                                maskElement.editable = false;
                                maskElement.required = true;
                                maskElement.escapeSymbol = escapeSymbol;
                                maskElement.type = 'literal';
                                maskElement.maskCharacter = '<';
                                maskElement.regex = '<';
                                maskElement.character = '<';
                                maskElement.defaultCharacter = that.promptChar;

                                escapeSymbol = null;
                            } else {
                                escapeSymbol = '<';
                            }
                        } else {
                            escapeSymbol = '<';
                        }
                        break;
                    case '>':
                        //escapeSymbol = escapeSymbol === '|' ? null : '>';
                        if (escapeSymbol) {
                            if (escapeSymbol === '|') {
                                escapeSymbol = null;
                            } else if (escapeSymbol === '\\') {
                                maskElement.editable = false;
                                maskElement.required = true;
                                maskElement.escapeSymbol = escapeSymbol;
                                maskElement.type = 'literal';
                                maskElement.maskCharacter = '>';
                                maskElement.regex = '>';
                                maskElement.character = '>';
                                maskElement.defaultCharacter = that.promptChar;

                                escapeSymbol = null;
                            } else {
                                escapeSymbol = '>';
                            }
                        } else {
                            escapeSymbol = '>';
                        }
                        break;
                    case '|':
                        //escapeSymbol = '|';
                        if (escapeSymbol) {
                            if (escapeSymbol === '\\') {
                                maskElement.editable = false;
                                maskElement.required = true;
                                maskElement.escapeSymbol = escapeSymbol;
                                maskElement.type = 'literal';
                                maskElement.maskCharacter = '|';
                                maskElement.regex = '|';
                                maskElement.character = '|';
                                maskElement.defaultCharacter = that.promptChar;

                                escapeSymbol = null;
                            } else {
                                escapeSymbol = '|';
                            }
                        } else {
                            escapeSymbol = '|';
                        }
                        break;
                    case '\\':
                        //escapeSymbol = '\\';
                        if (escapeSymbol) {
                            if (escapeSymbol === '\\') {
                                maskElement.editable = false;
                                maskElement.required = true;
                                maskElement.escapeSymbol = escapeSymbol;
                                maskElement.type = 'literal';
                                maskElement.maskCharacter = '\\';
                                maskElement.regex = '\\'; // Invalid regular expression: /\/: \ at end of pattern
                                maskElement.character = '\\';
                                maskElement.defaultCharacter = that.promptChar;

                                escapeSymbol = null;
                            } else {
                                escapeSymbol = '\\';
                            }
                        } else {
                            escapeSymbol = '\\';
                        }
                        break;
                    default:
                        // literals
                        maskElement.editable = false;
                        maskElement.required = true;
                        maskElement.escapeSymbol = escapeSymbol;
                        maskElement.type = 'literal';
                        maskElement.maskCharacter = maskChar;
                        maskElement.regex = null;
                        maskElement.character = maskChar;
                        maskElement.defaultCharacter = maskChar;

                        escapeSymbol = null;
                        break;
                }

                if (escapeSymbol) {
                    continue;
                }

                if (maskElement.type) {
                    that._mask.push(maskElement);
                }
            }
        }

        /**
         * Base keyDownHandler
         */

    }, {
        key: '_keyDownHandler',
        value: function _keyDownHandler() {}

        /**
        *  Check if the entered character is allowed symbol
        */

    }, {
        key: '_validateInput',
        value: function _validateInput(character, position) {
            var that = this,
                maskElement = that._mask[position],
                regEx = new RegExp(maskElement.regex);

            return regEx.test(character);
        }

        /*
        * Updates mask items with new value, based on the mask settings
        */

    }, {
        key: '_setValueToMask',
        value: function _setValueToMask(value, selection) {
            var that = this,
                newValue = value || '',
                valueLength = newValue.length;

            var selectionStart = selection && selection.start ? selection.start : 0;
            var selectionEnd = selection && selection.end ? selection.end : that._mask.length;

            var latestUpdatedPosition = selectionStart,
                latestValueChar = 0;

            while (latestUpdatedPosition < selectionEnd && latestValueChar < valueLength) {
                if (that._mask[latestUpdatedPosition].type === 'mask') {
                    latestValueChar++;
                }

                if (that._setCharAtPosition(newValue.charAt(latestValueChar - 1), latestUpdatedPosition) || that._mask[latestUpdatedPosition].type !== 'mask') {
                    latestUpdatedPosition++;
                }
            }

            if (latestUpdatedPosition < selectionEnd) {
                for (var i = latestUpdatedPosition; i < selectionEnd; i++) {
                    if (that._mask[i].type === 'mask') {
                        that._mask[i].character = '';
                    }
                }
            }

            if (selection) {
                selection.start = latestUpdatedPosition;
            }
        }

        /**
         *  Combination of preventDefault and stopPropagation. Used in several places
         */

    }, {
        key: '_preventDefault',
        value: function _preventDefault(event) {
            if (event.preventDefault) {
                event.preventDefault();
            }

            if (event.stopPropagation) {
                event.stopPropagation();
            }
        }

        /**
        *  Shows prompt characters on focus when promt is hidden on hidePromptOnLeave=true
        */

    }, {
        key: '_showPrompt',
        value: function _showPrompt() {
            var that = this;

            if (that.disabled || !that._promptHidden) {
                return;
            }

            that._setMaskToInput();
        }

        /**
        *  MaskedTextBox change handler
        */

    }, {
        key: '_textBoxChangeHandler',
        value: function _textBoxChangeHandler() {
            var that = this;

            if (that.disabled || that.readonly) {
                return;
            }

            that.value = that._getValueWithTextMaskFormat({ start: 0, end: that._mask.length }, that.textMaskFormat);

            if (that._valueBeforeChange !== that.value) {
                that.$.fireEvent('change', {
                    'newValue': that.value,
                    'oldValue': that._valueBeforeChange
                });
                that._valueBeforeChange = '';

                that._validateMaskValue();
            }
        }

        /**
        *  MaskedTextBox key down handler
        */

    }, {
        key: '_textBoxKeyDownHandler',
        value: function _textBoxKeyDownHandler(event) {
            var that = this,
                key = event.key,
                ctrlPressed = event.ctrlKey,

            //shiftPressed = event.shiftKey,
            ctrlHandledKeys = ['a', 'c', 'v', 'x'],
                selectionEnd = that.$.input.selectionEnd,
                asciiRegExpString = 'xxx[\x00-\x7F]+xxx',
                asciiRegExp = new RegExp(asciiRegExpString),
                allSupportedKeyboardCharacters = /^[a-zA-ZÀ-ÿа-яА-Я0-9.!@?#"$%&:';()*\+,\/;\-=[\\\]\^_{|}<>~` ]+$/;

            var selectionStart = that.$.input.selectionStart;

            if (ctrlPressed && ctrlHandledKeys.indexOf(key) > -1) {
                var performClipboard = function performClipboard(command, callback) {
                    var textArea = document.createElement('textarea');

                    textArea.style.position = 'absolute';
                    textArea.style.left = '-1000px';
                    textArea.style.top = '-1000px';

                    document.body.appendChild(textArea);
                    textArea.focus();
                    if (command === 'Paste') {
                        setTimeout(function () {
                            var value = textArea.value;

                            if (value.length === 0 && window.clipboardData) {
                                // pasteFrom.value = window.clipboardData.getData('Text');
                                textArea.value = window.clipboardData.getData('Text');

                                value = textArea.value;
                            }

                            textArea.parentNode.removeChild(textArea);
                            that.$.input.focus();
                            callback(value);
                        }, 25);
                    } else {
                        textArea.value = that._cutCopyHandler(null, command);
                        textArea.focus();
                        textArea.setSelectionRange(0, textArea.value.length);
                        setTimeout(function () {
                            document.designMode = 'off';
                            textArea.focus();
                            textArea.parentNode.removeChild(textArea);
                            that.$.input.focus();
                        }, 25);

                        if (window.clipboardData) {
                            window.clipboardData.setData('Text', textArea.value);
                        }
                    }
                };

                switch (key) {
                    case 'a':
                        that.$.input.setSelectionRange(0, that.$.input.value.length);
                        break;
                    case 'c':
                        performClipboard('Copy');
                        break;
                    case 'v':
                        performClipboard('Paste', function (text) {
                            var context = that.context;

                            that.context = that;
                            that._textBoxPasteHandler(null, text);
                            that.context = context;
                        });
                        break;
                    case 'x':
                        performClipboard('Cut');
                        break;
                }

                return;
            }

            if (key === 'Backspace') {
                that._deleteHandler(event);
                that._updateMaskFullAndCompleted();
                return;
            }

            if (key === 'Delete') {
                that._deleteHandler(event);
                that._updateMaskFullAndCompleted();
                return;
            }

            if (!that.allowPromptAsInput && key === that.promptChar) {
                that._preventDefault(event);
                return;
            }

            if (that.disabled || that.readonly || that.asciiOnly && !asciiRegExp.test(key) || !allSupportedKeyboardCharacters.test(key) || key.length > 1) {
                return;
            }

            that._preventDefault(event);

            if (selectionStart === selectionEnd && selectionStart === that.$.input.value.length) {
                return;
            }

            if (key === ' ' && !that.resetOnSpace) {
                return;
            }

            selectionStart = that._getEditableSelectionStart(selectionStart, key);

            var nonEditableKeyHandler = function nonEditableKeyHandler() {
                selectionStart = that._getNonEditableSelectionStart(that.$.input.selectionStart, key);
                if (selectionStart !== -1) {
                    that.$.input.selectionStart = that.$.input.selectionEnd = selectionStart + 1;
                }
            };

            if (selectionStart === -1) {
                nonEditableKeyHandler();
                return;
            }

            var isChanged = that._setCharAtPosition(key, selectionStart);

            if (isChanged) {
                that._setMaskToInput();
                that._updateMaskFullAndCompleted();
                that.$.input.selectionStart = that.$.input.selectionEnd = selectionStart + 1;
            } else {
                nonEditableKeyHandler();
            }
        }

        /**
        *  MaskedTextBox key up handler
        */

    }, {
        key: '_textBoxKeyUpHandler',
        value: function _textBoxKeyUpHandler() {
            var that = this;

            that.value = that._getValueWithTextMaskFormat({ start: 0, end: that._mask.length }, that.textMaskFormat);
        }

        /**
        *  MaskedTextBox paste handler
        */

    }, {
        key: '_textBoxPasteHandler',
        value: function _textBoxPasteHandler(event, value) {
            var that = this,
                textBoxValue = that.$.input.value,
                selectionStart = that.$.input.selectionStart;
            var newValue = void 0,
                selectionEnd = that.$.input.selectionEnd;

            if (event) {
                that._preventDefault(event);
            }

            if (window.clipboardData && window.clipboardData.getData) {
                newValue = window.clipboardData.getData('Text');
            } else if (event && event.clipboardData && event.clipboardData.getData) {
                newValue = event.clipboardData.getData('text/plain');
            } else if (value) {
                newValue = value;
            }

            if (selectionEnd - selectionStart !== textBoxValue.length) {
                if (selectionStart === selectionEnd) {
                    that.$.input.selectionEnd = selectionEnd = that._mask.length;
                }

                if (that.rejectInputOnFirstFailure) {
                    var latestTestedValueChar = 0;

                    for (var i = selectionStart; i < selectionEnd; i++) {
                        if (that._mask[i].type === 'mask') {
                            if (!that._validateInput(newValue.charAt(latestTestedValueChar), i)) {
                                that.$.input.selectionStart = that.$.input.selectionEnd = selectionStart;
                                return;
                            } else {
                                latestTestedValueChar++;
                            }

                            if (latestTestedValueChar > newValue.length) {
                                break;
                            }
                        }
                    }
                }

                var selection = { start: selectionStart, end: selectionEnd };

                that._overwrite = true;
                that._setValueToMask(newValue, selection);
                that._setMaskToInput();
                that._updateMaskFullAndCompleted();

                that.$.input.selectionStart = that.$.input.selectionEnd = selection.start;
                that.value = that._getValueWithTextMaskFormat({ start: 0, end: that._mask.length }, that.textMaskFormat);
            }
        }

        /*
        * Updates custom mask item
        */

    }, {
        key: '_setCharAtPosition',
        value: function _setCharAtPosition(newChar, position) {
            var that = this,
                maskItem = that._mask[position];

            if (newChar === ' ' && that.resetOnSpace) {
                newChar = '';
            }

            if (maskItem.type !== 'mask' || that.readonly || that.disabled || !maskItem.editable) {
                return false;
            }

            if (newChar === '' && !that.resetOnSpace) {
                return false;
            }

            if (newChar === that.promptChar && !that.resetOnPrompt && that.allowPromptAsInput) {
                return false;
            }

            if (!that.isOverwriteMode && newChar !== '' && newChar !== that.promptChar && maskItem.character !== '' && !that._overwrite) {
                return false;
            }

            var regex = maskItem.regex;

            if (regex) {
                var regExpr = new RegExp(regex, 'i');

                if (regExpr.test(newChar)) {
                    switch (maskItem.escapeSymbol) {
                        case '>':
                            newChar = newChar.toUpperCase();
                            break;
                        case '<':
                            newChar = newChar.toLowerCase();
                            break;
                    }

                    that._mask[position].character = newChar;
                    return true;
                } else if (that.resetOnSpace && newChar === '') {
                    that._mask[position].character = newChar;
                    return true;
                } else if (that.resetOnPrompt && newChar === that.promptChar && that.allowPromptAsInput) {
                    that._mask[position].character = '';
                    return true;
                }

                return false;
            }

            return false;
        }

        /**
         *  Updates maxLength property and input's max length
         */

    }, {
        key: '_updateMaxLength',
        value: function _updateMaxLength() {
            var that = this;

            if (that._mask.length > 0) {
                that.maxLength = that._mask.length;
            }
        }

        /*
        * Updates prompt char
        */

    }, {
        key: '_updatePromptChar',
        value: function _updatePromptChar() {
            var that = this;

            for (var i = 0; i < that._mask.length; i++) {
                var maskElement = that._mask[i];

                maskElement.defaultCharacter = that.promptChar;
            }

            that._setMaskToInput();
        }

        /*
        * Validates the value according to the 'validation' property
        */

    }, {
        key: '_validateMaskValue',
        value: function _validateMaskValue() {
            var that = this;

            if (that.readonly || that.disabled || !that.validation || typeof that.validation !== 'function') {
                return;
            }

            var value = that.value;

            var success = that.validation(value);

            if (!success) {
                that.setAttribute('error', '');
            } else {
                that.removeAttribute('error');
            }

            that.$.fireEvent('validation', {
                'success': success
            });
        }
    }, {
        key: '_keyUpHandler',
        value: function _keyUpHandler() {
            return;
        }
    }, {
        key: '_resizeHandler',
        value: function _resizeHandler() {}
    }, {
        key: '_selectStartHandler',
        value: function _selectStartHandler() {}
    }, {
        key: '_mouseWheelHandler',
        value: function _mouseWheelHandler() {}
    }, {
        key: '_applySelection',
        value: function _applySelection() {}
    }, {
        key: '_setDropDownSize',
        value: function _setDropDownSize() {}
    }, {
        key: '_styleChangedHandler',
        value: function _styleChangedHandler() {}
    }], [{
        key: 'properties',

        /** 
        * MaskedTextBox's properties 
        */
        get: function get() {
            return {
                'allowPromptAsInput': {
                    value: false,
                    type: 'boolean'
                },
                'asciiOnly': {
                    value: false,
                    type: 'boolean'
                },
                'autoShowMask': {
                    value: false,
                    type: 'boolean'
                },
                'cutCopyMaskFormat': {
                    value: 'excludePromptAndLiterals',
                    allowedValues: ['excludePromptAndLiterals', 'includePrompt', 'includeLiterals', 'includePromptAndLiterals'],
                    type: 'string'
                },
                'hidePromptOnLeave': {
                    value: false,
                    type: 'boolean'
                },
                'hint': {
                    value: '',
                    reflectToAttribute: true,
                    type: 'string'
                },
                'isOverwriteMode': {
                    value: false,
                    type: 'boolean'
                },
                'mask': {
                    value: '#####',
                    type: 'string'
                },
                'maskCompleted': {
                    value: false,
                    type: 'boolean'
                },
                'maskFull': {
                    value: false,
                    type: 'boolean'
                },
                'promptChar': {
                    value: '_',
                    type: 'string'
                },
                'rejectInputOnFirstFailure': {
                    value: false,
                    type: 'boolean'
                },
                'resetOnPrompt': {
                    value: false,
                    type: 'boolean'
                },
                'resetOnSpace': {
                    value: false,
                    type: 'boolean'
                },
                'textMaskFormat': {
                    value: 'excludePromptAndLiterals',
                    allowedValues: ['excludePromptAndLiterals', 'includePrompt', 'includeLiterals', 'includePromptAndLiterals'],
                    type: 'string'
                },
                'validation': {
                    value: null,
                    type: 'function?',
                    reflectToAttribute: false
                },
                'value': {
                    value: null,
                    reflectToAttribute: true,
                    type: 'string?'
                }
            };
        }

        /**
        * MaskedTextBox's event listeners.
        */

    }, {
        key: 'listeners',
        get: function get() {
            return {
                'mouseenter': '_mouseEventsHandler',
                'mouseleave': '_mouseEventsHandler',
                'input.copy': '_cutCopyHandler',
                'input.change': '_textBoxChangeHandler',
                'input.cut': '_cutCopyHandler',
                'input.paste': '_textBoxPasteHandler',
                'input.keydown': '_textBoxKeyDownHandler',
                'input.keyup': '_textBoxKeyUpHandler',
                'input.blur': '_blurHandler',
                'input.focus': '_focusHandler'
            };
        }
    }]);
    return MaskedTextBox;
}(JQX.TextBox));