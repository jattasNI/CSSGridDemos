'use strict';

var DataAdapter = function () {
    function DataAdapter(config) {
        babelHelpers.classCallCheck(this, DataAdapter);

        if (!config) {
            config = {};
        }

        var that = Object.assign(this, config);

        var generateKey = function generateKey() {
            var S4 = function S4() {
                return ((1 + Math.random()) * 0x10000 | 0).toString(16).substring(1);
            };
            return S4();
        };

        that.key = generateKey();

        that.$document = JQX.Utilities.Extend(document);
        that.boundSource = false === that.observable ? [] : new JQX.ObservableArray();
        that.dataItemById = [];

        if (that.allowAdd === undefined) {
            that.allowAdd = true;
        }

        if (that.allowRemove === undefined) {
            that.allowRemove = true;
        }

        if (that.allowUpdate === undefined) {
            that.allowUpdate = true;
        }

        if (config.observable === undefined) {
            that.observable = true;
        }

        if (!config.dataSource) {
            that.dataSource = [];
        }

        if (!config.dataFields) {
            that.dataFields = [];
        } else {
            /* if (config.dataSource && config.dataSource.length > 0) {
                 const keys = Object.keys(config.dataSource[0]);
                    //     that.dataFields = [];
                    for (let i = 0; i < keys.length; i++) {
                    }
             }
             */
        }

        if (!config.dataSourceType) {
            that.dataSourceType = 'array';
        }

        if (!config.id) {
            that.id = null;
        }

        if (!config.autoFetch) {
            that.autoFetch = true;
        }

        if (config.dataFields) {
            that.dataFields = config.dataFields;
        }

        if (config && config.autoBind !== false) {
            that.dataBind();
        }

        that.isInitialized = true;
    }

    babelHelpers.createClass(DataAdapter, [{
        key: '_getDataFieldObjects',
        value: function _getDataFieldObjects(dataFields) {
            //const that = this;

            var dataFieldObjects = [];

            if (typeof dataFields === 'number') {
                var charCode = 'A'.charCodeAt(0);
                var prefix = '';
                var index = 0;

                for (var i = 0; i < dataFields; i++) {
                    var letter = String.fromCharCode(charCode + index);

                    index++;

                    var label = prefix + letter;

                    dataFieldObjects.push({ name: label, dataType: 'string' });

                    if (index >= 26) {
                        index = 0;
                        prefix += 'A';
                    }
                }
            } else if (dataFields.length > 0) {
                for (var _i = 0; _i < dataFields.length; _i++) {
                    var dataField = dataFields[_i];

                    if (typeof dataField === 'string') {
                        var dataFieldParts = dataField.split(':');
                        var name = dataFieldParts[0].trim();
                        var dataType = dataFieldParts.length > 1 ? dataFieldParts[1].trim() : 'string';

                        dataFieldObjects.push({ name: name, dataType: dataType });
                    } else {
                        dataFieldObjects.push(dataField);
                    }
                }
            }

            return dataFieldObjects;
        }
    }, {
        key: '_notify',
        value: function _notify(changeArgs) {
            var that = this;

            if (!that.canNotify) {
                return;
            }

            if (that.notifyFn) {
                that.notifyFn(changeArgs);
            }
        }
    }, {
        key: 'notify',
        value: function notify(notifyFn) {
            var that = this;

            if (notifyFn) {
                that.notifyFn = notifyFn;
            }
        }
    }, {
        key: 'toArray',
        value: function toArray() {
            var that = this;

            return that.boundSource.toArray();
        }
    }, {
        key: 'dataBind',
        value: function dataBind() {
            var that = this;

            that.clear();

            var completed = function completed() {
                if (that.observable) {
                    that.boundSource.notify(function (event) {
                        if (event.action === 'update' && event.path && event.path.indexOf('.') >= 0 && event.path.indexOf('children') === -1 && event.path.indexOf('loaded') === -1 && event.path.indexOf('level') === -1 && event.path.indexOf('leaf') === -1 && event.path.indexOf('expanded') === -1) {

                            var canNotify = false;

                            for (var i = 0; i < that.dataFields.length; i++) {
                                var dataField = that.dataFields[i].name;

                                if (event.path.indexOf(dataField) >= 0) {
                                    canNotify = true;
                                }
                            }

                            if (that._notify && canNotify) {
                                that._notify({ action: 'update', data: event.target, index: event.index });
                            }
                        }
                    });
                }

                if (!that.groupBy) {
                    that.groupBy = [];
                }

                that.groupBy = new JQX.ObservableArray(that.groupBy);
                that.groupBy.notify(function () {
                    that.boundHierarchy = null;
                    that.refreshHierarchy();

                    if (that.onGroup) {
                        that.onGroup();
                    }
                });

                that._onBindingComplete();
            };

            if (typeof that.dataSource === 'string' && that.dataSource.indexOf('.json') >= 0) {
                that.url = that.dataSource;
                that.dataSourceType = 'json';

                //const ajaxJSON = new Ajax(that, (data, status) => {
                //    that.dataSource = data;

                //    that._bindToJSON();
                //});
            } else if (typeof that.dataSource === 'string' && that.dataSource.indexOf('.xlsx') >= 0) {
                that.url = that.dataSource;
                that.dataSourceType = 'xlsx';

                //const ajaxJSON = new Ajax(that, (data, status) => {
                //    const keys = Object.keys(data[0]);
                //    const dataFieldMap = {};
                //    const dataRows = [];

                //    if (that.exportHeader !== false) {
                //        let index = 0;

                //        for(let key in keys) {
                //            const name = keys[key];

                //            dataFieldMap[name] = that.dataFields[index++].name;
                //        }

                //        for(let i = 1; i < data.length; i++) {
                //            const row = data[i];
                //            const dataRow = {};

                //            for(let key in keys) {
                //                const name = keys[key];

                //                dataRow[dataFieldMap[name]] = row[name];
                //            }

                //            dataRows.push(dataRow);
                //        }

                //        that.dataSource = dataRows;
                //    }

                //    that._bindToArray();
                //    completed();        
                //});
            } else if (typeof that.dataSource === 'string' && that.dataSource.indexOf('.csv') >= 0) {
                that.dataSourceType = 'csv';

                //const ajaxJSON = new Ajax(that, (data, status) => {
                //    that._bindToArray();
                //});
            } else if (typeof that.dataSource === 'string' && that.dataSource.indexOf('.tsv') >= 0) {
                that.dataSourceType = 'tsv';

                //const ajaxJSON = new Ajax(that, (data, status) => {
                //});
            } else if (that.dataSourceType === 'array') {
                that._bindToArray();
                completed();
            } else if (that.dataSourceType === 'json') {
                that._bindToJSON();
                completed();
            }
        }
    }, {
        key: '_onBindingComplete',
        value: function _onBindingComplete() {
            var that = this;

            that._buildHierarchy();

            if (that.onBindingComplete) {
                that.onBindingComplete({ data: that.boundSource });
            }

            if (that._notify) {
                that._notify({ action: 'bindingComplete', data: that.boundSource });
            }

            that.bindingCompleted = true;
        }
    }, {
        key: 'refreshHierarchy',
        value: function refreshHierarchy() {
            var that = this;

            that._buildHierarchy();
        }
    }, {
        key: 'find',
        value: function find() {
            var that = this;

            return that.boundSource.find.apply(that.boundSource, arguments);
        }

        //toArray() {
        //    const that = this;

        //    return that.boundSource.toArray();
        //}

    }, {
        key: 'onVirtualDataSourceRequested',
        value: function onVirtualDataSourceRequested(requestCallback, details) {
            var that = this;

            var first = details ? details.first : Infinity;
            var last = details ? details.last : Infinity;
            var row = details ? details.row : null;

            if (undefined === first) {
                first = Infinity;
            }

            if (undefined === last) {
                last = Infinity;
            }

            that.virtualFirstIndex = first;
            that.virtualLastIndex = last;

            if (that.virtualDataSource) {
                var getDataSource = function getDataSource(dataAdapterSettings) {
                    if (dataAdapterSettings.virtualDataSourceLength) {
                        that.virtualDataSourceLength = dataAdapterSettings.virtualDataSourceLength;
                    }

                    new JQX.DataAdapter({
                        dataSource: dataAdapterSettings.dataSource,
                        dataFields: dataAdapterSettings.dataFields || that.dataFields,
                        data: details,
                        onBindingComplete: function onBindingComplete(event) {

                            if (that.virtualDataSourceOnExpand && row) {
                                if (event.data && event.data.length > 0) {
                                    that.add(event.data, row.$.id);
                                } else {
                                    row.leaf = true;
                                }

                                if (that.onFilter) {
                                    that.onFilter();
                                }

                                requestCallback();

                                return;
                            }

                            if (first === Infinity) {
                                that.add(event.data);
                            } else {
                                var items = [];
                                var indexes = [];

                                for (var i = 0; i < event.data.length; i++) {
                                    var item = event.data[i];

                                    if (first + i <= last) {
                                        items.push(item);
                                        indexes.push(first + i);
                                    }
                                }

                                that.update(indexes, items);
                            }

                            if (that.onFilter) {
                                that.onFilter();
                            }

                            requestCallback();
                        }
                    });
                };

                var hasCache = false;

                var isEmpty = function isEmpty(obj) {
                    return Object.entries(obj).length === 0 && (obj.constructor === Object || obj.constructor === Array);
                };
                var canCache = isEmpty(details.sorting) && isEmpty(details.filtering) && isEmpty(details.grouping) && !details.row && details.action !== 'filter' && details.action !== 'sort' && details.action !== 'group';

                if (that.virtualDataSourceCache && first !== Infinity && canCache) {
                    var cachedCount = 0;

                    for (var i = first; i < last; i++) {
                        if (!that[i].isEmpty) {
                            cachedCount++;
                        }
                    }

                    if (cachedCount === last - first) {
                        hasCache = true;
                    }
                }

                if (hasCache) {
                    requestCallback();
                } else {
                    if (details.action === 'expand') {
                        that.virtualDataSourceOnExpand(getDataSource, {
                            first: first,
                            last: last,
                            row: details.row,
                            sorting: details.sorting,
                            filtering: details.filtering,
                            grouping: details.grouping,
                            action: details.action
                        });
                    } else {
                        that.virtualDataSource(getDataSource, {
                            first: first,
                            last: last,
                            sorting: details.sorting,
                            filtering: details.filtering,
                            grouping: details.grouping,
                            action: details.action
                        });
                    }
                }
            } else {
                requestCallback();
            }
        }
    }, {
        key: 'add',
        value: function add(item, parentId) {
            var that = this;

            if (!item) {
                return;
            }

            var result = true;

            var addItem = function addItem(item) {
                var itemObject = that._getDataItem(item, that.boundSource.length);

                that[that.boundSource.length] = itemObject;
                that.dataItemById[itemObject.$.id] = itemObject;

                var pushResult = that.boundSource.push(itemObject);

                if (parentId !== undefined) {
                    itemObject.$.parentId = parentId;
                }

                if (!pushResult) {
                    result = false;
                }

                return itemObject;
            };

            if (item.length) {
                var itemObjects = [];

                for (var i = 0; i < item.length; i++) {
                    var itemObject = addItem(item[i]);

                    itemObjects.push(itemObject);
                }

                that._notify({ action: 'add', data: itemObjects });
            } else {
                var _itemObject = addItem(item);

                that._notify({ action: 'add', data: _itemObject });
            }

            that.refreshHierarchy();

            return result;
        }
    }, {
        key: 'refreshIndexes',
        value: function refreshIndexes() {
            var that = this;

            for (var i = 0; i < that.boundSource.length; i++) {
                that[i] = that.boundSource[i];
            }
        }
    }, {
        key: 'removeLast',
        value: function removeLast() {
            var that = this;

            delete that[that.boundSource.length - 1];

            var result = that.boundSource.pop();

            that._notify({ action: 'removeLast', data: result });

            that.refreshHierarchy();

            return result;
        }
    }, {
        key: 'remove',
        value: function remove(index) {
            var that = this;

            var item = that.boundSource[index];

            if (!item) {
                throw new Error('Invalid Item Index');
            }

            that.boundSource.splice(index, 1);
            that.refreshIndexes();

            that._notify({ action: 'remove', index: index, data: item });

            that.refreshHierarchy();
        }
    }, {
        key: 'update',
        value: function update(index, dataSourceItem) {
            var that = this;

            if (JQX.Utilities.Types.isArray(index) && JQX.Utilities.Types.isArray(dataSourceItem)) {
                if (index.length === 0 && dataSourceItem.length === 0) {
                    return;
                }
            }

            if (dataSourceItem.length && index.length) {
                var itemObjects = [];

                for (var i = 0; i < index.length; i++) {
                    var _itemObject2 = that._getDataItem(dataSourceItem[i], index[i]);
                    var currentIndex = index[i];

                    itemObjects.push(_itemObject2);

                    that.boundSource[currentIndex] = _itemObject2;
                    that[currentIndex] = that.boundSource[currentIndex];
                    that.dataItemById[_itemObject2.$.id] = that[currentIndex];
                }

                that._notify({ action: 'update', index: index, data: itemObjects });

                that.refreshHierarchy();

                return;
            }

            var itemObject = that._getDataItem(dataSourceItem, index);

            that.boundSource[index] = itemObject;
            that[index] = that.boundSource[index];
            that.dataItemById[itemObject.$.id] = that[index];

            that._notify({ action: 'update', index: index, data: itemObject });

            that.refreshHierarchy();

            return itemObject;
        }
    }, {
        key: 'insert',
        value: function insert(index, item) {
            var that = this;

            item = that._getDataItem(item, index);

            var result = that.boundSource.splice(index, 0, item);

            that.refreshIndexes();

            that._notify({ action: 'insert', index: index, data: item });

            that.refreshHierarchy();

            return result;
        }
    }, {
        key: 'move',
        value: function move(from, to) {
            if (to > from && to - from === 1 || from === to) {
                return;
            }

            var that = this,
                recordToMove = that.boundSource.splice(from, 1)[0];

            if (to > from) {
                to--;
                that.boundSource.splice(to, 0, recordToMove);
            } else {
                that.boundSource.splice(to, 0, recordToMove);
            }

            that.refreshIndexes();

            that._notify({ action: 'move', index: to, data: that.boundSource[to] });

            that.refreshHierarchy();
        }
    }, {
        key: 'indexOf',
        value: function indexOf(item) {
            var that = this;
            var index = that.boundSource.indexOf(item);

            return index;
        }
    }, {
        key: 'clear',
        value: function clear() {
            var that = this;

            if (!that.isInitialized) {
                that._cachedValues = [];
                that.dataItemById = [];
                return;
            }

            for (var i = 0; i < that.boundSource.length; i++) {
                delete that[i];
            }

            that._cachedValues = [];
            that.boundSource = that.observable ? new JQX.ObservableArray() : [];
            that.dataItemById = [];
            that.refreshHierarchy();
        }
    }, {
        key: '_getId',
        value: function _getId(id, item, index) {
            if (id !== null && id.name !== undefined) {
                if (id.name && item.getAttribute) {
                    var result = item.getAttribute(id.name);
                    if (result !== null && result.toString().length > 0) {
                        return result;
                    } else if (id.map) {
                        try {
                            var _result = item.getAttribute(id.map);
                            if (_result !== null && _result.toString().length > 0) {
                                return _result;
                            }
                        } catch (error) {
                            return index;
                        }
                    }
                    return;
                }
            }

            if (id) {
                if (id.toString().length > 0 && item.getAttribute) {
                    var _result2 = item.getAttribute(id);
                    if (_result2 !== null && _result2.toString().length > 0) {
                        return _result2.trim().split(' ').join('').replace(/([ #;?%&,.+*~\':'!^$[\]()=>|\/@])/g, '');
                    } else {
                        var splitMap = id.split(this.mapChar);
                        if (splitMap.length > 1) {
                            var d = item;
                            for (var p = 0; p < splitMap.length; p++) {
                                if (d !== undefined) {
                                    d = d[splitMap[p]];
                                }
                            }
                            if (d !== undefined) {
                                return d;
                            }
                        } else {
                            if (item[id] !== undefined) {
                                return item[id];
                            }
                        }
                    }
                }
            }

            return index;
        }
    }, {
        key: '_buildHierarchy',
        value: function _buildHierarchy() {
            var that = this;

            if (!that.reservedNames) {
                that.reservedNames = {
                    leaf: 'leaf',
                    parent: 'parent',
                    expanded: 'expanded',
                    checked: 'checked',
                    selected: 'selected',
                    level: 'level',
                    icon: 'icon',
                    data: 'data'
                };
            } else {
                var _names = that.reservedNames;

                if (!_names.leaf) {
                    _names.leaf = 'leaf';
                }
                if (!_names.parent) {
                    _names.parent = 'parent';
                }
                if (!_names.expanded) {
                    _names.expanded = 'expanded';
                }
                if (!_names.checked) {
                    _names.checked = 'checked';
                }
                if (!_names.selected) {
                    _names.selected = 'selected';
                }
                if (!_names.level) {
                    _names.level = 'level';
                }
                if (!_names.data) {
                    _names.data = 'data';
                }
            }

            var names = that.reservedNames;

            if (that.childrenDataField) {
                var hierarchy = [];

                var _loop = function _loop(i) {
                    var item = Object.assign({}, that.boundSource[i]);

                    if (!item) {
                        return 'continue';
                    }

                    hierarchy.push(item);

                    var addItems = function addItems(item) {
                        var splitMap = that.childrenDataField.split(that.mapChar);
                        var children = null;

                        if (splitMap.length > 1) {
                            var data = item;

                            for (var p = 0; p < splitMap.length; p++) {
                                if (data !== undefined) {
                                    data = data[splitMap[p]];
                                }
                            }

                            children = data;
                        } else {
                            children = item['children'];
                        }

                        item['children'] = children;

                        if (item['children'] === null || item['children'] === undefined || item['children'] && item['children'].length === 0) {
                            item[names.leaf] = true;
                        }
                    };

                    addItems(item);
                    item[names.level] = 0;

                    if (!item.$) {
                        item.$ = {};
                    }

                    item[names.parent] = null;
                    item[names.data] = item;

                    if (item[names.expanded] === undefined) {
                        item[names.expanded] = false;
                    }

                    var drillThrough = function drillThrough(parent, children) {
                        if (!children) {
                            parent['children'] = new Array();
                            return;
                        }

                        for (var _i3 = 0; _i3 < children.length; _i3++) {
                            var _item2 = that._getDataItem(children[_i3], _i3);

                            if (!_item2) {
                                continue;
                            }

                            addItems(_item2);
                            _item2[names.level] = parent[names.level] + 1;
                            _item2[names.parent] = parent;
                            _item2[names.data] = _item2;

                            if (parent) {
                                parent['children'][_i3] = _item2;
                            }

                            if (_item2[names.expanded] === undefined) {
                                _item2[names.expanded] = false;
                            }

                            drillThrough(_item2, _item2['children']);
                        }
                    };

                    drillThrough(item, item['children']);
                };

                for (var i = 0; i < that.boundSource.length; i++) {
                    var _ret = _loop(i);

                    if (_ret === 'continue') continue;
                }

                that.boundHierarchy = hierarchy;

                if (!that._boundSourceUpdate) {
                    for (var i = 0; i < that.boundHierarchy.length; i++) {
                        var _item = that.boundHierarchy[i];

                        if (_item.children) {
                            (function () {
                                var drillThrough = function drillThrough(item) {
                                    if (!that.dataItemById[item.$.id]) {
                                        that.boundSource.canNotify = false;
                                        that.dataItemById[item.$.id] = item;
                                        that[that.boundSource.length] = item;
                                        that.boundSource.push(item);
                                        that.boundSource.canNotify = true;
                                    }

                                    if (item.children) {
                                        for (var _i2 = 0; _i2 < item.children.length; _i2++) {
                                            var child = item.children[_i2];

                                            if (child.children) {
                                                drillThrough(child);
                                            }
                                        }
                                    }
                                };

                                drillThrough(_item);
                            })();
                        }
                    }

                    that._boundSourceUpdate = true;
                }
            }

            if (that.xmlRoot && that.dataSourceType === 'xml') {
                that.boundHierarchy = this._getHierarchy('uid', '_parentuid', 'children', null, that.boundSource);
            }

            if (that.keyDataField && that.parentDataField) {
                that.boundHierarchy = this._getHierarchy(that.keyDataField, that.parentDataField, 'children', null, that.boundSource);
            }

            if (that.groupBy && that.groupBy.length > 0) {
                that.boundHierarchy = this._getGroupHierarchy(that.groupBy, 'children', 'label', null, 'data', null, 'parent', that.boundSource);
            }

            if (that.virtualDataSourceOnExpand) {
                that.boundHierarchy = this._getHierarchy('id', 'parentId', 'children', null, that.boundSource);
            }
        }
    }, {
        key: '_getGroupHierarchy',
        value: function _getGroupHierarchy(groups, collectionName, groupName, mappingFields, itemName, valueName, parentName, data, startIndex) {
            var that = this;

            if (!startIndex) {
                startIndex = 0;
            }

            var names = that.reservedNames;

            var guid = function guid() {
                function s4() {
                    return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);
                }

                return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();
            };

            var groupHashCodes = new Array();
            for (var iGroupColumn = 0; iGroupColumn < groups.length; iGroupColumn++) {
                groupHashCodes[iGroupColumn] = guid();
            }

            if (!collectionName) {
                collectionName = 'children';
            }

            if (!groupName) {
                groupName = 'group';
            }

            if (!itemName) {
                itemName = 'item';
            }

            if (!parentName) {
                parentName = 'parent';
            }

            if (undefined === valueName) {
                valueName = 'value';
            }

            var groupboundSource = new Array();
            var hashItemGroups = new Array();

            var groupboundSourceIndex = 0;

            var getItem = function getItem(item) {
                var itemObj = item;
                if (mappingFields) {
                    for (var mappingField in mappingFields) {
                        var mappingObject = mappingFields[mappingField];

                        if (mappingObject.name && mappingObject.map) {
                            itemObj[mappingObject.map] = itemObj[mappingObject.name];
                        }
                    }
                }

                return itemObj;
            };

            for (var obj = 0; obj < data.length; obj++) {
                var _item3 = Object.assign({}, getItem(data[obj]));

                _item3[names.leaf] = false;

                var itemKeysHierarchy = new Array();
                var keys = 0;

                for (var _iGroupColumn = 0; _iGroupColumn < groups.length; _iGroupColumn++) {
                    var group = groups[_iGroupColumn];
                    var value = _item3[group];

                    if (null === value) {
                        continue;
                    }

                    itemKeysHierarchy[keys++] = { value: value, group: group, hash: groupHashCodes[_iGroupColumn] };
                }

                if (itemKeysHierarchy.length !== groups.length) {
                    break;
                }

                var parentItem = null;
                var lookupKey = '';

                for (var q = 0; q < itemKeysHierarchy.length; q++) {
                    var itemKey = itemKeysHierarchy[q].value;
                    var groupDataField = itemKeysHierarchy[q].group;
                    var columnHash = itemKeysHierarchy[q].hash;

                    lookupKey = lookupKey + '_' + columnHash + '_' + itemKey;

                    if (hashItemGroups[lookupKey] !== undefined && hashItemGroups[lookupKey] !== null) {
                        parentItem = hashItemGroups[lookupKey];
                        continue;
                    }

                    if (parentItem === null) {
                        parentItem = { $: {} };

                        parentItem[names.level] = 0;
                        parentItem[names.leaf] = false;
                        parentItem[parentName] = null;
                        parentItem[groupName] = itemKey;
                        parentItem[itemName] = _item3;
                        parentItem['groupDataField'] = groupDataField;

                        if (_item3[names.expanded] !== undefined) {
                            parentItem[names.expanded] = _item3[names.expanded];
                        } else {
                            parentItem[names.expanded] = false;
                        }

                        if (valueName) {
                            parentItem[valueName] = _item3[valueName];
                        }

                        parentItem[collectionName] = new Array();

                        var uid = groupboundSource.length + startIndex;

                        if (!this.id || typeof _item3.$.id === 'number' || isFinite(_item3.$.id)) {
                            uid = 'Item' + uid;
                        }
                        if (parentItem.$.id === undefined) {
                            parentItem.$.id = uid;
                        }

                        groupboundSource[groupboundSourceIndex++] = parentItem;
                    } else {
                        var subItem = { $: {} };

                        subItem[names.level] = parentItem[names.level] + 1;
                        subItem[parentName] = parentItem;
                        subItem[groupName] = itemKey;
                        subItem[collectionName] = new Array();
                        subItem[itemName] = _item3;
                        subItem['groupDataField'] = groupDataField;
                        subItem[names.leaf] = false;

                        if (_item3[names.expanded] !== undefined) {
                            subItem[names.expanded] = _item3[names.expanded];
                        } else {
                            subItem[names.expanded] = false;
                        }

                        if (valueName) {
                            subItem[valueName] = _item3[valueName];
                        }

                        if (subItem.$.id === undefined) {
                            subItem.$.id = parentItem.$.id + '_' + parentItem[collectionName].length;
                        }

                        parentItem[collectionName][parentItem[collectionName].length] = subItem;
                        parentItem = subItem;
                    }

                    hashItemGroups[lookupKey] = parentItem;
                }

                if (_item3) {
                    _item3[names.leaf] = true;
                }

                if (parentItem !== null) {
                    if (this.id === null) {
                        if (undefined === _item3.$.id) {
                            _item3.$.id = parentItem.$.id + '_' + parentItem[collectionName].length;
                        }
                    } else {
                        if (undefined === _item3.$.id) {
                            if (_item3.$.id.toString().indexOf(parentItem.$.id) === -1) {
                                _item3.$.id = parentItem.$.id + '_' + _item3.$.id;
                            }
                        }
                    }

                    _item3[parentName] = parentItem;
                    _item3[names.level] = parentItem[names.level] + 1;
                    parentItem[collectionName][parentItem[collectionName].length] = _item3;
                } else {
                    if (undefined === _item3.$.id) {
                        _item3.$.id = guid();
                    }
                }
            }

            return groupboundSource;
        }
    }, {
        key: '_getHierarchy',
        value: function _getHierarchy(fieldName, parentFieldName, collectionName, mappingFields, boundSource) {
            var that = this;

            var databoundHierarchy = new Array();
            var flatData = this.boundSource;

            if (boundSource) {
                flatData = boundSource;
            }

            if (this.boundSource.length === 0) return null;

            var childrenName = collectionName !== null ? collectionName : 'children';
            var items = new Array();
            var data = flatData;
            var dataLength = data.length;
            var names = that.reservedNames;

            var getItem = function getItem(item) {
                var itemObj = item;
                if (mappingFields) {
                    for (var mappingField in mappingFields) {
                        var mappingObject = mappingFields[mappingField];

                        if (mappingObject.name && mappingObject.map) {
                            itemObj[mappingObject.map] = itemObj[mappingObject.name];
                        }
                    }
                }

                return itemObj;
            };

            // build hierarchical source.
            for (var i = 0; i < dataLength; i++) {
                var _item4 = data[i];
                var parentId = _item4[parentFieldName];
                var id = _item4[fieldName];

                if (parentFieldName === 'parentId') {
                    parentId = _item4.$.parentId;
                }

                if (fieldName === 'id') {
                    id = _item4.$.id;
                }

                _item4[childrenName] = new Array();

                items[id] = { parentId: parentId, item: _item4 };
            }

            for (var _i4 = 0; _i4 < dataLength; _i4++) {
                var _item5 = data[_i4];
                var _parentId = _item5[parentFieldName];
                var _id = _item5[fieldName];

                if (parentFieldName === 'parentId') {
                    _parentId = _item5.$.parentId;
                }

                if (fieldName === 'id') {
                    _id = _item5.$.id;
                }

                if (items[_parentId] !== undefined) {
                    var _item6 = { parentId: _parentId, item: items[_id].item };
                    var parentItem = items[_parentId].item;
                    if (!parentItem[childrenName]) {
                        parentItem[childrenName] = new Array();
                    }
                    var length = parentItem[childrenName].length;
                    _item6 = _item6.item;

                    if (!names) {
                        if (_item6.parent === undefined) {
                            _item6.parent = parentItem;
                        }
                    } else {
                        if (_item6[names.parent] === undefined) {
                            _item6[names.parent] = parentItem;
                        }
                    }

                    var itemObj = getItem(_item6);

                    parentItem[childrenName][length] = itemObj;
                    items[_parentId].item = parentItem;
                    items[_id].item = _item6;
                } else {
                    var _item7 = items[_id].item;
                    if (!names) {
                        if (_item7.parent === undefined) {
                            _item7.parent = null;
                        }
                    } else {
                        if (_item7[names.parent] === undefined) {
                            _item7[names.parent] = null;
                        }
                    }

                    var _itemObj = getItem(_item7);

                    if (!names) {
                        _itemObj.level = 0;
                    } else {
                        _itemObj[names.level] = 0;
                    }

                    databoundHierarchy[databoundHierarchy.length] = _itemObj;
                }
            }
            if (databoundHierarchy.length !== 0) {
                var updateLevels = function updateLevels(level, children) {
                    for (var _i5 = 0; _i5 < children.length; _i5++) {
                        var child = children[_i5];

                        if (!names) {
                            child.level = level;
                        } else {
                            child[names.level] = level;
                        }

                        var childChildren = child[childrenName];

                        if (childChildren) {
                            if (childChildren.length > 0) {
                                updateLevels(level + 1, childChildren);
                            } else {
                                if (that.virtualDataSourceOnExpand) {
                                    if (child.leaf === undefined) {
                                        child.leaf = false;
                                    }
                                } else {
                                    if (!names) {
                                        child.leaf = true;
                                    } else {
                                        child[names.leaf] = true;
                                    }
                                }
                            }
                        } else {
                            if (that.virtualDataSourceOnExpand) {
                                if (child.leaf === undefined) {
                                    child.leaf = false;
                                }
                            } else {
                                if (!names) {
                                    child.leaf = true;
                                } else {
                                    child[names.leaf] = true;
                                }
                            }
                        }
                    }
                };
                updateLevels(0, databoundHierarchy);
            }
            return databoundHierarchy;
        }
    }, {
        key: 'summarize',
        value: function summarize(summaryItems, boundSource) {
            var that = this;

            if (!Array.isArray(summaryItems)) {
                summaryItems = [summaryItems];
            }

            var tempSummaryItems = [];

            for (var i = 0; i < summaryItems.length; i++) {
                var summaryItem = summaryItems[i];

                for (var name in summaryItem) {
                    var functions = summaryItem[name];

                    tempSummaryItems.push({ dataField: name, functions: functions });
                }
            }

            summaryItems = tempSummaryItems;

            var data = {};
            var summaryByDataField = new Array();

            if (!boundSource) {
                boundSource = that.boundSource;
            }

            var length = boundSource.length;

            if (length === 0) {
                return;
            }

            if (length === undefined) {
                return;
            }

            var _loop2 = function _loop2(_i6) {
                var dataItem = boundSource[_i6];

                var _loop4 = function _loop4(j) {
                    var summaryItem = summaryItems[j];
                    var value = dataItem[summaryItem.dataField];

                    if (summaryItem.functions) {
                        data[summaryItem.dataField] = data[summaryItem.dataField] || {};
                        summaryByDataField[summaryItem.dataField] = summaryByDataField[summaryItem.dataField] || 0;
                        summaryByDataField[summaryItem.dataField]++;

                        var _summaryItemFunction = function _summaryItemFunction(summaryItemObject) {
                            for (var _name in summaryItemObject) {
                                var oldValue = data[summaryItem.dataField][_name];

                                if (oldValue === null || oldValue === undefined) {
                                    data[summaryItem.dataField][_name] = 0;
                                    oldValue = 0;
                                }

                                if (typeof summaryItemObject[_name] === 'function') {
                                    oldValue = summaryItemObject[_name](oldValue, value, summaryItem.dataField, dataItem);
                                }
                                data[summaryItem.dataField][_name] = oldValue;
                            }
                        };

                        var canParse = parseFloat(value);

                        if (isNaN(canParse)) {
                            canParse = false;
                        } else {
                            canParse = true;
                        }

                        if (canParse) {
                            value = parseFloat(value);
                        }

                        if (typeof value === 'number' && isFinite(value)) {
                            summaryItem.functions.forEach(function (summaryItemFunction) {
                                var oldValue = data[summaryItem.dataField][summaryItemFunction];

                                if (oldValue === null || oldValue === undefined) {
                                    oldValue = 0;

                                    if (this === 'min') {
                                        oldValue = 9999999999999;
                                    }

                                    if (this === 'max') {
                                        oldValue = -9999999999999;
                                    }
                                }

                                if (summaryItemFunction === 'sum' || summaryItemFunction === 'avg' || summaryItemFunction === 'stdev' || summaryItemFunction === 'stdevp' || summaryItemFunction === 'var' || summaryItemFunction === 'varp') {
                                    oldValue += parseFloat(value);
                                } else if (summaryItemFunction === 'product') {
                                    if (_i6 === 0) oldValue = parseFloat(value);else oldValue *= parseFloat(value);
                                } else if (summaryItemFunction === 'min') {
                                    oldValue = Math.min(oldValue, parseFloat(value));
                                } else if (summaryItemFunction === 'max') {
                                    oldValue = Math.max(oldValue, parseFloat(value));
                                } else if (summaryItemFunction === 'count') {
                                    oldValue++;
                                } else if ((typeof summaryItemFunction === 'undefined' ? 'undefined' : babelHelpers.typeof(summaryItemFunction)) === 'object') {
                                    _summaryItemFunction(summaryItemFunction);
                                    return;
                                }

                                data[summaryItem.dataField][summaryItemFunction] = oldValue;
                            });
                        } else {
                            summaryItem.functions.forEach(function (summaryItemFunction) {
                                if (summaryItemFunction === 'min' || summaryItemFunction === 'max' || summaryItemFunction === 'count' || summaryItemFunction === 'product' || summaryItemFunction === 'sum' || summaryItemFunction === 'avg' || summaryItemFunction === 'stdev' || summaryItemFunction === 'stdevp' || summaryItemFunction === 'var' || summaryItemFunction === 'varp') {
                                    if (value === null) {
                                        return true;
                                    }

                                    var oldValue = data[summaryItem.dataField][summaryItemFunction];

                                    if (oldValue === null || oldValue === undefined) {
                                        oldValue = 0;
                                    }

                                    data[summaryItem.dataField][summaryItemFunction] = oldValue;

                                    return true;
                                }

                                if ((typeof summaryItemFunction === 'undefined' ? 'undefined' : babelHelpers.typeof(summaryItemFunction)) === 'object') {
                                    _summaryItemFunction(summaryItemFunction);
                                }
                            });
                        }
                    }
                };

                for (var j = 0; j < summaryItems.length; j++) {
                    _loop4(j);
                }
            };

            for (var _i6 = 0; _i6 < length; _i6++) {
                _loop2(_i6);
            }

            var _loop3 = function _loop3(j) {
                var summaryItem = summaryItems[j];

                if (!summaryItem.functions) {
                    return 'continue';
                }
                if (!data[summaryItem.dataField]) {
                    data[summaryItem.dataField] = {};

                    summaryItem.functions.forEach(function (summaryItemFunction) {
                        data[summaryItem.dataField][summaryItemFunction] = 0;
                    });
                }

                if (data[summaryItem.dataField]['avg'] !== undefined) {
                    var _value = data[summaryItem.dataField]['avg'];
                    var dataValues = summaryByDataField[summaryItem.dataField];

                    if (dataValues === 0 || dataValues === undefined) {
                        data[summaryItem.dataField]['avg'] = 0;
                    } else {
                        data[summaryItem.dataField]['avg'] = _value / dataValues;
                    }
                } else if (data[summaryItem.dataField]['count'] !== undefined) {
                    data[summaryItem.dataField]['count'] = length;
                }

                // stdev, stdevp, var, varp.
                // stdev - Standard deviation on a sample.
                // varp - Variance on an entire population.
                // let - Variance on a sample.
                if (data[summaryItem.dataField]['stdev'] || data[summaryItem.dataField]['stdevp'] || data[summaryItem.dataField]['var'] || data[summaryItem.dataField]['varp']) {
                    summaryItem.functions.forEach(function (summaryItemFunction) {
                        if (summaryItemFunction === 'stdev' || summaryItemFunction === 'var' || summaryItemFunction === 'varp' || summaryItemFunction === 'stdevp') {
                            var _value2 = data[summaryItem.dataField][summaryItemFunction];
                            var count = length;
                            var average = _value2 / length;
                            var sumSq = 0.0;

                            for (var _i7 = 0; _i7 < length; _i7++) {
                                var _dataItem = boundSource[_i7];
                                var _value3 = _dataItem[summaryItem.dataField];

                                sumSq += (_value3 - average) * (_value3 - average);
                            }

                            var denominator = summaryItemFunction === 'stdevp' || summaryItemFunction === 'varp' ? count : count - 1;

                            if (denominator === 0) {
                                denominator = 1;
                            }

                            if (summaryItemFunction === 'var' || summaryItemFunction === 'varp') {
                                data[summaryItem.dataField][summaryItemFunction] = sumSq / denominator;
                            } else if (summaryItemFunction === 'stdevp' || summaryItemFunction === 'stdev') {
                                data[summaryItem.dataField][summaryItemFunction] = Math.sqrt(sumSq / denominator);
                            }
                        }
                    });
                }
            };

            for (var j = 0; j < summaryItems.length; j++) {
                var _ret4 = _loop3(j);

                if (_ret4 === 'continue') continue;
            }
            return data;
        }
    }, {
        key: '_getDataItem',
        value: function _getDataItem(dataSourceItem, index) {
            var that = this;
            var itemObject = {};
            var unboundMode = typeof that.dataSource === 'number' || that.dataSourceLength;

            if (!dataSourceItem) {
                return { $: { id: index }, isEmpty: true, index: index };
            }

            if (unboundMode) {
                for (var j = 0; j < that.dataFields.length; j++) {
                    var dataField = that.dataFields ? that.dataFields[j] : {};

                    itemObject[dataField.name] = '';
                }

                itemObject.$ = {};
                itemObject.$.id = index;
                itemObject.$.index = index;

                return itemObject;
            }

            var dataItem = dataSourceItem;

            if (dataItem.expanded !== undefined) {
                itemObject.expanded = dataItem.expanded;

                if (dataItem.expanded === 'true' || dataItem.expanded === true || dataItem.expanded === 1) {
                    itemObject.expanded = true;
                } else {
                    itemObject.expanded = false;
                }
            }

            if (that.childrenDataField) {
                if (dataItem[that.childrenDataField] !== undefined) {
                    itemObject.children = dataItem[that.childrenDataField];
                }
            } else {
                if (dataItem.children !== undefined) {
                    itemObject.children = dataItem.children;
                } else if (dataItem.items !== undefined) {
                    itemObject.children = dataItem.items;
                }
            }
            if (dataItem.leaf !== undefined) {
                itemObject.leaf = dataItem.leaf;
            }

            if (dataItem.level !== undefined) {
                itemObject.level = dataItem.level;
            }

            if (that.keyDataField) {
                if (dataItem[that.keyDataField] !== undefined) {
                    itemObject[that.keyDataField] = dataItem[that.keyDataField];
                }
            }

            if (that.parentDataField) {
                if (dataItem[that.parentDataField] !== undefined) {
                    itemObject[that.parentDataField] = dataItem[that.parentDataField];
                }
            }

            if (that.dataFields.length === 0) {
                var names = Object.getOwnPropertyNames(dataSourceItem);

                for (var i = 0; i < names.length; i++) {
                    that.dataFields.push({ name: names[i], dataType: 'string' });
                }
            }

            for (var _j = 0; _j < that.dataFields.length; _j++) {
                var _dataField = that.dataFields ? that.dataFields[_j] : {};
                var _value4 = '';

                if (undefined === _dataField || _dataField === null) {
                    continue;
                }

                if (dataSourceItem.length) {
                    _value4 = dataSourceItem[_j];
                }

                if (_dataField.map) {
                    var splitMap = _dataField.map.split(that.mapChar);

                    if (splitMap.length > 0) {
                        var dataMappedItem = dataItem;

                        for (var p = 0; p < splitMap.length; p++) {
                            if (!dataItem) {
                                continue;
                            }

                            dataMappedItem = dataMappedItem[splitMap[p]];
                        }

                        _value4 = dataMappedItem;
                    } else {
                        _value4 = dataItem[_dataField.map];
                    }
                }

                if (_value4 !== undefined && _value4 !== null) {
                    _value4 = _value4.toString();
                } else {
                    if (_value4 === undefined && _value4 !== null) {
                        _value4 = '';
                    }
                }

                var isEmptyString = false;
                // searches by both selectors when necessary.
                if (_value4 === '') {
                    isEmptyString = true;
                    _value4 = dataSourceItem[_dataField.name];

                    if (_value4 !== undefined && _value4 !== null) {
                        if (_dataField.dataType !== 'array') {
                            if (_dataField.dataType !== 'date') {
                                _value4 = _value4.toString();
                            }
                        }
                    } else {
                        _value4 = '';
                    }
                }

                if (_value4 === '[object Object]' && _dataField.map && isEmptyString) {
                    _value4 = '';
                }

                if (that._cachedValues['' + _value4 + '_' + _dataField.dataType]) {
                    _value4 = that._cachedValues['' + _value4 + '_' + _dataField.dataType];
                } else {
                    if (_dataField.dataType === 'bool' || _dataField.dataType === 'boolean') {
                        if (_value4 === 'true' || _value4 === '1') {
                            _value4 = true;
                        } else if (_value4 === 'false' || _value4 === '0') {
                            _value4 = false;
                        }
                    } else {
                        _value4 = that.$document.deserialize('' + _value4, _dataField.dataType, true);
                    }

                    that._cachedValues[_value4 + '_' + _dataField.dataType] = _value4;
                }

                if (_dataField.dataType !== 'string' && _dataField.dataType !== 'boolean' && _dataField.dataType !== 'bool') {
                    if (isNaN(_value4) || _value4 === -Infinity || _value4 === Infinity) {
                        _value4 = 0;
                    }
                }

                itemObject[_dataField.name] = _value4;
            }

            var itemObjectId = index;

            if (that.id) {
                itemObjectId = dataItem[that.id];
                if ((typeof itemObjectId === 'undefined' ? 'undefined' : babelHelpers.typeof(itemObjectId)) === 'object') {
                    itemObjectId = index;
                }
            } else if (that.dataItemById && that.dataItemById[itemObjectId]) {
                itemObjectId = that.length;
            }

            if (!itemObject.$) {
                itemObject.$ = {};
            }

            itemObject.$.id = itemObjectId;
            itemObject.$.index = index;

            return new Object(itemObject);
        }
    }, {
        key: '_bindToArray',
        value: function _bindToArray() {
            var that = this;

            var unboundMode = typeof that.dataSource === 'number' || that.dataSourceLength;
            var dataArray = [];

            that.boundSource.canNotify = false;

            for (var i = 0; i < that.length; i++) {
                var dataSourceItem = unboundMode ? {} : that.dataSource[i];
                var itemObject = that._getDataItem(dataSourceItem, i);

                dataArray.push(itemObject);
            }

            if (unboundMode && that.dataSourceLength && that.dataSource.length > 0) {
                for (var _i8 = 0; _i8 < that.dataSource.length; _i8++) {
                    var cell = that.dataSource[_i8].cell;
                    var _value5 = that.dataSource[_i8].value;

                    var row = cell.replace(/[^0-9]/g, '');
                    var dataField = cell.replace(/[0-9]/g, '');

                    dataArray[row - 1][dataField] = _value5;
                }
            }

            that.boundSource = false === that.observable ? dataArray : new JQX.ObservableArray(dataArray);

            for (var _i9 = 0; _i9 < that.length; _i9++) {
                that[_i9] = that.boundSource[_i9];
                that.dataItemById[that[_i9].$.id] = that[_i9];
            }

            that.boundSource.canNotify = true;
        }
    }, {
        key: '_bindToJSON',
        value: function _bindToJSON() {
            var that = this;

            var dataArray = [];

            var dataEntries = Object.entries(that.dataSource);

            that.boundSource.canNotify = false;

            for (var i = 0; i < dataEntries.length; i++) {
                var dataSourceItem = dataEntries[i];
                var itemObject = that._getDataItem(dataSourceItem, i);

                dataArray.push(itemObject);
            }

            that.boundSource = false === that.observable ? dataArray : new JQX.ObservableArray(dataArray);

            for (var _i10 = 0; _i10 < that.length; _i10++) {
                that[_i10] = that.boundSource[_i10];
                that.dataItemById[that[_i10].$.id] = that[_i10];
            }

            that.boundSource.canNotify = true;
        }
    }, {
        key: 'sortBy',
        value: function sortBy(dataField, dataType, orderBy) {
            var that = this;

            if (!dataType) {
                for (var i = 0; i < that.dataFields.length; i++) {
                    var field = that.dataFields[i];

                    if (field.name === dataField) {
                        dataType = field.dataType;
                        break;
                    }
                }
            }

            if (that.boundHierarchy) {
                var sortBy = function sortBy(hierarchy) {
                    that._sort(hierarchy, dataField, orderBy, dataType);

                    for (var _i11 = 0; _i11 < hierarchy.length; _i11++) {
                        var _item8 = hierarchy[_i11];

                        if (_item8['children']) {
                            sortBy(_item8['children'], dataField, orderBy, dataType);
                        }
                    }
                };

                sortBy(that.boundHierarchy);
            } else {
                that._sort(that.boundSource, dataField, orderBy, dataType);
            }
        }
    }, {
        key: '_createFilter',
        value: function _createFilter(dataType, filterExpressions) {
            var filterOperators = {
                '=': 'EQUAL',
                '<>': 'NOT_EQUAL',
                '<': 'LESS_THAN',
                '>': 'GREATER_THAN',
                '<=': 'LESS_THAN_OR_EQUAL',
                '>=': 'GREATER_THAN_OR_EQUAL',
                'equal': 'EQUAL',
                'not equal': 'NOT_EQUAL',
                'less than': 'LESS_THAN',
                'greater than': 'GREATER_THAN',
                'greater than or equal': 'GREATER_THAN_OR_EQUAL',
                'less than or equal': 'LESS_THAN_OR_EQUAL',
                'starts with': 'STARTS_WITH',
                'ends with': 'ENDS_WITH',
                'null': 'null',
                '': 'EMPTY',
                'isblank': 'EMPTY',
                'isnotblank': 'NOT_EMPTY',
                'contains': 'CONTAINS',
                'notcontains': 'DOES_NOT_CONTAIN',
                'startswith': 'STARTS_WITH',
                'endswith': 'ENDS_WITH',
                'NULL': 'NULL',
                'NOT_NULL': 'NOT_NULL'
            };

            var filterExpressionsArray = [];

            for (var i = 0; i < filterExpressions.length; i++) {
                var filterExpression = filterExpressions[i];

                var filterExpressionParts = filterExpression.indexOf('"') === -1 ? filterExpression.split(' ') : filterExpression.split('"');
                var filter = [];

                for (var j = 0; j < filterExpressionParts.length; j++) {
                    var part = filterExpressionParts[j];

                    if (part !== '') {
                        filter.push(part.trim());
                    }
                }

                filterExpressionsArray.push(filter);
            }

            var filterGroup = new JQX.FilterGroup();
            var filterGroupOperators = [];
            var filterSubGroups = [];

            for (var _i12 = 0; _i12 < filterExpressionsArray.length; _i12++) {
                var _filterExpression = filterExpressionsArray[_i12];

                if (_filterExpression.length > 1) {
                    var filterSubGroup = new JQX.FilterGroup();

                    var operator = 'and';
                    var filterExpressionPartsCounter = 0;

                    for (var _j2 = 0; _j2 < _filterExpression.length; _j2++) {
                        var _value6 = _filterExpression[_j2];

                        if (_value6 === 'and' || _value6 === 'or') {
                            operator = _value6;
                            continue;
                        }

                        filterExpressionPartsCounter++;

                        if (filterExpressionPartsCounter === 2) {
                            var _filter2 = filterSubGroup.createFilter(dataType, _value6, filterOperators[_filterExpression[_j2 - 1]]);

                            filterExpressionPartsCounter = 0;

                            if (operator) {
                                filterSubGroup.addFilter(operator, _filter2);
                            }
                        }
                    }

                    filterSubGroups.push(filterSubGroup);
                } else {
                    var filterGroupOperator = _filterExpression[0];

                    if (filterGroupOperator !== 'and' && filterGroupOperator !== 'or') {
                        throw new Error('Filter Exprresion expects "AND" or "OR", but the token is: ' + filterGroupOperator);
                    }

                    filterGroupOperators.push(filterGroupOperator);
                }
            }

            var operatorsCounter = 0;

            if (filterSubGroups.length === 1) {
                return filterSubGroups[0];
            }

            for (var _i13 = 0; _i13 < filterSubGroups.length; _i13++) {
                var _operator = filterGroupOperators[operatorsCounter];

                if ((_i13 + 1) % 2 === 0) {
                    operatorsCounter++;
                }

                if (!_operator) {
                    _operator = 'and';
                }

                filterGroup.addFilter(_operator, filterSubGroups[_i13]);
            }

            return filterGroup;
        }
    }, {
        key: 'filterBy',
        value: function filterBy(dataField) {
            var that = this;

            var dataType = function () {
                for (var i = 0; i < that.dataFields.length; i++) {
                    var field = that.dataFields[i];

                    if (field.name === dataField) {
                        return field.dataType;
                    }
                }
            }();

            for (var _len = arguments.length, filterExpressions = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                filterExpressions[_key - 1] = arguments[_key];
            }

            var filterGroup = that._createFilter(dataType, filterExpressions);

            var filteredData = that.boundSource.filter(function (value) {
                var evaluation = filterGroup.evaluate(value[dataField]);

                return evaluation;
            });

            return filteredData;
        }
    }, {
        key: '_filter',
        value: function _filter(filters) {
            var operator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'and';

            var that = this;
            var filterGroups = [];
            var dataFields = [];

            if (filters.length === 0) {
                that.clearFilter();
                return;
            }

            var dataType = function dataType(dataField) {
                for (var i = 0; i < that.dataFields.length; i++) {
                    var field = that.dataFields[i];

                    if (field.name === dataField) {
                        return field.dataType;
                    }
                }
            };
            var defaultResult = void 0,
                operatorSpecificEval = void 0;

            if (operator === 'and') {
                defaultResult = true;
                operatorSpecificEval = function operatorSpecificEval(result, filterGroup, row) {
                    return result && filterGroup.evaluate(row[filterGroup.dataField]);
                };
            } else {
                defaultResult = false;
                operatorSpecificEval = function operatorSpecificEval(result, filterGroup, row) {
                    return result || filterGroup.evaluate(row[filterGroup.dataField]);
                };
            }

            for (var i = 0; i < filters.length; i++) {
                var filter = filters[i];
                var dataField = filter[0];
                var filterGroup = null;

                if (filter[1] instanceof JQX.FilterGroup) {
                    filterGroup = filter[1];
                } else {
                    filterGroup = that._createFilter(dataType(dataField), filter.splice(1));
                }

                if (filterGroup) {
                    dataFields.push(dataField);
                    filterGroup.dataField = dataField;
                    filterGroups.push(filterGroup);
                }
            }

            if (that.boundHierarchy) {
                var _filter3 = function _filter3(row) {
                    var result = defaultResult;

                    for (var j = 0; j < filterGroups.length; j++) {
                        var _filterGroup = filterGroups[j];

                        result = operatorSpecificEval(result, _filterGroup, row);
                    }

                    row.$.filtered = result;

                    return result;
                };

                var filterBy = function filterBy(hierarchy, parentItem, root) {
                    var filteredCount = 0;

                    for (var _i14 = 0; _i14 < hierarchy.length; _i14++) {
                        var _item9 = hierarchy[_i14];

                        _filter3(_item9);

                        if (_item9.$.filtered) {
                            filteredCount++;
                        }

                        if (_item9['children']) {
                            filterBy(_item9['children'], _item9, parentItem);
                        }
                    }

                    if (filteredCount > 0 && that.groupBy.length > 0 && parentItem) {
                        parentItem.$.filtered = true;

                        if (root && !root.$.filtered) {
                            root.$.filtered = true;
                        }
                    } else {
                        if (filteredCount > 0 && filteredCount !== hierarchy.length && parentItem) {
                            parentItem.$.filtered = null;

                            if (root && !root.$.filtered) {
                                root.$.filtered = null;
                            }
                        }
                    }
                };

                filterBy(that.boundHierarchy, null, null);
            } else {
                for (var _i15 = 0; _i15 < that.boundSource.length; _i15++) {
                    var row = that.boundSource[_i15];

                    var result = defaultResult;

                    for (var j = 0; j < filterGroups.length; j++) {
                        var _filterGroup2 = filterGroups[j];

                        result = operatorSpecificEval(result, _filterGroup2, row);
                    }

                    row.$.filtered = result;
                }
            }

            if (that.onFilter) {
                that.onFilter();
            }
        }
    }, {
        key: 'clearGroup',
        value: function clearGroup() {
            var that = this;

            that.groupBy = [];
            that.boundHierarchy = null;
            that.refreshHierarchy();

            if (that.onGroup) {
                that.onGroup();
            }
        }
    }, {
        key: 'clearFilter',
        value: function clearFilter() {
            var that = this;

            for (var i = 0; i < that.boundSource.length; i++) {
                var row = that.boundSource[i];

                row.$.filtered = true;
            }

            if (that.boundHierarchy) {
                var filterBy = function filterBy(hierarchy, parentItem, root) {
                    //let filteredCount = 0;

                    for (var _i16 = 0; _i16 < hierarchy.length; _i16++) {
                        var _item10 = hierarchy[_i16];

                        _item10.$.filtered = true;

                        //if (item.$.filtered) {
                        //    filteredCount++;
                        //}

                        if (_item10['children']) {
                            filterBy(_item10['children'], _item10, parentItem);
                        }
                    }

                    if (parentItem) {
                        parentItem.$.filtered = true;

                        if (root && !root.$.filtered) {
                            root.$.filtered = true;
                        }
                    }
                };

                filterBy(that.boundHierarchy, null, null);
            }

            if (that.onFilter) {
                that.onFilter();
            }
        }
    }, {
        key: 'clearSort',
        value: function clearSort() {
            var that = this;

            that._sort(that.boundSource, [], [], []);
        }
    }, {
        key: '_sort',
        value: function _sort(dataSource, sortColumns, directions, dataTypes, customSortingCallback) {
            var that = this;

            var isObservableArray = false;

            if (dataSource.length === 0) {
                return;
            }

            if (dataSource && dataSource.constructor && dataSource instanceof JQX.ObservableArray) {
                isObservableArray = true;
            }

            if (!dataSource || !Array.isArray(dataSource) || dataSource.length === 0 || !sortColumns || Array.isArray(sortColumns) && sortColumns.length === 0) {
                if (!isObservableArray && !that.boundHierarchy) {
                    throw new Error('sort: Missing or Invalid arguments!');
                }
            }

            if (typeof sortColumns === 'string') {
                sortColumns = [sortColumns];
            }

            var directionCoefficients = [],
                compareFunctions = [];

            if (directions === undefined) {
                directions = [];
            }

            var getCompareFunction = function getCompareFunction(a, knownDataType) {
                // gets data type of column (not necessary if the Grid provides this information)
                var dataType = knownDataType || (typeof a === 'undefined' ? 'undefined' : babelHelpers.typeof(a));
                var compareFunction = void 0;

                switch (dataType) {
                    case 'string':
                        compareFunction = new Intl.Collator().compare;
                        break;
                    case 'number':
                        compareFunction = function compareFunction(a, b) {
                            return a - b;
                        };
                        break;
                    case 'boolean':
                    case 'bool':
                        compareFunction = function compareFunction(a, b) {
                            if (a === b) {
                                return 0;
                            } else if (a === false) {
                                return -1;
                            } else {
                                return 1;
                            }
                        };
                        break;
                    case 'date':
                    case 'time':
                    case 'dateTime':
                        if (a instanceof Date) {
                            compareFunction = function compareFunction(a, b) {
                                return a.getTime() - b.getTime();
                            };
                        } else if (a instanceof JQX.Utilities.DateTime || a instanceof JQX.Utilities.BigNumber) {
                            compareFunction = function compareFunction(a, b) {
                                return a.compare(b);
                            };
                        }
                        break;
                    case 'object':
                        if (a instanceof Date) {
                            compareFunction = function compareFunction(a, b) {
                                return a.getTime() - b.getTime();
                            };
                        } else if (a instanceof JQX.Utilities.DateTime || a instanceof JQX.Utilities.BigNumber) {
                            compareFunction = function compareFunction(a, b) {
                                return a.compare(b);
                            };
                        } else if (a instanceof JQX.Utilities.Complex || window.NIComplex && a instanceof window.NIComplex) {
                            var complexNumericProcessor = new JQX.Utilities.ComplexNumericProcessor();

                            compareFunction = function compareFunction(a, b) {
                                return complexNumericProcessor.compareComplexNumbers(a, b);
                            };
                        }

                        break;
                }

                return compareFunction;
            };

            for (var i = 0; i < sortColumns.length; i++) {
                if (directions[i] === undefined || directions[i] === 'asc' || directions[i] === 'ascending') {
                    directionCoefficients[i] = 1;
                } else {
                    directionCoefficients[i] = -1;
                }

                var _value7 = dataSource[0][sortColumns[i]];

                compareFunctions[i] = getCompareFunction(_value7, dataTypes[i]);
            }

            if (customSortingCallback) {
                customSortingCallback(dataSource, sortColumns, directions, compareFunctions);
                return;
            }

            dataSource.sort(function (a, b) {
                for (var _i17 = 0; _i17 < sortColumns.length; _i17++) {
                    var result = compareFunctions[_i17](a[sortColumns[_i17]], b[sortColumns[_i17]]);

                    if (result === 0) {
                        if (sortColumns[_i17 + 1]) {
                            continue;
                        } else if (a._index !== undefined) {
                            // makes sorting stable
                            return (a._index - b._index) * directionCoefficients[_i17];
                        }

                        return 0;
                    }

                    return result * directionCoefficients[_i17];
                }

                if (sortColumns.length === 0) {
                    if (a.$.index < b.$.index) {
                        return -1;
                    }

                    if (a.$.index > b.$.index) {
                        return 1;
                    }

                    return 0;
                }
            });

            for (var _i18 = 0; _i18 < dataSource.length; _i18++) {
                that[_i18] = dataSource[_i18];
            }
        }
    }, {
        key: 'filter',
        value: function filter(filterColumns, filterGroups, customFilteringCallback) {
            JQX.DataAdapter.Filter(this.boundSource, filterColumns, filterGroups, customFilteringCallback);
        }
    }, {
        key: 'sort',
        value: function sort(sortColumns, directions, customSortingCallback) {
            JQX.DataAdapter.Sort(this.boundSource, sortColumns, directions, customSortingCallback);
        }
    }, {
        key: 'dataFields',
        get: function get() {
            var that = this;

            return that._dataFields;
        },
        set: function set(value) {
            var that = this;

            that._dataFields = that._getDataFieldObjects(value);

            return that._dataFields;
        }
    }, {
        key: 'dataSource',
        get: function get() {
            var that = this;

            if (!that._dataSource) {
                that._dataSource = [];
            }

            return that._dataSource;
        },
        set: function set(value) {
            var that = this;

            that._dataSource = value;

            if (that.isInitialized) {
                that.boundSource = false === that.observable ? [] : new JQX.ObservableArray();
                that.dataItemById = [];
                that.bindingCompleted = false;
                that.dataBind();
            }
        }
    }, {
        key: 'canNotify',
        get: function get() {
            var that = this;

            if (that._canNotify === undefined) {
                that._canNotify = true;
            }

            return that._canNotify;
        },
        set: function set(value) {
            var that = this;

            that._canNotify = value;
        }
    }, {
        key: 'length',
        get: function get() {
            var that = this;

            if (that.virtualDataSourceLength) {
                return that.virtualDataSourceLength;
            }

            if (that.dataSourceLength) {
                return that.dataSourceLength;
            }

            if (typeof that.dataSource === 'number') {
                return that.dataSource;
            }

            if (that.bindingCompleted) {
                return that.boundSource.length;
            }

            if (that.dataSource && typeof that.dataSource !== 'string' && that.dataSource.length) {
                return that.dataSource.length;
            }

            return that.boundSource.length;
        }
    }], [{
        key: 'Filter',
        value: function Filter(dataSource, filterColumns, filterGroups, customFilteringCallback) {
            var filteredData = dataSource.filter(function (dataItem) {
                var result = true;

                for (var i = 0; i < filterGroups.length; i++) {
                    var filterGroup = filterGroups[i];
                    var filterColumn = filterColumns[i];

                    if (customFilteringCallback) {
                        result = result && customFilteringCallback(dataItem, filterColumn, filterGroup);
                    } else {
                        result = result && filterGroup.evaluate(dataItem[filterColumn]);
                    }
                }

                return result;
            });

            return filteredData;
        }
    }, {
        key: 'Sort',
        value: function Sort(dataSource, sortColumns, directions, customSortingCallback) {
            var getCompareFunction = function getCompareFunction(a) {
                // gets data type of column (not necessary if the Grid provides this information)
                var dataType = typeof a === 'undefined' ? 'undefined' : babelHelpers.typeof(a);
                var compareFunction = void 0;

                switch (dataType) {
                    case 'string':
                        compareFunction = new Intl.Collator().compare;
                        break;
                    case 'number':
                        compareFunction = function compareFunction(a, b) {
                            return a - b;
                        };
                        break;
                    case 'boolean':
                        compareFunction = function compareFunction(a, b) {
                            if (a === b) {
                                return 0;
                            } else if (a === false) {
                                return -1;
                            } else {
                                return 1;
                            }
                        };
                        break;
                    case 'object':
                        if (a instanceof Date) {
                            compareFunction = function compareFunction(a, b) {
                                return a.getTime() - b.getTime();
                            };
                        } else if (a instanceof JQX.Utilities.DateTime || a instanceof BigNumberNG) {
                            compareFunction = function compareFunction(a, b) {
                                return a.compare(b);
                            };
                        } else if (a instanceof JQX.Utilities.Complex || window.NIComplex && a instanceof window.NIComplex) {
                            var complexNumericProcessor = new JQX.Utilities.ComplexNumericProcessor();

                            compareFunction = function compareFunction(a, b) {
                                return complexNumericProcessor.compareComplexNumbers(a, b);
                            };
                        }

                        break;
                }

                return compareFunction;
            };

            if (!dataSource || !Array.isArray(dataSource) || dataSource.length === 0 || !sortColumns || Array.isArray(sortColumns) && sortColumns.length === 0) {
                return;
            }

            if (typeof sortColumns === 'string') {
                sortColumns = [sortColumns];
            }

            var directionCoefficients = [],
                compareFunctions = [];

            if (directions === undefined) {
                directions = [];
            }

            for (var i = 0; i < sortColumns.length; i++) {
                if (directions[i] === undefined || directions[i] === 'asc' || directions[i] === 'ascending') {
                    directionCoefficients[i] = 1;
                } else {
                    directionCoefficients[i] = -1;
                }

                compareFunctions[i] = getCompareFunction(dataSource[0][sortColumns[i]]);
            }

            if (customSortingCallback) {
                customSortingCallback(dataSource, sortColumns, directions, compareFunctions);
                return;
            }

            var sortedData = dataSource.slice(0);

            sortedData.sort(function (a, b) {
                for (var _i19 = 0; _i19 < sortColumns.length; _i19++) {
                    var result = compareFunctions[_i19](a[sortColumns[_i19]], b[sortColumns[_i19]]);

                    if (result === 0) {
                        if (sortColumns[_i19 + 1]) {
                            continue;
                        } else if (a._index !== undefined) {
                            // makes sorting stable
                            return (a._index - b._index) * directionCoefficients[_i19];
                        }

                        return 0;
                    }

                    return result * directionCoefficients[_i19];
                }
            });

            return sortedData;
        }
    }]);
    return DataAdapter;
}();

JQX.DataAdapter = DataAdapter;

// eslint-disable-next-line

var Ajax = function () {
    function Ajax(config, callback) {
        babelHelpers.classCallCheck(this, Ajax);

        var that = this;

        that.config = config;
        that.callback = callback;

        if (config.autoFetch === false) {
            return;
        }

        that.call(config);
    }

    babelHelpers.createClass(Ajax, [{
        key: 'call',
        value: function call(config) {
            var that = this;

            if (!config) {
                config = that.config;
            }

            var method = 'GET',
                url = config.url,
                body = null,
                async = true;

            if (config.type) {
                method = config.type;
            }

            if (config.data) {
                if (method === 'GET') {
                    url += '?';

                    for (var prop in config.data) {
                        if (config.data.hasOwnProperty(prop)) {
                            url += encodeURI(prop + '=' + config.data[prop] + '&');
                        }
                    }

                    if (url.charAt(url.length - 1) === '&') {
                        url = url.slice(0, url.length - 1);
                    }
                } else if (method === 'POST') {
                    body = JSON.stringify(config.data);
                }
            }

            if (config && config.async === false && config.dataSourceType !== 'xlsx') {
                async = false;
            }

            if (window.fetch !== undefined && async) {
                that.ajaxFetch(config, method, url, body);
            } else {
                that.ajaxXMLHttpRequest(config, method, url, body, async);
            }
        }
    }, {
        key: 'ajaxFetch',
        value: function ajaxFetch(config, method, url, body) {
            // prepare fetch config
            var that = this;
            var fetchInit = { method: method };
            var parseMethod = void 0;

            switch (config.dataSourceType) {
                case 'json':
                    parseMethod = 'json';
                    break;
                case 'xlsx':
                    parseMethod = 'arrayBuffer';
                    break;
                default:
                    parseMethod = 'text';
            }

            if (config) {
                if (config.contentType) {
                    fetchInit.headers = new Headers({
                        'Content-Type': config.contentType
                    });
                }
            }

            if (body !== null) {
                fetchInit.body = body;
            }

            var status = void 0,
                fetchTimeout = void 0,
                timeouted = void 0;

            if (config.timeout) {
                fetchTimeout = setTimeout(function () {
                    timeouted = true;
                }, config.timeout);
            }

            if (config.beforeSend) {
                var beforeSendResult = config.beforeSend(fetchInit, config);

                if (beforeSendResult === false) {
                    return;
                }
            }

            // fetch resource
            fetch(url, fetchInit).then(function (response) {
                if (timeouted) {
                    status = 408;
                    throw new Error('timeout');
                }

                if (fetchTimeout) {
                    clearTimeout(fetchTimeout);
                }

                status = response.status;

                if (!response.ok) {
                    throw new Error(response.statusText);
                }

                return response[parseMethod]();
            }).then(function (data) {
                if (parseMethod === 'arrayBuffer') {
                    return JSZip.loadAsync(data).then(function (zipData) {
                        // "data" represents the whole XLSX/ZIP file
                        return zipData.files['xl/worksheets/sheet1.xml'].async('text').then(function (sheet1) {
                            return zipData.files['xl/sharedStrings.xml'].async('text').then(function (sharedStrings) {
                                var parsedData = that.parseXLSXData(sheet1, sharedStrings);

                                that.ajaxComplete(config, parsedData, status);
                            });
                        });
                    });
                } else {
                    that.ajaxComplete(config, data, status);
                }
            }).catch(function (error) {
                if (error.message === 'JSZip is not defined') {
                    error.message = 'JSZip is not defined. Please include a reference to JSZip to be able to load data from XLSX files.';
                }

                if (config && config.loadError) {
                    config.loadError(status, error);
                }

                if (that.callback) {
                    that.callback(error, status);
                }
            });
        }
    }, {
        key: 'ajaxXMLHttpRequest',
        value: function ajaxXMLHttpRequest(config, method, url, body, async) {
            var request = new XMLHttpRequest();
            var that = this;

            request.open(method, url, async);

            request.ontimeout = function () {
                if (config && config.loadError) {
                    config.loadError(408, 'timeout');
                }
            };

            request.onload = function () {
                if (request.readyState === 4) {
                    var status = request.status;
                    var data = request.response;

                    if (status >= 200 && status <= 299) {
                        if (config.dataSourceType === 'json') {
                            data = JSON.parse(data);
                        }

                        that.ajaxComplete(config, data, status);
                    } else if (config && config.loadError) {
                        config.loadError(status, data);
                    }
                }
            };

            request.onerror = function () {
                if (config && config.loadError) {
                    config.loadError(request.status, request.response);
                }
            };

            if (config && config.contentType) {
                request.setRequestHeader('Content-Type', config.contentType);
            }

            if (async && config.timeout) {
                request.timeout = config.timeout;
            }

            if (config.beforeSend) {
                var beforeSendResult = config.beforeSend(request, config);

                if (beforeSendResult === false) {
                    return;
                }
            }

            request.send(body);
        }
    }, {
        key: 'ajaxComplete',
        value: function ajaxComplete(config, data, status) {
            if (!config) {
                return;
            }

            if (config.beforeLoadComplete) {
                var processedData = config.beforeLoadComplete(data);

                if (processedData) {
                    data = processedData;
                }
            }

            if (config.loadComplete) {
                config.loadComplete(data, status);
            }

            if (this.callback) {
                this.callback(data, status);
            }
        }
    }, {
        key: 'parseXLSXData',
        value: function parseXLSXData(sheet1, sharedStrings) {
            var parser = new DOMParser(),
                sharedStringsDocument = parser.parseFromString(sharedStrings, 'text/xml'),
                sharedStringsContainers = Array.from(sharedStringsDocument.getElementsByTagName('si')),
                sharedStringsCollection = [],
                sheet1Document = parser.parseFromString(sheet1, 'text/xml'),
                rows = Array.from(sheet1Document.getElementsByTagName('row')),
                parsedData = [];

            sharedStringsContainers.forEach(function (si) {
                var texts = si.getElementsByTagName('t');

                if (texts.length === 1) {
                    sharedStringsCollection.push(texts[0].innerHTML);
                } else {
                    var text = '';

                    texts = Array.from(texts);
                    texts.forEach(function (t) {
                        text += t.innerHTML;
                    });
                    sharedStringsCollection.push(text);
                }
            });

            rows.forEach(function (row) {
                var rowObject = {},
                    cells = Array.from(row.getElementsByTagName('c'));

                cells.forEach(function (cell /*, index*/) {
                    var column = cell.getAttribute('r').match(/\D+/)[0],
                        type = cell.getAttribute('t'),
                        xmlValue = cell.getElementsByTagName('v')[0].innerHTML;
                    var value = void 0;

                    switch (type) {
                        case 's':
                            // string                    
                            value = sharedStringsCollection[parseFloat(xmlValue)];
                            break;
                        case 'b':
                            // boolean
                            value = parseFloat(xmlValue) === 1;
                            break;
                        default:
                            // number or date
                            value = parseFloat(xmlValue);
                    }

                    rowObject[column] = value;
                });

                parsedData.push(rowObject);
            });

            return parsedData;
        }
    }]);
    return Ajax;
}();