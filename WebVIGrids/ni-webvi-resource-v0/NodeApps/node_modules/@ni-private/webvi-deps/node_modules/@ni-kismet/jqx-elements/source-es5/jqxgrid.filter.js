'use strict';

JQX.Utilities.Assign('Grid.Filter', function () {
    function Filter() {
        babelHelpers.classCallCheck(this, Filter);
    }

    babelHelpers.createClass(Filter, [{
        key: 'addFilter',
        value: function addFilter(dataField, filter, refreshFilters) {
            var that = this;
            var column = that.columnByDataField[dataField];

            if (column && column.canNotify) {
                column.setProperty('filter', filter);

                if (refreshFilters !== false) {
                    that.refreshFilters();
                }
            }
        }
    }, {
        key: 'removeFilter',
        value: function removeFilter(dataField, refreshFilters) {
            var that = this;
            var column = that.columnByDataField[dataField];

            if (column && column.canNotify) {
                column.setProperty('filter', null);

                if (refreshFilters !== false) {
                    that.refreshFilters();
                }
            }
        }
    }, {
        key: 'clearFilter',
        value: function clearFilter() {
            var that = this;

            for (var i = 0; i < that.columns.length; i++) {
                var column = that.columns[i];

                column.setProperty('filter', null);
            }

            that.refreshFilters();
        }
    }, {
        key: 'getFilteredColumns',
        value: function getFilteredColumns() {
            var that = this;

            if (that._filters) {
                var columns = [];

                for (var i = 0; i < that._filters.length; i++) {
                    var filter = that._filters[i];

                    columns[filter[0]] = filter[1];

                    columns.length++;
                }

                return columns;
            }

            return [];
        }
    }, {
        key: 'getVisibleRows',
        value: function getVisibleRows() {
            var that = this;

            if (that._visibleRows) {
                return that._visibleRows;
            }

            var visibleRows = [];
            var viewRows = that._viewRows;
            var offset = that.editing.addNewRow.visible && that.editing.addNewRow.position !== 'far' ? 1 : 0;

            for (var i = 0; i < viewRows.length; i++) {
                var row = viewRows[i];

                row.canNotify = false;
                row.visibleIndex = -1;

                if (row.visible && (row.filtered !== false || row.filtered === undefined)) {
                    row.visibleIndex = visibleRows.length - offset;
                    visibleRows.push(row);
                }

                row.canNotify = true;
            }

            that._visibleRows = visibleRows;

            return visibleRows;
        }
    }, {
        key: 'refreshFilters',
        value: function refreshFilters() {
            var that = this;

            var filters = [];
            //const viewRows = that._viewRows;

            for (var i = 0; i < that.columns.length; i++) {
                var column = that.columns[i];

                if (column.filter) {
                    filters.push([column.dataField, column.filter]);
                }
            }

            that.scrollTop = 0;
            that.closeMenu();

            if (that.dataSource && !that.dataSource.onFilter) {
                that.dataSource.onFilter = function () {
                    var viewRows = that._viewRows;

                    for (var _i = 0; _i < viewRows.length; _i++) {
                        var row = viewRows[_i];

                        if (row.data && !row.addNewRow) {
                            row.filtered = row.data.$.filtered !== undefined ? row.data.$.filtered : true;
                        }
                    }

                    that.refresh();
                };
            }

            that._filters = filters;
            that._visibleRows = null;

            if (that.dataSource && that.dataSource.virtualDataSource) {
                that.closeMenu();
                that._virtualDataRequest('filter');
            } else {
                that.dataSource._filter(filters);
            }

            if (that.paging.enabled && that.dataSource && !that.dataSource.virtualDataSource) {
                that._refreshPagesCount();
            }

            that.$.fireEvent('filter', {
                'data': that.getFilteredColumns()
            });
        }
    }]);
    return Filter;
}());