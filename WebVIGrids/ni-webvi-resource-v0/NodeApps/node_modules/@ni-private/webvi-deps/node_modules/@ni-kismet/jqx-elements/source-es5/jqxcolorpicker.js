'use strict';

/**
* ColorPicker custom element.
*/
JQX('jqx-color-picker', function (_JQX$DropDownButton) {
    babelHelpers.inherits(ColorPicker, _JQX$DropDownButton);

    function ColorPicker() {
        babelHelpers.classCallCheck(this, ColorPicker);
        return babelHelpers.possibleConstructorReturn(this, (ColorPicker.__proto__ || Object.getPrototypeOf(ColorPicker)).apply(this, arguments));
    }

    babelHelpers.createClass(ColorPicker, [{
        key: 'template',


        /**
        * ColorPicker's HTML template.
        */
        value: function template() {
            return '<div id="container">\n                    <span class="jqx-label" id="label">[[label]]</span>\n                    <div id="content" class="jqx-content">\n                        <div id="buttonsContainer" class ="jqx-buttons-container">\n                            <div id="actionButton" class ="jqx-input jqx-action-button">\n                                <div id="colorSampleContainer" class="color-picker-sample-container">\n                                    <div id="colorSample" class="color-picker-sample"></div>\n                                </div>\n                                <input type="text" id="input" class ="color-picker-action-input" placeholder="[[placeholder]]" spellcheck="false"/>\n                            </div>\n                            <span id="dropDownButton" class ="jqx-drop-down-button">\n                                <span id="arrow"></span>\n                            </span>\n                        </div>\n                        <div id="dropDownContainer" class ="jqx-drop-down jqx-drop-down-color-picker jqx-drop-down-container jqx-visibility-hidden">\n                            <jqx-scroll-viewer id="scrollViewer"\n                                right-to-left="[[right-to-left]]"\n                                horizontal-scroll-bar-visibility="[[horizontalScrollBarVisibility]]"\n                                vertical-scroll-bar-visibility="[[verticalScrollBarVisibility]]">\n                                    <jqx-color-panel id="colorPanel" wait\n                                        animation="[[animation]]"\n                                        apply-value-mode="[[applyValueMode]]"\n                                        column-count="[[columnCount]]"\n                                        disabled="[[disabled]]"\n                                        display-mode="[[displayMode]]"\n                                        edit-alpha-channel="[[editAlphaChannel]]"\n                                        enable-custom-colors="[[enableCustomColors]]"\n                                        grid-theme-colors="[[gridThemeColors]]"\n                                        grid-shade-colors="[[gridShadeColors]]"\n                                        grid-standard-colors="[[gridStandardColors]]"\n                                        hide-content-to-fit="[[hideContentToFit]]"\n                                        hide-preview-container="[[hidePreviewContainer]]"\n                                        hide-r-g-b-editor="[[hideRGBEditor]]"\n                                        hide-h-e-x-editor="[[hideHEXEditor]]"\n                                        hide-alpha-editor="[[hideAlphaEditor]]"\n                                        inverted="[[inverted]]"\n                                        locale="[[locale]]"\n                                        name="[[name]]"\n                                        palette-colors="[[paletteColors]]"\n                                        palette-custom-colors="[[paletteCustomColors]]"\n                                        palette="[[palette]]"\n                                        theme="[[theme]]"\n                                        tooltip-display-mode="[[tooltipDisplayMode]]"\n                                        value="{{value}}"\n                                        value-format="[[valueFormat]]">\n                                    </jqx-color-panel>\n                            </jqx-scroll-viewer>\n                            <div id="resizeBar" class="jqx-drop-down-resize-bar">\n                                <div></div>\n                            </div>\n                         </div>\n                    </div>\n                    <span class="jqx-hint" id="hint">[[hint]]</span>\n                </div>';
        }

        /**
        * Updates the DropDownButton when a property is changed.
        * @param {string} propertyName The name of the property.
        * @param {number/string} oldValue The previously entered value. Max, min and value are of type Number. The rest are of type String.
        * @param {number/string} newValue The new entered value. Max, min and value are of type Number. The rest are of type String.
        */

    }, {
        key: 'propertyChangedHandler',
        value: function propertyChangedHandler(propertyName, oldValue, newValue) {
            var that = this;

            that._bindProperties(propertyName);

            switch (propertyName) {
                case 'editable':
                case 'disabled':
                case 'readonly':
                    that.$.input.readOnly = that.disabled || that.readonly || !that.editable;
                    break;
                case 'value':
                    if (that.$.colorPanel._isValidColor(that.value)) {
                        that._applyValue(that.value);
                    }
                    break;
                default:
                    babelHelpers.get(ColorPicker.prototype.__proto__ || Object.getPrototypeOf(ColorPicker.prototype), 'propertyChangedHandler', this).call(this, propertyName, oldValue, newValue);
                    break;
            }

            if (propertyName === 'displayMode') {
                //Resize event not thrown
                that.$.colorPanel._hideControlsByPriority();
            }
        }

        /**
         * Open method. Opens the popup
         */

    }, {
        key: 'open',
        value: function open() {
            var that = this;

            //Lazy generate the ColorPanel structure before opening. The first time only
            if (that.$.colorPanel._initializeOnOpening) {
                delete that.$.colorPanel._initializeOnOpening;
                that.$.colorPanel._generateGridStructures();
                that.$.colorPanel._applyValue(that.value);
                that.$.colorPanel._hideControlsByPriority();
            }

            babelHelpers.get(ColorPicker.prototype.__proto__ || Object.getPrototypeOf(ColorPicker.prototype), 'open', this).call(this);
        }

        /**
         * ColorPicker ready method
         */

    }, {
        key: '_createElement',
        value: function _createElement() {
            var that = this;

            that.$.colorPanel._initializeOnOpening = !that.opened;

            that.$.colorPanel.wait = false;

            that.$.input.readOnly = that.disabled || that.readonly || !that.editable;
            that._applyValue(that.$.colorPanel.value);
            that._setFocusable();
        }

        /*
        * Applies the value
        */

    }, {
        key: '_colorPanelChangeHandler',
        value: function _colorPanelChangeHandler(event) {
            var that = this;

            that._applyValue(event.detail.value);

            if (that.dropDownAppendTo && that.dropDownAppendTo.length > 0) {
                that.$.fireEvent('change', event.detail);
            }
        }

        /**
         * Handles Cancel Button Click
         */

    }, {
        key: '_cancelButtonHandler',
        value: function _cancelButtonHandler() {
            var that = this;

            if (that.$.colorPanel.$.container.className.indexOf('custom-color-selection') > -1) {
                return;
            }

            that.close();
        }

        /*
        * Closes the dropdown and applies the value
        */

    }, {
        key: '_okButtonHandler',
        value: function _okButtonHandler() {
            var that = this;

            that._applyValue(that.$.colorPanel.value);
            that.close();
        }

        /**
         * Makes the element focusable or not
         */

    }, {
        key: '_setFocusable',
        value: function _setFocusable() {
            var that = this;

            if (!that.disabled && !that.unfocusable) {
                var index = that.tabIndex > 0 ? that.tabIndex : 0;

                that.$.input.tabIndex = index;
                that.dropDownOpenMode === 'dropDownButton' ? that.$.dropDownButton.setAttribute('tabindex', index) : that.$.dropDownButton.removeAttribute('tabindex');
                return;
            }

            that.$.input.tabIndex = -1;
            that.$.dropDownButton.removeAttribute('tabindex');
        }

        /*
        * Binds properties to color panel
        */

    }, {
        key: '_bindProperties',
        value: function _bindProperties(propertyName) {
            var that = this,
                properties = ['columnCount', 'gridThemeColors', 'gridShadeColors', 'gridStandardColors', 'paletteCustomColors', 'name', 'hideContentToFit', 'applyValueMode', 'inverted', 'paletteColors', 'displayMode', 'tooltipDisplayMode', 'editAlphaChannel', 'enableCustomColors', 'hidePreviewContainer', 'hideRGBEditor', 'hideHEXEditor', 'hideAlphaEditor', 'hideContentToFit', 'messages', 'theme', 'animation', 'theme', 'locale', 'palette', 'valueMember', 'disabled', 'valueFormat'];

            if (propertyName) {
                if (properties.indexOf(propertyName) > -1 || propertyName === 'value') {
                    that.$.colorPanel[propertyName] = that[propertyName];
                }

                that.$.scrollViewer.refresh();
                return;
            }
        }

        /*
        * Applies value 
        */

    }, {
        key: '_inputChangeHandler',
        value: function _inputChangeHandler() {
            var that = this;

            event.preventDefault();
            event.stopPropagation();

            that.value = that.$.colorPanel.value = that.$.input.value;
        }

        /*
        * Applies the value to value property, color sample, color panel
        */

    }, {
        key: '_applyValue',
        value: function _applyValue(tempValue) {
            var that = this;

            that.value = that.$.colorPanel.value = that.$.colorSample.style.backgroundColor = that.$.input.value = tempValue;

            that.value ? that.$colorSampleContainer.removeClass('no-color') : that.$colorSampleContainer.addClass('no-color');
        }

        /**
        * Key down handler 
        * @param {any} event
        */

    }, {
        key: '_keyDownHandler',
        value: function _keyDownHandler(event) {
            var that = this,
                activeElement = document.activeElement;

            if (that.disabled || that.readonly || activeElement !== that && activeElement !== that.$.dropDownButton && activeElement !== that.$.input) {
                return;
            }

            switch (event.key) {
                case 'Enter':
                case ' ':
                    if (event.target !== that.$.input) {
                        if (that.opened && event.key === 'Enter') {
                            event.preventDefault();
                            that.close();
                        } else if (!that.opened && !that.readonly && that.dropDownOpenMode !== 'none') {
                            event.preventDefault();
                            that.open();
                        }
                    } else if (event.key === 'Enter') {
                        event.preventDefault();
                        that.$.colorPanel.value = that.$.input.value;
                    }

                    break;
                case 'End':
                    that.$.scrollViewer.scrollTop = that.$.scrollViewer.scrollHeight;
                    break;
                case 'Home':
                    that.$.scrollViewer.scrollTop = 0;
                    break;
                case 'PageUp':
                case 'PageDown':
                    that.$.scrollViewer.scrollTop += (event.key.indexOf('Down') > -1 ? 1 : -1) * that.$.dropDownContainer.offsetHeight;
                    break;
                case 'ArrowUp':
                case 'ArrowDown':
                    if (event.altKey) {
                        if (!that.disabled && !that.readonly && that.dropDownOpenMode !== 'none') {
                            that.$dropDownContainer.hasClass('jqx-visibility-hidden') ? that.open() : that.close();
                        }

                        return;
                    }

                    event.preventDefault();
                    //that.$.scrollViewer.scrollTop += (event.key.indexOf('Down') > -1 ? 1 : -1) * 10;
                    break;
                case 'Escape':
                    event.preventDefault();
                    that.close();
                    break;
            }
        }
    }], [{
        key: 'properties',

        // ColorPicker's properties.
        get: function get() {
            return {
                'editable': {
                    value: false,
                    type: 'boolean'
                },
                'applyValueMode': {
                    value: 'instantly',
                    allowedValues: ['instantly', 'useButtons'],
                    type: 'string'
                },
                'columnCount': {
                    value: 8,
                    type: 'number'
                },
                'gridThemeColors': {
                    value: null,
                    type: 'array?',
                    reflectToAttribute: false
                },
                'gridShadeColors': {
                    value: null,
                    type: 'array?',
                    reflectToAttribute: false
                },
                'gridStandardColors': {
                    value: null,
                    type: 'array?',
                    reflectToAttribute: false
                },
                'paletteColors': {
                    value: null,
                    type: 'array?',
                    reflectToAttribute: false
                },
                'paletteCustomColors': {
                    value: null,
                    type: 'array?',
                    reflectToAttribute: false
                },
                'disableUndo': {
                    value: false,
                    type: 'boolean'
                },
                'displayMode': {
                    value: 'default',
                    allowedValues: ['default', 'grid', 'palette', 'radial', 'hexagonal', 'spectrumGrid', 'materialGrid'],
                    type: 'string'
                },
                'dropDownAppendTo': {
                    value: null,
                    type: 'any'
                },
                'dropDownHeight': {
                    value: 'auto',
                    type: 'string'
                },
                'dropDownWidth': {
                    value: 'auto',
                    type: 'string'
                },
                'editAlphaChannel': {
                    value: false,
                    type: 'boolean'
                },
                'enableCustomColors': {
                    value: false,
                    type: 'boolean'
                },
                'hidePreviewContainer': {
                    value: false,
                    type: 'boolean'
                },
                'hideRGBEditor': {
                    value: false,
                    type: 'boolean'
                },
                'hideHEXEditor': {
                    value: false,
                    type: 'boolean'
                },
                'hideAlphaEditor': {
                    value: false,
                    type: 'boolean'
                },
                'messages': {
                    value: {
                        'en': {
                            'redPrefix': 'R:',
                            'greenPrefix': 'G:',
                            'bluePrefix': 'B:',
                            'hexPrefix': '#:',
                            'alphaPrefix': 'Alpha:',
                            'ok': 'OK',
                            'cancel': 'CANCEL',
                            'customColor': 'CUSTOM COLOR',
                            'standardColors': 'Standard colors',
                            'themeColors': 'Theme colors'
                        }
                    },
                    type: 'object',
                    extend: true
                },
                'name': {
                    value: '',
                    type: 'string'
                },
                'palette': {
                    value: 'default',
                    allowedValues: ['default', 'gray', 'red', 'green', 'blue', 'custom'],
                    type: 'string'
                },
                'placeholder': {
                    value: 'Please Select Color',
                    type: 'string'
                },
                'tooltipDisplayMode': {
                    value: 'hex',
                    allowedValues: ['none', 'rgba', 'rgb', 'hex'],
                    type: 'string'
                },
                'value': {
                    value: null,
                    type: 'string?'
                },
                'valueDisplayMode': {
                    value: 'default',
                    allowedValues: ['default', 'colorBox', 'colorCode', 'none'], // default => (colorBox + text), colorBox(only color box), text(only input), none(only button with placeholder); editable to enable text input in default and text modes, otherwise input to be disabled
                    type: 'string'
                },
                'valueFormat': {
                    value: 'default',
                    allowedValues: ['default', 'rgb', 'rgba', 'hex'], // in 'default' mode the value is shown in format 'as is' entered by the user
                    type: 'string'
                },
                'inverted': {
                    value: false,
                    type: 'boolean'
                },
                'hideContentToFit': {
                    value: ['RGB', 'HEX', 'alpha', 'previewContainer'], // hides palette editors in a sequence if there is not enought space
                    type: 'array'
                }
            };
        }

        /**
         * ColorPicker's event listeners.
         */

    }, {
        key: 'listeners',
        get: function get() {
            return {
                'input.change': '_inputChangeHandler',
                'input.focus': '_focusEventHandler',
                'input.blur': '_blurEventHandler',
                'colorPanel.cancelButtonClick': '_cancelButtonHandler',
                'colorPanel.okButtonClick': '_okButtonHandler',
                'colorPanel.change': '_colorPanelChangeHandler',
                'keydown': '_keyDownHandler'
            };
        }
        /**
        * Checks for missing modules.
        */

    }, {
        key: 'requires',
        get: function get() {
            return {
                'JQX.ColorPanel': 'jqxcolorpanel.js',
                'JQX.DropDownButton': 'jqxdropdownbutton.js'
            };
        }
    }]);
    return ColorPicker;
}(JQX.DropDownButton));