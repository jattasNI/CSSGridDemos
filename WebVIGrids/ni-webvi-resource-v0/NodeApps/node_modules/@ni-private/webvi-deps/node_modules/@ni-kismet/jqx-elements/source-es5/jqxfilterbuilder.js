'use strict';

/**
 * jqxFilterBuilder custom element.
 */
JQX('jqx-filter-builder', function (_JQX$BaseElement) {
    babelHelpers.inherits(FilterBuilder, _JQX$BaseElement);

    function FilterBuilder() {
        babelHelpers.classCallCheck(this, FilterBuilder);
        return babelHelpers.possibleConstructorReturn(this, (FilterBuilder.__proto__ || Object.getPrototypeOf(FilterBuilder)).apply(this, arguments));
    }

    babelHelpers.createClass(FilterBuilder, [{
        key: 'template',


        /**
        * Element's HTML template.
        */
        value: function template() {
            return '<div id="container" title="[[hint]]">\n                    <div id="innerContainer" class ="jqx-inner-container">\n                            <div id="scrollableOuterContainer" class ="jqx-scrollable-outer-container">\n                                <jqx-scroll-viewer id="scrollableContainer" class ="jqx-scrollable-container" animation="[[animation]]">\n                                    <div id="contentContainer" class ="jqx-content-container"></div>\n                                </jqx-scroll-viewer>\n                            </div>\n                            <div id="editorsContainer" class ="jqx-editors-container">\n                                <div id="customEditor" class ="jqx-custom-editor jqx-hidden"></div>\n                            </div>\n                    </div>\n                    <jqx-menu id="conditionsMenu" mode="dropDown" class ="jqx-conditions-menu" theme="[[theme]]" animation="[[animation]]"></jqx-menu>\n            </div>';
        }

        /**
        * Updates the element when a property is changed.
        * @param {string} propertyName The name of the property.
        * @param {number/string} oldValue The previously entered value. Max, min and value are of type Number. The rest are of type String.
        * @param {number/string} newValue The new entered value. Max, min and value are of type Number. The rest are of type String.
        */

    }, {
        key: 'propertyChangedHandler',
        value: function propertyChangedHandler(propertyName, oldValue, newValue) {
            var that = this;
            var editors = ['textBoxEditor', 'numericTextBoxEditor', 'comboBoxEditor', 'dateTimePickerEditor', 'checkBoxEditor'];
            babelHelpers.get(FilterBuilder.prototype.__proto__ || Object.getPrototypeOf(FilterBuilder.prototype), 'propertyChangedHandler', this).call(this, propertyName, oldValue, newValue);

            switch (propertyName) {
                case 'animation':
                case 'theme':
                    editors.forEach(function (editor) {
                        return that.$[editor] && (that.$[editor][propertyName] = newValue);
                    });
                    break;
                case 'customOperations':
                    that._handleCustomOperations();
                    that._refresh();
                    break;
                case 'fields':
                    that._mapFieldsToMenu();
                    that._refresh();
                    break;
                case 'formatStringDate':
                case 'formatStringDateTime':
                case 'showIcons':
                case 'valueFormatFunction':
                    that._refresh();
                    break;
                case 'locale':
                case 'messages':
                    that._localizeInitialValues();
                    that._refresh();
                    that._handleCustomOperations(); //

                    if (that.$.dateTimePickerEditor) {
                        if (!that.$.dateTimePickerEditor.messages[that.locale]) {
                            that.$.dateTimePickerEditor.messages[that.locale] = {};
                        }

                        that.$.dateTimePickerEditor.messages[that.locale].dateTabLabel = that.localize('dateTabLabel');
                        that.$.dateTimePickerEditor.messages[that.locale].timeTabLabel = that.localize('timeTabLabel');

                        if (propertyName === 'locale') {
                            that.$.dateTimePickerEditor.locale = that.locale;
                        } else if (propertyName === 'messages') {
                            that.$.dateTimePickerEditor.$.selectDate.innerHTML = that.$.dateTimePickerEditor.messages[that.locale].dateTabLabel;
                            that.$.dateTimePickerEditor.$.selectTime.innerHTML = that.$.dateTimePickerEditor.messages[that.locale].timeTabLabel;
                        }
                    }

                    break;
                case 'maxConditions':
                case 'maxConditionsPerGroup':
                case 'maxLevel':
                case 'value':
                    {
                        that._totalConditions = 0;
                        that._validateValue();
                        that._emptyElementsStructure(true);
                        that._convertValueToFlat(that.value);
                        that._getFieldsFromValue();
                        that._mapFieldsToMenu();
                        that._generateHTMLStructureFromFlatValue();
                        that.$.scrollableContainer.refresh();

                        var oldValueAsString = JSON.stringify(that.value);

                        if (that._oldValueAsString !== oldValueAsString) {
                            that._oldValueAsString = oldValueAsString;
                            that.$.fireEvent('change', { 'value': JSON.parse(oldValueAsString) });
                        }

                        break;
                    }
                case 'valuePlaceholder':
                    that._updatePlaceholder();
                    break;
            }
        }

        /**
         * Validates the value of "maxConditions", "maxConditionsPerGroup", and "maxLevel"
         * @param {any} oldValue - the old value
         * @param {any} value - the new value
         */

    }, {
        key: '_maxValidator',
        value: function _maxValidator(oldValue, newValue) {
            if (typeof newValue !== 'number') {
                return newValue;
            }

            return Math.max(1, newValue);
        }

        /**
        * Element's ready method.
        */

    }, {
        key: 'ready',
        value: function ready() {
            babelHelpers.get(FilterBuilder.prototype.__proto__ || Object.getPrototypeOf(FilterBuilder.prototype), 'ready', this).call(this);

            var that = this;

            that._validateValue();
            that._setInitialValues();
            that._handleCustomOperations();
            that._emptyElementsStructure(true);
            that._totalConditions = 0;
            that._convertValueToFlat(that.value);
            that._getFieldsFromValue();
            that._generateHTMLStructureFromFlatValue();
            that.$.conditionsMenu._noAutoFocus = true;

            that._oldValueAsString = JSON.stringify(that.value);

            setTimeout(function () {
                that.$.scrollableContainer.refresh();
            }, 25);
        }

        /*
        * Creates new condition
        * @param {Any} parentGroup - html object or group id
        * @param {Array} data - contains dataField, operator and value
        */

    }, {
        key: 'addCondition',
        value: function addCondition(parentGroup, data) {
            var that = this;

            that._checkFieldsExistence();
            that._addElement('condition', parentGroup, data);
        }

        /*
        * Creates new empty group by given operator and parent group
        * @param {Any} parentGroup - could be html object or nodeId
        * @param {String} groupOperator - 'and'/'or'/'notand'/'notor'
        */

    }, {
        key: 'addGroup',
        value: function addGroup(parentGroup, groupOperator) {
            var that = this;

            that._addElement('group', parentGroup, groupOperator);
        }

        /*
        * Removes condition
        * @param {Any} elementNode - HTML element or nodeId of the element
        */

    }, {
        key: 'removeCondition',
        value: function removeCondition(elementNode) {
            var that = this;

            that._validateNode(elementNode, 'removeCondition');
            that._deleteElement(elementNode, 'condition');
            that._refresh();
        }

        /*
        * Removes a group with all of it's children
        * @param {Any} elementNode - HTML element or nodeId of the element
        */

    }, {
        key: 'removeGroup',
        value: function removeGroup(elementNode) {
            var that = this;

            that._validateNode(elementNode, 'removeGroup');
            that._deleteElement(elementNode, 'group');
            that._refresh();
        }

        /**
        * Generates string representation of the value
        * @param {Boolean} useLabels - controls the way of string representation. In mode without labels the object is stringified. In mode with 
        */

    }, {
        key: 'toString',
        value: function toString(useLabels) {
            var that = this;

            if (!useLabels) {
                return JSON.stringify(that.value);
            }

            var formattedValueFlat = [],
                groupsWithItems = [];

            for (var i = 0; i < that._valueFlat.length; i++) {
                var item = that._valueFlat[i];
                var formattedItem = {};

                if (item.type === 'condition') {
                    var fieldData = that._getFieldByFieldName(item.data[0]),
                        type = fieldData.dataType,
                        category = '[' + (fieldData.label || fieldData.value) + ']',
                        operator = that.localize(item.data[1]),
                        value = ['boolean', 'number'].indexOf(type) !== -1 ? item.data[2] + '' : '\'' + item.data[2] + '\'';

                    formattedItem.data = category + ' ' + operator + ' ' + value;
                } else {
                    formattedItem.data = item.data;
                }

                formattedItem.nodeId = item.nodeId;
                formattedItem.parentId = item.parentId;
                formattedItem.type = item.type;

                formattedValueFlat.push(formattedItem);
            }

            var _loop = function _loop(_i) {
                var item = formattedValueFlat[_i];
                var group = {};

                if (item.type === 'group') {
                    var hasItems = formattedValueFlat.filter(function (testItem) {
                        return testItem.parentId === item.nodeId && testItem.type === 'condition';
                    });

                    if (hasItems.length > 0) {
                        var content = hasItems.map(function (mappedItem) {
                            return mappedItem.data;
                        }),
                            prefix = '',
                            sufix = '',
                            groupOperator = item.data;

                        if (['notand', 'notor'].indexOf(groupOperator) !== -1) {
                            prefix = 'Not (';
                            sufix = ')';
                            groupOperator = groupOperator.substring(3);
                        }

                        group.nodeId = item.nodeId;
                        group.parentId = item.parentId;
                        group.data = item.data;

                        group.structure = prefix + content.join(' ' + that.localize(groupOperator) + ' ') + sufix;
                        groupsWithItems.push(group);
                    }
                }
            };

            for (var _i = 0; _i < formattedValueFlat.length; _i++) {
                _loop(_i);
            }

            groupsWithItems = groupsWithItems.filter(function (item) {
                return item.structure.length > 1;
            });
            groupsWithItems.sort(function (a, b) {
                return b.nodeId.split('.').length - a.nodeId.split('.').length;
            });

            var _loop2 = function _loop2(_i2) {
                var curentElement = groupsWithItems[_i2],
                    parentElement = groupsWithItems.filter(function (item) {
                    return item.nodeId === curentElement.parentId;
                })[0];

                if (parentElement && parentElement.structure) {
                    var groupOperator = parentElement.data;

                    if (['notand', 'notor'].indexOf(groupOperator) !== -1) {
                        groupOperator = groupOperator.substring(3);

                        parentElement.structure = parentElement.structure.slice(0, parentElement.structure.length - 1) + ' ' + that.localize(groupOperator) + ' (' + curentElement.structure + '))';
                    } else {
                        parentElement.structure = parentElement.structure + ' ' + that.localize(groupOperator) + ' (' + curentElement.structure + ')';
                    }
                }
            };

            for (var _i2 = 0; _i2 < groupsWithItems.length; _i2++) {
                _loop2(_i2);
            }

            return groupsWithItems[groupsWithItems.length - 1].structure;
        }

        /*
        * Updates content of a condition
        * @param {Any} elementNode - HTML element or nodeId of the element
        * @param {Array} data - an array with a new condition settings
        */

    }, {
        key: 'updateCondition',
        value: function updateCondition(elementNode, data) {
            var that = this,
                editedItem = that._validateNode(elementNode, 'updateCondition');

            that._validateUserData(data, true);

            editedItem.data = data;
            that._refresh();
        }

        /*
        * Updates content of a group
        * @param {Any} elementNode - HTML element or nodeId of the element
        * @param {String} data - the new state of the group condition operator
        */

    }, {
        key: 'updateGroup',
        value: function updateGroup(elementNode, data) {
            var that = this,
                editedItem = that._validateNode(elementNode, 'updateGroup');

            that._validateUserData(data);

            editedItem.data = data;
            that._refresh();
        }

        /*
        * Creates new group or condition
        * @param {String} type - 'group' or 'condition'
        * @param {Any} parentGroup - html object or group id
        * @param {Any} data - if type is group - contains group's operator;  if type is condition - dataField, operator and value
        */

    }, {
        key: '_addElement',
        value: function _addElement(type, parentGroup, data /*, noRefresh*/) {
            parentGroup = parentGroup || '0';

            var that = this,
                parentGroups = that._valueFlat.filter(function (item) {
                return item.nodeId === parentGroup && item.type === 'group';
            }),
                parentGroupExists = parentGroups.length > 0 ? parentGroups[0] : false,
                siblings = that._valueFlat.filter(function (item) {
                return item.parentId === parentGroup;
            });
            var addGroupAtPosition = 0,
                groupSeparator = '';

            if (!parentGroupExists) {
                that.error(that.localize('wrongParentGroupIndex', { elementType: that.nodeName.toLowerCase(), method: 'addGroup/addCondition' }));
            }

            if (type === 'group') {
                data = data || 'or';
            } else {
                if (siblings.filter(function (item) {
                    return item.type === 'condition';
                }).length === that.maxConditionsPerGroup || that._totalConditions === that.maxConditions) {
                    return;
                }

                var defaultDataField = that.fields && that.fields.length > 0 ? that.fields[0].dataField : that._valueFields[0].dataField;

                that._totalConditions++;

                data = data || [];
                data[0] = data[0] || defaultDataField;
                data[1] = data[1] || '=';
                data[2] = babelHelpers.typeof(data[2]) !== undefined ? data[2] : null;
            }

            if (siblings) {
                var siblingsIndexes = siblings.map(function (index) {
                    var indexPath = index.nodeId.split('.');

                    return parseInt(indexPath[indexPath.length - 1]);
                });

                siblingsIndexes = siblingsIndexes.length === 0 ? [0] : siblingsIndexes;
                addGroupAtPosition = siblingsIndexes.reduce(function (a, b) {
                    return Math.max(a, b);
                }) + 1;
            }

            if (parentGroup && parentGroup.length > 0) {
                groupSeparator = '.';
            }

            var itemId = parentGroup + groupSeparator + addGroupAtPosition,
                itemData = {
                nodeId: itemId,
                parentId: parentGroup,
                type: type,
                data: data,
                htmlNode: null
            };

            that._valueFlat.push(itemData);
            that._refresh();
        }

        /**
        * Sets condition row's value to null and sets value's container with valuePlaceholder
        */

    }, {
        key: '_clearConditionsValue',
        value: function _clearConditionsValue(nodeId, type) {
            var that = this,
                itemAsHTML = that.querySelector('[node-id="' + (nodeId || 0) + '"]'),
                valueContainer = itemAsHTML.querySelector('.jqx-value-container');

            for (var i = 0; i < that._valueFlat.length; i++) {
                if (that._valueFlat[i].nodeId === nodeId) {
                    (function () {
                        var item = that._valueFlat[i],
                            dataType = type ? that.fields.find(function (field) {
                            return field.dataField === type;
                        }).dataType : that.fields.find(function (field) {
                            return field.dataField === item.data[0];
                        }).dataType;

                        item.data[2] = that._defaultValueByType(dataType);
                    })();
                }
            }

            valueContainer.innerHTML = that.valuePlaceholder;
            valueContainer.closest('.jqx-filter-value').setAttribute('placeholder', '');
        }

        /**
        * Converts value(represented as nested array) to flat array. Used about internal data representation 
        * @param {Array} groupData - an array with group data
        * @param {String} nodeId - the id of the current element
        */

    }, {
        key: '_convertValueToFlat',
        value: function _convertValueToFlat(groupData, nodeId) {
            var that = this,
                regEx = /^(and|or|notAnd|notOr)$/i;

            if (!groupData) {
                return;
            }

            var operatorsFilter = groupData.filter(function (element) {
                return typeof element === 'string' && element.match(regEx);
            }),
                groupOperator = operatorsFilter ? operatorsFilter[0] : null,
                conditions = groupData.filter(function (element) {
                return Array.isArray(element) && element.length === 3 && element.filter(function (subElement) {
                    return typeof subElement === 'string' && subElement.match(regEx);
                }).length === 0;
            }),
                subGroups = groupData.filter(function (element) {
                return !conditions.includes(element) && element !== groupOperator;
            });

            if (!operatorsFilter) {
                return;
            }

            var groupSeparator = that._lastProcessedItemInCurrentGroup.parentId ? '.' : '',
                groupNodeId = (that._lastProcessedItemInCurrentGroup.parentId || '') + groupSeparator + (nodeId || 0);

            if (that._isMaxLevelExceeded(groupNodeId)) {
                return;
            }

            var itemData = {
                nodeId: groupNodeId,
                parentId: that._lastProcessedItemInCurrentGroup.parentId,
                type: 'group',
                data: groupOperator,
                htmlNode: null /*,
                                  allowedConditionsInGroup = that.maxConditionsPerGroup ? that.maxConditionsPerGroup : conditions.length*/ };

            that._valueFlat.push(itemData);
            that._lastProcessedItemInCurrentGroup.position = 0;

            for (var i = 0; i < conditions.length; i++) {
                if (!conditions[i]) {
                    break;
                }

                var conditionNodeId = groupNodeId + '.' + (that._lastProcessedItemInCurrentGroup.position || 0);

                if (that._isMaxLevelExceeded(conditionNodeId)) {
                    break;
                }

                var _itemData = {
                    nodeId: conditionNodeId,
                    parentId: groupNodeId,
                    type: 'condition',
                    data: conditions[i],
                    htmlNode: null
                };

                that._totalConditions++;
                that._valueFlat.push(_itemData);
                that._lastProcessedItemInCurrentGroup.position++;
            }

            // process nested elements
            for (var _i3 = 0; _i3 < subGroups.length; _i3++) {
                that._lastProcessedItemInCurrentGroup.parentId = groupNodeId;
                that._convertValueToFlat(subGroups[_i3], conditions.length + _i3);
                that._lastProcessedItemInCurrentGroup.position++;
            }
        }

        /**
         * Checks the construction for maxLevel nesting
         */

    }, {
        key: '_isMaxLevelExceeded',
        value: function _isMaxLevelExceeded(groupId) {
            var that = this,
                valueFlat = that._valueFlat;

            if (that.maxLevel === null || valueFlat.length < 1) {
                return;
            }

            //NOTE: 2 because - 1 is for the 0th (root) group, and -1 because we want to start from 0

            //Checks a specific item
            if (groupId) {
                return groupId.split('.').length - 2 >= that.maxLevel;
            }

            //Checks the whole structure
            for (var i = 0; i < valueFlat.length; i++) {
                var data = valueFlat[i];

                if (data.nodeId.split('.').length - 2 > that.maxLevel) {
                    return true;
                }
            }
        }

        /**
        * Handles click event according to the target's type (filter button, add button, delete button, etc.).
        */

    }, {
        key: '_clickHandler',
        value: function _clickHandler(event) {
            var that = this,
                target = event.target,
                conditionRow = target ? target.closest('.jqx-filter-group-condition') : null,
                conditionId = conditionRow ? conditionRow.getAttribute('node-id') : null,
                filterGroup = target ? target.closest('.jqx-filter-group') : null,
                filterGroupId = filterGroup ? filterGroup.getAttribute('node-id') : null,
                isAddButton = target.closest('.jqx-filter-add-btn'),
                isDeleteButton = target.closest('.jqx-filter-delete-btn'),
                isFilterButton = target.closest('.filter-builder-item'),
                itemId = conditionId || filterGroupId,
                item = that._getItemById(itemId);
            var clickedComponent = void 0;

            if (that.disabled) {
                return;
            }

            if (isFilterButton || isDeleteButton || isAddButton) {
                if (isFilterButton) {
                    if (isFilterButton.classList.contains('jqx-filter-field-name')) {
                        clickedComponent = 'fieldButton';
                    } else if (isFilterButton.classList.contains('jqx-filter-operation')) {
                        clickedComponent = 'operationButton';
                    } else if (isFilterButton.classList.contains('jqx-filter-value')) {
                        clickedComponent = 'valueButton';
                    } else {
                        clickedComponent = 'groupOperationButton';
                    }
                } else if (isAddButton) {
                    clickedComponent = 'addButton';
                } else {
                    clickedComponent = 'deleteButton';
                }

                that.$.fireEvent('itemClick', {
                    id: item.nodeId,
                    type: item.type,
                    component: clickedComponent,
                    data: item.data
                });
            }

            if (isDeleteButton) {
                var groupOperatorRow = target.closest('.jqx-filter-group-operator'),
                    _conditionRow = target.closest('.jqx-filter-group-condition');

                that._clickHandlerDeleteButton(groupOperatorRow, _conditionRow, filterGroup);
                return;
            } else if (isAddButton) {
                that._closeEditor();
                that._contextMenuOptions = that._addOptions;
                that._handleContextMenu(target);
                return;
            } else if (isFilterButton) {
                var elementClassList = isFilterButton.classList;

                that._clickHandlerFilterButton(elementClassList, itemId, target);
                return;
            }

            if (that.$.conditionsMenu.opened) {
                that.$.fireEvent('menuClosing');
                that.$.conditionsMenu.close();
                that.$.fireEvent('menuClose');
            }

            var isTargetADropDown = target.closest('.jqx-drop-down'),
                targetIsEditor = that._editor && that._editor.contains(target) || isTargetADropDown && isTargetADropDown.ownerElement === that._editor || target.closest('.jqx-custom-editor');

            if (!that._editorIsOpen || !that._editor || targetIsEditor) {
                return;
            }

            if (that._scrollBarDown) {
                delete that._scrollBarDown;
                return;
            }

            that._closeEditor();
        }

        /**
          * Handling click on delete button
          */

    }, {
        key: '_clickHandlerDeleteButton',
        value: function _clickHandlerDeleteButton(groupOperatorRow, conditionRow, filterGroup) {
            var that = this;

            if (that.$.conditionsMenu.opened) {
                that.$.fireEvent('menuClosing');
                that.$.conditionsMenu.close();
                that.$.fireEvent('menuClose');
            }

            that._closeEditor();

            if (groupOperatorRow) {
                that._deleteElement(filterGroup, 'group');
                that._generateValue();
            } else if (conditionRow) {
                that._deleteElement(conditionRow);
                that._generateValue();
            }

            that.$.scrollableContainer.refresh();
        }

        /**
        * Handling click on delete buton
        */

    }, {
        key: '_clickHandlerFilterButton',
        value: function _clickHandlerFilterButton(elementClassList, itemId, target) {
            var that = this;

            if (target.closest('.jqx-editors-container')) {
                return;
            }

            that._closeEditor();
            that._editedItem = that._getItemById(itemId);

            if (!elementClassList.contains('jqx-filter-field-name') && (!that._editedItem.data || !that._editedItem.data.length)) {
                return;
            }

            if (elementClassList.contains('jqx-filter-group-operation')) {
                prepareContextMenu(target, that._groupOperationDescriptions, that._editedItem.data);
                return;
            } else if (elementClassList.contains('jqx-filter-add-btn')) {
                prepareContextMenu(target, that._groupOperationDescriptions);
            } else if (elementClassList.contains('jqx-filter-field-name')) {
                if (!that._fields) {
                    that._mapFieldsToMenu();
                }

                prepareContextMenu(target, that._fields, that._editedItem.data[0]);
                return;
            } else if (elementClassList.contains('jqx-filter-operation')) {
                var selectedField = that._getFieldByFieldName(that._editedItem.data[0]);

                if (!selectedField) {
                    return;
                }

                var filteredOptions = that._filterOperationDescriptions.slice();

                if (selectedField && selectedField.filterOperations) {
                    filteredOptions = that._filterOperationDescriptions.filter(function (item) {
                        return selectedField.filterOperations.indexOf(item.value) > -1;
                    });
                } else {
                    var filterOperationsByType = void 0;

                    switch (selectedField.dataType) {
                        case 'number':
                            filterOperationsByType = ['=', '<>', '<', '>', '<=', '>=', 'isblank', 'isnotblank'];
                            break;
                        case 'date':
                            filterOperationsByType = ['=', '<>', '<', '>', '<=', '>=', 'isblank', 'isnotblank'];
                            break;
                        case 'datetime':
                            filterOperationsByType = ['=', '<>', '<', '>', '<=', '>=', 'isblank', 'isnotblank'];
                            break;
                        case 'boolean':
                            filterOperationsByType = ['=', '<>', 'isblank', 'isnotblank'];
                            break;
                        case 'object':
                            filterOperationsByType = ['isblank', 'isnotblank'];
                            break;
                        case 'string':
                            filterOperationsByType = ['contains', 'notcontains', 'startswith', 'endswith', '=', '<>', 'isblank', 'isnotblank'];
                            break;
                        default:
                            filterOperationsByType = ['contains', 'notcontains', 'startswith', 'endswith', '=', '<>', '<', '>', '<=', '>=', 'isblank', 'isnotblank'];
                            break;
                    }

                    filteredOptions = that._filterOperationDescriptions.filter(function (item) {
                        return filterOperationsByType.indexOf(item.value) > -1;
                    });
                }

                if (that.showIcons) {
                    filteredOptions = filteredOptions.map(function (item) {
                        item.label = '<div class="jqx-filter-builder-icon">' + that.icons[item.value] + '</div><div class="jqx-filter-builder-menu-item">' + that.localize(item.value) + '</div>';

                        return item;
                    });
                }

                prepareContextMenu(target, filteredOptions.slice(), that._editedItem.data[1]);
                return;
            } else {
                that._openEditor(target);
                return;
            }

            function deSelectMenuItem() {
                var alredySelectedItem = that.$.conditionsMenu.querySelector('.jqx-selected-menu-item');

                if (alredySelectedItem) {
                    alredySelectedItem.classList.remove('jqx-selected-menu-item');
                }
            }

            function prepareContextMenu(target, dataSource, selectedItem) {
                deSelectMenuItem();
                that._contextMenuOptions = dataSource.length === 0 ? that._defaultFilterOperationDescriptions : dataSource;
                that._handleContextMenu(target);

                var selectedField = selectedItem,
                    chosenMenuItem = that.$.conditionsMenu.querySelector('jqx-menu-item[value="' + selectedField + '"]');

                if (!that.$.conditionsMenu.opened || !chosenMenuItem) {
                    return;
                }

                chosenMenuItem.classList.add('jqx-selected-menu-item');
            }
        }

        /**
        * Closes an editor and sets the new value in the value's cotainer
        * @param {Boolean} preventEventFiring (optional).
        */

    }, {
        key: '_closeEditor',
        value: function _closeEditor(preventEventFiring) {
            var that = this;
            var storedValue = void 0;

            if (!that._editedItem || !that._editorIsOpen) {
                return;
            }

            if (that._editor === that.$.dateTimePickerEditor) {
                storedValue = that._editor.value;

                if (storedValue) {
                    storedValue = storedValue.toDate();
                }
            } else if (that._editor === that.$.checkBoxEditor) {
                storedValue = that._editor.checked;
            } else if (that._editor === that.$.customEditor) {
                storedValue = that._selectedCustomCondition.handleValue(that._editor);
            } else {
                var selectedField = that._getFieldByFieldName(that._editedItem.data[0]);

                if (selectedField.dataType === 'array') {
                    storedValue = that._editor.value.split(',');
                } else if (selectedField.dataType === 'object') {
                    storedValue = JSON.parse(that._editor.value);
                } else {
                    storedValue = that._editor.value;
                }
            }

            var editedItem = that._editedItem,
                editedRow = editedItem.htmlNode,
                nodeId = editedItem.nodeId,
                valueDataType = that._getFieldByFieldName(editedItem.data[0]).dataType,
                editedHTMLvalueComponent = editedRow.querySelector('.jqx-filter-value'),
                editedHTMLvalueContainer = editedRow.querySelector('.jqx-value-container'),
                eventData = {
                value: storedValue,
                valueType: valueDataType || 'string',
                editedItem: editedItem
            };

            that.$.fireEvent('editorClosing', eventData);
            that._updateValueInFlatArray(nodeId, storedValue, 'value', valueDataType || 'string');
            that._generateValue(preventEventFiring);
            editedHTMLvalueComponent.removeAttribute('edited');
            that.$.editorsContainer.removeAttribute('open');

            if (that._editor === that.$.checkBoxEditor) {
                editedHTMLvalueContainer.innerHTML = that._editor.checked ? 'true' : 'false';
            } else if (that._editor === that.$.customEditor) {
                var value = that._selectedCustomCondition.valueTemplate(that._editor);
                editedHTMLvalueContainer.innerHTML = value;
            } else {
                editedHTMLvalueContainer.innerHTML = that._formatValueStringRepresentation(that._editor.value, that._editedItem.data[0]);
            }

            that._editor.classList.add('jqx-hidden');
            that._editorIsOpen = that._enterIsPressedInEditor = false;
            that.$.fireEvent('editorClose', eventData);
            that.$.scrollableContainer.refresh();
        }
    }, {
        key: '_defaultValueByType',
        value: function _defaultValueByType(type) {
            var defaultValue = void 0;

            switch (type) {
                case 'number':
                    defaultValue = 0;
                    break;
                case 'date':
                case 'datetime':
                    {
                        defaultValue = new Date();
                        defaultValue.setHours(0, 0, 0);
                        break;
                    }
                case 'boolean':
                    defaultValue = false;
                    break;
                case 'object':
                    defaultValue = null;
                    break;
                default:
                    defaultValue = '';
            }

            return defaultValue;
        }

        /**
        * Removes a condition and it's HTML representation
        * @param {Any} elementNode.
        * @param {String} type.
        */

    }, {
        key: '_deleteElement',
        value: function _deleteElement(elementNode, type) {
            var that = this,
                actualElement = elementNode instanceof HTMLElement ? elementNode : that._valueFlat.find(function (item) {
                return item.nodeId === elementNode;
            }).htmlNode,
                nodeId = typeof elementNode === 'string' ? elementNode : elementNode.getAttribute('node-id');

            if (!nodeId || nodeId.length === 1) {
                return;
            }

            type === 'group' ? deleteGroup(nodeId) : deleteCondition(nodeId);

            function deleteCondition(nodeId) {
                var items = that._valueFlat.filter(function (item) {
                    return nodeId === item.nodeId;
                });
                var item = items ? items[0] : null;

                that._valueFlat.splice(that._valueFlat.indexOf(item), 1);
                that._totalConditions--;
            }

            function deleteGroup(nodeId) {
                var items = that._valueFlat.filter(function (item) {
                    return nodeId === item.nodeId;
                }),
                    item = items ? items[0] : null;

                for (var i = 0; i < that._valueFlat.length; i++) {
                    var nestedItem = that._valueFlat[i],
                        nestedNodeId = nestedItem.nodeId;

                    if (nestedItem.parentId === nodeId) {
                        nestedItem.type === 'group' ? deleteGroup(nestedNodeId) : deleteCondition(nestedNodeId);
                    }
                }

                that._valueFlat.indexOf(item) > -1 && that._valueFlat.splice(that._valueFlat.indexOf(item), 1);
            }

            var _loop3 = function _loop3(i) {
                var parentGroup = that._valueFlat.filter(function (item) {
                    return that._valueFlat[i].parentId === item.nodeId;
                });

                if (parentGroup.length === 0 && that._valueFlat[i].nodeId !== '0') {
                    that._valueFlat.splice(i, 1);
                    that._totalConditions--;
                }
            };

            for (var i = that._valueFlat.length - 1; i >= 0; i--) {
                _loop3(i);
            }

            that._generateValue();
            actualElement.parentElement.removeChild(actualElement);

            function updateNodeIds(siblings, parentId) {
                siblings.forEach(function (element, index) {
                    var valueFlatItem = that._valueFlat.find(function (item) {
                        return item.htmlNode === element;
                    }),
                        id = parentId + '.' + index;

                    element.setAttribute('node-id', id);
                    valueFlatItem.parentId = parentId;
                    valueFlatItem.nodeId = id;

                    if (element.classList.contains('jqx-filter-group')) {
                        updateNodeIds(Array.from(element.children[1].children), id);
                    }
                });
            }

            updateNodeIds(Array.from(that.$.contentContainer.firstElementChild.children[1].children), '0');
        }

        /**
        * Document click handler - closes menu and/or editor on click outside of the element
        */

    }, {
        key: '_documentClickHandler',
        value: function _documentClickHandler(event) {
            var that = this;

            if (event.target.closest('jqx-filter-builder')) {
                return;
            }

            if (that.$.conditionsMenu.opened) {
                that.$.fireEvent('menuClosing');
                that.$.conditionsMenu.close();
                that.$.fireEvent('menuClose');
            }

            if (that._editorIsOpen && !that._scrollBarDown) {
                that._closeEditor();
            }

            delete that._scrollBarDown;
        }

        /**
         * down handler
         */

    }, {
        key: '_downHandler',
        value: function _downHandler(event) {
            var that = this;

            if (event.target.closest('jqx-scroll-bar')) {
                that._scrollBarDown = true;
            } else {
                delete that._scrollBarDown;
            }
        }

        /**
         * Editor's change handler
         */

    }, {
        key: '_containerChangeHandler',
        value: function _containerChangeHandler(event) {
            event.stopPropagation();
        }

        /**
        * Generates HTML structure from flat array and adds/replaces 
        * @param {Array} data - contains dataField, operator and value
        */

    }, {
        key: '_emptyElementsStructure',
        value: function _emptyElementsStructure(emptyValueFlat) {
            var that = this,
                contentContainer = that.$.contentContainer;

            while (contentContainer.firstChild) {
                contentContainer.removeChild(contentContainer.firstChild);
            }

            that._valueFlat = emptyValueFlat ? [] : that._valueFlat;
            that._lastProcessedItemInCurrentGroup = { parentId: null, id: null, position: null };
        }

        /**
        * Creates filter group row
        * @param {String} groupOperator (optional).
        */

    }, {
        key: '_filterGroupRow',
        value: function _filterGroupRow(groupOperator) {
            var that = this;

            groupOperator = that.localize(groupOperator || 'or');

            var groupRow = document.createElement('div'),
                template = '<span class ="jqx-filter-delete-btn"></span>\n                <span class ="filter-builder-item jqx-filter-group-operation">' + groupOperator + '</span>\n                <span class ="jqx-filter-add-btn"></span>';

            groupRow.className = 'jqx-filter-group-operator';
            groupRow.innerHTML = template;
            groupRow.data = groupOperator || 'or'; //

            return groupRow;
        }

        /**
        * Removes a condition and it's HTML representation
        * @param {Any} value.
        * @param {String} field.
        */

    }, {
        key: '_formatValueStringRepresentation',
        value: function _formatValueStringRepresentation(value, field) {
            var that = this,
                fieldData = that._getFieldByFieldName(field);
            var valueFormattedByType = void 0;

            if (!fieldData) {
                return value;
            }

            if ((!value || value.length === 0) && fieldData.dataType !== 'boolean' && fieldData.dataType === 'number' && value === null || fieldData.dataType === 'string' && (!value || value.length === 0)) {
                return that.valuePlaceholder;
            }

            switch (fieldData.dataType) {
                case 'date':
                case 'datetime':
                    if (value) {
                        value = validateDateTimeValue(value);
                        value.calendar.days = that._localizedDays;
                        value.calendar.months = that._localizedMonths;
                        value.calendar.locale = that.locale;
                        JQX.Utilities.DateTime.cache = [];
                        valueFormattedByType = value.toString(fieldData.dataType === 'date' ? that.formatStringDate : that.formatStringDateTime);
                    } else {
                        valueFormattedByType = that.valuePlaceholder;
                    }

                    break;
                case 'array':
                    valueFormattedByType = typeof value === 'string' ? value.split(',') : value;
                    break;
                case 'object':
                    valueFormattedByType = typeof value === 'string' ? value : JSON.stringify(value);
                    break;
                case 'number':
                    valueFormattedByType = value;
                    break;
                case 'boolean':
                    valueFormattedByType = value === false ? 'false' : 'true';
                    break;
                default:
                    valueFormattedByType = value + '';
                    break;

            }

            if (!that.valueFormatFunction) {
                return valueFormattedByType;
            }

            function validateDateTimeValue(value) {
                if (value === 0 || typeof value === 'number' || typeof value === 'string' || value === true || value === '' || value === '0' || Array.isArray(value) || (typeof value === 'undefined' ? 'undefined' : babelHelpers.typeof(value)) === 'object' && value.constructor === Date) {
                    return new JQX.Utilities.DateTime(value);
                } else {
                    return value;
                }
            }

            return that.valueFormatFunction(valueFormattedByType, field, fieldData.dataType || 'string');
        }

        /**
        * Generates HTML structure from flat array and adds/replaces 
        */

    }, {
        key: '_generateHTMLStructureFromFlatValue',
        value: function _generateHTMLStructureFromFlatValue() {
            var that = this,
                fragment = document.createDocumentFragment();

            if (!that._valueFlat || that._valueFlat.length === 0) {
                return;
            }

            var _loop4 = function _loop4(i) {
                var item = that._valueFlat[i],
                    customOperation = that.customOperations ? that.customOperations.find(function (operation) {
                    return operation.name === item.data[1];
                }) : false,
                    parentGroupHTMLcontainer = item.parentId ? that.querySelector('[node-id="' + item.parentId + '"]').querySelector('.jqx-filter-group-condition-container') : that.$.contentContainer;

                if (item.type === 'group') {
                    var groupContainerBlock = document.createElement('div'),
                        groupOperatorBlock = that._filterGroupRow(item.data),
                        groupConditionsContainerBlock = document.createElement('div');

                    groupContainerBlock.className = 'jqx-filter-group';
                    groupConditionsContainerBlock.className = 'jqx-filter-group-condition-container';
                    groupContainerBlock.appendChild(groupOperatorBlock);
                    groupContainerBlock.appendChild(groupConditionsContainerBlock);
                    fragment.appendChild(groupContainerBlock);

                    groupContainerBlock.setAttribute('node-id', item.nodeId);
                    that._valueFlat[i].htmlNode = groupContainerBlock;

                    if (that._isMaxLevelExceeded(item.nodeId + '.0')) {
                        groupContainerBlock.setAttribute('max-level', '');
                    }
                } else {
                    var condition = that._newFilterConditionRow(item.data);

                    condition.setAttribute('node-id', item.nodeId);
                    fragment.appendChild(condition);
                    that._valueFlat[i].htmlNode = condition;

                    if (['isblank', 'isnotblank'].indexOf(item.data[1]) !== -1 || customOperation && customOperation.hideValue) {
                        condition.children[3].classList.add('jqx-hidden');
                    }
                }

                parentGroupHTMLcontainer.appendChild(fragment);
            };

            for (var i = 0; i < that._valueFlat.length; i++) {
                _loop4(i);
            }
        }

        /**
        * Generates the new value of "value" property from flat array
        */

    }, {
        key: '_generateValue',
        value: function _generateValue() {
            var that = this;
            var groupsWithItems = [],
                value = that._valueFlat.slice();

            createNestedArray(value);

            function createNestedArray(flatValue) {
                for (var i = 0; i < flatValue.length; i++) {
                    var _item = flatValue[i];
                    var _group = {};

                    if (_item.type === 'group') {
                        _group.nodeId = _item.nodeId;
                        _group.parentId = _item.parentId;
                        _group.structure = [_item.data || 'or'];
                        groupsWithItems.push(_group);
                    }
                }

                var _loop5 = function _loop5(_i4) {
                    var group = groupsWithItems[_i4],
                        conditions = flatValue.filter(function (item) {
                        return item.parentId === group.nodeId && item.type === 'condition';
                    });

                    for (var _i6 = 0; _i6 < conditions.length; _i6++) {
                        _i6 === 0 ? group.structure.unshift(conditions[_i6].data) : group.structure.push(conditions[_i6].data);
                    }
                };

                for (var _i4 = 0; _i4 < groupsWithItems.length; _i4++) {
                    _loop5(_i4);
                }

                groupsWithItems = groupsWithItems.filter(function (item) {
                    return item.structure.length > 1;
                });
                groupsWithItems.sort(function (a, b) {
                    return b.nodeId.split('.').length - a.nodeId.split('.').length;
                });

                var _loop6 = function _loop6(_i5) {
                    var curentElement = groupsWithItems[_i5],
                        parentElement = groupsWithItems.filter(function (item) {
                        return item.nodeId === curentElement.parentId;
                    })[0];

                    if (parentElement && parentElement.structure) {
                        parentElement.structure.push(curentElement.structure);
                    }
                };

                for (var _i5 = 0; _i5 < groupsWithItems.length; _i5++) {
                    _loop6(_i5);
                }
            }

            if (groupsWithItems.length > 0) {
                that.value = that._valueFlat.length > 1 ? groupsWithItems[groupsWithItems.length - 1].structure : groupsWithItems;
            } else {
                that.value = [that._getItemById('0').data];
            }

            var oldValueAsString = JSON.stringify(that.value);

            if (that._oldValueAsString !== oldValueAsString) {
                that._oldValueAsString = oldValueAsString;
                that.$.fireEvent('change', { 'value': JSON.parse(oldValueAsString) });
            }
        }

        /**
        * Return field's data by given field name
        * @param {String} fieldName
        */

    }, {
        key: '_getFieldByFieldName',
        value: function _getFieldByFieldName(fieldName) {
            var that = this,
                fields = that.fields ? that.fields.filter(function (item) {
                return item.dataField === fieldName;
            }) : that._valueFields.filter(function (item) {
                return item.dataField === fieldName;
            });

            return fields[0] || null;
        }

        /**
        * Generates an array of field objecst, used as a backup when fields property is not set
        */

    }, {
        key: '_getFieldsFromValue',
        value: function _getFieldsFromValue() {
            var that = this,
                items = that._valueFlat,
                fieldsNames = [],
                fields = [];

            for (var i = 0; i < items.length; i++) {
                if (items[i].type === 'condition') {
                    var fieldName = items[i].data[0];

                    if (fieldsNames.indexOf(fieldName) === -1) {
                        var fieldElement = { label: fieldName, dataField: fieldName, dataType: 'string', format: null };

                        fieldsNames.push(fieldName);
                        fields.push(fieldElement);
                    }
                }
            }

            that._valueFields = fields;
        }

        /**
        * Return item's data by given id
        * @param {String} id - item's id (or parent id - demending on the second parameter)
        * @param {Boolean} isParent (optional)  - of the items is searched by parentId
        */

    }, {
        key: '_getItemById',
        value: function _getItemById(id, isParent) {
            var that = this,
                matches = that._valueFlat.filter(function (item) {
                if (isParent) {
                    return item.parentId === id;
                }
                return item.nodeId === id;
            }),
                editedItem = matches.length > 0 ? matches[0] : null;

            return editedItem;
        }

        /**
        * Handles context menu position
        * @param {HTML element} target (optional) - the component which is clicked
        */

    }, {
        key: '_handleContextMenu',
        value: function _handleContextMenu(target) {
            var that = this;

            if (that._selectedElement === target && that.$.conditionsMenu.opened) {
                return;
            }

            var targetCoordinates = target.getBoundingClientRect(),
                elementCoordinates = that.getBoundingClientRect(),
                offsetTop = targetCoordinates.height,
                x = targetCoordinates.left + that.$.contentContainer.scrollLeft - elementCoordinates.left,
                y = targetCoordinates.top + that.$.contentContainer.scrollTop - elementCoordinates.top + offsetTop,
                selectedFlatItemId = target.closest('[node-id]').getAttribute('node-id'),
                selectedFlatItem = that._getItemById(selectedFlatItemId);
            var targetType = null;

            if (target.closest('.jqx-filter-delete-btn')) {
                targetType = 'buttonDelete';
            } else if (target.closest('.jqx-filter-add-btn')) {
                if (that.restrictedMode) {
                    that._checkFieldsExistence();

                    var conditionField = that.fields ? that.fields[0] : that._valueFields[0],
                        operation = conditionField.filterOperations && conditionField.filterOperations.length > 0 ? conditionField.filterOperations[0] : '=';

                    that._addElement('condition', 0, [conditionField.dataField, operation, that._defaultValueByType(conditionField.dataType)]);
                    return;
                }

                targetType = 'buttonAdd';
            } else if (target.closest('.jqx-filter-group-operation')) {
                targetType = 'groupOperation';
            } else if (target.closest('.jqx-filter-field-name')) {
                targetType = 'conditionField';
            } else if (target.closest('.jqx-filter-operation')) {
                targetType = 'conditionOperation';
            }

            var eventData = {
                'target': target,
                'targetX': targetCoordinates.left,
                'targetY': targetCoordinates.top,
                'parentGroupId': selectedFlatItem.parentId,
                'id': selectedFlatItem.nodeId,
                'type': selectedFlatItem.type,
                'data': selectedFlatItem.data,
                'targetType': targetType
            };

            if (that.$.conditionsMenu.opened) {
                that.$.fireEvent('menuClosing');
                that.$.conditionsMenu.close();
                that.$.fireEvent('menuClose');
            }
            that._closeEditor();

            if (that.disableContextMenu) {
                that._selectedElement = target;
                that.$.fireEvent('menuOpening', eventData);
                that.$.fireEvent('menuOpen', eventData);
                return;
            }

            that.$.fireEvent('menuOpening', eventData);
            that.$.conditionsMenu.dataSource = that._contextMenuOptions;
            that.$.conditionsMenu.open(x, y);
            that._selectedElement = target;
            that.$.fireEvent('menuOpen', eventData);
            that.$.scrollableContainer.refresh();
        }

        /**
        * Add custom operations to the menu's operations list
        */

    }, {
        key: '_handleCustomOperations',
        value: function _handleCustomOperations() {
            var that = this;

            that._filterOperationDescriptions = that._defaultFilterOperationDescriptions;

            for (var i = 0; i < that.customOperations.length; i++) {
                var operation = that.customOperations[i];

                that._filterOperationDescriptions.push({
                    label: operation.label,
                    value: operation.name,
                    custom: true,
                    index: i,
                    editorTemplate: operation.editorTemplate,
                    valueTemplate: operation.valueTemplate,
                    handleValue: operation.handleValue
                });
            }
        }

        /**
        * Initializes Editors instance if it's not initialized.
        */

    }, {
        key: '_initializeEditor',
        value: function _initializeEditor(editor) {
            var that = this,
                editorTagName = 'jqx-' + JQX.Utilities.Core.toDash(editor),
                editorElement = document.createElement(editorTagName);

            if (editor === 'numericTextBox') {
                editorElement.spinButtons = true;
                editorElement.inputFormat = 'floatingPoint';
            } else if (editor === 'dateTimePicker') {
                editorElement.calendarButton = true;
                editorElement.dropDownDisplayMode = 'auto';
                editorElement.enableMouseWheelAction = true;
                editorElement.locale = that.locale;

                if (!editorElement.messages[that.locale]) {
                    editorElement.messages[that.locale] = {};
                }

                editorElement.messages[that.locale].dateTabLabel = that.localize('dateTabLabel');
                editorElement.messages[that.locale].timeTabLabel = that.localize('timeTabLabel');
            }

            editorElement.tabIndex = '1';
            editorElement.theme = that.theme;
            editorElement.animation = that.animation;
            that.$[editor + 'Editor'] = editorElement;
            editorElement.$ = JQX.Utilities.Extend(editorElement);
            editorElement.className = editorTagName + '-editor jqx-hidden';
            that.$.editorsContainer.appendChild(editorElement);
            that['_' + editor + 'Initialized'] = true;
        }

        /**
         * InnerContainer keydown eventHandler 
         * @param {any} event
         */

    }, {
        key: '_innerContainerKeydownHandler',
        value: function _innerContainerKeydownHandler(event) {
            var that = this;

            if (event.key !== 'Escape' && event.key !== 'Enter' || !that._editorIsOpen) {
                return;
            }

            that._closeEditor();
        }

        /**
        * Updates value on blur
        */

    }, {
        key: '_inputBlurHandler',
        value: function _inputBlurHandler() {
            var that = this;
            var storedValue = void 0;

            if (that._editor === that.$.dateTimePickerEditor) {
                storedValue = that._editor.value;

                if (storedValue) {
                    storedValue = storedValue.toDate();
                }
            } else if (that._editor === that.$.checkBoxEditor) {
                storedValue = that._editor.checked;
            } else if (that._editor === that.$.customEditor) {
                storedValue = that._selectedCustomCondition.handleValue(that._editor);
            } else {
                var selectedField = that._getFieldByFieldName(that._editedItem.data[0]);

                if (selectedField.dataType === 'array') {
                    storedValue = that._editor.value.split(',');
                } else if (selectedField.dataType === 'object') {
                    storedValue = JSON.parse(that._editor.value);
                } else {
                    storedValue = that._editor.value;
                }

                //   storedValue = that._editor.value;
            }

            var editedItem = that._editedItem,
                nodeId = editedItem.nodeId,
                valueDataType = that._getFieldByFieldName(editedItem.data[0]).dataType;

            that._updateValueInFlatArray(nodeId, storedValue, 'value', valueDataType || 'string');
            that._generateValue();
        }

        /**
         * Localizes default values for the menus.
         */

    }, {
        key: '_localizeInitialValues',
        value: function _localizeInitialValues() {
            var that = this,
                localizedNames = JQX.Utilities.DateTime.getLocalizedNames(that.locale);

            that._addOptions = [{ label: that.localize('addCondition'), value: 'addCondition' }, { label: that.localize('addGroup'), value: 'addGroup' }];
            that._groupOperationDescriptions = [{ label: that.localize('and'), value: 'and' }, { label: that.localize('notand'), value: 'notand' }, { label: that.localize('or'), value: 'or' }, { label: that.localize('notor'), value: 'notor' }];
            that._defaultFilterOperationDescriptions = that._filterOperationDescriptions = [{ label: that.localize('='), value: '=', custom: false }, { label: that.localize('<>'), value: '<>', custom: false }, { label: that.localize('>'), value: '>', custom: false }, { label: that.localize('>='), value: '>=', custom: false }, { label: that.localize('<'), value: '<', custom: false }, { label: that.localize('<='), value: '<=', custom: false }, { label: that.localize('startswith'), value: 'startswith', custom: false }, { label: that.localize('endswith'), value: 'endswith', custom: false }, { label: that.localize('contains'), value: 'contains', custom: false }, { label: that.localize('notcontains'), value: 'notcontains', custom: false }, { label: that.localize('isblank'), value: 'isblank', custom: false }, { label: that.localize('isnotblank'), value: 'isnotblank', custom: false }];

            that._localizedDays = localizedNames.days;
            that._localizedMonths = localizedNames.months;
        }

        /**
        * Map fields data source to match menu's label and value.
        */

    }, {
        key: '_mapFieldsToMenu',
        value: function _mapFieldsToMenu() {
            var that = this;

            if (!that.fields && !that._valueFields) {
                return;
            }

            that._fields = (that.fields || that._valueFields).map(function (field) {
                var menuField = {};

                menuField.label = field.label;
                menuField.value = field.dataField;
                menuField.dataType = field.dataType;

                return menuField;
            });
        }

        /**
        * Handles menu item click.
        */

    }, {
        key: '_menuItemClickHandler',
        value: function _menuItemClickHandler(event) {
            var that = this,
                selectedElement = that._selectedElement.closest('.filter-builder-item'),
                details = event.detail,
                value = details.value,
                label = that.localize(value) || details.label;

            if (selectedElement) {
                var selectedIsCondition = selectedElement.closest('.jqx-filter-group-condition'),
                    selectedIsGroup = selectedElement.closest('.jqx-filter-group'),
                    nodeId = selectedIsCondition ? selectedIsCondition.getAttribute('node-id') : selectedIsGroup.getAttribute('node-id');
                var updatedPosition = 2;

                selectedElement.innerHTML = label;
                selectedElement.value = value;

                if (that._editedItem && selectedElement.classList.contains('jqx-filter-field-name') && that._editedItem.data[0] !== value) {
                    var valueHTMLnode = selectedElement.parentNode.querySelector('.jqx-filter-value'),
                        customOperationsWithoutValue = that.customOperations.map(function (item) {
                        if (item.hideValue) {
                            return item.name;
                        }
                    }).filter(function (item) {
                        return item;
                    }),
                        operationsWithoutValue = customOperationsWithoutValue.concat(['isblank', 'isnotblank']);

                    that._clearConditionsValue(nodeId, value);
                    that._setInitialFilterOperation(nodeId, value);
                    operationsWithoutValue.indexOf(value) > -1 ? valueHTMLnode.classList.add('jqx-hidden') : valueHTMLnode.classList.remove('jqx-hidden');
                }

                if (selectedElement.classList.contains('jqx-filter-field-name')) {
                    updatedPosition = 0;
                } else if (selectedElement.classList.contains('jqx-filter-operation')) {
                    var _valueHTMLnode = selectedElement.parentNode.querySelector('.jqx-filter-value');
                    var _customOperation = void 0;

                    if (that.customOperations) {
                        var customOperations = that.customOperations.filter(function (operation) {
                            return operation.name === value;
                        });

                        if (customOperations.length > 0) {
                            _customOperation = customOperations[0];
                        }
                    }

                    if (['isblank', 'isnotblank'].indexOf(value) > -1 || _customOperation && _customOperation.hideValue) {
                        that._clearConditionsValue(nodeId);
                        _valueHTMLnode.classList.add('jqx-hidden');
                    } else {
                        _valueHTMLnode.classList.remove('jqx-hidden');
                    }

                    updatedPosition = 1;
                } else if (selectedElement.classList.contains('jqx-filter-group-operation')) {
                    for (var i = 0; i < that._valueFlat.length; i++) {
                        if (that._valueFlat[i].nodeId === nodeId) {
                            that._valueFlat[i].data = selectedElement.value;
                        }
                    }

                    that._generateValue();
                    that.$.scrollableContainer.refresh();
                    return;
                }

                for (var _i7 = 0; _i7 < that._valueFlat.length; _i7++) {
                    if (that._valueFlat[_i7].nodeId === nodeId) {
                        that._valueFlat[_i7].data[updatedPosition] = selectedElement.value;
                    }
                }

                that._generateValue();
                that.$.scrollableContainer.refresh();
                return;
            }

            var selectedFilterGroup = that._selectedElement.closest('.jqx-filter-group'),
                selectedFilterGroupId = selectedFilterGroup.getAttribute('node-id');

            if (that._isMaxLevelExceeded(selectedFilterGroupId + '.0')) {
                return;
            }

            if (value === 'addCondition' && (that.maxConditions && that._totalConditions < that.maxConditions || !that.maxConditions)) {
                that._checkFieldsExistence();

                var conditionField = that.fields ? that.fields[0] : that._valueFields[0],
                    operation = conditionField.filterOperations && conditionField.filterOperations.length > 0 ? conditionField.filterOperations[0] : '=';

                that._addElement('condition', selectedFilterGroupId, [conditionField.dataField, operation, that._defaultValueByType(conditionField.dataType)]);
            } else if (value === 'addGroup') {
                that._addElement('group', selectedFilterGroupId, 'and');
            }

            that.$.scrollableContainer.refresh();
        }
    }, {
        key: '_setInitialFilterOperation',
        value: function _setInitialFilterOperation(nodeId, fieldName) {
            var that = this;
            var newField = that.fields.find(function (field) {
                return field.dataField === fieldName;
            }),
                selectedItem = that._valueFlat.find(function (item) {
                return item.nodeId === nodeId;
            }),
                operationHtmlNode = selectedItem.htmlNode.getElementsByClassName('jqx-filter-operation')[0],
                newFieldOperation = newField && newField.filterOperations && newField.filterOperations.length > 0 ? newField.filterOperations[0] : '=';
            var newFieldOperationLabel = that.localize(newFieldOperation);

            if (!newFieldOperationLabel) {
                newFieldOperationLabel = that.customOperations.find(function (operation) {
                    return operation.name === newFieldOperation;
                }).label;
            }

            selectedItem.data[1] = newFieldOperation;
            operationHtmlNode.innerHTML = newFieldOperationLabel;
        }
    }, {
        key: '_checkFieldsExistence',
        value: function _checkFieldsExistence() {
            var that = this;

            if ((!that.fields || that.fields.length === 0) && (!that._valueFields || that._valueFields.length === 0)) {
                that.error(that.localize('missingFields', { elementType: that.nodeName.toLowerCase() }));
            }
        }

        /**
        * Creates new filter condition row
        * @param {Array} condition (optional). An array with a condition params. If "condition" parameter is not set - in the method is used default value
        */

    }, {
        key: '_newFilterConditionRow',
        value: function _newFilterConditionRow(condition) {
            condition = condition || [];

            var that = this,
                dataField = condition[0] ? condition[0] : that.fields[0].dataField,
                value = that._formatValueStringRepresentation(condition[2], condition[0]),
                dataFieldsWithLabels = that.fields ? that.fields.filter(function (item) {
                return item.dataField === dataField;
            }) : that._valueFields.filter(function (item) {
                return item.dataField === dataField;
            }),
                dataFieldsLabel = dataFieldsWithLabels.length > 0 ? dataFieldsWithLabels[0].label : condition[0];
            var operation = that.localize(condition[1]);

            if (!operation && that.customOperations && that.customOperations.length > 0) {
                operation = that.customOperations.find(function (operation) {
                    return operation.name === condition[1];
                }).label;
            }

            var conditionRow = document.createElement('div'),
                template = '<span class ="jqx-filter-delete-btn"></span>\n                <span class ="filter-builder-item jqx-filter-field-name">' + dataFieldsLabel + '</span>\n                <span class ="filter-builder-item jqx-filter-operation">' + (operation || '') + '</span>\n                <span class ="filter-builder-item jqx-filter-value"><span class ="jqx-value-container">' + value + '</span></span>';

            conditionRow.className = 'jqx-filter-group-condition';
            conditionRow.innerHTML = template;

            return conditionRow;
        }

        /**
        * Open an editor at the position of the current editted condition value container
        * @param {Html element} target - the clicked HTML element. Used to be localized element's data and set into editor
        */

    }, {
        key: '_openEditor',
        value: function _openEditor(target) {
            var that = this,
                id = target && target.closest('.jqx-filter-group-condition') ? target.closest('.jqx-filter-group-condition').getAttribute('node-id') : null,
                valueContainer = target.closest('.jqx-filter-value'),
                editedItem = that._getItemById(id),
                field = editedItem.data[0] || that.fields[0].dataField || that._valueFields[0].dataField,
                fieldData = that._getFieldByFieldName(field);
            var value = void 0;

            if (editedItem) {
                value = editedItem.data[2];

                if (value === undefined) {
                    value = '';
                }
            } else {
                value = '';
            }

            if (!fieldData) {
                return;
            }

            if (that._editorIsOpen) {
                that._closeEditor();
            }

            if (that.$.conditionsMenu.opened) {
                that.$.fireEvent('menuClosing');
                that.$.conditionsMenu.close();
                that.$.fireEvent('menuClose');
            }
            valueContainer.setAttribute('edited', '');
            that._editedItem = editedItem;

            var fields = that.fields || that._valueFields,
                fieldItemsMatch = fields.filter(function (item) {
                return item.dataField === field;
            }),
                foundCustomConditions = that._filterOperationDescriptions.filter(function (item) {
                return item.value === editedItem.data[1] && item.custom;
            }),
                fieldItem = fieldItemsMatch.length > 0 ? fieldItemsMatch[0] : null,
                fieldType = fieldData.lookup && fieldData.lookup.dataSource ? 'lookup' : fieldItem.dataType;

            if (foundCustomConditions.length === 0 || !foundCustomConditions[0].editorTemplate) {
                that._openEditorByFieldType(fieldType, value, fieldData);
            } else {
                that._selectedCustomCondition = foundCustomConditions[0];
                that._openCustomEditor(fieldType, value, fieldData);
            }

            that.$.fireEvent('editorOpening', {
                value: value,
                type: fieldType,
                editedItem: editedItem
            });

            setTimeout(function () {
                that._editor.focus();

                if (that._editor === that.$.numericTextBoxEditor || that._editor === that.$.textBoxEditor) {
                    that.$.scrollableContainer.scrollLeft = that.$.scrollableContainer.$.scrollViewerContainer.scrollLeft;
                    that.$.scrollableContainer.scrollTop = that.$.scrollableContainer.$.scrollViewerContainer.oldTop;
                    that.$.scrollableContainer.$.scrollViewerContainer.scrollLeft = 0;
                    that.$.scrollableContainer.$.scrollViewerContainer.scrollTop = 0;
                    that._editor.$.input.selectionStart = that._editor.$.input.selectionEnd = that._editor.$.input.value.length;
                }

                that.$.scrollableContainer.refresh();
                that.$.fireEvent('editorOpen', {
                    value: value,
                    type: fieldType,
                    editedItem: editedItem
                });
            }, 0);

            that._editor.classList.remove('jqx-hidden');
            that._editorIsOpen = true;
            that.$.editorsContainer.setAttribute('open', '');
            valueContainer.appendChild(that.$.editorsContainer);
            that.$.scrollableContainer.refresh();
        }

        /**
        * Open specific editor, regarding field type settings and set it's value
        * @param {String} fieldType - type of the edited field, each type has different handling
        * @param {Any} value - the value, that must be set to the editor
        */

    }, {
        key: '_openEditorByFieldType',
        value: function _openEditorByFieldType(fieldType, value, fieldData) {
            var that = this;

            switch (fieldType) {
                case 'lookup':
                    if (!that._comboBoxInitialized) {
                        that._initializeEditor('comboBox');
                    }

                    that._editor = that.$.comboBoxEditor;
                    that._editor.dataSource = fieldData.lookup.dataSource;
                    that._editor.dropDownAppendTo = that.$.container;
                    that._editor.selectedValues = [value];
                    break;
                case 'boolean':
                    if (!that._checkBoxInitialized) {
                        that._initializeEditor('checkBox');
                    }

                    that._editor = that.$.checkBoxEditor;
                    that._editor.checked = !!value;
                    break;
                case 'datetime':
                    if (!that._dateTimePickerInitialized) {
                        that._initializeEditor('dateTimePicker');
                    }

                    that._editor = that.$.dateTimePickerEditor;
                    that._editor.formatString = that.formatStringDateTime;
                    that._editor.dropDownAppendTo = that.$.container;
                    that._editor.value = value;
                    break;
                case 'date':
                    if (!that._dateTimePickerInitialized) {
                        that._initializeEditor('dateTimePicker');
                    }

                    that._editor = that.$.dateTimePickerEditor;
                    that._editor.formatString = that.formatStringDate;
                    that._editor.dropDownAppendTo = that.$.container;
                    that._editor.value = value;
                    break;
                case 'number':
                    if (!that._numericTextBoxInitialized) {
                        that._initializeEditor('numericTextBox');
                    }

                    value = value ? value : 0;
                    that._editor = that.$.numericTextBoxEditor;
                    that._editor.value = value;
                    break;
                case 'array':
                    if (!that._textBoxInitialized) {
                        that._initializeEditor('textBox');
                    }

                    that._editor = that.$.textBoxEditor;
                    that._editor.value = value.toString();
                    break;
                case 'object':
                    if (!that._textBoxInitialized) {
                        that._initializeEditor('textBox');
                    }

                    value = value ? value : {};
                    that._editor = that.$.textBoxEditor;
                    that._editor.value = JSON.stringify(value);
                    break;
                default:
                    if (!that._textBoxInitialized) {
                        that._initializeEditor('textBox');
                    }

                    that._editor = that.$.textBoxEditor;
                    that._editor.value = value + '';
            }
        }

        /**
        * Open custom editor
        */

    }, {
        key: '_openCustomEditor',
        value: function _openCustomEditor(fieldType, value, fieldData) {
            var that = this,
                editorStructure = that.customOperations[that._selectedCustomCondition.index].editorTemplate(fieldType, value, fieldData);

            that.$.customEditor.innerHTML = '';

            if (editorStructure) {
                that.$.customEditor.appendChild(editorStructure);
            }

            that._editor = that.$.customEditor;
        }

        /**
        * Refreshes the structure
        */

    }, {
        key: '_refresh',
        value: function _refresh() {
            var that = this;

            that._generateValue();
            that._emptyElementsStructure();
            that._generateHTMLStructureFromFlatValue();
            that.$.scrollableContainer.refresh();
        }

        /**
        * Handles scrollbars on resize
        */

    }, {
        key: '_resizeHandler',
        value: function _resizeHandler() {
            var that = this;

            that.$.scrollableContainer.refresh();
        }

        /**
         * scrollViewer wheel handler.
         */

    }, {
        key: '_scrollViewerWheelHandler',
        value: function _scrollViewerWheelHandler(event) {
            var that = this;

            if (event.type === 'wheel' && that.$.scrollableContainer.scrollHeight) {
                event.stopPropagation();
                event.preventDefault();
            }
        }

        /**
        * Set default values for the menus
        */

    }, {
        key: '_setInitialValues',
        value: function _setInitialValues() {
            var that = this;

            that._mapFieldsToMenu();
            that._localizeInitialValues();
            that.$.conditionsMenu.dropDownAppendTo = that.$.container;
            that.$.conditionsMenu.dataSource = that._groupOperationDescriptions;

            that._valueFlat = [];
            that._lastProcessedItemInCurrentGroup = { parentId: null, id: null, position: null };
        }

        /**
         * Updates innerHTML of all fields.
         */

    }, {
        key: '_updatePlaceholder',
        value: function _updatePlaceholder() {
            var that = this;

            for (var i = 0; i < that._valueFlat.length; i++) {
                var _item2 = that._valueFlat[i];

                if (_item2.type === 'condition' && (_item2.data[2] === null || _item2.data[2] === '')) {
                    _item2.htmlNode.querySelector('.jqx-value-container').innerHTML = that.valuePlaceholder;
                }
            }

            if (that.$.textBoxEditor) {
                that.$.textBoxEditor.placeholder = that.valuePlaceholder;
            }
        }

        /**
        * Updates value in the flat array.
        * @param {String} nodeId
        * @param {Any} value
        * @param {String} updatedComponent
        * @param {String} valueType
        */

    }, {
        key: '_updateValueInFlatArray',
        value: function _updateValueInFlatArray(nodeId, value, updatedComponent, valueType) {
            var that = this;

            if (!nodeId || that.disabled) {
                return;
            }

            valueType = valueType || 'string';
            updatedComponent = updatedComponent || 'value';

            if (value !== null) {
                switch (valueType) {
                    case 'number':
                        value = parseFloat(value);
                        break;
                    case 'boolean':
                        value = !!value;
                        break;
                    case 'string':
                        value = value + '';
                        break;
                }
            }

            for (var i = 0; i < that._valueFlat.length; i++) {
                if (that._valueFlat[i].nodeId === nodeId) {
                    switch (updatedComponent) {
                        case 'column':
                            that._valueFlat[i].data[0] = value;
                            break;
                        case 'filterCondition':
                            that._valueFlat[i].data[1] = value;
                            break;
                        case 'value':
                            that._valueFlat[i].data[2] = value;
                            break;
                        case 'groupCondition':
                            that._valueFlat[i].data = value;
                            break;
                    }
                }
            }
        }

        /*
        * Validates if node exists in the internal element's structure. 
        * @param {Any} elementNode - HTML element or nodeId of the element
        * @param {String} methodName - an array with a new condition settings
        */

    }, {
        key: '_validateNode',
        value: function _validateNode(elementNode, methodName) {
            var that = this;
            var editedItem = void 0;

            if (elementNode instanceof HTMLElement) {
                editedItem = that._getItemById(elementNode.getAttribute('node-id'));
            } else if (typeof elementNode === 'string') {
                editedItem = that._getItemById(elementNode);
            } else {
                that.error(that.localize('wrongElementNode', { elementType: that.nodeName.toLowerCase(), method: methodName }));
            }

            if (!editedItem) {
                that.error(that.localize('wrongElementNode', { elementType: that.nodeName.toLowerCase(), method: methodName }));
            }

            return editedItem;
        }

        /*
        * Validates if node exists in the internal element's structure. 
        * @param {Any} data - HTML element or nodeId of the element
        * @param {Boolean} isCondition - flag defined where the data will be used (condition or group)
        */

    }, {
        key: '_validateUserData',
        value: function _validateUserData(data, isCondition) {
            var that = this;

            if (isCondition) {
                if (!Array.isArray(data) || data.length < 3) {
                    that.error(that.localize('invalidDataStructure', { elementType: that.nodeName.toLowerCase() }));
                }
            } else {
                var regEx = /^(and|or|notAnd|notOr)$/i;

                if (!(typeof data === 'string') || !data.match(regEx)) {
                    that.error(that.localize('invalidDataStructure', { elementType: that.nodeName.toLowerCase() }));
                }
            }
        }

        /**
         * Validates the structure of the "value" array.
         */

    }, {
        key: '_validateValue',
        value: function _validateValue() {
            var that = this,
                maxConditions = that.maxConditions,
                maxConditionsPerGroup = that.maxConditionsPerGroup,
                maxLevel = that.maxLevel;
            var totalConditions = 0;

            if (maxConditions === null && maxConditionsPerGroup === null && maxLevel === null) {
                return;
            }

            var value = that.value,
                finalResult = [];

            function isCondition(structure) {
                return structure.length === 3 && typeof structure[0] === 'string' && typeof structure[1] === 'string';
            }

            function process(structure, level, result) {
                var conditionsPerGroup = 0;

                structure.forEach(function (item) {
                    if (Array.isArray(item)) {
                        if (isCondition(item)) {
                            // condition
                            if (maxConditions !== null && maxConditions === totalConditions || maxConditionsPerGroup !== null && maxConditionsPerGroup === conditionsPerGroup) {
                                return;
                            }

                            result.push(item);
                            conditionsPerGroup++;
                            totalConditions++;
                        } else {
                            // inner group
                            if (maxLevel !== null && maxLevel === level + 1) {
                                return;
                            }

                            var _group2 = [];

                            result.push(_group2);
                            process(item, level + 1, _group2);
                        }
                    } else {
                        // operator
                        result.push(item);
                    }
                });
            }

            process(value, 0, finalResult);
            that.value = finalResult;
        }
    }], [{
        key: 'properties',

        /**
        * Element's properties
        */
        get: function get() {
            return {
                'customOperations': {
                    value: [],
                    type: 'array',
                    reflectToAttribute: false
                },
                'disableContextMenu': {
                    value: false,
                    type: 'boolean'
                },
                'fields': {
                    value: null,
                    type: 'array?',
                    reflectToAttribute: false
                },
                'formatStringDate': {
                    value: 'dd-MMM-yy',
                    type: 'string'
                },
                'formatStringDateTime': {
                    value: 'dd-MMM-yy HH:mm:ss',
                    type: 'string'
                },
                'hint': {
                    value: null,
                    type: 'string?'
                },
                'icons': {
                    value: {
                        '=': '=',
                        '<>': '≠',
                        '>': '>',
                        '>=': '≥',
                        '<': '<',
                        '<=': '≤',
                        'startswith': 'a|bc',
                        'endswith': 'ab|c',
                        'contains': 'abc',
                        'notcontains': '!abc',
                        'isblank': '○',
                        'isnotblank': '●'
                    },
                    type: 'object',
                    reflectToAttribute: false
                },
                'maxConditions': {
                    value: null,
                    type: 'number?',
                    validator: '_maxValidator'
                },
                'maxConditionsPerGroup': {
                    value: null,
                    type: 'number?',
                    validator: '_maxValidator'
                },
                'maxLevel': {
                    value: null,
                    type: 'number?',
                    validator: '_maxValidator'
                },
                'messages': {
                    value: {
                        'en': {
                            'add': 'Add',
                            'addCondition': 'Add Condition',
                            'addGroup': 'Add Group',
                            'and': 'And',
                            'notand': 'Not And',
                            'or': 'Or',
                            'notor': 'Not Or',
                            '=': 'Equals',
                            '<>': 'Does not equal',
                            '>': 'Greater than',
                            '>=': 'Greater than or equal to',
                            '<': 'Less than',
                            '<=': 'Less than or equal to',
                            'startswith': 'Starts with',
                            'endswith': 'Ends with',
                            'contains': 'Contains',
                            'notcontains': 'Does not contain',
                            'isblank': 'Is blank',
                            'isnotblank': 'Is not blank',
                            'wrongParentGroupIndex': '{{elementType}}: Wrong parent group index in "{{method}}" method.',
                            'missingFields': '{{elementType}}: Fields are required for proper condition\'s adding. Set "fields" source and then conditions will be added as expected.',
                            'wrongElementNode': '{{elementType}}: Incorect node / node Id in "{{method}}" method.',
                            'invalidDataStructure': '{{elementType}}: Used invalid data structure in updateCondition/updateGroup method.',
                            'dateTabLabel': 'DATE',
                            'timeTabLabel': 'TIME'
                        }
                    },
                    type: 'object',
                    extend: true
                },
                'restrictedMode': {
                    value: false,
                    type: 'boolean'
                },
                'showIcons': {
                    value: false,
                    type: 'boolean'
                },
                'value': {
                    value: ['or'],
                    type: 'array?',
                    reflectToAttribute: false
                },
                'valueFormatFunction': {
                    value: null,
                    type: 'function?',
                    reflectToAttribute: false
                },
                'valuePlaceholder': {
                    value: '&lt;enter a value&gt;',
                    type: 'string'
                }
            };
        }

        /** 
        * Filter Builder's required files
        */

    }, {
        key: 'requires',
        get: function get() {
            return {
                'JQX.Button': 'jqxbutton.js',
                'JQX.CheckBox': 'jqxcheckbox.js',
                'JQX.ScrollBar': 'jqxscrollbar.js',
                'JQX.ListBox': 'jqxlistbox.js',
                'JQX.DropDownList': 'jqxdropdownlist.js',
                'JQX.ComboBox': 'jqxcombobox.js',
                'JQX.Calendar': 'jqxcalendar.js',
                'JQX.TimePicker': 'jqxtimepicker.js',
                'JQX.Tooltip': 'jqxtooltip.js',
                'JQX.Utilities.DateTime': 'jqxdate.js',
                'JQX.DateTimePicker': 'jqxdatetimepicker.js',
                'JQX.Menu': 'jqxmenu.js'
            };
        }

        /**
        * Element's event listeners.
        */

    }, {
        key: 'listeners',
        get: function get() {
            return {
                'click': '_clickHandler',
                'down': '_downHandler',
                'document.click': '_documentClickHandler',
                'conditionsMenu.itemClick': '_menuItemClickHandler',
                'container.change': '_containerChangeHandler',
                'scrollableContainer.wheel': '_scrollViewerWheelHandler',
                'scrollableOuterContainer.resize': '_resizeHandler',
                'innerContainer.keydown': '_innerContainerKeydownHandler'
            };
        }
    }]);
    return FilterBuilder;
}(JQX.BaseElement));

/**
 * jqxQueryBuilder custom element.
 */
JQX('jqx-query-builder', function (_JQX$BaseElement2) {
    babelHelpers.inherits(QueryBuilder, _JQX$BaseElement2);

    function QueryBuilder() {
        babelHelpers.classCallCheck(this, QueryBuilder);
        return babelHelpers.possibleConstructorReturn(this, (QueryBuilder.__proto__ || Object.getPrototypeOf(QueryBuilder)).apply(this, arguments));
    }

    babelHelpers.createClass(QueryBuilder, [{
        key: 'template',


        /**
         * Element's HTML template.
         */
        value: function template() {
            return '<div id="container">\n                    <jqx-scroll-viewer id="scrollableContainer" class ="jqx-scrollable-container" animation="[[animation]]">\n                        <div id="queryLabel" class="jqx-query-builder-label jqx-unselectable"></div>\n                        <div id="contentContainer" class ="jqx-content-container"></div>\n                    </jqx-scroll-viewer>\n                    <div id="editorsContainer" class ="jqx-editors-container">\n                        <div id="customEditor" class ="jqx-custom-editor jqx-hidden"></div>\n                    </div>\n                    <jqx-menu id="conditionsMenu" mode="dropDown" class ="jqx-conditions-menu" theme="[[theme]]" animation="[[animation]]"></jqx-menu>\n                </div>';
        }

        /**
        * Updates the element when a property is changed.
        * @param {string} propertyName The name of the property.
        * @param {number/string} oldValue The previously entered value. Max, min and value are of type Number. The rest are of type String.
        * @param {number/string} newValue The new entered value. Max, min and value are of type Number. The rest are of type String.
        */

    }, {
        key: 'propertyChangedHandler',
        value: function propertyChangedHandler(propertyName, oldValue, newValue) {
            babelHelpers.get(QueryBuilder.prototype.__proto__ || Object.getPrototypeOf(QueryBuilder.prototype), 'propertyChangedHandler', this).call(this, propertyName, oldValue, newValue);

            var that = this;

            switch (propertyName) {
                case 'animation':
                case 'theme':
                    ['textBoxEditor', 'numericTextBoxEditor', 'comboBoxEditor', 'dateTimePickerEditor', 'checkBoxEditor'].forEach(function (editor) {
                        return that.$[editor] && (that.$[editor][propertyName] = newValue);
                    });
                    break;
                case 'formatStringDate':
                case 'formatStringDateTime':
                case 'valueFormatFunction':
                    that._refresh();
                    break;
                case 'operatorPlaceholder':
                    Array.from(that.querySelectorAll('.jqx-filter-operation[placeholder]')).forEach(function (element) {
                        return element.firstElementChild.innerHTML = newValue;
                    });
                    break;
                case 'propertyPlaceholder':
                    Array.from(that.querySelectorAll('.jqx-filter-field-name[placeholder]')).forEach(function (element) {
                        return element.firstElementChild.innerHTML = newValue;
                    });
                    break;
                case 'showIcons':
                    that._closeEditor();

                    if (newValue) {
                        that._filterOperationDescriptions.map(function (item) {
                            return item.icon = that.icons[item.value];
                        });
                    } else {
                        that._filterOperationDescriptions.map(function (item) {
                            return delete item.icon;
                        });
                    }

                    break;
                case 'customOperations':
                case 'fields':
                case 'value':
                    {
                        var oldValueAsString = JSON.stringify(that._validValue);

                        if (propertyName === 'customOperations') {
                            that._handleCustomOperations();
                        } else if (propertyName === '') {
                            that._mapFieldsToMenu();
                        }

                        that._applyValue();

                        if (that._oldValueAsString !== oldValueAsString) {
                            that._oldValueAsString = oldValueAsString;
                            that.$.fireEvent('change', { value: JSON.parse(oldValueAsString) });
                        }

                        break;
                    }
                case 'valuePlaceholder':
                    Array.from(that.querySelectorAll('.jqx-filter-value[placeholder]')).forEach(function (element) {
                        return element.firstElementChild.innerHTML = newValue;
                    });
                    break;
                case 'locale':
                case 'messages':
                    that._localizeInitialValues();
                    that._refresh();
                    that._handleCustomOperations(); //

                    if (that.$.dateTimePickerEditor) {
                        if (!that.$.dateTimePickerEditor.messages[that.locale]) {
                            that.$.dateTimePickerEditor.messages[that.locale] = {};
                        }

                        that.$.dateTimePickerEditor.messages[that.locale].dateTabLabel = that.localize('dateTabLabel');
                        that.$.dateTimePickerEditor.messages[that.locale].timeTabLabel = that.localize('timeTabLabel');

                        if (propertyName === 'locale') {
                            that.$.dateTimePickerEditor.locale = that.locale;
                        } else if (propertyName === 'messages') {
                            that.$.dateTimePickerEditor.$.selectDate.innerHTML = that.$.dateTimePickerEditor.messages[that.locale].dateTabLabel;
                            that.$.dateTimePickerEditor.$.selectTime.innerHTML = that.$.dateTimePickerEditor.messages[that.locale].timeTabLabel;
                        }
                    }

                    break;
                case 'icons':
                    that._closeEditor();
                    break;
            }
        }

        /**
        * Element's ready method.
        */

    }, {
        key: 'ready',
        value: function ready() {
            babelHelpers.get(QueryBuilder.prototype.__proto__ || Object.getPrototypeOf(QueryBuilder.prototype), 'ready', this).call(this);

            var that = this;

            that._setInitialValues();
            that._handleCustomOperations();
            that._applyValue();

            Object.defineProperty(that, 'value', {
                get: function get() {
                    if (that.context === that) {
                        return that.properties.value.value;
                    } else {
                        return that._validValue;
                    }
                },
                set: function set(value) {
                    that.updateProperty(that, that._properties.value, value);
                }
            });
        }

        /**
        * Set default values for the menus
        */

    }, {
        key: '_setInitialValues',
        value: function _setInitialValues() {
            var that = this;

            that._autoScrollCoefficient = JQX.Utilities.Core.Browser.Firefox ? 4 : JQX.Utilities.Core.Browser.Edge ? 8 : 2;
            that._isMobile = JQX.Utilities.Core.isMobile;

            that._manuallyAddedFields = [];
            that._localizeInitialValues();
            that.$.conditionsMenu.dropDownAppendTo = that.$.container;
            that.$.conditionsMenu.dataSource = that._groupOperationDescriptions;

            that._valueFlat = [];
            that._lastProcessedItemInCurrentGroup = { parentId: null, id: null, position: null };
        }

        /**
         * Applies value.
         */

    }, {
        key: '_applyValue',
        value: function _applyValue() {
            var that = this;

            that._emptyElementsStructure(true);
            that._validateValue();
            //that._setRequiredFields();
            that._convertValueToFlat(that.value);
            that._getFieldsFromValue();
            that._mapFieldsToMenu();
            that._generateHTMLStructureFromFlatValue(true);
            that._restrictNesting();
            that._validValue = that._getValidValue();
            that._oldValueAsString = JSON.stringify(that._validValue);
        }

        /**
         * Set's the requested fields
         */

    }, {
        key: '_setRequiredFields',
        value: function _setRequiredFields() {
            var that = this;

            if (!that.requiredFields || !that.requiredFields.length) {
                return;
            }

            var currentValue = that.value;
            var reqGroup = [];

            var _loop7 = function _loop7(i) {
                var reqField = that.requiredFields[i],
                    field = that.fields.find(function (field) {
                    return field.dataField === reqField;
                });

                if (field) {
                    var valueRecords = [];

                    if (currentValue) {
                        var _i8 = 0;

                        //Doing a lookup on the value for records that contain 'requiredFields'
                        //Modifies the value dynamically
                        while (_i8 < currentValue.length) {
                            var val = currentValue[_i8];

                            if (Array.isArray(val)) {
                                var r = 0;

                                while (r < val.length) {
                                    var record = val[r];

                                    if (record && record[0] === field.dataField) {
                                        valueRecords.push(record);
                                        val.splice(r > 0 ? r - 1 : r, 2);
                                        continue;
                                    }

                                    r++;
                                }
                            }

                            if (!val.length) {
                                currentValue.splice(_i8, 2);
                                continue;
                            }

                            _i8++;
                        }
                    }

                    //Check if group records exist inside value
                    if (valueRecords) {
                        for (var _r = 0; _r < valueRecords.length; _r++) {
                            reqGroup.push(valueRecords[_r]);
                            reqGroup.push('and');
                        }
                    } else {
                        //If no records create a placeholder
                        reqGroup.push([reqField]);
                        reqGroup.push('and');
                    }
                }
            };

            for (var i = 0; i < that.requiredFields.length; i++) {
                _loop7(i);
            }

            //Remove the lastly added 'and' condition
            if (typeof reqGroup[reqGroup.length - 1] === 'string') {
                reqGroup.pop();
            }

            //Add the Required Fields on Top of the value
            that.value.unshift(reqGroup, 'and');
        }

        /**
         * Change event Handler for the ContentContainer
         * @param {any} event
         */

    }, {
        key: '_contentContainerChangeHandler',
        value: function _contentContainerChangeHandler(event) {
            var that = this;

            event.stopPropagation();

            if (that.applyMode !== 'immediately' || !that._editorIsOpen || !that._editor) {
                return;
            }

            var editedHTMLField = that._editor.closest('.filter-builder-item');

            if (!editedHTMLField.classList.contains('jqx-filter-value')) {
                that._closeEditor();
            }
        }

        /**
        * Map field's data with menu's label and value.
        */

    }, {
        key: '_mapFieldsToMenu',
        value: function _mapFieldsToMenu() {
            var that = this;

            if (!that.fields && !that._valueFields) {
                return;
            }

            that._fields = (that.fields || that._valueFields).concat(that._manuallyAddedFields).map(function (field) {
                return { label: field.label, value: field.dataField, dataType: field.dataType, filterOperations: field.filterOperations, lookup: field.lookup };
            });
        }

        /**
        * Localizes default values for the menus.
        */

    }, {
        key: '_localizeInitialValues',
        value: function _localizeInitialValues() {
            var that = this;

            that.$.queryLabel.innerHTML = that.localize('queryLabel');

            that._addOptions = [{ label: that.localize('addCondition'), value: 'addCondition' }, { label: that.localize('addGroup'), value: 'addGroup' }];

            that._groupOperationDescriptions = [{ label: that.localize('and'), value: 'and' },
            //{ label: that.localize('notand'), value: 'notand' },
            { label: that.localize('or'), value: 'or'
                //{ label: that.localize('notor'), value: 'notor' }
            }];

            that._defaultFilterOperationDescriptions = that._filterOperationDescriptions = [{ label: that.localize('='), value: '=', custom: false }, { label: that.localize('<>'), value: '<>', custom: false }, { label: that.localize('>'), value: '>', custom: false }, { label: that.localize('>='), value: '>=', custom: false }, { label: that.localize('<'), value: '<', custom: false }, { label: that.localize('<='), value: '<=', custom: false }, { label: that.localize('startswith'), value: 'startswith', custom: false }, { label: that.localize('endswith'), value: 'endswith', custom: false }, { label: that.localize('contains'), value: 'contains', custom: false }, { label: that.localize('notcontains'), value: 'notcontains', custom: false }, { label: that.localize('isblank'), value: 'isblank', custom: false }, { label: that.localize('isnotblank'), value: 'isnotblank', custom: false }];

            //TODO: To Be moved to _formatValueStringRepresentation
            var localizedNames = JQX.Utilities.DateTime.getLocalizedNames(that.locale);

            that._localizedDays = localizedNames.days;
            that._localizedMonths = localizedNames.months;
        }

        /**
        * Add custom operations to the menu's operations list
        */

    }, {
        key: '_handleCustomOperations',
        value: function _handleCustomOperations() {
            var that = this;

            that._filterOperationDescriptions = that._defaultFilterOperationDescriptions.slice(0);

            for (var i = 0; i < that.customOperations.length; i++) {
                var operation = that.customOperations[i];

                that._filterOperationDescriptions.push({
                    label: operation.label,
                    value: operation.name,
                    custom: true,
                    index: i,
                    editorTemplate: operation.editorTemplate,
                    valueTemplate: operation.valueTemplate,
                    handleValue: operation.handleValue,
                    hideValue: operation.hideValue
                });
            }
        }

        /**
        * InnerContainer keydown eventHandler 
        * @param {any} event
        */

    }, {
        key: '_innerContainerKeydownHandler',
        value: function _innerContainerKeydownHandler(event) {
            var that = this;

            if (that._editorIsOpen && (event.key === 'Escape' || event.key === 'Enter')) {
                that._closeEditor();
            }
        }

        /**
         * Document down handler - closes menu and/or editor on click outside of the element
         */

    }, {
        key: '_documentDownHandler',
        value: function _documentDownHandler(event) {
            var that = this,
                target = event.originalEvent.target;

            if (target.closest('.jqx-input-drop-down-menu') || that.$.conditionsMenu.contains(target)) {
                return;
            }

            var isDropDown = target.closest('.jqx-drop-down');

            if (target.closest('jqx-query-builder') === that || isDropDown && that.contains(isDropDown.ownerElement)) {
                that._clickHandler(event.originalEvent);
                return;
            }

            if (that._editorIsOpen && !that._scrollBarDown) {
                that._closeEditor();
            }

            delete that._scrollBarDown;
        }

        /**
        * Generates HTML structure from flat array and adds/replaces
        * @param {Array} data - contains dataField, operator and value
        */

    }, {
        key: '_emptyElementsStructure',
        value: function _emptyElementsStructure(emptyValueFlat) {
            var that = this,
                contentContainer = that.$.contentContainer;

            while (contentContainer.firstChild) {
                contentContainer.removeChild(contentContainer.firstChild);
            }

            that._valueFlat = emptyValueFlat ? [] : that._valueFlat;
            that._lastProcessedItemInCurrentGroup = { parentId: null, id: null, position: null };
        }

        /**
        * Resize handler
        */

    }, {
        key: '_resizeHandler',
        value: function _resizeHandler() {
            this.$.scrollableContainer.refresh();
        }

        /**
         * Returns the number of all conditions
         */

    }, {
        key: '_getTotalConditions',
        value: function _getTotalConditions() {
            return this.getElementsByClassName('jqx-filter-group-condition').length;
        }

        /**
         * Validates the structure of the "value" array.
         */

    }, {
        key: '_validateValue',
        value: function _validateValue() {
            var that = this,
                value = that.value;

            if (!Array.isArray(value) || JSON.stringify(value).replace(/[\[\]]/g, '') === '') {
                that.value = [[[]]];
                return;
            }

            if (value.length === 3 && typeof value[0] === 'string') {
                that.value = [[value]];
            }

            if (Array.isArray(value[0]) && value[0].length === 3 && typeof value[0][0] === 'string') {
                that.value = [value];
            }

            while (typeof value[0] === 'string') {
                value.shift();
            }

            while (typeof value[value.length - 1] === 'string') {
                value.pop();
            }

            that.value.forEach(function (item) {
                if (Array.isArray(item) && item.length === 0) {
                    item.push([]);
                }
            });
        }

        /**
        * Converts value(represented as nested array) to flat array. Used for internal data representation 
        * @param {Array} groupData - an array with group data
        * @param {String} nodeId - the id of the current element
        */

    }, {
        key: '_convertValueToFlat',
        value: function _convertValueToFlat(groupData) {
            var that = this,
                operatorList = ['and', 'or', 'notAnd', 'notOr'];

            if (!groupData) {
                return;
            }

            var totalConditions = 0,
                totalGroups = 0;

            function createItems(groupData, groupIndex) {
                var operator = void 0;

                for (var i = 0; i < groupData.length; i++) {
                    var data = groupData[i],
                        isDataAnOperator = typeof data === 'string' && operatorList.indexOf(data) > -1;
                    var _item3 = { htmlNode: null };

                    if (isDataAnOperator) {
                        operator = data.trim();
                        continue;
                    }

                    operator = operator || 'and';

                    //Check if condition/group
                    if (Array.isArray(data)) {
                        var groupConditions = that._valueFlat.filter(function (item) {
                            return item.parentId + '' === groupIndex + '';
                        }).length;

                        //Check if condition
                        if (!data.find(function (item) {
                            return Array.isArray(item);
                        })) {

                            if (that.maxConditions && totalConditions >= that.maxConditions || that.maxConditionsPerGroup && groupConditions >= that.maxConditionsPerGroup) {
                                continue;
                            }

                            //Create Operator
                            if (i !== 0) {
                                that._valueFlat.push({ nodeId: groupIndex + '.' + groupConditions, type: 'operator', data: operator, parentId: groupIndex + '' });
                                operator = '';
                                groupConditions++;
                            }

                            //Create Condition
                            _item3.nodeId = groupIndex + '.' + groupConditions;
                            _item3.parentId = groupIndex + '';
                            _item3.type = 'condition';
                            _item3.data = data;

                            totalConditions++;
                            that._valueFlat.push(_item3);
                        } else {
                            _item3.nodeId = (totalGroups += 1) + '';
                            _item3.type = 'group';
                            _item3.data = operator;
                            that._valueFlat.push(_item3);

                            createItems(data, _item3.nodeId);
                            operator = '';
                        }
                    }
                }
            }

            //Empty the flat value
            that._valueFlat = [];
            createItems(groupData, 0);

            delete that._totalGroups;
        }

        /**
        * Generates an array of field objects, used as a backup when fields property is not set
        */

    }, {
        key: '_getFieldsFromValue',
        value: function _getFieldsFromValue() {
            var that = this,
                items = that._valueFlat,
                fieldsNames = [],
                fields = [];

            function getDataType(data) {
                if (typeof data === 'boolean') {
                    return 'boolean';
                }

                if (data instanceof Date) {
                    if (data.getHours() > 0 || data.getMinutes() > 0 || data.getSeconds() > 0) {
                        return 'datetime';
                    }

                    return 'date';
                }

                if (!isNaN(data)) {
                    return 'number';
                }

                return 'string';
            }

            for (var i = 0; i < items.length; i++) {
                var _item4 = items[i];

                if (_item4.type === 'condition') {
                    var fieldName = _item4.data[0];

                    if (fieldName && fieldsNames.indexOf(fieldName) === -1) {
                        var fieldElement = { label: fieldName, dataField: fieldName, dataType: getDataType(_item4.data[2]), format: null };

                        fieldsNames.push(fieldName);
                        fields.push(fieldElement);
                    }
                }
            }

            that._valueFields = fields;
        }

        /*
        * Creates new group or condition
        * @param {String} type - 'group' or 'condition'
        * @param {Any} parentGroup - html object or group id
        * @param {Any} data - if type is group - contains group's operator;  if type is condition - dataField, operator and value
        */

    }, {
        key: '_addElement',
        value: function _addElement(type, parentGroup, data, noRefresh) {
            var that = this,
                siblings = that._valueFlat.filter(function (item) {
                return item.parentId === parentGroup;
            });
            var addGroupAtPosition = 0,
                groupSeparator = '';

            data = data || (type === 'group' ? 'or' : []);

            if (siblings.length) {
                var siblingsIndexes = siblings.map(function (index) {
                    var indexPath = index.nodeId.split('.');

                    return parseInt(indexPath[indexPath.length - 1]);
                });

                siblingsIndexes = siblingsIndexes.length === 0 ? [0] : siblingsIndexes;
                addGroupAtPosition = siblingsIndexes.reduce(function (a, b) {
                    return Math.max(a, b);
                }) + 1;
            }

            if (parentGroup && parentGroup.length > 0) {
                groupSeparator = '.';
            }

            var itemId = (parentGroup || '') + groupSeparator + (type === 'group' ? that._valueFlat.filter(function (item) {
                return item.type === 'group';
            }).length + 1 : addGroupAtPosition);

            var lastGroupSibling = siblings[0];

            if (siblings.length) {
                for (var s = 0; s < siblings.length; s++) {
                    var sibling = siblings[s],
                        siblingIndex = sibling.nodeId.split('.').pop();

                    if (parseInt(siblingIndex) > parseInt(lastGroupSibling.nodeId.split('.').pop())) {
                        lastGroupSibling = sibling;
                    }
                }
            } else {
                lastGroupSibling = that._valueFlat.find(function (item) {
                    return item.nodeId === parentGroup;
                });
            }

            var lastGroupSiblingIndex = lastGroupSibling ? that._valueFlat.indexOf(lastGroupSibling) + 1 : that._valueFlat.length;

            if (type === 'condition' && siblings.length > 0) {
                that._valueFlat.splice(lastGroupSiblingIndex, 0, { nodeId: itemId, parentId: parentGroup, type: 'operator', data: ['and'], htmlNode: null });
                itemId = (parentGroup || '') + groupSeparator + (addGroupAtPosition + 1);
                lastGroupSiblingIndex++;
            }

            var itemData = {
                nodeId: itemId,
                parentId: parentGroup,
                type: type,
                data: data,
                htmlNode: null
            };

            that._valueFlat.splice(lastGroupSiblingIndex, 0, itemData);

            if (type === 'group') {
                that._addElement('condition', itemId, [], true);
            }

            if (!noRefresh) {
                that._refresh();
            }
        }

        /**
        * Removes a condition and it's HTML representation
        * @param {Any} elementNode.
        * @param {String} type.
        */

    }, {
        key: '_deleteElement',
        value: function _deleteElement(elementNode, type) {
            var that = this,
                nodeId = typeof elementNode === 'string' ? elementNode : elementNode.getAttribute('node-id');

            if (!nodeId || nodeId.length === 1) {
                return;
            }

            function deleteOperator(index) {
                var operator = that._valueFlat[index];

                //Remove the nested operator for the condition
                if (operator && operator.type === 'operator') {
                    that._valueFlat.splice(index, 1);
                    operator.htmlNode.parentElement.removeChild(operator.htmlNode);
                    return true;
                }
            }

            function deleteCondition(nodeId) {
                var item = void 0,
                    indexInGroup = 0,
                    groupId = nodeId.split('.');

                groupId.pop();
                groupId = groupId.join('.');

                for (var i = 0; i < that._valueFlat.length; i++) {
                    var flatItem = that._valueFlat[i];

                    if (flatItem.type !== 'condition') {
                        continue;
                    }

                    if (flatItem.nodeId === nodeId) {
                        item = flatItem;
                        break;
                    }

                    if (flatItem.parentId === groupId) {
                        indexInGroup++;
                    }
                }

                var itemIndex = that._valueFlat.indexOf(item);

                //Remove the condition
                that._valueFlat.splice(itemIndex, 1);
                //that._totalConditions--;
                item.htmlNode.parentElement.removeChild(item.htmlNode);

                //Remove the operator for the condition
                var isPreviousOperatorRemoved = deleteOperator(itemIndex - 1);

                //If the removed condition was 1st in the group, remove the next nested condition as well
                if (!indexInGroup) {
                    deleteOperator(itemIndex - (isPreviousOperatorRemoved ? 1 : 0));
                }

                var groupNode = that._valueFlat.filter(function (item) {
                    return item.nodeId === groupId;
                })[0].htmlNode;

                if (groupNode.children[1].childElementCount > 0 && groupNode.children[2].hasAttribute('limit-selection') && !groupNode.children[1].lastElementChild.hasAttribute('limit-selection')) {
                    groupNode.children[2].removeAttribute('limit-selection');
                }
            }

            function deleteGroup(nodeId) {
                var item = that._valueFlat.filter(function (item) {
                    return nodeId === item.nodeId && item.type === 'group';
                })[0];

                for (var i = 0; i < that._valueFlat.length; i++) {
                    var nestedItem = that._valueFlat[i],
                        nestedNodeId = nestedItem.nodeId;

                    if (nestedItem.parentId === nodeId) {
                        nestedItem.type === 'group' ? deleteGroup(nestedNodeId) : deleteCondition(nestedNodeId);
                    }
                }

                that._valueFlat.indexOf(item) > -1 && that._valueFlat.splice(that._valueFlat.indexOf(item), 1);
                item.htmlNode.parentElement.removeChild(item.htmlNode);
            }

            type === 'group' ? deleteGroup(nodeId) : deleteCondition(nodeId);

            //Delete the group if it's empty
            if (!type || type === 'condition') {
                var groupId = nodeId.split('.');

                groupId.pop();
                groupId = groupId.join('.');

                if (!that._valueFlat.filter(function (i) {
                    return i.parentId === groupId;
                }).length) {
                    if (that._valueFlat.filter(function (item) {
                        return item.type === 'group';
                    }).length > 1) {
                        deleteGroup(groupId);
                    }

                    //Set the new 0th group
                    if (groupId === '0') {
                        var firstGroup = that._valueFlat.find(function (item) {
                            return item.type === 'group';
                        }),
                            oldGroupId = firstGroup.nodeId;

                        firstGroup.nodeId = '0';
                        firstGroup.htmlNode.setAttribute('node-id', '0');

                        var groupConditions = that._valueFlat.filter(function (item) {
                            return item.parentId === oldGroupId;
                        });

                        for (var c = 0; c < groupConditions.length; c++) {
                            var con = groupConditions[c];

                            con.parentId = '0';
                            con.nodeId = '0.' + c;
                            con.htmlNode.setAttribute('node-id', con.nodeId);
                        }
                    }
                }

                //if (that.requiredFields && that.requiredFields.length) {
                //    const firstNonRestrictedGroup = that._valueFlat.find(item => item.type === 'group' && !item.restricted);

                //    if (firstNonRestrictedGroup) {
                //        firstNonRestrictedGroup.htmlNode.querySelector('.jqx-filter-group-operator').setAttribute('restricted', '');
                //    }
                //}

                that._generateValue();
            }
        }

        /**
         * Generates a flat structure form HTML
         */

    }, {
        key: '_generateHTMLStructureFromFlatValue',
        value: function _generateHTMLStructureFromFlatValue(validation) {
            var that = this,
                fragment = document.createDocumentFragment();

            if (!that._valueFlat || that._valueFlat.length === 0) {
                return;
            }

            //let lastGroup;

            var _loop8 = function _loop8(i) {
                var item = that._valueFlat[i],
                    customOperation = that.customOperations ? that.customOperations.find(function (operation) {
                    return operation.name === item.data[1];
                }) : false,
                    parentGroupHTMLcontainer = item.parentId ? that.querySelector('[node-id="' + item.parentId + '"]').querySelector('.jqx-filter-group-condition-container') : that.$.contentContainer;

                if (item.type === 'group') {
                    var groupContainerBlock = document.createElement('div'),
                        groupOperator = that.localize(item.data) || '';

                    groupContainerBlock.className = 'jqx-filter-group';
                    groupContainerBlock.innerHTML = '<div class="jqx-filter-group-operator">' + groupOperator + '</div>' + '<div class="jqx-filter-group-condition-container"></div>' + '<div class="jqx-filter-add-condition-btn"><div>' + that.localize('add') + '</div></div>' + '<div class="jqx-filter-add-btn"></div>';

                    //Set the group operator 'data' attribute
                    groupContainerBlock.firstElementChild.data = groupOperator;

                    fragment.appendChild(groupContainerBlock);

                    groupContainerBlock.setAttribute('node-id', item.nodeId);
                    that._valueFlat[i].htmlNode = groupContainerBlock;

                    //if (!lastGroup && that.requiredFields && that.requiredFields.length) {
                    //    groupContainerBlock.setAttribute('restricted', '');
                    //    item.restricted = true;
                    //}

                    //lastGroup = groupContainerBlock;
                } else if (item.type === 'condition') {
                    var condition = that._newFilterConditionRow(item.data);

                    condition.setAttribute('node-id', item.nodeId);
                    fragment.appendChild(condition);
                    that._valueFlat[i].htmlNode = condition;

                    if (item.data[0] !== undefined && item.data[1] === undefined) {
                        var validOperations = that._getFilterOperations(that._fields.find(function (field) {
                            return field.value === item.data[0];
                        }));

                        that._handleOnlyOperation(validOperations, item.data, condition);
                    } else if (['isblank', 'isnotblank'].indexOf(item.data[1]) !== -1 || customOperation && customOperation.hideValue) {
                        item.data.splice(2, 1);
                        condition.children[2].classList.add('jqx-visibility-hidden');
                    }
                } else {
                    var operator = document.createElement('div');

                    operator.className = 'jqx-filter-nested-operator';
                    operator.setAttribute('node-id', item.nodeId);
                    operator.innerHTML = that.localize(item.data);

                    fragment.appendChild(operator);
                    that._valueFlat[i].htmlNode = operator;
                }

                parentGroupHTMLcontainer.appendChild(fragment);
            };

            for (var i = 0; i < that._valueFlat.length; i++) {
                _loop8(i);
            }

            if (validation) {
                that._validateValueAdvanced();
            }

            that.$.scrollableContainer.refresh();
        }

        /**
         * Advanced value validation.
         */

    }, {
        key: '_validateValueAdvanced',
        value: function _validateValueAdvanced() {
            var that = this,
                value = that.value;
            var toRefresh = false,
                toRefreshValue = false,
                consecutiveStrings = 0;

            for (var i = 0; i < value.length; i++) {
                var _group3 = value[i];

                if (typeof _group3 === 'string') {
                    continue;
                }

                for (var j = _group3.length - 1; j >= 0; j--) {
                    var _item5 = _group3[j];

                    if (Array.isArray(_item5) && _item5.length === 0 && j !== _group3.length - 1) {
                        _group3.splice(j, 1);

                        if (j === 0) {
                            _group3.splice(0, 1);
                        }

                        toRefresh = true;
                    } else if (typeof _item5 === 'string') {
                        _item5 = _item5.toLowerCase();
                        consecutiveStrings++;

                        if (consecutiveStrings > 1 || _item5 !== 'and' && _item5 !== 'or') {
                            toRefreshValue = true;
                        }

                        continue;
                    }

                    consecutiveStrings = 0;
                }
            }

            if (toRefresh) {
                that._emptyElementsStructure(true);
                that._convertValueToFlat(that.value);
                that._generateHTMLStructureFromFlatValue();
            }

            if (toRefreshValue) {
                that._generateValue(true);
            }
        }

        /**
         * Restict nesting in condition groups if a "placeholder" condition is already present.
         */

    }, {
        key: '_restrictNesting',
        value: function _restrictNesting() {
            var that = this,
                addConditionBtns = Array.from(that.getElementsByClassName('jqx-filter-add-condition-btn'));

            addConditionBtns.forEach(function (btn) {
                var lastCondition = btn.previousElementSibling.lastElementChild;

                if (lastCondition && lastCondition.hasAttribute('limit-selection')) {
                    btn.setAttribute('limit-selection', '');
                }
            });
        }

        /**
        * Handles click event according to the target's type (filter button, add button, delete button, etc.).
        */

    }, {
        key: '_clickHandler',
        value: function _clickHandler(event) {
            var that = this,
                target = event.target;

            if (that.disabled || !target || !target.closest || !that._isMobile && event.button !== 0) {
                return;
            }

            if (that._scrollBarDown) {
                delete that._scrollBarDown;
                return;
            }

            var isTargetADropDown = target.closest('.jqx-drop-down'),
                targetIsEditor = that._editor && that._editor.contains(target) || isTargetADropDown && (that._editor.contains(isTargetADropDown.ownerElement) || that._editor === isTargetADropDown.ownerElement) || target.closest('.jqx-custom-editor');

            if (that._editor && that._editorIsOpen && !targetIsEditor) {
                that._closeEditor();
            }

            var filterItem = target.closest('.jqx-filter-group-condition') || target.closest('.jqx-filter-nested-operator') || target.closest('.jqx-filter-group');

            if (!filterItem) {
                return;
            }

            var item = that._getItemById(filterItem.getAttribute('node-id'));

            if (!item) {
                return;
            }

            that.$.fireEvent('itemClick', {
                id: item.nodeId,
                type: item.type,
                data: item.data
            });

            if (target.closest('.jqx-filter-delete-btn')) {
                that._clickHandlerDeleteButton(item.htmlNode);
                return;
            }

            var isAddButton = target.closest('.jqx-filter-add-btn') || target.closest('.jqx-filter-add-condition-btn');

            //Add group
            if (isAddButton) {
                var selectedFilterGroupId = isAddButton.closest('.jqx-filter-group').getAttribute('node-id');

                if (isAddButton.classList.contains('jqx-filter-add-condition-btn') && (that.maxConditions && that._getTotalConditions() < that.maxConditions || !that.maxConditions)) {
                    that._addElement('condition', selectedFilterGroupId, []);
                    //that._totalConditions++;
                } else {
                    that._clickHandlerFilterButton(isAddButton.classList, item.nodeId, target);
                }

                return;
            }

            var isFilterButton = target.closest('.filter-builder-item') || target.closest('.jqx-filter-group-operator') || target.closest('.jqx-filter-nested-operator');

            if (isFilterButton) {
                var elementClassList = isFilterButton.classList;

                that._clickHandlerFilterButton(elementClassList, item.nodeId, target);
            }
        }

        /**
         * down handler
         */

    }, {
        key: '_downHandler',
        value: function _downHandler(event) {
            var that = this;

            if (!event.originalEvent || !that._isMobile && event.button !== 0) {
                return;
            }

            var target = event.originalEvent.target;

            if (that.allowDrag && target.classList.contains('jqx-filter-group-condition') && event.pageX < target.getBoundingClientRect().left) {
                var _conditions = that._valueFlat.filter(function (item) {
                    return item.type === 'condition';
                });

                if (_conditions.length === 1 || _conditions.length === 2 && _conditions[0].parentId === _conditions[1].parentId && _conditions[1].htmlNode.hasAttribute('limit-selection')) {
                    return;
                }

                that._dragDetails = {
                    coords: {
                        x: event.pageX, y: event.pageY
                    },
                    item: target,
                    originalEvent: event
                };

                that.$.scrollableContainer._scrollView.disableSwipeScroll = true;
                that._hoveredCondition = target;
                window.getSelection().removeAllRanges();
                return;
            }

            this._scrollBarDown = target.closest('jqx-scroll-bar');

            event.stopPropagation();
            event.preventDefault();
        }

        /**
         * move handler.
         */

    }, {
        key: '_moveHandler',
        value: function _moveHandler(event) {
            if (event.originalEvent.type === 'touchmove') {
                event.originalEvent.preventDefault();
            }
        }

        /**
         * document move handler.
         */

    }, {
        key: '_documentMoveHandler',
        value: function _documentMoveHandler(event) {
            var that = this,
                dragDetails = that._dragDetails;

            if (!dragDetails) {
                return;
            }

            var draggedItem = dragDetails.item;

            if (!dragDetails.feedbackShown) {
                if (Math.abs(dragDetails.coords.x - event.pageX) > 5 || Math.abs(dragDetails.coords.y - event.pageY) > 5) {
                    var draggedItemData = that._valueFlat.filter(function (item) {
                        return item.htmlNode === draggedItem;
                    })[0],
                        dragStartEvent = that.$.fireEvent('dragStart', { data: draggedItemData.data, item: draggedItem, originalEvent: event });

                    if (dragStartEvent.defaultPrevented) {
                        delete that._dragDetails;
                        delete that._hoveredCondition;
                        that.$.scrollableContainer._scrollView.disableSwipeScroll = false;
                        return;
                    }

                    dragDetails.allConditions = Array.from(that.getElementsByClassName('jqx-filter-group-condition'));
                    dragDetails.data = draggedItemData;
                    dragDetails.feedback = that._addDragFeedback();
                    dragDetails.feedbackShown = true;
                    dragDetails.rect = that.getBoundingClientRect();

                    draggedItem.classList.add('dragged');
                } else {
                    return;
                }
            }

            var y = event.clientY;
            var target = event.originalEvent.target,
                hoveredItem = void 0;

            that.$.fireEvent('dragging', { data: dragDetails.data, item: draggedItem, originalEvent: event });
            that.setAttribute('dragging', '');

            dragDetails.feedback.style.left = event.pageX + 10 + 'px';
            dragDetails.feedback.style.top = event.pageY + 10 + 'px';

            if (that._isMobile) {
                var oldHoveredItem = that._hoveredCondition;

                if (oldHoveredItem) {
                    oldHoveredItem.classList.remove('drop-target', 'top', 'bottom');
                    delete that._hoveredCondition;
                }

                var realTarget = document.elementFromPoint(event.clientX, y);

                if (realTarget) {
                    target = realTarget;
                }
            }

            var closestCondition = target.closest('.jqx-filter-group-condition'),
                side = void 0;

            if (closestCondition) {
                hoveredItem = closestCondition;

                var rect = hoveredItem.getBoundingClientRect(),
                    topDistance = Math.abs(y - rect.top),
                    bottomDisatnce = Math.abs(y - rect.bottom);

                side = topDistance < bottomDisatnce ? 'top' : 'bottom';
            } else {
                var closest = void 0,
                    closestDistance = void 0;

                dragDetails.allConditions.forEach(function (condition) {
                    var rect = condition.getBoundingClientRect(),
                        topDistance = Math.abs(y - rect.top),
                        bottomDisatnce = Math.abs(y - rect.bottom),
                        bestDistance = Math.min(topDistance, bottomDisatnce);

                    if (closestDistance === undefined || bestDistance < closestDistance) {
                        closest = condition;
                        closestDistance = bestDistance;
                        side = topDistance < bottomDisatnce ? 'top' : 'bottom';
                    }
                });

                closestCondition = closest;
            }

            if (closestCondition !== draggedItem && !(closestCondition.hasAttribute('limit-selection') && side === 'bottom')) {
                var conditionsInGroup = Array.from(closestCondition.parentElement.getElementsByClassName('jqx-filter-group-condition')),
                    indexOfDraggedItem = conditionsInGroup.indexOf(draggedItem);

                if (indexOfDraggedItem !== -1) {
                    if (side === 'top' && closestCondition === conditionsInGroup[indexOfDraggedItem + 1] || side === 'bottom' && closestCondition === conditionsInGroup[indexOfDraggedItem - 1]) {
                        closestCondition = undefined;
                    }
                }
            } else {
                closestCondition = undefined;
            }

            hoveredItem = closestCondition;
            dragDetails.side = side;

            clearInterval(that._dragInterval);
            that._dragInterval = setInterval(function () {
                var rect = dragDetails.rect;

                if (that.$.scrollableContainer.scrollHeight > 0 && rect.left <= event.clientX && rect.left + rect.width >= event.clientX) {
                    if (y >= rect.top && y <= rect.top + 36) {
                        that.$.scrollableContainer.scrollTop -= that._autoScrollCoefficient;
                    } else if (y >= rect.top + rect.height - 36 && y <= rect.top + rect.height) {
                        that.$.scrollableContainer.scrollTop += that._autoScrollCoefficient;
                    } else {
                        clearInterval(that._dragInterval);
                    }
                } else {
                    clearInterval(that._dragInterval);
                }
            }, 1);

            if (hoveredItem) {
                if (that._hoveredCondition && hoveredItem !== that._hoveredCondition) {
                    that._hoveredCondition.classList.remove('drop-target', 'top', 'bottom');
                }

                var hoveredItemGroup = hoveredItem.closest('.jqx-filter-group');

                if (hoveredItemGroup && hoveredItemGroup.hasAttribute('restricted')) {
                    that._hoveredCondition = undefined;
                    return;
                }

                that._hoveredCondition = hoveredItem;
                hoveredItem.classList.remove('top', 'bottom');
                hoveredItem.classList.add(side, 'drop-target');
            } else if (that._hoveredCondition) {
                that._hoveredCondition.classList.remove('drop-target', 'top', 'bottom');
                delete that._hoveredCondition;
            }
        }

        /**
         * Adds drag feedback.
         */

    }, {
        key: '_addDragFeedback',
        value: function _addDragFeedback() {
            var feedback = document.createElement('div');

            feedback.className = 'jqx-query-builder-drag-feedback';
            document.body.appendChild(feedback);
            return feedback;
        }

        /**
         * document move handler.
         */

    }, {
        key: '_documentUpHandler',
        value: function _documentUpHandler(event) {
            var that = this,
                dragDetails = that._dragDetails;

            if (!dragDetails) {
                if (that.$.conditionsMenu.opened && that._selectedElement && !that._selectedElement.classList.contains('jqx-filter-add-btn')) {
                    that.$.conditionsMenu._hoverViaKeyboard(that.$.conditionsMenu.querySelector('jqx-menu-item[value="' + that._editedItem.data + '"]'));
                }

                return;
            }

            var draggedItem = dragDetails.item,
                draggedItemData = dragDetails.data,
                hoveredItem = that._hoveredCondition;

            delete that._dragDetails;
            delete that._hoveredCondition;
            that.$.scrollableContainer._scrollView.disableSwipeScroll = false;

            if (!that.hasAttribute('dragging')) {
                return;
            }

            clearInterval(that._dragInterval);
            window.getSelection().removeAllRanges();
            that.removeAttribute('dragging');
            draggedItem.classList.remove('dragged');
            document.body.removeChild(dragDetails.feedback);

            if (!hoveredItem) {
                that.$.fireEvent('dragEnd', { data: draggedItemData.data, item: draggedItem, originalEvent: event, target: null, targetData: null, targetSide: null });
                return;
            }

            var hoveredItemData = that._valueFlat.filter(function (item) {
                return item.htmlNode === hoveredItem;
            })[0],
                dragEndEvent = that.$.fireEvent('dragEnd', {
                data: draggedItemData.data,
                item: draggedItem,
                originalEvent: event,
                target: hoveredItem,
                targetData: hoveredItemData.data,
                targetSide: dragDetails.side
            });

            hoveredItem.classList.remove('drop-target', 'top', 'bottom');

            if (dragEndEvent.defaultPrevented) {
                return;
            }

            var value = that.value,
                draggedPath = draggedItemData.nodeId.split('.').map(function (index) {
                return parseFloat(index);
            }),
                groupInValue = value[(draggedPath[0] - 1) * 2],
                hoveredPath = hoveredItemData.nodeId.split('.').map(function (index) {
                return parseFloat(index);
            }),
                targetGroupInValue = value[(hoveredPath[0] - 1) * 2];
            var operator = 'and';

            if (groupInValue.length > 1) {
                if (draggedPath[1] === 0) {
                    // condition is first in group
                    operator = groupInValue[1];
                    groupInValue[1] = '!remove!';
                } else {
                    // condition is not first in group
                    operator = groupInValue[draggedPath[1] - 1];
                    groupInValue[draggedPath[1] - 1] = '!remove!';
                }
            }

            groupInValue[draggedPath[1]] = '!remove!';

            if (dragDetails.side === 'top') {
                targetGroupInValue.splice(hoveredPath[1], 0, draggedItemData.data, operator);
            } else {
                targetGroupInValue.splice(hoveredPath[1] + 1, 0, operator, draggedItemData.data);
            }

            for (var i = 0; i < value.length; i++) {
                if (Array.isArray(value[i])) {
                    value[i] = value[i].filter(function (member) {
                        return member !== '!remove!';
                    });
                }
            }

            for (var _i9 = value.length - 1; _i9 >= 0; _i9--) {
                if (Array.isArray(value[_i9]) && value[_i9].length === 0) {
                    if (_i9 === 0) {
                        value.splice(0, 2);
                    } else {
                        value.splice(_i9 - 1, 2);
                        _i9--;
                    }
                }
            }

            that._emptyElementsStructure(true);
            that._convertValueToFlat(value);
            that._generateHTMLStructureFromFlatValue();
            that._validValue = that._getValidValue();

            var oldValueAsString = JSON.stringify(that._validValue);

            if (that._oldValueAsString !== oldValueAsString) {
                that._oldValueAsString = oldValueAsString;
                that.$.fireEvent('change', { value: JSON.parse(oldValueAsString) });
            }
        }

        /**
        * Handling click on delete button
        */

    }, {
        key: '_clickHandlerDeleteButton',
        value: function _clickHandlerDeleteButton(item, isEmptyCheck) {
            var that = this;

            if (!item || !item.classList) {
                return;
            }

            that._closeEditor();

            if (that.getElementsByClassName('jqx-filter-group-condition').length === 1) {
                // resets only condition
                var containers = that._valueFlat[1].htmlNode.children;

                that.value = [[[]]];
                that._validValue = that._getValidValue();

                that._valueFlat[1].data = [];
                that._valueFlat[1].htmlNode.setAttribute('limit-selection', '');
                containers[0].setAttribute('placeholder', '');
                containers[1].setAttribute('placeholder', '');
                containers[2].setAttribute('placeholder', '');
                containers[0].firstElementChild.innerHTML = that.propertyPlaceholder;
                containers[1].firstElementChild.innerHTML = that.operatorPlaceholder;
                containers[2].firstElementChild.innerHTML = that.valuePlaceholder;

                var oldValueAsString = JSON.stringify(that._validValue);

                if (that._oldValueAsString !== oldValueAsString) {
                    that._oldValueAsString = oldValueAsString;
                    that.$.fireEvent('change', { value: JSON.parse(oldValueAsString) });
                }

                return;
            }

            if (item.classList.contains('jqx-filter-group')) {
                if (isEmptyCheck && that._valueFlat.filter(function (conditionItem) {
                    return conditionItem.parentId === item.getAttribute('node-id');
                }).length > 0) {
                    return;
                }

                that._deleteElement(item, 'group');
            } else {
                that._deleteElement(item);
            }

            that._generateValue();
            that.$.scrollableContainer.refresh();

            Array.from(that.$.contentContainer.children).forEach(function (filterGroup, index) {
                var parentId = (index + 1).toString();

                filterGroup.setAttribute('node-id', parentId);
                that._valueFlat.filter(function (item) {
                    return item.htmlNode === filterGroup;
                })[0].nodeId = parentId;

                Array.from(filterGroup.children[1].children).forEach(function (element, index) {
                    var valueFlatItem = that._valueFlat.filter(function (item) {
                        return item.htmlNode === element;
                    })[0],
                        id = parentId + '.' + index;

                    element.setAttribute('node-id', id);
                    valueFlatItem.parentId = parentId;
                    valueFlatItem.nodeId = id;
                });
            });
        }

        /**
         * Handles menu closing.
         */

    }, {
        key: '_menuClosingHandler',
        value: function _menuClosingHandler(event) {
            var detail = event.detail;

            if (detail.trigger === 'interaction' && this._selectedElement === detail.target) {
                event.preventDefault();
            }
        }

        /**
         * Handles menu item click.
         */

    }, {
        key: '_menuItemClickHandler',
        value: function _menuItemClickHandler(event) {
            var that = this,
                selectedElement = that._selectedElement.closest('.jqx-filter-group-operator, .jqx-filter-nested-operator'),
                details = event.detail,
                value = details.value;
            var nodeId = void 0;

            if (selectedElement) {
                selectedElement.innerHTML = that.localize(value) || details.label;
                selectedElement.value = value;

                if (selectedElement.classList.contains('jqx-filter-nested-operator')) {
                    nodeId = selectedElement.getAttribute('node-id');
                } else {
                    nodeId = selectedElement.parentElement.getAttribute('node-id');
                }

                for (var i = 0; i < that._valueFlat.length; i++) {
                    if (that._valueFlat[i].nodeId === nodeId) {
                        that._valueFlat[i].data = selectedElement.value;
                        break;
                    }
                }

                that._generateValue();
            } else {
                nodeId = that._selectedElement.parentElement.getAttribute('node-id');
                that._addElement('group', null, value);
            }

            that.$.scrollableContainer.refresh();
        }

        /**
        * Creates new filter condition row
        * @param {Array} condition (optional). An array with a condition params. If "condition" parameter is not set - in the method is used default value
        */

    }, {
        key: '_newFilterConditionRow',
        value: function _newFilterConditionRow() {
            var condition = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

            var that = this,
                dataField = condition[0];
            var dataFieldWithLabel = that._fields.find(function (item) {
                return item.value === dataField;
            }),
                dataFieldsLabel = dataFieldWithLabel ? dataFieldWithLabel.label : undefined;
            var operation = void 0;

            if (dataField === undefined || !dataFieldsLabel && that.fieldsMode === 'static') {
                condition.length = 0;
            } else {
                if (!dataFieldsLabel) {
                    dataFieldWithLabel = that._getDynamicFieldInfo(dataField);
                    dataFieldsLabel = dataFieldWithLabel.label;
                    condition[0] = dataFieldWithLabel.dataField;
                }

                var validOperations = that._getFilterOperations(dataFieldWithLabel);

                operation = validOperations.find(function (validOperation) {
                    return validOperation.value === condition[1];
                });

                if (!operation) {
                    condition.splice(1, 2);
                } else {
                    operation = operation.label;
                }
            }

            var value = that._formatValueStringRepresentation(condition[2], condition[0], condition[1]);
            var conditionRow = document.createElement('div'),
                template = '<div class ="filter-builder-item jqx-filter-field-name" ' + (dataFieldsLabel ? '><div class ="jqx-value-container">' + dataFieldsLabel : 'placeholder><div class ="jqx-value-container">' + that.propertyPlaceholder) + '</div></div>' + '<div class ="filter-builder-item jqx-filter-operation" ' + (operation ? '><div class ="jqx-value-container">' + operation : 'placeholder><div class ="jqx-value-container">' + that.operatorPlaceholder) + '</div></div>' + '<div class ="filter-builder-item jqx-filter-value" ' + (condition[2] !== undefined ? '><div class ="jqx-value-container">' + value : 'placeholder><div class ="jqx-value-container">' + that.valuePlaceholder) + '</div></div>' + '<div class ="jqx-filter-delete-btn"></div>';

            conditionRow.className = 'jqx-filter-group-condition';
            conditionRow.innerHTML = template;

            if (!condition.length) {
                conditionRow.setAttribute('limit-selection', '');
            }

            return conditionRow;
        }

        /**
        * Removes a condition and it's HTML representation
        * @param {Any} value.
        * @param {String} field.
        */

    }, {
        key: '_formatValueStringRepresentation',
        value: function _formatValueStringRepresentation(value, field, operation) {
            var that = this,
                fieldData = that._getFieldByFieldName(field);
            var valueFormattedByType = void 0;

            if (!fieldData) {
                return value;
            }

            if (value === undefined || value === null) {
                return that.valuePlaceholder;
            }

            if (operation !== undefined && that.customOperations && that.customOperations.length > 0) {
                operation = that.customOperations.find(function (customOperation) {
                    return customOperation.name === operation;
                });

                if (operation && operation.valueTemplate) {
                    return operation.valueTemplate(that._editor, value);
                }
            }

            switch (fieldData.dataType) {
                case 'date':
                case 'datetime':
                    value = value instanceof Date || typeof value === 'string' || typeof value === 'number' && !isNaN(value) ? new JQX.Utilities.DateTime(value) : value;
                    value.calendar.days = that._localizedDays;
                    value.calendar.months = that._localizedMonths;
                    value.calendar.locale = that.locale;
                    valueFormattedByType = value.toString(fieldData.dataType === 'date' ? that.formatStringDate : that.formatStringDateTime);
                    break;
                case 'array':
                    valueFormattedByType = typeof value === 'string' ? value.split(',') : value;
                    break;
                case 'object':
                    valueFormattedByType = typeof value === 'string' ? value : JSON.stringify(value);
                    break;
                case 'number':
                    valueFormattedByType = value;
                    break;
                case 'boolean':
                    valueFormattedByType = !!value;
                    break;
                default:
                    valueFormattedByType = value + '';
                    break;

            }

            if (!that.valueFormatFunction) {
                return valueFormattedByType;
            }

            return that.valueFormatFunction(valueFormattedByType, field, fieldData.dataType || 'string');
        }

        /**
        * Return field's data by given field name
        * @param {String} fieldName
        */

    }, {
        key: '_getFieldByFieldName',
        value: function _getFieldByFieldName(fieldName) {
            return Object.assign({}, this._fields.find(function (item) {
                return item.value === fieldName;
            }));
        }

        /**
        * Refreshes the structure
        */

    }, {
        key: '_refresh',
        value: function _refresh() {
            var that = this;

            that._generateValue();
            that._emptyElementsStructure();
            that._generateHTMLStructureFromFlatValue();
            that._restrictNesting();
        }

        /**
        * Generates the new value of "value" property from flat
        */

    }, {
        key: '_generateValue',
        value: function _generateValue(preventEventFiring) {
            var that = this;
            var groupsWithItems = [],
                value = that._valueFlat.slice(0),
                structure = [];

            //Get all condition groups
            for (var i = 0; i < value.length; i++) {
                var _item6 = value[i];
                var _group4 = {};

                if (_item6.type === 'group') {
                    _group4.nodeId = _item6.nodeId;
                    _group4.parentId = _item6.parentId;
                    _group4.data = _item6.data;
                    //group.structure = [item.data || 'or'];
                    //group.structure = item.data ? [item.data] : [];
                    _group4.structure = [];
                    groupsWithItems.push(_group4);
                }
            }

            for (var _i10 = 0; _i10 < groupsWithItems.length; _i10++) {
                var _group5 = groupsWithItems[_i10];
                //let conditions = [],
                //operators = [];

                for (var g = 0; g < value.length; g++) {
                    var _item7 = value[g];

                    if (_item7.parentId === _group5.nodeId) {
                        if (_item7.type === 'condition') {
                            //const operator = value.filter(item => {
                            //    return (item.parentId === group.nodeId && item.type === 'condition' && item.data.length)
                            //});
                            var operator = value[g - 1];

                            if (operator && operator.parentId === _group5.nodeId && operator.type === 'operator') {
                                _group5.structure.push(operator.data.toString());
                            }

                            _group5.structure.push(_item7.data);
                        }
                        //else if (item.type === 'operator') {
                        //    operators.push(item);
                        //}
                    }
                }

                //conditions = value.filter(item => {
                //    return (item.parentId === group.nodeId && item.type === 'condition' && item.data.length);
                //}),
                //operators = value.filter(item => {
                //    return (item.parentId === group.nodeId && item.type === 'condition' && item.data.length);
                //});

                //for (let i = 0; i < conditions.length; i++) {
                //   i === 0 ? group.structure.unshift(conditions[i].data) : group.structure.push(conditions[i].data);
                //}
            }

            groupsWithItems = groupsWithItems.filter(function (item) {
                return item.structure.length > 0;
            });

            groupsWithItems.sort(function (a, b) {
                return b.nodeId.split('.').length - a.nodeId.split('.').length;
            });

            var _loop9 = function _loop9(_i11) {
                var currentElement = groupsWithItems[_i11],
                    group = groupsWithItems.filter(function (item) {
                    return item.nodeId === currentElement.parentId;
                })[0];

                if (group && group.structure) {
                    group.structure.push(currentElement.structure);
                    return 'continue';
                }

                if (currentElement.nodeId === '0') {
                    structure = structure.concat(currentElement.structure);
                    return 'continue';
                }

                //Push the group operator
                if (currentElement.data) {
                    if (_i11 > 0) {
                        structure.push(currentElement.data);
                    }

                    //Concat the group structure
                    structure.push(currentElement.structure);
                }
            };

            for (var _i11 = 0; _i11 < groupsWithItems.length; _i11++) {
                var _ret10 = _loop9(_i11);

                if (_ret10 === 'continue') continue;
            }

            //if (groupsWithItems.length > 0) {
            //    that.value = that._valueFlat.length > 1 ? groupsWithItems[groupsWithItems.length - 1].structure : groupsWithItems;
            //}
            //else {
            //const data = that._getItemById('0').data;

            //that.value = data ? [data] : [];
            //}

            that.value = structure;
            that._validateValue();
            that._validValue = that._getValidValue();

            if (!preventEventFiring) {
                var oldValueAsString = JSON.stringify(that._validValue);

                if (that._oldValueAsString !== oldValueAsString) {
                    that._oldValueAsString = oldValueAsString;
                    that.$.fireEvent('change', { value: JSON.parse(oldValueAsString) });
                }
            }
        }

        /**
        * Return item's data by given id
        * @param {String} id - item's id (or parent id - demending on the second parameter)
        * @param {Boolean} isParent (optional)  - of the items is searched by parentId
        */

    }, {
        key: '_getItemById',
        value: function _getItemById(id, isParent) {
            var that = this,
                matches = that._valueFlat.filter(function (item) {
                if (isParent) {
                    return item.parentId === id;
                }
                return item.nodeId === id;
            }),
                editedItem = matches.length > 0 ? matches[0] : null;

            return editedItem;
        }

        /**
        * Closes an editor and sets the new value in the value's cotainer
        * @param {Boolean} preventEventFiring (optional).
        */

    }, {
        key: '_closeEditor',
        value: function _closeEditor(preventEventFiring) {
            var that = this;
            var storedValue = void 0;

            if (!that._editedItem || !that._editorIsOpen) {
                return;
            }

            var editedItem = that._editedItem,

            //editedRow = editedItem.htmlNode,
            //nodeId = editedItem.nodeId,
            editedHTMLField = that._editor.closest('.filter-builder-item'),
                editedHTMLvalueContainer = editedHTMLField.querySelector('.jqx-value-container'),
                condition = editedHTMLField.parentElement,
                valueContainer = condition.children[2];

            if (that._editor === that.$.dateTimePickerEditor) {
                storedValue = that._editor.value;

                if (storedValue) {
                    storedValue = storedValue.toDate();
                }
            } else if (that._editor === that.$.checkBoxEditor) {
                storedValue = that._editor.checked;
            } else if (that._editor === that.$.customEditor) {
                if (that._editor) {
                    var customNumericTextBoxes = Array.from(that._editor.getElementsByTagName('jqx-numeric-text-box'));

                    customNumericTextBoxes.forEach(function (customNumericTextBox) {
                        return customNumericTextBox._inputBlurHandler();
                    });
                }

                storedValue = that._selectedCustomCondition.handleValue(that._editor);
            } else if (that._editor === that.$.numericTextBoxEditor) {
                that._editor._inputBlurHandler();
                storedValue = that._editor.value;
            } else if (editedHTMLField.classList.contains('jqx-filter-value')) {
                var selectedField = that._getFieldByFieldName(that._editedItem.data[0]);

                if (selectedField.dataType === 'array') {
                    storedValue = that._editor.value.split(',');
                } else if (selectedField.dataType === 'object') {
                    storedValue = JSON.parse(that._editor.value);
                } else {
                    storedValue = that._editor.value;
                }
            } else {
                storedValue = that._editor.value;
            }

            //editedHTMLvalueComponent = editedRow.querySelector('.jqx-filter-value'),

            //that._updateValueInFlatArray(nodeId, storedValue, 'value', (valueDataType || 'string'));
            //Converted the new value to the appropriate type


            //Update the condition object with the new value
            if (editedHTMLField.classList.contains('jqx-filter-field-name')) {
                if (storedValue.trim() === '') {
                    that._hideEditor(editedHTMLField, editedItem.data[0] === undefined);
                    return;
                }

                if (condition.hasAttribute('limit-selection')) {
                    // "placeholder" condition
                    condition.removeAttribute('limit-selection');
                    condition.parentElement.nextElementSibling.removeAttribute('limit-selection');
                }

                var existingField = that._fields.find(function (item) {
                    return item.label === storedValue;
                }),
                    oldFieldValue = editedItem.data[0];

                if (existingField) {
                    editedItem.data[0] = existingField.value;
                } else if (that.fieldsMode === 'dynamic') {
                    var dynamicFieldInfo = that._getDynamicFieldInfo(storedValue);

                    storedValue = dynamicFieldInfo.label;
                    editedItem.data[0] = dynamicFieldInfo.dataField;
                } else {
                    editedHTMLvalueContainer.innerHTML = that._fields.find(function (item) {
                        return item.value === oldFieldValue;
                    }).label;
                    that._hideEditor(editedHTMLField);
                    return;
                }

                editedHTMLvalueContainer.innerHTML = storedValue;
                that._handleFieldChange([oldFieldValue, editedItem.data[0]], [valueContainer, editedItem, condition]);
            } else if (editedHTMLField.classList.contains('jqx-filter-operation')) {
                that._handleOperationChange([editedItem, storedValue, that._editor.$.input.dataValue], [editedHTMLvalueContainer, valueContainer]);
            } else {
                editedItem.data[2] = storedValue;
                editedHTMLvalueContainer.innerHTML = that._formatValueStringRepresentation(storedValue, that._editedItem.data[0], that._editedItem.data[1]);
            }

            that._generateValue(preventEventFiring);
            that._hideEditor(editedHTMLField);
        }

        /**
         * Gets the info of a dynamic field.
         */

    }, {
        key: '_getDynamicFieldInfo',
        value: function _getDynamicFieldInfo(value) {
            var that = this,
                dynamicFieldInfo = { label: value, dataField: value, dataType: 'string' };

            if (that.getDynamicField) {
                var customInfo = that.getDynamicField(value);

                if (customInfo.label) {
                    dynamicFieldInfo.label = customInfo.label;
                }

                if (customInfo.dataField) {
                    dynamicFieldInfo.dataField = customInfo.dataField;
                }

                if (customInfo.dataType) {
                    dynamicFieldInfo.dataType = customInfo.dataType;
                }

                if (customInfo.filterOperations && Array.isArray(customInfo.filterOperations) && customInfo.filterOperations.length > 0) {
                    dynamicFieldInfo.filterOperations = customInfo.filterOperations;
                }

                if (customInfo.lookup) {
                    dynamicFieldInfo.lookup = customInfo.lookup;
                }
            }

            that._manuallyAddedFields.push(dynamicFieldInfo);
            that._mapFieldsToMenu();
            return dynamicFieldInfo;
        }

        /**
         * Handles field change.
         */

    }, {
        key: '_handleFieldChange',
        value: function _handleFieldChange(fields, elements) {
            var that = this,
                oldFieldValue = fields[0],
                editedItem = elements[1],
                condition = elements[2],
                valueContainer = elements[0],
                newField = that._fields.find(function (field) {
                return field.value === fields[1];
            }),
                newOperations = that._getFilterOperations(newField);

            if (!oldFieldValue || editedItem.data[1] === undefined) {
                that._handleOnlyOperation(newOperations, editedItem.data, condition);
                return;
            }

            var oldField = that._fields.find(function (field) {
                return field.value === oldFieldValue;
            }),
                oldFieldType = oldField.dataType,
                newFieldType = newField.dataType;

            if (newField === oldField || newFieldType === oldFieldType && !newField.filterOperations && !oldField.filterOperations) {
                return;
            }

            var validInNewOperations = !!newOperations.find(function (operation) {
                return operation.value === editedItem.data[1];
            });

            if (validInNewOperations) {
                if (newFieldType === oldFieldType) {
                    return;
                }

                if (newFieldType === 'date' && oldFieldType === 'datetime' || newFieldType === 'datetime' && oldFieldType === 'date') {
                    // reformat previous value
                    valueContainer.firstElementChild.innerHTML = that._formatValueStringRepresentation(editedItem.data[2], editedItem.data[0], editedItem.data[1]);
                    return;
                }

                // remove previous value
                editedItem.data.splice(2, 1);
                valueContainer.setAttribute('placeholder', '');
                valueContainer.firstElementChild.innerHTML = that.valuePlaceholder;
                return;
            }

            // remove previous operator and value
            editedItem.data.splice(1, 2);
            condition.children[1].setAttribute('placeholder', '');
            condition.children[1].firstElementChild.innerHTML = that.operatorPlaceholder;
            valueContainer.setAttribute('placeholder', '');
            valueContainer.firstElementChild.innerHTML = that.valuePlaceholder;
            valueContainer.classList.remove('jqx-visibility-hidden');

            that._handleOnlyOperation(newOperations, editedItem.data, condition);
        }

        /**
         * Handles change to a field with only one operation.
         */

    }, {
        key: '_handleOnlyOperation',
        value: function _handleOnlyOperation(newOperations, data, condition) {
            if (newOperations.length === 1) {
                var onlyOperation = newOperations[0];

                data[1] = onlyOperation.value;
                condition.children[1].removeAttribute('placeholder', '');
                condition.children[1].firstElementChild.innerHTML = newOperations[0].label;

                if (onlyOperation.value === 'isblank' || onlyOperation.value === 'isnotblank' || onlyOperation.custom && onlyOperation.hideValue) {
                    data.splice(2, 1);
                    condition.children[2].classList.add('jqx-visibility-hidden');
                }
            }
        }

        /**
         * Handles operation change.
         */

    }, {
        key: '_handleOperationChange',
        value: function _handleOperationChange(data, elements) {
            var that = this,
                editedItem = data[0],
                storedLabel = data[1],
                storedValue = data[2],
                editedHTMLvalueContainer = elements[0],
                valueContainer = elements[1],
                oldOperation = editedItem.data[1] !== undefined ? that._filterOperationDescriptions.find(function (item) {
                return item.value === editedItem.data[1];
            }) : undefined,
                newOperation = that._filterOperationDescriptions.find(function (item) {
                return item.value === storedValue;
            }),
                newOperationValue = newOperation.value;

            if (newOperation === oldOperation) {
                return;
            }

            editedItem.data[1] = newOperationValue;
            editedHTMLvalueContainer.innerHTML = storedLabel;

            if (newOperationValue === 'isblank' || newOperationValue === 'isnotblank' || newOperation.custom && newOperation.hideValue) {
                editedItem.data.splice(2, 1);
                valueContainer.classList.add('jqx-visibility-hidden');
            } else if (valueContainer.classList.contains('jqx-visibility-hidden')) {
                valueContainer.setAttribute('placeholder', '');
                valueContainer.classList.remove('jqx-visibility-hidden');
                valueContainer.firstElementChild.innerHTML = that.valuePlaceholder;
            } else if (newOperation.custom || oldOperation && oldOperation.custom) {
                editedItem.data.splice(2, 1);
                valueContainer.setAttribute('placeholder', '');
                valueContainer.firstElementChild.innerHTML = that.valuePlaceholder;
            }
        }

        /**
         * Hides editor.
         */

    }, {
        key: '_hideEditor',
        value: function _hideEditor(editedHTMLField, placeholder) {
            var that = this;

            if (placeholder) {
                editedHTMLField.setAttribute('placeholder', '');
            }

            editedHTMLField.removeAttribute('edited');
            that.$.editorsContainer.removeAttribute('open');

            if (that._editor.close) {
                that._editor.close();
            }

            that._editor.classList.add('jqx-hidden');
            that._editorIsOpen = that._enterIsPressedInEditor = false;
            that.$.scrollableContainer.refresh();
        }

        /**
        * Handling click on delete buton
        */

    }, {
        key: '_clickHandlerFilterButton',
        value: function _clickHandlerFilterButton(elementClassList, itemId, target) {
            var that = this;

            function prepareContextMenu(target, dataSource, selectedItem) {
                that._contextMenuOptions = dataSource.length === 0 ? that._defaultFilterOperationDescriptions : dataSource;
                that._handleContextMenu(target);

                if (that.$.conditionsMenu.opened) {
                    that.$.conditionsMenu._discardKeyboardHover();
                    that.$.conditionsMenu._hoverViaKeyboard(that.$.conditionsMenu.querySelector('jqx-menu-item[value="' + selectedItem + '"]'));
                }
            }

            if (target.closest('.jqx-editors-container')) {
                return;
            }

            that._closeEditor();
            that._editedItem = that._getItemById(itemId);

            if (elementClassList.contains('jqx-filter-add-btn')) {
                prepareContextMenu(target, that._groupOperationDescriptions);
                return;
            }

            if (!elementClassList.contains('jqx-filter-field-name') && (!that._editedItem.data || !that._editedItem.data.length)) {
                return;
            }

            if (elementClassList.contains('jqx-filter-group-operator') || elementClassList.contains('jqx-filter-nested-operator')) {
                prepareContextMenu(target, that._groupOperationDescriptions, that._editedItem.data);
            } else {
                var filterBuilderItem = target.closest('.filter-builder-item');

                filterBuilderItem.removeAttribute('placeholder');

                that._openEditor(target);
            }
        }

        /**
        * Handles context menu position
        * @param {HTML element} target (optional) - the component that is clicked
        */

    }, {
        key: '_handleContextMenu',
        value: function _handleContextMenu(target) {
            var that = this;

            if (that._selectedElement === target && that.$.conditionsMenu.opened) {
                that.$.conditionsMenu.close();
                return;
            }

            that._closeEditor();

            if (that.disableContextMenu) {
                that._selectedElement = target;
                return;
            }

            var targetCoordinates = target.getBoundingClientRect(),
                elementCoordinates = that.getBoundingClientRect(),
                x = targetCoordinates.left + that.$.contentContainer.scrollLeft - elementCoordinates.left,
                y = targetCoordinates.top + that.$.contentContainer.scrollTop - elementCoordinates.top + targetCoordinates.height;

            that.$.conditionsMenu.dataSource = that._contextMenuOptions;
            that.$.conditionsMenu.open(x, y + 3);
            that._selectedElement = target;
            that.$.scrollableContainer.refresh();
        }

        /**
        * Open an editor at the position of the current editted condition value container
        * @param {Html element} target - the clicked HTML element. Used to be localized element's data and set into editor
        */

    }, {
        key: '_openEditor',
        value: function _openEditor(target) {
            var that = this,
                id = target && target.closest('.jqx-filter-group-condition') ? target.closest('.jqx-filter-group-condition').getAttribute('node-id') : null,
                valueContainer = target.closest('.filter-builder-item'),
                editedItem = that._getItemById(id);
            var field = '';

            if (editedItem.data[0] !== undefined) {
                field = editedItem.data[0];
            } else if (that._fields.length) {
                field = that._fields[0].value;
            }

            var fieldData = that._getFieldByFieldName(field),
                value = '',
                dataValue = void 0;
            //filterItemIndex = target.contains('jqx-filter-field-name') ? 0 : (target.contains('jqx-filter-operation') ? 1 : 2);
            //value = editedItem ? editedItem.data[filterItemIndex] : '' || '';

            var filterItemIndex = void 0;

            if (valueContainer.classList.contains('jqx-filter-field-name')) {
                filterItemIndex = 0;

                if (!that._fields) {
                    that._mapFieldsToMenu();
                }

                fieldData.lookup = { dataSource: that._fields.slice(), readonly: false };
                value = fieldData.label || '';
                dataValue = fieldData.value;
            } else if (valueContainer.classList.contains('jqx-filter-operation')) {
                filterItemIndex = 1;

                var filteredOptions = that._getFilterOperations(fieldData);

                fieldData.lookup = { dataSource: filteredOptions, readonly: true };

                var correspondingOption = filteredOptions.find(function (option) {
                    return option.value === editedItem.data[filterItemIndex];
                }) || filteredOptions[0];

                value = correspondingOption.label;
                dataValue = correspondingOption.value;
            } else {
                filterItemIndex = 2;
                value = editedItem.data[filterItemIndex];

                if (value === undefined) {
                    value = '';
                }
            }

            if (that._editorIsOpen) {
                that._closeEditor();
            }

            valueContainer.setAttribute('edited', '');
            that._editedItem = editedItem;

            var fields = that._fields,
                fieldItemsMatch = fields.filter(function (item) {
                return item.value === field;
            }),
                foundCustomConditions = that._filterOperationDescriptions.filter(function (item) {
                return item.value === editedItem.data[1] && item.custom;
            }),
                fieldItem = fieldItemsMatch.length > 0 ? fieldItemsMatch[0] : null,
                fieldType = fieldData.lookup && fieldData.lookup.dataSource ? 'lookup' : fieldItem.dataType;

            if (filterItemIndex !== 2 || foundCustomConditions.length === 0 || !foundCustomConditions[0].editorTemplate) {
                that._openEditorByFieldType(fieldType, value, fieldData, dataValue);
            } else {
                that._selectedCustomCondition = foundCustomConditions[0];
                that._openCustomEditor(fieldType, value, fieldData);
            }

            setTimeout(function () {
                that._editor.focus();

                if (that._editor === that.$.numericTextBoxEditor || that._editor === that.$.textBoxEditor) {
                    that.$.scrollableContainer.scrollLeft = that.$.scrollableContainer.$.scrollViewerContainer.scrollLeft;
                    that.$.scrollableContainer.scrollTop = that.$.scrollableContainer.$.scrollViewerContainer.oldTop;
                    that.$.scrollableContainer.$.scrollViewerContainer.scrollLeft = 0;
                    that.$.scrollableContainer.$.scrollViewerContainer.scrollTop = 0;
                    that._editor.$.input.selectionStart = that._editor.$.input.selectionEnd = that._editor.$.input.value.length;
                }

                that.$.scrollableContainer.refresh();
            }, 0);

            that._editor.classList.remove('jqx-hidden');
            that._editorIsOpen = true;
            that.$.editorsContainer.setAttribute('open', '');
            valueContainer.appendChild(that.$.editorsContainer);
            that.$.scrollableContainer.refresh();

            if (fieldData.lookup && fieldData.lookup.readonly) {
                that._editor.open();
            }
        }

        /**
         * Returns filter operations by field.
         */

    }, {
        key: '_getFilterOperations',
        value: function _getFilterOperations(fieldData) {
            var that = this;
            var filteredOptions = that._filterOperationDescriptions.slice();

            if (fieldData.filterOperations) {
                filteredOptions = that._filterOperationDescriptions.filter(function (item) {
                    return fieldData.filterOperations.indexOf(item.value) > -1;
                });
            } else {
                var filterOperationsByType = void 0;

                switch (fieldData.dataType) {
                    case 'date':
                    case 'datetime':
                    case 'number':
                        filterOperationsByType = ['=', '<>', '<', '>', '<=', '>=', 'isblank', 'isnotblank'];
                        break;
                    case 'boolean':
                        filterOperationsByType = ['=', '<>', 'isblank', 'isnotblank'];
                        break;
                    case 'object':
                        filterOperationsByType = ['isblank', 'isnotblank'];
                        break;
                    case 'string':
                        filterOperationsByType = ['contains', 'notcontains', 'startswith', 'endswith', '=', '<>', 'isblank', 'isnotblank'];
                        break;
                    default:
                        filterOperationsByType = ['contains', 'notcontains', 'startswith', 'endswith', '=', '<>', '<', '>', '<=', '>=', 'isblank', 'isnotblank'];
                        break;
                }

                filteredOptions = that._filterOperationDescriptions.filter(function (item) {
                    return filterOperationsByType.indexOf(item.value) > -1;
                });
            }

            if (that.showIcons) {
                filteredOptions.map(function (item) {
                    return item.icon = that.icons[item.value];
                });
            }

            return filteredOptions;
        }

        /**
         * Open custom editor
         */

    }, {
        key: '_openCustomEditor',
        value: function _openCustomEditor(fieldType, value, fieldData) {
            var that = this,
                editorStructure = that.customOperations[that._selectedCustomCondition.index].editorTemplate(fieldType, value, fieldData);

            that.$.customEditor.innerHTML = '';

            if (editorStructure) {
                that.$.customEditor.appendChild(editorStructure);
            }

            that._editor = that.$.customEditor;
        }

        /**
        * Open specific editor, regarding field type settings and set it's value
        * @param {String} fieldType - type of the edited field, each type has different handling
        * @param {Any} value - the value, that must be set to the editor
        */

    }, {
        key: '_openEditorByFieldType',
        value: function _openEditorByFieldType(fieldType, value, fieldData, dataValue) {
            var that = this;

            switch (fieldType) {
                case 'boolean':
                    that._initializeEditor('checkBox');
                    that._editor.checked = !!value;
                    break;
                case 'date':
                case 'datetime':
                    that._initializeEditor('dateTimePicker');
                    that._editor.formatString = fieldType === 'date' ? that.formatStringDate : that.formatStringDateTime;
                    that._editor.value = value;
                    break;
                case 'number':
                    that._initializeEditor('numericTextBox');
                    that._editor.value = value ? value : 0;
                    break;
                default:
                    that._initializeEditor('input');

                    that._editor.dropDownWidth = 'auto';

                    if (fieldType === 'lookup') {
                        that._editor.dataSource = fieldData.lookup.dataSource;
                        that._editor.dropDownAppendTo = that.$.container;
                        that._editor.dropDownButtonPosition = 'right';
                        that._editor.readonly = !!fieldData.lookup.readonly;
                    } else {
                        that._editor.dataSource = [];
                        that._editor.dropDownButtonPosition = 'none';
                        that._editor.readonly = false;
                    }

                    if (fieldType === 'object') {
                        that._editor.value = JSON.stringify(value ? value : {});
                    } else {
                        if (value === '' && that._editor.readonly) {
                            value = fieldData.lookup.dataSource[0].label || '';
                        }

                        that._editor.value = value + '';

                        if (dataValue) {
                            that._editor.$.input.dataValue = dataValue;
                        }
                    }

                    break;
            }
        }

        /**
        * Initializes Editors instance if it's not initialized.
        */

    }, {
        key: '_initializeEditor',
        value: function _initializeEditor(editor) {
            var that = this;

            if (that.$[editor + 'Editor']) {
                that._editor = that.$[editor + 'Editor'];
                return;
            }

            var editorElement = document.createElement('jqx-' + JQX.Utilities.Core.toDash(editor));

            if (editor === 'numericTextBox') {
                editorElement.spinButtons = true;
                editorElement.inputFormat = 'floatingPoint';
            } else if (editor === 'dateTimePicker') {
                editorElement.dropDownAppendTo = that.$.container;
                editorElement.calendarButton = true;
                editorElement.dropDownDisplayMode = 'auto';
                editorElement.enableMouseWheelAction = true;
                editorElement.locale = that.locale;

                if (!editorElement.messages[that.locale]) {
                    editorElement.messages[that.locale] = {};
                }

                editorElement.messages[that.locale].dateTabLabel = that.localize('dateTabLabel');
                editorElement.messages[that.locale].timeTabLabel = that.localize('timeTabLabel');
            }

            editorElement.theme = that.theme;
            editorElement.animation = that.animation;
            editorElement.$.addClass('jqx-hidden underlined');
            that.$.editorsContainer.appendChild(editorElement);
            that._editor = that.$[editor + 'Editor'] = editorElement;
        }

        /**
         * Gets the value without invalid or incomplete conditions.
         */

    }, {
        key: '_getValidValue',
        value: function _getValidValue() {
            var that = this,
                value = that.properties.value.value,
                result = [];
            var emptyGroup = false;

            value.forEach(function (group) {
                if (Array.isArray(group)) {
                    var groupIsValid = false,
                        emptyCondition = false;
                    var groupContent = [];

                    group.forEach(function (condition) {
                        if (Array.isArray(condition)) {
                            var _field = condition[0],
                                operation = condition[1],
                                val = condition[2];

                            if (_field === undefined || operation === undefined) {
                                emptyCondition = true;
                                return;
                            }

                            if (val !== undefined || operation === 'isblank' || operation === 'isnotblank') {
                                groupIsValid = true;
                                groupContent.push(condition);
                                return;
                            }

                            var operationInfo = that._filterOperationDescriptions.find(function (currentOperation) {
                                return currentOperation.value === operation;
                            });

                            if (operationInfo.custom && operationInfo.hideValue) {
                                groupIsValid = true;
                                groupContent.push(condition);
                            } else {
                                emptyCondition = true;
                            }
                        } else if (emptyCondition) {
                            emptyCondition = false;
                        } else {
                            groupContent.push(condition);
                        }
                    });

                    if (groupIsValid) {
                        if (typeof groupContent[groupContent.length - 1] === 'string') {
                            groupContent.pop();
                        }

                        result.push(groupContent);
                    } else {
                        emptyGroup = true;
                    }
                } else if (emptyGroup) {
                    emptyGroup = false;
                } else {
                    result.push(group);
                }
            });

            if (typeof result[result.length - 1] === 'string') {
                result.pop();
            }

            return result;
        }
    }], [{
        key: 'properties',

        /**
         * Element's properties
         */
        get: function get() {
            return {
                'allowDrag': {
                    value: false,
                    type: 'boolean'
                },
                'applyMode': {
                    allowValues: ['immediately', 'change'],
                    value: 'change',
                    type: 'string'
                },
                'customOperations': {
                    value: [],
                    type: 'array',
                    reflectToAttribute: false
                },
                //'disableContextMenu': {
                //    value: false,
                //    type: 'boolean'
                //},
                'fields': {
                    value: null,
                    type: 'array?',
                    reflectToAttribute: false
                },
                'fieldsMode': {
                    value: 'dynamic',
                    allowedValues: ['dynamic', 'static'],
                    type: 'string'
                },
                'formatStringDate': {
                    value: 'dd-MMM-yy',
                    type: 'string'
                },
                'formatStringDateTime': {
                    value: 'dd-MMM-yy HH:mm:ss',
                    type: 'string'
                },
                'getDynamicField': {
                    value: null,
                    type: 'function?'
                },
                'icons': {
                    value: {
                        '=': 'equals',
                        '<>': 'notequals',
                        '>': 'greaterthan',
                        '>=': 'greaterthanorequal',
                        '<': 'lessthan',
                        '<=': 'lessthanorequal',
                        'startswith': 'startswith',
                        'endswith': 'endswith',
                        'contains': 'contains',
                        'notcontains': 'notcontains',
                        'isblank': 'isblank',
                        'isnotblank': 'isnotblank'
                    },
                    type: 'object',
                    reflectToAttribute: false
                },
                //'maxConditions': {
                //    value: null,
                //    type: 'number?'
                //},
                //'maxConditionsPerGroup': {
                //    value: null,
                //    type: 'number?'
                //},
                'messages': {
                    value: {
                        'en': {
                            'add': 'Add',
                            'addCondition': 'Add Condition',
                            'addGroup': 'Add Group',
                            'and': 'And',
                            'notand': 'Not And',
                            'or': 'Or',
                            'notor': 'Not Or',
                            '=': 'Equals',
                            '<>': 'Does not equal',
                            '>': 'Greater than',
                            '>=': 'Greater than or equal to',
                            '<': 'Less than',
                            '<=': 'Less than or equal to',
                            'startswith': 'Starts with',
                            'endswith': 'Ends with',
                            'contains': 'Contains',
                            'notcontains': 'Does not contain',
                            'isblank': 'Is blank',
                            'isnotblank': 'Is not blank',
                            'wrongParentGroupIndex': '{{elementType}}: Wrong parent group index in "{{method}}" method.',
                            'wrongElementNode': '{{elementType}}: Incorect node / node Id in "{{method}}" method.',
                            'invalidDataStructure': '{{elementType}}: Used invalid data structure in updateCondition/updateGroup method.',
                            'dateTabLabel': 'DATE',
                            'timeTabLabel': 'TIME',
                            'queryLabel': 'Query'
                        }
                    },
                    type: 'object',
                    extend: true
                },
                'operatorPlaceholder': {
                    value: 'Operator',
                    type: 'string'
                },
                'propertyPlaceholder': {
                    value: 'Property',
                    type: 'string'
                },
                //'requiredFields': {
                //    value: null,
                //    type: 'array?',
                //    reflectToAttribute: false
                //},
                'showIcons': {
                    value: false,
                    type: 'boolean'
                },
                'value': {
                    value: [],
                    type: 'array?',
                    reflectToAttribute: false
                },
                'valueFormatFunction': {
                    value: null,
                    type: 'function?',
                    reflectToAttribute: false
                },
                'valuePlaceholder': {
                    value: 'Value',
                    type: 'string'
                }
            };
        }

        /**
        *  Required files
        */

    }, {
        key: 'requires',
        get: function get() {
            var requiredFiles = {
                'JQX.Button': 'jqxbutton.js',
                'JQX.Calendar': 'jqxcalendar.js',
                'JQX.CheckBox': 'jqxcheckbox.js',
                'JQX.DateTimePicker': 'jqxdatetimepicker.js',
                'JQX.DropDownList': 'jqxdropdownlist.js',
                'JQX.Input': 'jqxinput.js',
                'JQX.ListBox': 'jqxlistbox.js',
                'JQX.Menu': 'jqxmenu.js',
                'JQX.NumericTextBox': 'jqxnumerictextbox.js',
                'JQX.ScrollBar': 'jqxscrollbar.js',
                'JQX.TimePicker': 'jqxtimepicker.js',
                'JQX.Tooltip': 'jqxtooltip.js',
                'JQX.Utilities.BigNumber': 'jqxmath.js',
                'JQX.Utilities.DateTime': 'jqxdate.js',
                'JQX.Utilities.Draw': 'jqxdraw.js',
                'JQX.Utilities.NumericProcessor': 'jqxnumeric.js'
            };

            if (!window.NIComplex) {
                requiredFiles['JQX.Utilities.Complex'] = 'jqxcomplex.js';
            }

            return requiredFiles;
        }

        /**
         * Element's event listeners.
         */

    }, {
        key: 'listeners',
        get: function get() {
            return {
                'down': '_downHandler',
                'move': '_moveHandler',
                'resize': '_resizeHandler',
                'editorsContainer.keydown': '_innerContainerKeydownHandler',
                'conditionsMenu.closing': '_menuClosingHandler',
                'conditionsMenu.itemClick': '_menuItemClickHandler',
                'contentContainer.change': '_contentContainerChangeHandler',
                'document.down': '_documentDownHandler',
                'document.move': '_documentMoveHandler',
                'document.up': '_documentUpHandler'
            };
        }
    }]);
    return QueryBuilder;
}(JQX.BaseElement));