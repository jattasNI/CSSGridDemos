'use strict';

JQX.Utilities.Assign('Grid.Row', function () {
    function Row(row) {
        babelHelpers.classCallCheck(this, Row);

        var that = this;

        if (!row) {
            row = {};
        }

        Object.assign(that, row);

        if (!row) {
            return;
        }

        if (that.data === undefined) {
            var itemObject = { $: {} };

            if (row.grid && row.grid.dataSource) {
                var dataSource = row.grid.dataSource;

                for (var j = 0; j < dataSource.dataFields.length; j++) {
                    var dataField = dataSource.dataFields ? dataSource.dataFields[j] : {};

                    itemObject[dataField.name] = '';
                }
            }

            if (row.id) {
                itemObject.$.id = row.id;
            }
            that.data = itemObject;
        }

        if (undefined === row.$ || row.$ && undefined === row.$.id) {
            if (row.data) {

                if (row.data.$ && row.data.$.id) {
                    that.id = row.data.$.id;
                }

                if (!that.id) {
                    that.id = row.index;
                }
            } else if (that.id === undefined) {
                that.id = row.index;
            }

            if (that.id === undefined) {
                that.id = JQX.Utilities.Core.createGUID();
            }
        }

        if (undefined === that.detailHeight) {
            if (that.grid) {
                that.detailHeight = that.grid.rowDetail.height;
            } else {
                that.detailHeight = 200;
            }
        }

        if (undefined === that.height && that.grid) {
            that.height = that.grid.rowMinHeight;

            if (that.grid.__autoRowHeight) {
                that.height = that.grid.__autoRowHeight;
            }

            if (that.grid.rowHeight) {
                that.height = that.grid.rowHeight;
            }
        }

        if (undefined === that.cellHeight) {
            that.cellHeight = that.height;
        }

        if (undefined === that.showDetail) {
            that.showDetail = false;
        }

        if (undefined === that.index) {
            that.index = -1;
        }

        if (undefined === that.visibleIndex) {
            that.visibleIndex = -1;
        }

        if (undefined === that.freeze) {
            that.freeze = false;
        }

        if (undefined === that.height) {
            that.height = null;
        }

        if (undefined === that.minHeight) {
            that.minHeight = 25;
        }

        if (undefined === that.selected) {
            that.selected = false;
            if (that.grid && that.grid._selection.rows[that.id]) {
                that.selected = true;
            }
        } else if (that.selected && that.grid) {
            that.grid._selection.rows[that.id] = true;
        }

        if (undefined === that.enabled) {
            that.enabled = true;
        }

        if (undefined === that.visible) {
            that.visible = true;
        }

        if (undefined === that.filtered) {
            that.filtered = true;
        }

        if (undefined === that.allowResize) {
            that.allowResize = true;
        }

        if (undefined === that.allowToggle) {
            that.allowToggle = true;
        }

        if (undefined === that.allowSelect) {
            that.allowSelect = true;
        }

        if (undefined === that.expanded) {
            if (row.data && row.data.expanded !== undefined) {
                that.expanded = row.data.expanded;
            } else {
                that.expanded = false;
            }
        }

        that.headerCell = null;
        that._cells = [];
    }

    babelHelpers.createClass(Row, [{
        key: 'createElement',
        value: function createElement() {
            var that = this;
            var element = document.createElement('jqx-grid-row');

            that.element = element;

            element._initialize(that);

            return element;
        }
    }, {
        key: 'getCell',
        value: function getCell(column) {
            var that = this;
            var grid = that.grid;

            if (typeof column === 'string' || typeof column === 'number') {
                column = grid.columnByDataField[column];
            }

            if (!column) {
                return null;
            }

            if (!that['column_' + column.dataField]) {
                var cell = new JQX.Grid.Cell(that, column, grid);

                that['column_' + column.dataField] = cell;

                return cell;
            } else {
                var _cell = that['column_' + column.dataField];

                _cell.column = column;

                return _cell;
            }
        }
    }, {
        key: 'createCells',
        value: function createCells() {
            var that = this;
            var grid = that.grid;

            that._cells = [];

            for (var i = 0; i < grid.viewColumns.length; i++) {
                var column = grid.viewColumns[i];

                if (column.autoGenerated) {
                    continue;
                }

                if (!that['column_' + column.dataField]) {
                    var cell = new JQX.Grid.Cell(that, column, grid);

                    that['column_' + column.dataField] = cell;
                    that._cells.push(cell);
                } else {
                    var _cell2 = that['column_' + column.dataField];

                    that._cells.push(_cell2);
                }
            }
        }
    }, {
        key: 'toggle',
        value: function toggle() {
            var that = this;

            that.element._handleExpandCollapse(!that.expanded);
        }
    }, {
        key: 'expand',
        value: function expand() {
            var that = this;

            that.element._handleExpandCollapse(true);
        }
    }, {
        key: 'collapse',
        value: function collapse() {
            var that = this;

            that.element._handleExpandCollapse(false);
        }
    }, {
        key: 'render',
        value: function render() {
            var that = this;

            that.element.row = that;

            that.element._render();
        }
    }, {
        key: 'setProperty',
        value: function setProperty(propertyName, value) {
            var that = this;
            var oldValue = that.getProperty(propertyName);

            that[propertyName] = value;

            if (oldValue !== value) {
                that.canNotify = false;
                that.propertyChanged(propertyName, oldValue, value);
                that.canNotify = true;
            }
        }
    }, {
        key: 'getProperty',
        value: function getProperty(propertyName) {
            var that = this;

            if (propertyName === 'selected') {
                var selected = false;

                if (that.grid._selection.cells['row' + that.id]) {
                    selected = null;
                }

                if (that.grid && that.grid._selection.rows[that.id]) {
                    selected = true;
                }

                that.grid.rows.canNotify = false;
                that[propertyName] = selected;
                that.grid.rows.canNotify = true;

                return selected;
            }

            return that[propertyName];
        }
    }, {
        key: 'propertyChanged',
        value: function propertyChanged(propertyName, oldValue, newValue) {
            var that = this;

            if (propertyName === 'showDetail') {
                that.height = 0;

                var detail = that.element.rowDetail;

                if (that.grid.appearance.allowRowDetailToggleAnimation) {
                    var toggleAnimation = function toggleAnimation(event) {
                        var row = that.grid._toggledRow;

                        if (row && (event.propertyName === 'transform' || event.propertyName === 'height')) {
                            _endAnimation(row);
                        }
                    };

                    var _endAnimation = function _endAnimation(row) {
                        row.grid.$.content.style.transition = '';
                        row.element.rowDetail.removeEventListener('transitionend', toggleAnimation);
                        row.element.rowDetail.removeEventListener('transitioncancel', toggleAnimation);
                        row.grid._toggledRow = null;
                        row.element.removeAttribute('has-detail');

                        that.grid._refresh();
                    };

                    that.grid._toggledRow = that;

                    detail.addEventListener('transitionend', toggleAnimation);
                    detail.addEventListener('transitioncancel', toggleAnimation);

                    if (newValue) {
                        that.element.setAttribute('has-detail', '');
                        that.element.toggleDetailButton.removeAttribute('toggled');
                        that.element.toggleDetailButton.classList.remove('jqx-animate');
                        setTimeout(function () {
                            that.element.toggleDetailButton.classList.add('jqx-animate');
                            that.element.toggleDetailButton.setAttribute('toggled', '');
                            that.element.setAttribute('show-detail', '');
                        });

                        that.element.style.height = that.cellHeight + that.detailHeight + 'px';

                        if (that.grid._autoHeight) {
                            that.grid.$.content.style.transition = '0.25s height ease-in-out';
                            that.grid.$.content.style.height = parseInt(that.grid.$.content.style.height) + that.detailHeight + 'px';
                            that.grid.$.scrollView.style.height = 'auto';
                        }

                        detail.classList.remove('jqx-hidden');
                        if (detail.style.height !== that.detailHeight + 'px') {
                            detail.style.height = that.detailHeight + 'px';
                        }

                        if (detail.style.lineHeight !== that.detailHeight + 'px') {
                            detail.style.lineHeight = that.detailHeight + 'px';
                        }

                        if (detail.style.top !== that.cellHeight + 'px') {
                            detail.style.top = that.cellHeight + 'px';
                        }
                    } else {
                        that.element.setAttribute('has-detail', '');
                        that.element.toggleDetailButton.removeAttribute('toggled');
                        if (that.grid._autoHeight) {
                            that.grid.$.content.style.transition = '0.25s height ease-in-out';
                            that.grid.$.content.style.height = parseInt(that.grid.$.content.style.height) - that.detailHeight + 'px';
                            that.grid.$.scrollView.style.height = 'auto';
                        }

                        setTimeout(function () {
                            that.element.style.height = that.cellHeight + 'px';
                            that.element.removeAttribute('show-detail');
                        });
                    }
                } else {
                    that.grid._refresh();
                }
            }

            if (propertyName === 'selected') {

                if (newValue) {
                    that.grid._selection.rows[that.id] = true;
                } else if (newValue === false) {
                    if (that.grid._selection.rows[that.id]) {
                        delete that.grid._selection.rows[that.id];
                    }
                }

                if (!that.element) {
                    return;
                }

                that.grid._recycle();
            }

            if (propertyName === 'visible') {
                that.grid.refresh();
            }

            if (propertyName === 'expanded') {
                if (!that.expandHeight) {
                    that.grid.refresh();
                }
            }
            if (propertyName === 'height') {
                if (!that.expandHeight) {
                    if (that.cellHeight !== newValue) {
                        that.cellHeight = newValue;
                        that.grid.refresh();
                    }
                }
            }

            if (propertyName === 'freeze') {
                if (newValue === true || newValue === 'near') {
                    that.grid._frozenNearRows.push(that);
                } else if (newValue === 'far') {
                    that.grid._frozenFarRows.push(that);
                } else {
                    that.grid._frozenNearRows.splice(that.grid._frozenNearRows.indexOf(that), 1);
                    that.grid._frozenFarRows.splice(that.grid._frozenFarRows.indexOf(that), 1);
                }

                that.grid._recycle();
            }
        }
    }, {
        key: 'properties',
        get: function get() {
            return ['allowToggle', 'allowResize', 'allowSelect', 'canNotify', 'cells', 'detailHeight', 'detailTemplate', 'cellHeight', 'expandHeight', 'data', 'enabled', 'expanded', 'filtered', 'freeze', 'grid', 'headerCell', 'height', 'index', 'id', 'minHeight', 'unbound', 'selected', 'showDetail', 'visible', 'visibleIndex'];
        }
    }, {
        key: 'cells',
        get: function get() {
            var that = this;

            if (that._cells && that.grid && that._cells.length === that.grid.columns.length) {
                return that._cells;
            }

            that.createCells();

            return that._cells;
        }
    }, {
        key: 'viewCells',
        get: function get() {
            var that = this;
            var cells = [];

            for (var i = 0; i < that.grid.viewColumns.length; i++) {
                var column = that.grid.viewColumns[i];

                if (!that['column_' + column.dataField]) {
                    var cell = new JQX.Grid.Cell(that, column, that.grid);

                    that['column_' + column.dataField] = cell;

                    cells.push(cell);
                } else {
                    var _cell3 = that['column_' + column.dataField];

                    cells.push(_cell3);
                }
            }

            that._viewCells = cells;

            return cells;
        }
    }]);
    return Row;
}());

JQX('jqx-grid-row', function (_JQX$BaseElement) {
    babelHelpers.inherits(Row, _JQX$BaseElement);

    function Row() {
        babelHelpers.classCallCheck(this, Row);
        return babelHelpers.possibleConstructorReturn(this, (Row.__proto__ || Object.getPrototypeOf(Row)).apply(this, arguments));
    }

    babelHelpers.createClass(Row, [{
        key: 'addThemeClass',
        value: function addThemeClass() {}
    }, {
        key: 'addDefaultClass',
        value: function addDefaultClass() {}
    }, {
        key: '_initialize',
        value: function _initialize(row) {
            var that = this;
            var grid = row.grid;
            var columnElements = grid._columnElements;
            var frozenNearColumns = grid._frozenNearColumns;
            var frozenFarColumns = grid._frozenFarColumns;

            var cellsContainerElement = document.createElement('div');
            var cellsNearContainerElement = document.createElement('div');
            var cellsFarContainerElement = document.createElement('div');
            var fragment = document.createDocumentFragment();
            var nearFragment = document.createDocumentFragment();
            var farFragment = document.createDocumentFragment();

            cellsNearContainerElement.classList.add('near', 'jqx-grid-cell-container');
            cellsContainerElement.classList.add('center', 'jqx-grid-cell-container');
            cellsFarContainerElement.classList.add('far', 'jqx-grid-cell-container');

            that.row = row;
            row.createCells();

            that.addEventListener('mouseenter', function () {
                if (grid.isScrolling || grid.editing.isEditing) {
                    return;
                }

                if (that.commandBar) {
                    that.commandBar.parentNode.removeChild(that.commandBar);
                    that.commandBar = null;
                }

                if (grid.editing.enabled && grid.editing.commandColumn.visible && grid.editing.commandColumn.inline && !that.commandBar) {
                    var commandBar = document.createElement('div');
                    var template = grid._getCommandColumnCommandsTemplate();

                    commandBar.classList.add('jqx-grid-command-bar');
                    commandBar.innerHTML = template;

                    cellsContainerElement.appendChild(commandBar);

                    requestAnimationFrame(function () {
                        commandBar.classList.add('show');
                    });

                    grid._updateCommandColumnCommandsVisibility(commandBar, that.row);

                    commandBar.onmousedown = function (event) {
                        var elements = event.path;
                        var commandItem = null;

                        for (var i = 0; i < elements.length; i++) {
                            if (elements[i].classList.contains('jqx-grid-command-item')) {
                                commandItem = elements[i];
                                break;
                            }
                        }

                        if (!commandItem) {
                            //    commandItem = that.querySelector('.jqx-grid-command-item');
                        }

                        if (commandItem) {
                            var command = commandItem.getAttribute('command');

                            grid._applyCommand(command, [that.row]);

                            if (that.commandBar) {
                                that.commandBar.parentNode.removeChild(that.commandBar);
                                that.commandBar = null;
                            }
                            that.removeAttribute('hover');

                            event.stopPropagation();
                            event.preventDefault();
                        }
                    };

                    that.commandBar = commandBar;
                }
            });

            that.addEventListener('mouseleave', function () {
                if (grid.isScrolling || grid.editing.isEditing) {
                    return;
                }

                if (that.commandBar) {
                    that.commandBar.classList.remove('show');
                    that.commandBar.addEventListener('transitionend', function () {
                        if (that.commandBar) {
                            that.commandBar.parentNode.removeChild(that.commandBar);
                            that.commandBar = null;
                        }
                    });

                    that.commandBar.addEventListener('transitioncancel', function () {
                        if (that.commandBar) {
                            that.commandBar.parentNode.removeChild(that.commandBar);
                            that.commandBar = null;
                        }
                    });
                }
            });

            for (var i = 0; i < frozenNearColumns.length; i++) {
                var column = frozenNearColumns[i];
                var cell = row.getCell(column);
                var cellElement = cell.createElement();

                nearFragment.appendChild(cellElement);
            }

            for (var _i = 0; _i < frozenFarColumns.length; _i++) {
                var _column = frozenFarColumns[_i];
                var _cell4 = row.getCell(_column);
                var _cellElement = _cell4.createElement();

                farFragment.appendChild(_cellElement);
            }

            for (var _i2 = 0; _i2 < columnElements.length; _i2++) {
                var columnElement = columnElements[_i2];
                var _column2 = columnElement.column;

                if (!columnElement.parentNode || !_column2) {
                    break;
                }

                var _cell5 = row.getCell(_column2);
                var _cellElement2 = _cell5.createElement();

                if (_column2 && _column2._treeColumn) {
                    that.toggleButton = _cellElement2.toggleButton;
                }

                fragment.appendChild(_cellElement2);
            }

            cellsNearContainerElement.appendChild(nearFragment);
            cellsContainerElement.appendChild(fragment);
            cellsFarContainerElement.appendChild(farFragment);

            var rowDetailElement = document.createElement('div');
            rowDetailElement.classList.add('jqx-grid-row-detail', 'jqx-hidden', 'jqx-animate');

            var rowContainerElement = document.createElement('div');
            rowContainerElement.classList.add('jqx-grid-row-sub-container', 'jqx-hidden');

            if (grid._adaptiveLayout > 0) {
                cellsNearContainerElement.classList.add('jqx-visibility-hidden');
                cellsContainerElement.classList.add('jqx-visibility-hidden');
                cellsFarContainerElement.classList.add('jqx-visibility-hidden');
            }

            that._rowFragment = document.createDocumentFragment();

            that._rowFragment.appendChild(cellsNearContainerElement);
            that._rowFragment.appendChild(cellsContainerElement);
            that._rowFragment.appendChild(cellsFarContainerElement);
            that._rowFragment.appendChild(rowDetailElement);
            that._rowFragment.appendChild(rowContainerElement);

            that.appendChild(that._rowFragment);

            that.cellsNearContainerElement = that.children[0];
            that.cellsContainerElement = that.children[1];
            that.cellsFarContainerElement = that.children[2];
            that.rowDetail = that.children[3];
            that.rowContainer = that.children[4];

            if (grid.rowHeight && grid.rowHeight !== 'auto') {
                that.style.height = grid.rowHeight + 'px';
            }
        }
    }, {
        key: '_handleExpandCollapse',
        value: function _handleExpandCollapse(expanded) {
            var that = this;
            var row = that.row;
            var grid = row.grid;

            if (!row.allowToggle) {
                return null;
            }

            grid._toggledRow = row;

            var setRowHeight = function setRowHeight() {
                var row = grid._toggledRow;

                grid._refresh();
                grid._refreshRowHierarchy();

                var expandHeight = 0;

                for (var i = 0; i < grid.rowHierarchy.length; i++) {
                    var _row = grid.rowHierarchy[i];

                    var parent = _row.parent;

                    while (parent) {
                        if (parent.id === grid._toggledRow.id) {
                            expandHeight += _row.height;
                        }

                        parent = parent.parent;
                    }
                }

                var value = grid._scrollView.scrollTop;
                var remainingHeight = grid._contentHeight - (row.cellHeight + row.top - value);

                row.expandHeight = Math.min(remainingHeight, expandHeight);
                row.height = row.cellHeight + row.expandHeight;
            };

            var requestNewData = grid.dataSource.virtualDataSourceOnExpand && expanded && row.data._loaded !== true;

            if (!grid.appearance.allowRowToggleAnimation || requestNewData) {
                grid.rows.canNotify = false;
                row.expanded = expanded;
                grid.rows.canNotify = true;

                if (requestNewData) {
                    row.data._loaded = true;
                    row.data.expanded = expanded;
                    grid._virtualDataRequest('expand');
                }

                grid._toggledRow = null;
                grid._refresh();

                if (requestNewData && grid.appearance.allowRowToggleAnimation) {
                    that.toggleButton.removeAttribute('toggled');
                    that.toggleButton.classList.remove('jqx-animate');
                    setTimeout(function () {
                        that.toggleButton.classList.add('jqx-animate');
                        that.toggleButton.setAttribute('toggled', '');
                    }, 50);
                }
            } else {
                var _endAnimation2 = function _endAnimation2(row) {
                    row.height = row.cellHeight;
                    grid.$.content.style.transition = '';
                    row.element.rowContainer.innerHTML = '';
                    row.element.rowContainer.classList.add('jqx-hidden');
                    row.element.rowContainer.removeEventListener('transitionend', _toggleAnimation);
                    row.element.rowContainer.removeEventListener('transitioncancel', _toggleAnimation);
                    row.element.rowContainer.style.height = '';
                    row.element.rowContainer.style.transform = '';
                    row.element.rowContainer.style.transition = '';
                    row.element.rowContainer.classList.remove('jqx-animate');
                    row.element.toggleButton.classList.remove('jqx-animate');

                    grid._refresh();
                };

                var _toggleAnimation = function _toggleAnimation(event) {
                    var row = grid._toggledRow;

                    that._toggleTimer = null;
                    grid._toggledRow = null;
                    if (row && (event.propertyName === 'transform' || event.propertyName === 'height')) {
                        setTimeout(function () {
                            _endAnimation2(row);
                        }, 50);
                    }
                };

                if (that._toggleTimer) {
                    clearTimeout(that._toggleTimer);

                    var _row2 = grid._toggledRow;
                    grid._toggledRow = null;

                    _endAnimation2(_row2);
                }

                that._toggleTimer = setTimeout(function () {
                    var updateHeightAndRefresh = function updateHeightAndRefresh() {
                        setRowHeight();
                        grid._recycle(false);

                        that.style.overflow = 'hidden';
                        that.style.height = 'auto';
                        that.style.lineHeight = row.cellHeight + 'px';
                    };

                    if (expanded) {
                        row.expanded = true;

                        updateHeightAndRefresh();

                        that.rowContainer.style.transform = 'scaleY(0)';
                        that.rowContainer.style.height = '0px';
                        that.toggleButton.removeAttribute('toggled');

                        if (grid._autoHeight) {
                            grid.$.content.style.height = parseInt(grid.$.content.style.height) - row.expandHeight + 'px';
                        }

                        setTimeout(function () {
                            that.toggleButton.classList.add('jqx-animate');
                            that.toggleButton.setAttribute('toggled', '');
                            that.rowContainer.addEventListener('transitionend', _toggleAnimation);
                            that.rowContainer.addEventListener('transitioncancel', _toggleAnimation);

                            if (grid._autoHeight) {
                                grid.$.content.style.transition = '0.25s height ease-in-out';
                                grid.$.content.style.height = parseInt(grid.$.content.style.height) + row.expandHeight + 'px';
                            }

                            that.rowContainer.classList.add('jqx-animate');
                            that.rowContainer.style.height = row.expandHeight + 'px';
                            that.rowContainer.style.transform = 'scaleY(1)';
                        });
                    } else {
                        updateHeightAndRefresh();
                        row.expanded = false;

                        that.rowContainer.style.transform = 'scaleY(0)';
                        that.rowContainer.style.height = '0px';

                        if (grid._autoHeight) {
                            grid.$.content.style.height = parseInt(grid.$.content.style.height) - row.expandHeight + 'px';
                            grid.$.content.style.transition = '';
                            grid.$.content.style.height = parseInt(grid.$.content.style.height) + row.expandHeight + 'px';
                        }

                        that.rowContainer.style.height = row.expandHeight + 'px';
                        that.rowContainer.style.transform = 'scaleY(1)';
                        that.toggleButton.setAttribute('toggled', '');
                        that.toggleButton.classList.add('jqx-animate');

                        setTimeout(function () {
                            that.toggleButton.removeAttribute('toggled', '');

                            if (grid._autoHeight) {
                                grid.$.content.style.transition = '0.25s height ease-in-out';
                                grid.$.content.style.height = parseInt(grid.$.content.style.height) - row.expandHeight + 'px';
                            }

                            that.rowContainer.addEventListener('transitionend', _toggleAnimation);
                            that.rowContainer.addEventListener('transitioncancel', _toggleAnimation);
                            that.rowContainer.classList.add('jqx-animate');
                            //     that.rowContainer.style.transition = 'transform .25s ease-in-out, height .25s ease-in-out';
                            that.rowContainer.style.transform = 'scaleY(0)';
                            that.rowContainer.style.height = '0px';
                        }, 0);
                    }
                }, 50);
            }
        }
    }, {
        key: '_renderAddNewRow',
        value: function _renderAddNewRow() {
            var that = this;

            var row = that.row;
            var grid = row.grid;
            var element = row.element;
            var cell = new JQX.Grid.Cell(row, grid.columns[0], grid);

            if (row.visible) {
                element.classList.remove('jqx-hidden');
            } else {
                element.classList.add('jqx-hidden');
            }

            element.innerHTML = '<jqx-grid-cell><div>' + grid.localize('addNewRow') + '</div></jqx-grid-cell>';
            element.firstChild.firstChild.classList.add('align-center');
            element.firstChild.classList.add('jqx-grid-column-border-collapse');
            element.firstChild.setAttribute('freeze', '');
            element.firstChild.setAttribute('addNewRow', '');

            element.firstChild.style.width = '100%';
            if (grid._scrollView.vScrollBar.offsetWidth > 0) {
                element.firstChild.style.width = 'calc(100% - ' + (-1 + grid._scrollView.vScrollBar.offsetWidth) + 'px)';
            }

            element.firstChild.cell = cell;

            if (grid._rowGap > 0 && row !== grid.rows[grid.rows.length - 1]) {
                that.style.marginBottom = grid._rowGap + 'px';

                if (parseInt(that.style.height) - grid._rowGap !== row.height) {
                    that.style.height = row.height - grid._rowGap + 'px';
                }

                if (parseInt(that.style.lineHeight) - grid._rowGap !== row.height) {
                    that.style.lineHeight = row.height - grid._rowGap + 'px';
                }
            } else {
                that.style.marginBottom = '';
                if (parseInt(that.style.height) !== row.height) {
                    that.style.height = row.height + 'px';
                }

                if (parseInt(that.style.lineHeight) !== row.height) {
                    that.style.lineHeight = row.height + 'px';
                }
            }
        }
    }, {
        key: '_renderEmpty',
        value: function _renderEmpty() {
            var that = this;
            that.classList.add('jqx-hidden');
        }
    }, {
        key: '_renderAdaptive',
        value: function _renderAdaptive() {
            var that = this;
            var row = that.row;
            var grid = row.grid;

            var isChildRow = false;

            if (grid._toggledRow && grid.appearance.allowRowToggleAnimation && grid._toggledRow.expanded) {
                var parentRow = row.parent;

                while (parentRow) {
                    if (parentRow.id === grid._toggledRow.id) {
                        var adaptiveDetail = parentRow.element.adaptiveDetail;

                        that.classList.add('jqx-hidden');
                        //   that = row.createElement();
                        that.toggleButton.classList.add('jqx-hidden');

                        isChildRow = true;
                        adaptiveDetail.appendChild(that);
                        break;
                    }

                    parentRow = parentRow.parent;
                }
            }

            var detail = that.adaptiveDetail;

            that.row = row;
            that.visible = row.visible;

            if (that.style.height !== row.height + 'px') {
                that.style.height = row.height + 'px';
            }

            if (that.style.lineHeight !== row.height + 'px') {
                that.style.lineHeight = row.height + 'px';
            }

            detail.classList.remove('jqx-hidden');
            if (detail.style.height !== row.adaptiveHeight + 'px') {
                detail.style.height = row.adaptiveHeight + 'px';
            }

            if (detail.style.lineHeight !== row.adaptiveHeight + 'px') {
                detail.style.lineHeight = row.adaptiveHeight + 'px';
            }

            if (row.expandHeight) {
                if (row.expanded) {
                    var _maxRowHeight = Math.min(grid._clientSize.height, row.height + row.expandHeight) + 'px';

                    that.style.height = _maxRowHeight;
                    that.style.lineHeight = _maxRowHeight;
                }

                var maxRowHeight = Math.min(grid._clientSize.height, row.height + row.expandHeight) + 'px';

                detail.style.height = maxRowHeight;
                detail.style.lineHeight = maxRowHeight;
            } else {
                detail.innerHTML = '';
            }

            if (!isChildRow) {
                detail.style.top = '0px';
            } else {
                detail.style.top = row.cellHeight + 'px';
            }

            var fragment = document.createDocumentFragment();

            var top = 0;
            var left = 0;

            for (var i = 0; i < grid.viewColumns.length; i++) {
                var column = grid.viewColumns[i];

                if (column.autoGenerated) {
                    continue;
                }

                var header = column.createElement();
                var cell = row.getCell(column);
                var cellElement = cell.createElement();

                if (row.label !== undefined) {
                    fragment.appendChild(cellElement);

                    cellElement.classList.add('jqx-grid-adaptive-cell');
                    cellElement.style.height = row.cellHeight + 'px';
                    cellElement.style.lineHeight = row.cellHeight + 'px';
                    cellElement.style.left = '0px';
                    cellElement.style.top = '0px';
                    cell.render();
                    cellElement.style.width = '100%';

                    break;
                }

                cellElement.classList.add('jqx-grid-adaptive-cell');
                header.classList.add('jqx-grid-adaptive-column');

                column.render();
                that._renderCell(row, column, cellElement);

                var columnWidth = grid._adaptiveLayout === 1 ? '100%' : '50%';

                header.style.width = columnWidth;
                header.style.height = row.cellHeight + 'px';
                header.style.lineHeight = row.cellHeight + 'px';
                header.style.top = top + 'px';
                header.classList.remove('jqx-visibility-hidden');

                cellElement.style.width = columnWidth;
                cellElement.style.height = row.cellHeight + 'px';
                cellElement.style.lineHeight = row.cellHeight + 'px';
                cellElement.style.top = top + row.cellHeight + 'px';

                if (columnWidth === '100%') {
                    //          header.style.borderRightColor = 'transparent';
                    //            cellElement.style.borderRightColor = 'transparent';
                    header.style.left = '0px';
                    cellElement.style.left = '0px';
                } else {
                    if (left === 0) {
                        header.style.left = '0px';
                        cellElement.style.left = '0px';
                        left = '50%';
                    } else {
                        header.style.left = '50%';
                        cellElement.style.left = '50%';
                    }
                }

                if ((i + 1) % grid._adaptiveLayout === 0) {
                    left = 0;
                    top += 2 * row.cellHeight;
                }

                fragment.appendChild(header);
                fragment.appendChild(cellElement);
            }

            detail.appendChild(fragment);

            if (!that.visible) {
                that.classList.add('jqx-hidden');
            } else {
                that.classList.remove('jqx-hidden');
            }
        }
    }, {
        key: '_renderCell',
        value: function _renderCell(row, column, element) {
            if (!column) {
                element.classList.add('jqx-hidden');
                return;
            }

            var cell = row.getCell(column);

            if (cell.element !== element) {
                cell._styleChanged = true;
            }

            if (element.cell !== cell) {
                if (element.cell.background !== cell.background || element.cell.borderColor !== cell.borderColor || element.cell.color !== cell.color || element.cell.fontSize !== cell.fontSize || element.cell.fontFamily !== cell.fontFamily || element.cell.fontWeight !== cell.fontWeight || element.cell.fontStyle !== cell.fontStyle) {
                    cell._styleChanged = true;
                }
            }

            cell.element = element;
            element.cell = cell;

            cell.render();

            if (column && column.rowNumbersColumn) {
                row.header = element;
                element.setAttribute('data-id', row.id);
            }
        }
    }, {
        key: '_alternate',
        value: function _alternate() {
            var that = this;

            var row = that.row;
            var grid = row.grid;

            var start = grid.appearance.alternationStart;
            var end = grid.appearance.alternationEnd > 0 ? grid.appearance.alternationEnd : Infinity;

            if (grid.appearance.alternationCount <= 0) {
                return;
            }

            that.removeAttribute('alternation-index');

            if (row.visibleIndex >= start && row.visibleIndex <= end) {
                var alternationIndex = (row.visibleIndex - start) % grid.appearance.alternationCount;

                that.setAttribute('alternation-index', alternationIndex);
            }
        }
    }, {
        key: '_renderDetail',
        value: function _renderDetail(detail) {
            var that = this;
            var grid = that.row.grid;
            var row = that.row;
            var value = row.id;

            var template = row.detailTemplate || grid.rowDetail.template;

            if (template.startsWith('#')) {
                template = document.querySelector(template);
            }

            if (row._detail) {
                if (detail.firstChild === row._detail) {
                    if (grid.onRowDetailUpdated) {
                        grid.onRowDetailUpdated(row.index, row, detail.firstChild);
                    }

                    return;
                }

                if (detail.firstChild) {
                    detail.removeChild(detail.firstChild);
                }

                detail.appendChild(row._detail);

                if (grid.onRowDetailUpdated) {
                    grid.onRowDetailUpdated(row.index, row, detail.firstChild);
                }

                return;
            }

            if (template instanceof HTMLTemplateElement) {
                var templateContent = template.content.cloneNode(true).firstElementChild;

                value = value.toString();
                value = value.replace(/'/ig, '\\\'');
                value = value.replace(/"/ig, '\\"');

                var html = templateContent.outerHTML.replace(/{{value}}/ig, value).replace(/{{id}}/ig, row.id);

                if (html.indexOf('{{value=') >= 0) {
                    if (!value) {
                        html = html.replace(/{{value=/ig, '');
                        html = html.replace(/}}/ig, '');
                    } else {
                        html = html.substring(0, html.indexOf('{{value=')) + value + html.substring(html.indexOf('}'));
                        html = html.replace(/}/ig, '');
                        html = html.replace(/{/ig, '');
                    }
                }

                html = '<div>' + html + '</div>';

                for (var name in row.data) {
                    html = html.replace('{{' + name + '}}', row.data[name]);
                }

                if (detail.innerHTML !== html) {
                    detail.innerHTML = html;
                }
            } else {
                var _html = '<div>' + template.replace(/{{value}}/ig, value).replace(/{{id}}/ig, row.id) + '</div>';

                for (var _name in row.data) {
                    _html = _html.replace('{{' + _name + '}}', row.data[_name]);
                }

                if (detail.innerHTML !== _html) {
                    detail.innerHTML = _html;
                }
            }

            if (grid.onRowDetailInit) {
                grid.onRowDetailInit(row.index, row, detail.firstChild);
            }

            row._detail = detail.firstChild;
        }
    }, {
        key: '_render',
        value: function _render() {
            var that = this;
            var row = that.row;
            var grid = row.grid;

            var selected = row.getProperty('selected');

            if (selected === false && that.hasAttribute('selected')) {
                that.removeAttribute('selected');
            } else if (selected === true) {
                that.setAttribute('selected', '');
            } else if (selected === null) {
                that.setAttribute('selected', 'indeterminate');
            }

            if (that.hasAttribute('unbound')) {
                that.removeAttribute('unbound');
            }

            if (row.unbound) {
                that.setAttribute('unbound', '');
            }

            if (!grid._toggledRow && that.classList.contains('jqx-animate')) {
                that.classList.remove('jqx-animate');
                that.rowContainer.innerHTML = '';
                that.rowContainer.classList.add('jqx-hidden');
                grid._refreshLayout();
                grid._recycle();

                return;
            }

            if (row.adaptiveHeight && !grid._responsiveLayout) {
                that._renderAdaptive();
                return;
            }

            if (grid.columns.length === 0) {
                that._renderEmpty();
                return;
            }

            if (row.addNewRow) {
                that._renderAddNewRow();
                return;
            }

            if (grid._toggledRow) {
                if (row.id === grid._toggledRow.id) {
                    that.setAttribute('toggle', '');
                } else if (that.hasAttribute('toggle')) {
                    that.removeAttribute('toggle');
                }
            }

            if (grid._toggledRow && grid.appearance.allowRowToggleAnimation) {
                var parentRow = row.parent;

                if (!grid._toggledRow.expanded && grid._toggledRow.id === row.id) {
                    var rowContainer = that.rowContainer;

                    for (var i = 0; i < rowContainer.children.length; i++) {
                        var animatingRowElement = rowContainer.children[i];
                        var uid = animatingRowElement.getAttribute('data-id');
                        var animatingRow = grid.rowById[uid];

                        if (animatingRowElement.getAttribute('data-rendered')) {
                            continue;
                        }

                        animatingRowElement.setAttribute('data-rendered', true);
                        animatingRow.element = animatingRowElement;

                        animatingRow.render();
                    }
                }

                while (parentRow) {
                    if (parentRow.id === grid._toggledRow.id) {
                        var _rowContainer = parentRow.element.rowContainer;

                        if (grid._toggledRow.expanded) {
                            that.classList.add('jqx-hidden');
                            var rowElement = row.createElement(grid);

                            for (var _i3 = 0; _i3 < _rowContainer.children.length; _i3++) {
                                var _animatingRowElement = _rowContainer.children[_i3];

                                if (_animatingRowElement.getAttribute('data-id') === row.id.toString()) {
                                    rowElement = _animatingRowElement;
                                    return;
                                }
                            }

                            row.element = rowElement;
                            _rowContainer.appendChild(rowElement);
                            _rowContainer.classList.remove('jqx-hidden');

                            rowElement.row = row;

                            that = rowElement;
                        }
                        break;
                    }

                    parentRow = parentRow.parent;
                }
            }

            that._alternate();

            var nearWidth = parseFloat(grid.$.columnNearContainer.style.width);
            var centerWidth = parseFloat(grid.$.columnContainer.style.width);
            var farWidth = parseFloat(grid.$.columnFarContainer.style.width);
            var cellsCenterContainerElement = that.children[1];
            var cellsNearContainerElement = that.children[0];
            var cellsFarContainerElement = that.children[2];

            cellsFarContainerElement.classList.remove('vscroll');

            if (grid.computedVerticalScrollBarVisibility) {
                cellsFarContainerElement.classList.add('vscroll');
            }

            if (that.hasAttribute('group')) {
                that.removeAttribute('group');
            }

            if (that.hasAttribute('tree')) {
                that.removeAttribute('tree');
            }

            if (that.hasAttribute('level')) {
                that.removeAttribute('level');
            }

            if (that.hasAttribute('leaf')) {
                that.removeAttribute('leaf');
            }

            if (that.hasAttribute('expanded')) {
                that.removeAttribute('expanded');
            }

            if (that.hasAttribute('summary')) {
                that.removeAttribute('summary');
            }

            if (that.hasAttribute('filter')) {
                that.removeAttribute('filter');
            }

            if (row.filtered === null) {
                that.setAttribute('filter', 'indeterminate');
            }

            if (grid.dataSource.groupBy && grid.dataSource.groupBy.length > 0) {
                that.setAttribute('level', row.level);

                if (row.expanded) {
                    that.setAttribute('expanded', '');
                }

                if (row.label !== undefined && row.level === grid.dataSource.groupBy.length - 1) {
                    that.setAttribute('leaf', '');
                }

                if (row.label !== undefined) {
                    that.setAttribute('group', '');
                } else {
                    that.setAttribute('leaf', '');
                }

                if (row.summaryRow) {
                    that.setAttribute('summary', '');
                }

                if (that.toggleButton) {
                    that.toggleButton.classList.remove('jqx-hidden');
                }
            } else if (grid.dataSource.boundHierarchy) {
                that.setAttribute('level', row.level);

                if (row.expanded) {
                    that.setAttribute('expanded', '');
                }

                if (row.leaf) {
                    that.setAttribute('leaf', '');
                }

                if (row.summaryRow) {
                    that.setAttribute('summary', '');
                }

                if (that.toggleButton) {
                    that.toggleButton.classList.remove('jqx-hidden');
                }
            } else {
                row.canNotify = false;
                row.leaf = true;
                row.expanded = false;
                row.summaryRow = false;
                row.level = 0;
                if (that.toggleButton) {
                    that.toggleButton.classList.add('jqx-hidden');
                }
                row.canNotify = true;
            }

            that.setAttribute('data-id', row.id);
            that.visible = row.visible;
            that.cellsNearContainerElement.classList.remove('jqx-visibility-hidden');
            that.cellsContainerElement.classList.remove('jqx-visibility-hidden');
            that.cellsFarContainerElement.classList.remove('jqx-visibility-hidden');
            that.removeAttribute('rowspan');

            if (grid._rowGap > 0 && row !== grid.rows[grid.rows.length - 1]) {
                that.style.marginBottom = grid._rowGap + 'px';

                if (parseInt(that.style.height) - grid._rowGap !== row.height) {
                    that.style.height = row.height - grid._rowGap + 'px';
                }

                if (parseInt(that.style.lineHeight) - grid._rowGap !== row.height) {
                    that.style.lineHeight = row.height - grid._rowGap + 'px';
                }
            } else {
                that.style.marginBottom = '';
                if (parseInt(that.style.height) !== row.height) {
                    that.style.height = row.height + 'px';
                }

                if (parseInt(that.style.lineHeight) !== row.height) {
                    that.style.lineHeight = row.height + 'px';
                }
            }

            if (cellsCenterContainerElement.style.left !== -grid._scrollView.scrollLeft + 'px') {
                cellsCenterContainerElement.style.left = -grid._scrollView.scrollLeft + 'px';
            }

            if (grid.rowDetail.enabled) {
                var detail = that.rowDetail;

                that.removeAttribute('show-detail');

                if (row.showDetail) {
                    detail.classList.remove('jqx-hidden');

                    that.setAttribute('show-detail', '');

                    if (detail.style.height !== row.detailHeight + 'px') {
                        detail.style.height = row.detailHeight + 'px';
                    }

                    if (detail.style.lineHeight !== row.detailHeight + 'px') {
                        detail.style.lineHeight = row.detailHeight + 'px';
                    }

                    if (detail.style.top !== row.cellHeight + 'px') {
                        detail.style.top = row.cellHeight + 'px';
                    }

                    that._renderDetail(detail);
                } else {
                    detail.classList.add('jqx-hidden');
                }
            }

            cellsNearContainerElement.classList.remove('jqx-hidden');
            cellsFarContainerElement.classList.remove('jqx-hidden');

            if (cellsNearContainerElement.style.width !== nearWidth + 'px') {
                cellsNearContainerElement.style.width = nearWidth + 'px';
            }

            if (cellsCenterContainerElement.style.width !== centerWidth + 'px') {
                cellsCenterContainerElement.style.width = centerWidth + 'px';
            }

            if (cellsFarContainerElement.style.width !== farWidth + 'px') {
                cellsFarContainerElement.style.width = farWidth + 'px';
            }

            cellsNearContainerElement.style.height = row.cellHeight + 'px';
            cellsCenterContainerElement.style.height = row.cellHeight + 'px';
            cellsFarContainerElement.style.height = row.cellHeight + 'px';

            if (farWidth === 0) {
                cellsFarContainerElement.classList.add('jqx-hidden');
            }

            if (nearWidth === 0) {
                cellsNearContainerElement.classList.add('jqx-hidden');
            }

            if (nearWidth > 0 && parseInt(nearWidth) === parseInt(grid._autoGeneratedColumnsNearWidth)) {
                //     cellsNearContainerElement.classList.add('border-collapse');
            }

            if (farWidth > 0 && parseInt(farWidth) === parseInt(grid._autoGeneratedColumnsFarWidth)) {
                cellsFarContainerElement.classList.add('border-collapse');
            }

            for (var j = 0; j < grid._frozenNearColumns.length; j++) {
                var column = grid._frozenNearColumns[j];

                var cellElement = that.children[0].children[j];

                if (!cellElement) {
                    var cell = row.getCell(column);

                    cellElement = cell.createElement();
                    that.children[0].appendChild(cellElement);
                }

                that._renderCell(row, column, cellElement);
            }

            for (var _j = 0; _j < grid._frozenFarColumns.length; _j++) {
                var _column3 = grid._frozenFarColumns[_j];
                var _cellElement3 = that.children[2].children[_j];

                if (!_cellElement3) {
                    var _cell6 = row.getCell(_column3);

                    _cellElement3 = _cell6.createElement();
                    that.children[2].appendChild(_cellElement3);
                }

                if (_column3.adaptiveColumn) {
                    if (!_column3.adaptiveVisible) {
                        _cellElement3.classList.add('jqx-hidden');
                    } else {
                        _cellElement3.classList.remove('jqx-hidden');
                    }

                    continue;
                }

                that._renderCell(row, _column3, _cellElement3);
            }

            for (var _j2 = 0; _j2 < cellsCenterContainerElement.children.length; _j2++) {
                var columnElement = grid._columnElements[_j2 + grid._frozenNearColumns.length];

                if (!columnElement) {
                    var _cellElement4 = that.children[1].children[_j2];

                    that._renderCell(row, null, _cellElement4);
                }
            }

            for (var _j3 = 0; _j3 < grid._columnElements.length; _j3++) {
                var _columnElement = grid._columnElements[_j3];
                var _column4 = _columnElement.column;

                if (!_columnElement.parentNode || !_column4) {
                    if (_columnElement && !_column4) {
                        var _cellElement6 = that.children[1].children[_j3];

                        if (_cellElement6) {
                            _cellElement6.classList.add('jqx-visibility-hidden');
                        }
                    }

                    continue;
                }

                var _cellElement5 = that.children[1].children[_j3];

                if (!_cellElement5) {
                    if (!_columnElement.column) {
                        _columnElement.column = _column4;
                    }

                    var _cell7 = row.getCell(_column4);

                    _cellElement5 = _cell7.createElement();
                    that.children[1].appendChild(_cellElement5);
                }

                if (_columnElement.classList.contains('jqx-visibility-hidden')) {
                    _cellElement5.classList.add('jqx-visibility-hidden');
                    continue;
                } else {
                    _cellElement5.classList.remove('jqx-visibility-hidden');
                }

                that._renderCell(row, _column4, _cellElement5);
            }

            if (!that.visible) {
                that.classList.add('jqx-hidden');
            } else {
                that.classList.remove('jqx-hidden');
            }
        }
    }, {
        key: 'template',
        value: function template() {
            return '';
        }
    }, {
        key: 'isUtilityElement',
        get: function get() {
            return true;
        }
    }, {
        key: 'hasStyleObserver',
        get: function get() {
            return false;
        }
    }, {
        key: 'enableShadowDOM',
        get: function get() {
            return false;
        }
    }], [{
        key: 'properties',
        get: function get() {
            return {};
        }
    }]);
    return Row;
}(JQX.BaseElement));