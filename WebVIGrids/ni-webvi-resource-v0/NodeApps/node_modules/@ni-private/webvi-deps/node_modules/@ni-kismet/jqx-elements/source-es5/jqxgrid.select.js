'use strict';

JQX.Utilities.Assign('Grid.Select', function () {
    function Select() {
        babelHelpers.classCallCheck(this, Select);
    }

    babelHelpers.createClass(Select, [{
        key: '_refreshSelection',
        value: function _refreshSelection() {
            var that = this;

            if (that.selection.enabled) {
                var column = that._selectionColumn;

                column.refresh();
            }

            that._refreshCellSelectionRect();
        }
    }, {
        key: '_toggleColumnSelection',
        value: function _toggleColumnSelection(column) {
            var that = this;

            if (!that.selection.enabled || that.selection.checkBoxes.selectAllMode === 'none') {
                if (that._inputOverlay && that._inputOverlay.parentNode) {
                    that._inputOverlay.parentNode.removeChild(that._inputOverlay);
                }

                return;
            }

            var selected = column.element.getAttribute('selected');

            if (selected === 'indeterminate') {
                selected = true;
            } else if (selected === '') {
                selected = false;
            } else {
                selected = true;
            }

            var visibleRows = that._recyclingRows;

            that._selectionColumn._selecting = true;

            that.beginUpdate();

            for (var i = 0; i < visibleRows.length; i++) {
                var row = visibleRows[i];

                row.selected = selected;
            }

            that._selectionColumn._selecting = false;

            that.endUpdate(false);
            that._recycle(false);

            if (that.selection.enabled && that.selection.checkBoxes.enabled && that.selection.checkBoxes.selectAllMode !== 'none') {
                var element = column.element;
                var input = element.querySelector('.jqx-input');

                if (that._inputOverlay) {
                    if (that._inputOverlay.parentNode !== that.$.columnHeader) {
                        if (that._inputOverlay.parentNode) {
                            that._inputOverlay.parentNode.removeChild(that._inputOverlay);
                        }

                        that._inputOverlay = document.createElement('div');
                        that.$.columnHeader.appendChild(that._inputOverlay);
                    }
                } else {
                    that._inputOverlay = document.createElement('div');
                    that.$.columnHeader.appendChild(that._inputOverlay);
                }

                that._inputOverlay.column = column;

                that._inputOverlay.onpointerdown = function () {
                    if (!that._inputOverlay) {
                        that._inputOverlay.onpointerdown = null;
                    }

                    var column = that._inputOverlay.column;
                    that._inputOverlay.classList.remove('jqx-animate');
                    that._selectionColumn._selecting = true;

                    that.beginUpdate();

                    var selected = column.element.hasAttribute('selected');

                    var visibleRows = that._recyclingRows;
                    for (var _i = 0; _i < visibleRows.length; _i++) {
                        var _row = visibleRows[_i];

                        _row.selected = !selected;
                    }

                    that._selectionColumn._selecting = false;

                    var overlay = that._inputOverlay;

                    that.endUpdate(false);
                    that._recycle();

                    that.$.columnHeader.appendChild(overlay);
                    that._inputOverlay = overlay;
                    that._inputOverlay.classList.add('jqx-animate');
                    return false;
                };

                that._inputOverlay.classList.add('jqx-input-overlay');
                that._inputOverlay.classList.add('jqx-input-overlay-column');
                if (that.appearance.allowCheckBoxesSelectionAnimation) {
                    that._inputOverlay.classList.add('jqx-animate');
                }
                that._inputOverlay.style.top = (element.offsetHeight - input.offsetHeight) / 4 + 1 + 'px';

                var left = that._selectionColumn.element.parentElement.offsetLeft + that._selectionColumn.element.offsetLeft;

                that._inputOverlay.style.left = left + 'px';

                that._inputOverlay.style.height = element.offsetWidth + 'px';
                that._inputOverlay.style.width = element.offsetWidth + 'px';
                that._inputOverlay.onmousedown = null;

                that._inputOverlay.classList.add('jqx-input-overlay-on');

                that._selectionColumn.refresh();
            }
        }
    }, {
        key: '_refreshCheckBoxColumnSelection',
        value: function _refreshCheckBoxColumnSelection() {
            var that = this;

            if (that.selection.enabled && that.selection.checkBoxes.enabled) {
                var element = that._selectionColumn.element;

                if (that.selection.checkBoxes.selectAllMode === 'none') {
                    element.removeAttribute('checkbox');
                    element.label.classList.remove('jqx-input');
                } else {
                    element.setAttribute('checkbox', '');
                    element.label.classList.add('jqx-input');
                }

                that._selectionColumn.refresh();
            }
        }
    }, {
        key: '_handleExtendedRowSelection',
        value: function _handleExtendedRowSelection(row, event) {
            var that = this;

            if (!row) {
                return;
            }

            var visibleRows = that._recyclingRows;

            if (that.paging.enabled && that.selection.selectAllMode === 'page') {
                visibleRows = visibleRows.slice(that.paging.pageIndex * that.paging.pageSize, (that.paging.pageIndex + 1) * that.paging.pageSize);
            }

            if (event && !event.ctrlKey) {
                that._selection.rows = [];
            }

            if (event && !event.shiftKey) {
                that._rangeSelectionStartRow = row;
                that._rangeSelectionEndRow = row;
            }

            if (event && event.shiftKey) {
                that._rangeSelectionEndRow = row;

                var startIndex = visibleRows.indexOf(that._rangeSelectionStartRow);
                var endIndex = visibleRows.indexOf(that._rangeSelectionEndRow);
                var minIndex = Math.min(startIndex, endIndex);
                var maxIndex = Math.max(startIndex, endIndex);

                if (startIndex === -1 || endIndex === -1) {
                    return;
                }

                for (var i = minIndex; i <= maxIndex; i++) {
                    var visibleRow = visibleRows[i];

                    visibleRow.setProperty('selected', true);
                }
            } else {
                if (event && event.ctrlKey) {
                    if (row.selected === null) {
                        row.setProperty('selected', true);
                    } else {
                        row.setProperty('selected', !row.selected);
                    }
                } else {
                    row.setProperty('selected', true);
                }
            }
        }
    }, {
        key: '_setSelection',
        value: function _setSelection(rowId, dataField, event) {
            var that = this;

            if (!that.selection.enabled) {
                return;
            }

            that._lastColumnSelectionRange = null;
            that._lastRowSelectionRange = null;
            that.closeMenu();

            var clearSelection = function clearSelection() {
                if (event && !event.ctrlKey && !event.shiftKey || that.selection.mode === 'one') {
                    if (that.selection.mode !== 'many') {
                        that._selection.rows = [];
                        that._selection.columns = [];
                        that._selection.cells = [];
                    }

                    that._selection.focusedCell = null;
                }

                if (that._selection.selectionRect) {
                    var selectionRect = that._selection.selectionRect;

                    selectionRect.parentNode.removeChild(selectionRect);

                    var eventNames = {
                        down: 'pointerdown',
                        move: 'pointermove',
                        up: 'pointerup'
                    };

                    if (JQX.Utilities.Core.isMobile) {
                        eventNames.down = 'touchstart';
                        eventNames.move = 'touchmove';
                        eventNames.up = 'touchend';
                    }

                    document.removeEventListener(eventNames.move, selectionRect.onMove);
                    document.removeEventListener(eventNames.up, selectionRect.onUp);
                    document.removeEventListener(eventNames.down, selectionRect.onDown);

                    that._selection.selectionRect = null;
                }
            };

            that.beginUpdate();

            var column = that.columnByDataField[dataField];

            if (that.selection.allowCellSelection && rowId !== undefined && rowId !== null && column && !column.autoGenerated) {
                var row = that.rowById[rowId];
                var cell = row.getCell(dataField);

                var parentCell = that._getParentCell(row, dataField);

                if (parentCell) {
                    cell = parentCell.row.getCell(parentCell.column.dataField);
                }

                clearSelection();

                if (!event.ctrlKey) {
                    that._selection.rows = [];
                    that._selection.columns = [];

                    if (that.selection.mode !== 'many') {
                        that._selection.cells = [];
                    }
                }

                if (that.selection.mode === 'extended') {
                    if (event.ctrlKey) {
                        cell.selected = !cell.selected;
                    } else {
                        cell.selected = true;
                    }
                } else {
                    if (that.selection.mode === 'one') {
                        cell.selected = true;
                    } else {
                        cell.selected = !cell.selected;
                    }
                }

                if (event && !event.shiftKey || !that._selection.focusedCell) {
                    that._selection.focusedCell = cell;
                }

                if (event && (event.shiftKey || that._selection.focusedCell === cell) && that.selection.mode === 'extended') {
                    if (!parentCell) {
                        that._renderCellSelectionRect(cell.row, cell.column, cell.row, cell.column);
                    } else {
                        that._renderCellSelectionRect(cell.row, cell.column, parentCell.endRow, parentCell.endColumn);
                    }
                }
            } else if (that.selection.allowRowHeaderSelection && rowId !== undefined && rowId !== null && that.columnByDataField[dataField] === undefined) {
                clearSelection();
                that._selectRow(rowId, event);
            } else if (that.selection.checkBoxes.enabled && rowId !== undefined && rowId !== null && dataField === '_checkBoxColumn' && that.columnByDataField[dataField] === undefined) {
                clearSelection();
                that._selectRow(rowId, event);
            } else if (rowId !== undefined && rowId !== null && (dataField === undefined || that.columnByDataField[dataField] !== undefined) && that.selection.allowRowSelection) {
                clearSelection();
                that._selectRow(rowId, event);
            } else if (that.selection.allowColumnHeaderSelection && column) {
                clearSelection();
                that._selectColumn(dataField, event);
            }

            that.endUpdate(false);
            that._recycle();

            if (rowId !== undefined && rowId !== null && !column) {
                that._renderInputOverlay(rowId, event);
            }
        }
    }, {
        key: '_renderCellSelectionRect',
        value: function _renderCellSelectionRect(beginRow, beginColumn, endRow, endColumn) {
            var that = this;

            var visibleRows = that._recyclingRows;

            var startRowIndex = visibleRows.indexOf(beginRow);
            var endRowIndex = visibleRows.indexOf(endRow);

            //const startColumnIndex = that.columns.indexOf(beginColumn);
            //const endColumnIndex = that.columns.indexOf(endColumn);

            if (startRowIndex >= 0 && endRowIndex >= 0) {
                if (!that._selection.selectionRect) {
                    var createSelectionRect = function createSelectionRect(canResize) {
                        var fillContent = document.createElement('div');
                        var borderContent = document.createElement('div');
                        var overlay = document.createElement('div');

                        overlay.classList.add('jqx-selection-overlay');
                        overlay.appendChild(borderContent);

                        borderContent.appendChild(fillContent);
                        fillContent.classList.add('jqx-selection-overlay-content');
                        borderContent.classList.add('jqx-selection-overlay-border-content');

                        if (that.selection.allowCellDragSelectionHandle && canResize) {
                            borderContent.classList.add('handle');
                        }

                        that.$.scrollView.appendChild(overlay);

                        return overlay;
                    };

                    var _selectionRect = that._selection.selectionRect = createSelectionRect(true);

                    if (that.selection.allowCellDragSelectionHandle) {
                        var capturePoint = null;
                        var isHorizontalDrag = null;
                        var isVerticalDrag = null;

                        _selectionRect.onMove = function (event) {
                            var selectionRect = that._selection.selectionRect;
                            var clientX = event.clientX;
                            var clientY = event.clientY;

                            if (event.touches) {
                                clientX = event.touches[0].clientX;
                                clientY = event.touches[0].clientY;
                            }

                            var getElements = function getElements(event) {
                                var elements = document.elementsFromPoint(event.clientX, event.clientY);
                                var columnDataField = null;

                                for (var i = 0; i < elements.length; i++) {
                                    var element = elements[i];

                                    if (element.getAttribute('data-field')) {
                                        columnDataField = element.getAttribute('data-field');
                                        break;
                                    }
                                }

                                var row = null;

                                for (var _i2 = 0; _i2 < elements.length; _i2++) {
                                    var _element = elements[_i2];

                                    if (_element.getAttribute('data-id')) {
                                        row = _element.row;
                                        break;
                                    }
                                }

                                return {
                                    column: that.columnByDataField[columnDataField], row: row
                                };
                            };

                            if (selectionRect.capturedDrag) {
                                var eventData = {
                                    clientX: clientX, clientY: clientY
                                };

                                var beginElements = getElements(eventData);
                                var row = getElements({ clientX: clientX, clientY: clientY + selectionRect.top }).row;
                                var column = getElements({ clientX: clientX + selectionRect.left, clientY: clientY }).column;

                                if (!row) {
                                    row = visibleRows[visibleRows.length - 1];
                                }

                                if (!column) {
                                    column = beginElements.column;
                                }

                                if (row && column && beginElements.row && beginElements.column) {
                                    selectionRect.row = beginElements.row;
                                    selectionRect.column = beginElements.column;
                                    selectionRect.endDragRow = selectionRect.endRow = row;
                                    selectionRect.endDragColumn = selectionRect.endColumn = column;
                                    that._dragSelectionStartDataField = selectionRect.column.dataField;
                                    that._dragSelectionStartRow = selectionRect.row;
                                    that._selection.focusedCell = selectionRect.row.getCell(selectionRect.column.dataField);
                                }

                                that._resizeSelectionRect();
                                event.preventDefault();
                            } else if (selectionRect.captured) {
                                that._dragSelectionStartDataField = that._selection.focusedCell.column.dataField;
                                that._dragSelectionStartRow = that._selection.focusedCell.row;

                                if (isHorizontalDrag === null && isVerticalDrag === null) {
                                    if (Math.abs(clientX - capturePoint.left) >= 30) {
                                        isHorizontalDrag = true;
                                    } else if (Math.abs(clientY - capturePoint.top) >= 30) {
                                        isVerticalDrag = true;
                                    }
                                }

                                if (selectionRect.lastPoint && Math.abs(selectionRect.lastPoint.top - clientY) >= 40) {
                                    isHorizontalDrag = null;
                                    isVerticalDrag = true;
                                } else if (selectionRect.lastPoint && Math.abs(selectionRect.lastPoint.left - clientX) >= 40) {
                                    isVerticalDrag = null;
                                    isHorizontalDrag = true;
                                }

                                if (isHorizontalDrag) {
                                    var endDataField = selectionRect.endDragColumn.dataField;
                                    //const endRow = selectionRect.endDragRow;
                                    var _eventData = {
                                        clientX: clientX, clientY: capturePoint.top - 5
                                    };
                                    var elements = getElements(_eventData);

                                    if (elements.row && elements.column) {
                                        selectionRect.endDragRow = selectionRect.endRow;
                                        selectionRect.endDragColumn = elements.column;

                                        if (selectionRect.endDragColumn.dataField !== endDataField) {
                                            selectionRect.lastPoint = {
                                                left: clientX, top: clientY
                                            };
                                        }

                                        that._resizeSelectionRect();
                                    }
                                } else if (isVerticalDrag) {
                                    //const endColumn = selectionRect.endDragColumn;
                                    var _endRow = selectionRect.endDragRow;
                                    var _eventData2 = {
                                        clientX: capturePoint.left - 5, clientY: clientY
                                    };
                                    var _elements = getElements(_eventData2);

                                    if (_elements.row && _elements.column) {
                                        selectionRect.endDragRow = _elements.row;
                                        selectionRect.endDragColumn = selectionRect.endColumn;

                                        if (selectionRect.endDragRow.id && selectionRect.endDragRow.id !== _endRow.id) {
                                            selectionRect.lastPoint = {
                                                left: clientX, top: clientY
                                            };
                                        }

                                        that._resizeSelectionRect();
                                    }
                                }

                                //    event.preventDefault();
                            }

                            if (selectionRect.captured && that.selection.allowDragSelectionAutoScroll) {
                                if (that._autoScrollSelectionDragInterval) {
                                    clearInterval(that._autoScrollSelectionDragInterval);
                                }

                                that.selection.isDragging = true;
                                //  event.preventDefault();

                                that._autoScrollSelectionDragInterval = setInterval(function () {
                                    var rect = that.$.scrollView.getBoundingClientRect();

                                    if (clientX <= rect.left + 20) {
                                        that.scrollLeft -= 15;
                                        that._resizeSelectionRect();
                                    } else if (clientX >= rect.left + rect.width - 20) {
                                        that.scrollLeft += 15;
                                        that._resizeSelectionRect();
                                    }

                                    if (clientY <= rect.top + 20) {
                                        that.scrollTop -= 15;
                                        that._resizeSelectionRect();
                                    } else if (clientY >= rect.top + rect.height - 20) {
                                        that.scrollTop += 15;
                                        that._resizeSelectionRect();
                                    }
                                }, 5);
                            }
                        };

                        _selectionRect.onUp = function () /*event*/{

                            if (!_selectionRect.captured) {
                                return;
                            }

                            if (that._autoScrollSelectionDragInterval) {
                                clearInterval(that._autoScrollSelectionDragInterval);
                            }

                            if (!that.editing.editCell && !that.editing.editRow) {
                                that.focus();
                            }

                            _selectionRect.capturedDrag = false;
                            _selectionRect.captured = false;
                            isHorizontalDrag = null;
                            isVerticalDrag = null;
                            capturePoint = null;
                            _selectionRect.lastPoint = null;

                            var cellValues = _selectionRect.cellValues;

                            if (_selectionRect.minRow && _selectionRect.maxRow && _selectionRect.maxRow && _selectionRect.maxColumn) {

                                // select cells on mouse up.
                                that._selectCellsRange(_selectionRect.minRow, _selectionRect.maxRow, _selectionRect.minColumn.dataField, _selectionRect.maxColumn.dataField);

                                _selectionRect.row = _selectionRect.minRow;
                                _selectionRect.column = _selectionRect.minColumn;
                                _selectionRect.endColumn = _selectionRect.maxColumn;
                                _selectionRect.endRow = _selectionRect.maxRow;
                                _selectionRect.cellValues = cellValues;
                                that._resizeSelectionRect();

                                if (that.selection.allowCellDragSelectionAutoFill) {
                                    that._pasteSelectedCells({
                                        row: _selectionRect.row,
                                        endRow: _selectionRect.endDragRow,
                                        column: _selectionRect.column,
                                        endColumn: _selectionRect.endColumn
                                    }, cellValues);
                                }
                            }

                            _selectionRect.endDragColumn = null;
                            _selectionRect.endDragRow = null;
                            _selectionRect.minColumn = null;
                            _selectionRect.minRow = null;
                            _selectionRect.maxColumn = null;
                            _selectionRect.maxRow = null;
                        };

                        _selectionRect.onDown = function (event) {
                            if (_selectionRect.captured && !capturePoint) {
                                var clientX = event.clientX;
                                var clientY = event.clientY;

                                if (event.touches) {
                                    clientX = event.touches[0].clientX;
                                    clientY = event.touches[0].clientY;
                                }

                                capturePoint = {
                                    left: clientX, top: clientY
                                };
                            }
                        };

                        var eventNames = {
                            down: 'pointerdown',
                            move: 'pointermove',
                            up: 'pointerup'
                        };

                        if (JQX.Utilities.Core.isMobile) {
                            eventNames.down = 'touchstart';
                            eventNames.move = 'touchmove';
                            eventNames.up = 'touchend';
                        }

                        _selectionRect['on' + eventNames.down] = function (event) {
                            var rect = _selectionRect.getBoundingClientRect();

                            var clientX = event.clientX;
                            var clientY = event.clientY;

                            if (event.touches) {
                                clientX = event.touches[0].clientX;
                                clientY = event.touches[0].clientY;
                            }

                            if (clientX >= rect.right - 5 && clientY >= rect.bottom - 5) {
                                _selectionRect.captured = true;
                                _selectionRect.endDragRow = _selectionRect.endRow;
                                _selectionRect.endDragColumn = _selectionRect.endColumn;
                            } else if (that.selection.allowCellDragDropSelectionHandle && clientY >= rect.bottom - 5) {
                                _selectionRect.captured = true;
                                _selectionRect.capturedDrag = true;
                                _selectionRect.endDragRow = _selectionRect.endRow;
                                _selectionRect.endDragColumn = _selectionRect.endColumn;

                                _selectionRect.left = _selectionRect.endColumn.left - _selectionRect.column.left;
                                _selectionRect.top = _selectionRect.endRow.top - _selectionRect.row.top;
                            } else {
                                if (!_selectionRect.captured) {
                                    that._rowDownHandler(event);
                                }
                            }
                        };

                        document.addEventListener(eventNames.move, _selectionRect.onMove, { passive: false });
                        document.addEventListener(eventNames.up, _selectionRect.onUp, { passive: false });
                        document.addEventListener(eventNames.down, _selectionRect.onDown, {
                            passive: false
                        });
                    }
                }

                var selectionRect = that._selection.selectionRect;

                selectionRect.row = that._selection.focusedCell.row;
                selectionRect.column = that._selection.focusedCell.column;
                selectionRect.endRow = endRow;
                selectionRect.endDragRow = endRow;
                selectionRect.endColumn = endColumn;
                selectionRect.endDragColumn = endColumn;

                that._refreshCellSelectionRect();
            }
        }
    }, {
        key: '_resizeSelectionRect',
        value: function _resizeSelectionRect() {
            var that = this;

            var selectionRect = that._selection.selectionRect;

            if (!selectionRect) {
                return;
            }

            var visibleRows = that._recyclingRows;

            var row = selectionRect.row;
            var endRow = selectionRect.endDragRow;
            var column = selectionRect.column;
            var endColumn = selectionRect.endDragColumn;

            var startRowIndex = visibleRows.indexOf(row);
            var endRowIndex = visibleRows.indexOf(endRow);
            var endSelectedRowIndex = visibleRows.indexOf(selectionRect.endRow);

            var startColumnIndex = that.columns.indexOf(column);
            var endColumnIndex = that.columns.indexOf(endColumn);
            var endSelectedColumnIndex = that.columns.indexOf(selectionRect.endColumn);

            var minRowIndex = Math.min(endSelectedRowIndex, Math.min(startRowIndex, endRowIndex));
            var maxRowIndex = Math.max(endSelectedRowIndex, Math.max(startRowIndex, endRowIndex));

            var minColumnIndex = Math.min(endSelectedColumnIndex, Math.min(startColumnIndex, endColumnIndex));
            var maxColumnIndex = Math.max(endSelectedColumnIndex, Math.max(startColumnIndex, endColumnIndex));

            if (endSelectedRowIndex <= Math.min(startRowIndex, endRowIndex)) {
                selectionRect.minRow = selectionRect.endRow;
            } else {
                if (startRowIndex <= endRowIndex) {
                    selectionRect.minRow = row;
                } else {
                    selectionRect.minRow = endRow;
                }
            }

            if (endSelectedRowIndex >= Math.max(startRowIndex, endRowIndex)) {
                selectionRect.maxRow = selectionRect.endRow;
            } else {
                if (startRowIndex >= endRowIndex) {
                    selectionRect.maxRow = row;
                } else {
                    selectionRect.maxRow = endRow;
                }
            }

            if (endSelectedColumnIndex <= Math.min(startColumnIndex, endColumnIndex)) {
                selectionRect.minColumn = selectionRect.endColumn;
            } else {
                if (startColumnIndex <= endColumnIndex) {
                    selectionRect.minColumn = column;
                } else {
                    selectionRect.minColumn = endColumn;
                }
            }

            if (endSelectedColumnIndex >= Math.max(startColumnIndex, endColumnIndex)) {
                selectionRect.maxColumn = selectionRect.endColumn;
            } else {
                if (startColumnIndex >= endColumnIndex) {
                    selectionRect.maxColumn = column;
                } else {
                    selectionRect.maxColumn = endColumn;
                }
            }

            var top = 0;
            var height = 0;
            var left = 0;
            var width = 0;

            for (var i = minRowIndex; i <= maxRowIndex; i++) {
                var visibleRow = visibleRows[i];

                if (i === minRowIndex) {
                    top = visibleRow.top;
                }

                if (i === maxRowIndex) {
                    height = visibleRow.top + visibleRow.height - top;
                }

                for (var j = minColumnIndex; j <= maxColumnIndex; j++) {
                    var dataField = that.columns[j].dataField;
                    var cell = visibleRow.getCell(dataField);

                    if (j === minColumnIndex) {
                        left = cell.column.left;
                    }

                    if (j === maxColumnIndex) {
                        width = cell.column.left + cell.column.computedWidth - left;
                    }
                }
            }

            selectionRect.style.top = top - that.scrollTop - 1 + 'px';
            selectionRect.style.left = left - that.scrollLeft + 'px';

            selectionRect.style.height = height + 1 + 'px';
            selectionRect.style.width = width + 1 + 'px';
        }
    }, {
        key: '_getPatternValue',
        value: function _getPatternValue(rowIndex, columnIndex, selectedValues) {
            var patternArray = [];
            var index = 0;
            var rowPatterns = [];
            var columnPatterns = [];
            var names = [];
            var dayMonths = [];

            var days = {
                // full day names
                names: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],
                // abbreviated day names
                namesAbbr: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],
                // shortest day names
                namesShort: ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa']
            };

            var months = {
                // full month names (13 months for lunar calendards -- 13th month should be '' if not lunar)
                names: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December', ''],
                // abbreviated month names
                namesAbbr: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec', '']
            };

            var parseValue = function parseValue(value) {
                if (value === undefined) {
                    return undefined;
                }

                if (value.toString().indexOf('GMT+') >= 0 || value.toString().indexOf('GMT-') >= 0) {
                    return undefined;
                }

                if (isNaN(parseFloat(value))) {
                    if (days.names.indexOf(value) >= 0) {
                        dayMonths = days.names;

                        return days.names.indexOf(value);
                    }

                    if (days.namesAbbr.indexOf(value) >= 0) {
                        dayMonths = days.namesAbbr;

                        return days.namesAbbr.indexOf(value);
                    }

                    if (days.namesShort.indexOf(value) >= 0) {
                        dayMonths = days.namesShort;

                        return days.namesShort.indexOf(value);
                    }

                    if (months.names.indexOf(value) >= 0) {
                        dayMonths = months.names;

                        return months.names.indexOf(value);
                    }

                    if (months.namesAbbr.indexOf(value) >= 0) {
                        dayMonths = months.namesAbbr;

                        return months.namesAbbr.indexOf(value);
                    }

                    if (undefined !== value) {
                        if (value === null) {
                            value = '';
                        }

                        var hasNumber = /\d+/.test(value.toString());

                        if (hasNumber) {
                            names.push(value.toString().replace(/[0-9]/, '#'));
                            names[names.length - 1] = names[names.length - 1].replace(/[0-9]/g, '');

                            var result = parseFloat(value.toString().replace(/\D/g, ''));

                            if (isNaN(result)) {
                                return 0;
                            } else {
                                return result;
                            }
                        }
                    }

                    return undefined;
                }

                var hasLetters = /[A-Za-z]/.test(value.toString());

                if (hasLetters) {
                    return undefined;
                }

                return parseFloat(value);
            };

            var columnsCount = 0;

            for (var rowId in selectedValues) {
                var row = selectedValues[rowId];

                patternArray[index] = [];
                columnsCount = 0;

                for (var columnDataField in row) {
                    var value = parseValue(row[columnDataField]);

                    if (value === undefined) {
                        continue;
                    }

                    patternArray[index].push(value);
                    columnsCount++;
                }

                if (patternArray[index].length === 0) {
                    continue;
                }

                var stepStart = patternArray[index][0];
                var step = 0;

                for (var i = 0; i < patternArray[index].length; i++) {
                    var prevValue = parseValue(patternArray[index][i - 1]);
                    var _value = parseValue(patternArray[index][i]);

                    if (i === 0) {
                        prevValue = _value;
                    }

                    stepStart += _value;
                    step += _value - prevValue;
                }

                stepStart /= patternArray[index].length;
                stepStart -= patternArray[index][0];
                stepStart += patternArray[index][patternArray[index].length - 1];

                if (step !== 0) {
                    step /= patternArray[index].length - 1;
                }

                if (dayMonths.length > 0 || names.length > 0) {
                    step = 1;
                    stepStart = patternArray[index][0];
                }

                if (patternArray[index].length <= 2) {
                    stepStart = patternArray[index][patternArray[index].length - 1] + step;
                }

                rowPatterns.push({ step: step, stepStart: stepStart });
                index++;
            }

            for (var _i3 = 0; _i3 < columnsCount; _i3++) {
                var _stepStart = patternArray[0][_i3];
                var _step = 0;

                for (var j = 1; j < patternArray.length; j++) {
                    var _prevValue = parseValue(patternArray[j - 1][_i3]);
                    var _value2 = parseValue(patternArray[j][_i3]);

                    _stepStart += _value2;
                    _step += _value2 - _prevValue;
                }

                _stepStart /= patternArray.length;
                _stepStart -= patternArray[0][_i3];
                _stepStart += patternArray[patternArray.length - 1][_i3];

                if (_step !== 0) {
                    _step /= patternArray.length - 1;
                }

                if (dayMonths.length > 0 || names.length > 0) {
                    _step = 1;
                    _stepStart = patternArray[0][_i3];
                }

                if (patternArray.length <= 2) {
                    _stepStart = patternArray[patternArray.length - 1][_i3] + _step;
                }

                columnPatterns.push({ step: _step, stepStart: _stepStart });
            }

            if (!patternArray[rowIndex]) {
                var startRowIndex = patternArray.length;

                for (var _i4 = startRowIndex; _i4 <= rowIndex; _i4++) {
                    patternArray[_i4] = [];

                    for (var _j = 0; _j <= columnIndex; _j++) {
                        if (!columnPatterns[_j]) {
                            columnPatterns[_j] = columnPatterns[_j - 1];
                        }

                        if (!columnPatterns[_j]) {
                            continue;
                        }

                        if (_i4 === startRowIndex) {
                            patternArray[_i4][_j] = columnPatterns[_j].stepStart;
                        } else {
                            patternArray[_i4][_j] = patternArray[_i4 - 1][_j] + columnPatterns[_j].step;

                            if (dayMonths.length > 1 && patternArray[_i4][_j] >= dayMonths.length) {
                                patternArray[_i4][_j] = 0;
                            }
                        }
                    }
                }

                if (dayMonths.length > 0) {
                    return dayMonths[patternArray[rowIndex][columnIndex]];
                } else if (names.length > 0) {
                    return names[rowIndex % names.length].replace('#', patternArray[rowIndex][columnIndex]);
                }

                return patternArray[rowIndex][columnIndex];
            }

            if (!patternArray[rowIndex][columnIndex]) {
                var startColumnIndex = columnsCount;

                for (var _i5 = startColumnIndex; _i5 <= columnIndex; _i5++) {
                    if (!rowPatterns[rowIndex]) {
                        continue;
                    }

                    if (_i5 === startColumnIndex) {
                        patternArray[rowIndex].push(rowPatterns[rowIndex].stepStart);
                    } else {
                        patternArray[rowIndex][_i5] = patternArray[rowIndex][_i5 - 1] + rowPatterns[rowIndex].step;

                        if (dayMonths.length > 1 && patternArray[rowIndex][_i5] >= dayMonths.length) {
                            patternArray[rowIndex][_i5] = 0;
                        }
                    }
                }

                if (dayMonths.length > 0) {
                    return dayMonths[patternArray[rowIndex][columnIndex]];
                } else if (names.length > 0) {
                    return names[rowIndex % names.length].replace('#', patternArray[rowIndex][columnIndex]);
                }

                return patternArray[rowIndex][columnIndex];
            }

            if (patternArray[rowIndex] && patternArray[rowIndex][columnIndex]) {
                if (names.length > 0) {
                    return names[rowIndex % names.length].replace('#', patternArray[rowIndex][columnIndex]);
                }

                return patternArray[rowIndex][columnIndex];
            }

            return 0;
        }
    }, {
        key: '_pasteDataType',
        value: function _pasteDataType(args) {
            var that = this;

            var unboundMode = that.dataSource && typeof that.dataSource.dataSource === 'number';
            var cell = args.cell;
            var value = args.value;

            var dataType = cell.column.dataType;

            if (!dataType || unboundMode) {
                if (isNaN(parseFloat(value))) {
                    dataType = 'string';
                } else if (value instanceof Date) {
                    dataType = 'date';
                } else if (value === 'true' || value === 'false') {
                    dataType = 'boolean';
                } else {
                    dataType = 'number';
                }
            }

            return dataType;
        }
    }, {
        key: '_pasteModeCopy',
        value: function _pasteModeCopy(args) {
            var that = this;

            var unboundMode = that.dataSource && typeof that.dataSource.dataSource === 'number';
            var dataType = that._pasteDataType(args);
            var cell = args.cell;
            //const selectedValues = args.selectedValues;
            var value = args.value;
            var dataField = args.dataField;

            if (dataType === 'string') {
                cell.value = value;
            } else if (dataType === 'bool' || dataType === 'boolean') {
                if (value === 1 || value === '1' || value === true || value === 'true' || value === 'TRUE' || value === 'True') {
                    cell.value = true;
                }
            } else if (dataType === 'date' || dataType === 'time' || dataType === 'dateTime') {
                var column = that.columnByDataField[dataField];

                if (unboundMode) {
                    cell.value = value;
                } else {
                    if (column && column.dataType !== dataType) {
                        cell.value = null;
                    } else {
                        cell.value = value;
                    }
                }
            } else if (dataType === 'number' || dataType === 'float' || dataType === 'int') {
                var _column = that.columnByDataField[dataField];

                if (unboundMode) {
                    cell.value = value;
                } else {
                    if (_column && _column.dataType !== dataType) {
                        cell.value = null;
                    } else {
                        if (value !== null) {
                            if (dataType === 'int' || dataType === 'integer') {
                                cell.value = parseInt(value);
                            } else {
                                cell.value = parseFloat(value);
                            }
                        } else {
                            cell.value = null;
                        }
                    }
                }
            }
        }
    }, {
        key: '_pasteModeFill',
        value: function _pasteModeFill(args) {
            var that = this;

            var unboundMode = that.dataSource && typeof that.dataSource.dataSource === 'number';
            var dataType = that._pasteDataType(args);
            var cell = args.cell;
            var selectedValues = args.selectedValues;
            var minRowIndex = args.minRowIndex;
            var minColumnIndex = args.minColumnIndex;
            var currentRowIndex = args.currentRowIndex;
            var currentColumnIndex = args.currentColumnIndex;
            var columnDataField = args.dataField;

            var value = args.value;

            if (dataType === 'string') {
                var hasNumber = /\d+/.test(value.toString());

                if (hasNumber) {
                    value = that._getPatternValue(currentRowIndex - minRowIndex, currentColumnIndex - minColumnIndex, selectedValues);

                    if (value === undefined) {
                        if (selectedValues[currentRowIndex - minRowIndex] && selectedValues[currentRowIndex - minRowIndex][currentColumnIndex - minColumnIndex]) {
                            value = selectedValues[currentRowIndex - minRowIndex][currentColumnIndex - minColumnIndex];
                        }
                    }
                } else {
                    value = that._getPatternValue(currentRowIndex - minRowIndex, currentColumnIndex - minColumnIndex, selectedValues);

                    if (value === undefined) {
                        if (selectedValues[currentRowIndex - minRowIndex]) {
                            value = selectedValues[currentRowIndex - minRowIndex][currentColumnIndex - minColumnIndex];
                        } else {
                            value = args.value;
                        }
                    } else {
                        value = args.value;
                    }
                }

                if (value !== undefined) {
                    cell.value = value;
                }
            } else if (dataType === 'bool' || dataType === 'boolean') {
                if (value === 1 || value === '1' || value === true || value === 'true' || value === 'TRUE' || value === 'True') {
                    cell.value = true;
                }
            } else if (dataType === 'date' || dataType === 'time' || dataType === 'dateTime') {
                var column = that.columnByDataField[columnDataField];

                if (unboundMode) {
                    cell.value = value;
                } else {
                    if (column && column.dataType !== dataType) {
                        cell.value = null;
                    }
                }

                if (selectedValues[currentRowIndex - minRowIndex]) {
                    value = selectedValues[currentRowIndex - minRowIndex][currentColumnIndex - minColumnIndex];

                    if (value !== undefined) {
                        cell.value = value;
                    }
                }
            } else if (dataType === 'number' || dataType === 'float' || dataType === 'int') {
                value = that._getPatternValue(currentRowIndex - minRowIndex, currentColumnIndex - minColumnIndex, selectedValues);

                var _column2 = that.columnByDataField[columnDataField];

                if (unboundMode) {
                    cell.value = value;
                } else {
                    if (_column2 && _column2.dataType !== dataType) {
                        cell.value = null;
                    } else {
                        if (value !== null) {
                            if (dataType === 'int' || dataType === 'integer') {
                                cell.value = parseInt(value);
                            } else {
                                cell.value = parseFloat(value);
                            }
                        } else {
                            cell.value = null;
                        }
                    }
                }
            }
        }
    }, {
        key: '_pasteSelectedCells',
        value: function _pasteSelectedCells(selectionRect, selectedValues) {
            var that = this;

            that.beginUpdate();

            var visibleRows = that._recyclingRows;

            var row = selectionRect.row;
            var endRow = selectionRect.endRow;
            var column = selectionRect.column;
            var endColumn = selectionRect.endColumn;

            var startRowIndex = visibleRows.indexOf(row);
            var endRowIndex = visibleRows.indexOf(endRow);
            var endSelectedRowIndex = visibleRows.indexOf(selectionRect.endRow);

            var startColumnIndex = that.columns.indexOf(column);
            var endColumnIndex = that.columns.indexOf(endColumn);
            var endSelectedColumnIndex = that.columns.indexOf(selectionRect.endColumn);

            var minRowIndex = Math.min(endSelectedRowIndex, Math.min(startRowIndex, endRowIndex));
            var maxRowIndex = Math.max(endSelectedRowIndex, Math.max(startRowIndex, endRowIndex));

            var minColumnIndex = Math.min(endSelectedColumnIndex, Math.min(startColumnIndex, endColumnIndex));
            var maxColumnIndex = Math.max(endSelectedColumnIndex, Math.max(startColumnIndex, endColumnIndex));

            var maxCapturedRowIndex = 0;
            var maxCapturedColumnIndex = 0;
            var capturedColumnIndex = 0;
            var capturedRowIndex = 0;

            for (var rowId in selectedValues) {
                if (maxCapturedRowIndex === 0) {
                    //for (let column in selectedValues[rowId]) {
                    //    maxCapturedColumnIndex++;
                    //}
                    maxCapturedColumnIndex += Object.keys(selectedValues[rowId]).length;
                }
                maxCapturedRowIndex++;
            }

            for (var i = minRowIndex; i <= maxRowIndex; i++) {
                var visibleRow = visibleRows[i];

                //let columnIndex = 0;
                capturedColumnIndex = 0;

                for (var j = minColumnIndex; j <= maxColumnIndex; j++) {
                    var dataField = that.columns[j].dataField;
                    var cell = visibleRow.getCell(dataField);

                    var currentCapturedRowIndex = 0;

                    for (var _rowId in selectedValues) {
                        if (currentCapturedRowIndex === capturedRowIndex) {
                            var currentCapturedColumnIndex = 0;
                            var _row2 = selectedValues[_rowId];

                            for (var columnDataField in _row2) {
                                if (capturedColumnIndex === currentCapturedColumnIndex) {
                                    var value = _row2[columnDataField];

                                    var canSetValue = true;

                                    if (selectedValues[visibleRow.id]) {
                                        if (selectedValues[visibleRow.id][dataField]) {
                                            canSetValue = false;
                                        }
                                    }

                                    if (canSetValue && that.clipboard.autoFillMode !== 'none') {
                                        var args = {
                                            value: value, oldValue: cell.value, dataField: columnDataField, id: _rowId
                                        };

                                        if (that.clipboard.onPasteValue) {
                                            that.clipboard.onPasteValue(args);
                                            cell.value = args.value;
                                        } else {
                                            args.cell = cell;
                                            args.selectedValues = selectedValues;
                                            args.minRowIndex = minRowIndex;
                                            args.maxRowIndex = maxRowIndex;
                                            args.minColumnIndex = minColumnIndex;
                                            args.maxColumnIndex = maxColumnIndex;
                                            args.currentColumnIndex = j;
                                            args.currentRowIndex = i;

                                            if (that.clipboard.autoFillMode === 'copy') {
                                                that._pasteModeCopy(args);
                                            } else if (that.clipboard.autoFillMode === 'fillSeries') {
                                                that._pasteModeFill(args);
                                            }
                                        }
                                    }
                                }

                                currentCapturedColumnIndex++;
                            }
                        }

                        currentCapturedRowIndex++;
                    }

                    capturedColumnIndex++;

                    if (capturedColumnIndex >= maxCapturedColumnIndex) {
                        capturedColumnIndex = 0;
                    }
                }

                capturedRowIndex++;

                if (capturedRowIndex >= maxCapturedRowIndex) {
                    capturedRowIndex = 0;
                }
            }

            that.endUpdate(false);
            that._recycle(false);
        }
    }, {
        key: '_refreshCellSelectionRect',
        value: function _refreshCellSelectionRect() {
            var that = this;

            var selectionRect = that._selection.selectionRect;

            if (!selectionRect || selectionRect && selectionRect.captured) {
                return;
            }

            var visibleRows = that._recyclingRows;

            var row = selectionRect.row;
            var endRow = selectionRect.endRow;
            var column = selectionRect.column;
            var endColumn = selectionRect.endColumn;

            var startRowIndex = visibleRows.indexOf(row);
            var endRowIndex = visibleRows.indexOf(endRow);

            var startColumnIndex = that.columns.indexOf(column);
            var endColumnIndex = that.columns.indexOf(endColumn);

            var minRowIndex = Math.min(startRowIndex, endRowIndex);
            var maxRowIndex = Math.max(startRowIndex, endRowIndex);

            var minColumnIndex = Math.min(startColumnIndex, endColumnIndex);
            var maxColumnIndex = Math.max(startColumnIndex, endColumnIndex);

            minColumnIndex = Math.max(0, minColumnIndex);
            minRowIndex = Math.max(0, minRowIndex);

            var updateMinMax = function updateMinMax(parentCell) {
                var rowStartIndex = visibleRows.indexOf(parentCell.row);
                var rowEndIndex = visibleRows.indexOf(parentCell.endRow);
                var rowStartColumnIndex = that.columns.indexOf(parentCell.column);
                var rowEndColumnIndex = that.columns.indexOf(parentCell.endColumn);

                minRowIndex = Math.min(minRowIndex, rowStartIndex);
                minRowIndex = Math.min(minRowIndex, rowEndIndex);
                minRowIndex = Math.max(0, minRowIndex);

                maxRowIndex = Math.max(maxRowIndex, rowStartIndex);
                maxRowIndex = Math.max(maxRowIndex, rowEndIndex);

                minColumnIndex = Math.min(minColumnIndex, rowStartColumnIndex);
                minColumnIndex = Math.min(minColumnIndex, rowEndColumnIndex);
                minColumnIndex = Math.max(0, minColumnIndex);

                maxColumnIndex = Math.max(maxColumnIndex, rowStartColumnIndex);
                maxColumnIndex = Math.max(maxColumnIndex, rowEndColumnIndex);
            };

            var parentCell = that._getParentCell(row, column.dataField);
            var parentCell2 = that._getParentCell(row, endColumn.dataField);
            var endParentCell = that._getParentCell(endRow, endColumn.dataField);
            var endParentCell2 = that._getParentCell(endRow, column.dataField);

            if (parentCell) {
                updateMinMax(parentCell);
            }

            if (parentCell2) {
                updateMinMax(parentCell2);
            }

            if (endParentCell) {
                updateMinMax(endParentCell);
            }

            if (endParentCell2) {
                updateMinMax(endParentCell2);
            }

            var top = 0;
            var height = 0;
            var left = 0;
            var width = 0;

            selectionRect.cellValues = [];

            for (var i = minRowIndex; i <= maxRowIndex; i++) {
                var visibleRow = visibleRows[i];

                if (i === minRowIndex) {
                    top = visibleRow.top;

                    if (visibleRow.freeze !== true && visibleRow.freeze !== 'near') {
                        top += that.__frozenNearHeight;
                    }

                    if (visibleRow.freeze === 'far') {
                        top = visibleRow.top + that.__scrollHeight + that.scrollTop - that._scrollView.hScrollBar.offsetHeight;
                    }
                }

                if (i === maxRowIndex) {
                    var lastTop = visibleRow.top;

                    if (visibleRow.freeze === 'far') {
                        lastTop = visibleRow.top + that.__scrollHeight + that.scrollTop - that._scrollView.hScrollBar.offsetHeight;
                    }

                    height = lastTop + visibleRow.height - top;

                    if (visibleRow.freeze !== true && visibleRow.freeze !== 'near') {
                        height += that.__frozenNearHeight;
                    }
                }

                selectionRect.cellValues[visibleRow.id] = [];

                for (var j = minColumnIndex; j <= maxColumnIndex; j++) {
                    var dataField = that.columns[j].dataField;
                    var cell = visibleRow.getCell(dataField);

                    selectionRect.cellValues[visibleRow.id][dataField] = cell.value;

                    if (j === minColumnIndex) {
                        left = cell.column.left;

                        if (cell.column.freeze && cell.column.freeze === 'far') {
                            left = that.__clientSize.width - that.__frozenFarWidth + left + that.scrollLeft - that._scrollView.vScrollBar.offsetWidth;
                        }
                    }

                    if (j === maxColumnIndex) {
                        var maxLeft = cell.column.left;

                        if (cell.column.freeze && cell.column.freeze === 'far') {
                            maxLeft = that.__clientSize.width - that.__frozenFarWidth + maxLeft + that.scrollLeft - that._scrollView.vScrollBar.offsetWidth;
                        }

                        width = maxLeft + cell.column.computedWidth - left;
                    }

                    cell.selected = true;
                }
            }

            selectionRect.style.top = top - that.scrollTop - 1 + 'px';
            selectionRect.style.left = left - that.scrollLeft + 'px';

            selectionRect.style.height = height + 1 + 'px';
            selectionRect.style.width = width + 1 + 'px';
        }
    }, {
        key: '_renderInputOverlay',
        value: function _renderInputOverlay(id, event, isSameRow) {
            var that = this;
            var row = that.rowById[id];

            if (!row) {
                return;
            }

            if (!row.allowSelect || row.label) {
                return;
            }

            if (event && that.selection.checkBoxes.enabled) {
                if (that._inputOverlay && that._inputOverlay.classList.contains('jqx-input-overlay-column')) {
                    if (that._inputOverlay.parentNode) {
                        that._inputOverlay.parentNode.removeChild(that._inputOverlay);
                    }

                    that._inputOverlay = null;
                }

                if (!that._inputOverlay) {
                    that._inputOverlay = document.createElement('div');
                    that.$.scrollView.appendChild(that._inputOverlay);
                    that._inputOverlay.classList.add('jqx-input-overlay');
                }

                var top = !row.freeze ? that.__frozenNearHeight + row.top : row.top;

                var center = Math.round((row.cellHeight - that._selectionColumn.computedWidth) / 2);

                var left = that._selectionColumn.element.parentElement.offsetLeft + that._selectionColumn.element.offsetLeft;

                that._inputOverlay.style.left = left + 'px';

                that._inputOverlay.style.height = that._selectionColumn.computedWidth + 'px';
                that._inputOverlay.style.width = that._selectionColumn.computedWidth + 'px';
                that._inputOverlay.style.top = top + center - that.scrollTop + 'px';

                that._inputOverlay.row = row;
                that._inputOverlay.onpointerdown = function () {
                    if (!that._inputOverlay) {
                        that._inputOverlay.onpointerdown = null;
                    }

                    var row = that._inputOverlay.row;

                    that.beginUpdate();
                    row.selected = !row.selected;
                    that.endUpdate(false);

                    that._recycle();
                    that._renderInputOverlay(row.id, event, true);
                };

                if (that.appearance.allowCheckBoxesSelectionAnimation && isSameRow === undefined) {
                    that._inputOverlay.classList.add('jqx-animate');
                }

                requestAnimationFrame(function () {
                    if (that._inputOverlay) {
                        that._inputOverlay.classList.add('jqx-input-overlay-on');
                    }
                });
            }
        }
    }, {
        key: '_selectRow',
        value: function _selectRow(id, event) {
            var that = this;
            var row = that.rowById[id];

            if (!row || !that.selection.enabled) {
                return;
            }

            if (row.header && row.header.style.cursor === 'row-resize') {
                return;
            }

            if (event) {
                if (!event.shiftKey || !that._selection.focusedCell) {
                    that._selection.focusedCell = row.getCell(that.columns[0].dataField);
                }
            }

            that._lastRowsSelectionRange = null;

            if (that.selection.mode === 'extended') {
                that._handleExtendedRowSelection(row, event);
            } else {
                if (that.selection.mode === 'one') {
                    row.selected = true;
                } else {
                    row.selected = !row.selected;
                }
            }
        }
    }, {
        key: '_getParentCell',
        value: function _getParentCell(row, dataField) {
            var that = this;

            var visibleRows = that._recyclingRows;

            for (var i = 0; i < that._cellsMerge.length; i++) {
                var cell = that._cellsMerge[i];

                var rows = [];
                var columns = [];

                rows.push(cell.row);

                if (cell.rowSpan > 1) {
                    var startRowIndex = visibleRows.indexOf(cell.row);

                    if (startRowIndex >= 0) {
                        for (var r = startRowIndex; r < startRowIndex + cell.rowSpan; r++) {
                            if (visibleRows[r] && rows.indexOf(visibleRows[r]) === -1) {
                                rows.push(visibleRows[r]);
                            }
                        }
                    }
                }

                columns.push(cell.column.dataField);

                if (cell.colSpan > 1) {
                    var startColumnIndex = that.columns.indexOf(that.columnByDataField[cell.column.dataField]);

                    for (var _r = startColumnIndex; _r < startColumnIndex + cell.colSpan; _r++) {
                        if (that.columns[_r] && columns.indexOf(that.columns[_r].dataField) === -1) {
                            columns.push(that.columns[_r].dataField);
                        }
                    }
                }

                if (rows.indexOf(row) >= 0 && columns.indexOf(dataField) >= 0) {
                    return {
                        row: cell.row, column: cell.column, endRow: rows[rows.length - 1], endColumn: that.columnByDataField[columns[columns.length - 1]]
                    };
                }
            }

            return null;
        }
    }, {
        key: '_selectCellsRange',
        value: function _selectCellsRange(startRow, endRow, dataField, endDataField) {
            var that = this;
            var selectionRect = that._selection.selectionRect;

            if (that._lastRowsSelectionRange && that._lastRowsSelectionRange.id === startRow.id && that._lastRowsSelectionRange.endId === endRow.id && that._lastColumnSelectionRange && that._lastColumnSelectionRange.dataField === dataField && that._lastColumnSelectionRange.endDataField === endDataField) {
                return;
            }

            that.beginUpdate();
            that.clearSelection();

            that._lastRowsSelectionRange = {
                id: startRow.id, endId: endRow.id
            };
            that._lastColumnSelectionRange = {
                dataField: dataField, endDataField: endDataField
            };

            if (!selectionRect || selectionRect && !selectionRect.captured) {
                if (that._selection.focusedCell) {
                    that._renderCellSelectionRect(that._selection.focusedCell.row, // begin row
                    that._selection.focusedCell.column, // begin column
                    that.rowById[that._lastRowsSelectionRange.endId], // end row
                    that.columnByDataField[that._lastColumnSelectionRange.endDataField]); // end column
                }
            }

            var visibleRows = that._recyclingRows;

            var startColumnIndex = -1;
            var endColumnIndex = that.columns.length;

            var startIndex = visibleRows.indexOf(startRow);
            var endIndex = visibleRows.indexOf(endRow);

            for (var i = 0; i < that.columns.length; i++) {
                var column = that.columns[i];

                if (!column.allowSelect) {
                    continue;
                }

                if (column.dataField === dataField) {
                    startColumnIndex = i;
                }

                if (column.dataField === endDataField) {
                    endColumnIndex = i;
                }
            }

            var minIndex = Math.min(startIndex, endIndex);
            var maxIndex = Math.max(startIndex, endIndex);

            var minColumnIndex = Math.min(startColumnIndex, endColumnIndex);
            var maxColumnIndex = Math.max(startColumnIndex, endColumnIndex);

            var updateMinMax = function updateMinMax(parentCell) {
                var rowStartIndex = visibleRows.indexOf(parentCell.row);
                var rowEndIndex = visibleRows.indexOf(parentCell.endRow);
                var rowStartColumnIndex = that.columns.indexOf(parentCell.column);
                var rowEndColumnIndex = that.columns.indexOf(parentCell.endColumn);

                minIndex = Math.min(minIndex, rowStartIndex);
                minIndex = Math.min(minIndex, rowEndIndex);

                maxIndex = Math.max(maxIndex, rowStartIndex);
                maxIndex = Math.max(maxIndex, rowEndIndex);

                minColumnIndex = Math.min(minColumnIndex, rowStartColumnIndex);
                minColumnIndex = Math.min(minColumnIndex, rowEndColumnIndex);

                maxColumnIndex = Math.max(maxColumnIndex, rowStartColumnIndex);
                maxColumnIndex = Math.max(maxColumnIndex, rowEndColumnIndex);
            };

            var parentCell = that._getParentCell(startRow, dataField);
            var endParentCell = that._getParentCell(endRow, endDataField);

            if (parentCell) {
                updateMinMax(parentCell);
            }

            if (endParentCell) {
                updateMinMax(endParentCell);
            }

            if (maxIndex < 0 || minIndex < 0) {
                that.endUpdate(false);
                that._recycle();
                return;
            }

            for (var _i6 = minIndex; _i6 <= maxIndex; _i6++) {
                var row = visibleRows[_i6];

                if (!row.allowSelect) {
                    continue;
                }

                for (var j = 0; j < that.columns.length; j++) {
                    var _column3 = that.columns[j];

                    if (!_column3.allowSelect) {
                        continue;
                    }

                    if (j >= minColumnIndex && j <= maxColumnIndex) {
                        var cell = row.getCell(_column3.dataField);

                        cell.selected = true;
                    }
                }
            }

            that.endUpdate(false);
            that._recycle();
        }
    }, {
        key: '_selectRowsRange',
        value: function _selectRowsRange(startRow, endRow) {
            var that = this;

            if (that._lastRowsSelectionRange && that._lastRowsSelectionRange.id === startRow.id && that._lastRowsSelectionRange.endId === endRow.id) {
                return;
            }

            that.beginUpdate();
            that.clearSelection();

            that._lastRowsSelectionRange = {
                id: startRow.id, endId: endRow.id
            };

            var visibleRows = that._recyclingRows;

            var startIndex = visibleRows.indexOf(startRow);
            var endIndex = visibleRows.indexOf(endRow);
            var minIndex = Math.min(startIndex, endIndex);
            var maxIndex = Math.max(startIndex, endIndex);

            if (maxIndex < 0) {
                that.endUpdate(false);
                that._recycle();
                return;
            }

            for (var i = minIndex; i <= maxIndex; i++) {
                var visibleRow = visibleRows[i];

                if (!visibleRow) {
                    continue;
                }

                if (!visibleRow.allowSelect) {
                    continue;
                }

                visibleRow.selected = true;
            }

            that.endUpdate(false);
            that._recycle();
        }
    }, {
        key: '_selectColumnsRange',
        value: function _selectColumnsRange(dataField, endDataField) {
            var that = this;

            if (that._lastColumnSelectionRange && that._lastColumnSelectionRange.dataField === dataField && that._lastColumnSelectionRange.endDataField === endDataField) {
                return;
            }

            that.beginUpdate();
            that.clearSelection();

            that._lastColumnSelectionRange = {
                dataField: dataField, endDataField: endDataField
            };

            var startIndex = -1;
            var endIndex = that.columns.length;

            for (var i = 0; i < that.columns.length; i++) {
                var column = that.columns[i];

                if (!column.allowSelect) {
                    continue;
                }

                if (column.dataField === dataField) {
                    startIndex = i;
                }

                if (column.dataField === endDataField) {
                    endIndex = i;
                }
            }

            var minIndex = Math.min(startIndex, endIndex);
            var maxIndex = Math.max(startIndex, endIndex);

            for (var _i7 = 0; _i7 < that.columns.length; _i7++) {
                var _column4 = that.columns[_i7];

                if (!_column4.allowSelect) {
                    continue;
                }

                if (_i7 >= minIndex && _i7 <= maxIndex) {
                    _column4.selected = true;
                }
            }

            that.endUpdate(false);
            that._recycle();
        }
    }, {
        key: '_selectColumn',
        value: function _selectColumn(dataField, event) {
            var that = this;
            var column = that.columnByDataField[dataField];

            if (!column || !that.selection.enabled || !column.allowSelect || !that.selection.allowColumnHeaderSelection) {
                return;
            }

            if (column && column.element.style.cursor === 'col-resize') {
                return;
            }

            if (event) {
                if (that.selection.mode === 'extended') {
                    if (!event.ctrlKey && !event.shiftKey) {
                        that._rangeSelectionStartColumn = column;
                        that._rangeSelectionEndColumn = column;
                    }

                    column.selected = true;

                    if (event && event.shiftKey) {
                        if (!that._rangeSelectionStartColumn) {
                            that._rangeSelectionStartColumn = column;
                        }

                        that._rangeSelectionEndColumn = column;
                        that._selection.columns = [];

                        var startIndex = that.columns.indexOf(that._rangeSelectionStartColumn);
                        var endIndex = that.columns.indexOf(that._rangeSelectionEndColumn);
                        var minIndex = Math.min(startIndex, endIndex);
                        var maxIndex = Math.max(startIndex, endIndex);

                        for (var i = minIndex; i <= maxIndex; i++) {
                            var _column5 = that.columns[i];

                            _column5.selected = true;
                        }
                    }
                } else {
                    if (that.selection.mode === 'one') {
                        column.selected = true;
                    } else {
                        if (column.selected === null) {
                            column.selected = true;
                        } else {
                            column.selected = !column.selected;
                        }
                    }
                }
            }
        }
    }, {
        key: '_getSelectedRows',
        value: function _getSelectedRows(onlyVisibleRows, onlyInCurrentPage) {
            var that = this;
            var selectedRows = [];

            var rows = that.rows;

            if (onlyVisibleRows) {
                rows = that.getVisibleRows();
            }

            if (that.paging.enabled && onlyInCurrentPage) {
                rows = rows.slice(that.paging.pageIndex * that.paging.pageSize, (that.paging.pageIndex + 1) * that.paging.pageSize);
            }

            for (var i = 0; i < rows.length; i++) {
                var row = rows[i];

                if (row.selected) {
                    selectedRows.push(row);
                }
            }

            return selectedRows;
        }
    }, {
        key: '_dragSelectionEnd',
        value: function _dragSelectionEnd() /*event*/{
            var that = this;

            that._dragSelectionStartDataField = null;
            that._dragSelectionStartRow = null;

            if (!that.selection.allowDragSelection || !that.selection.isDragging) {
                return;
            }

            that.selection.isDragging = false;

            if (that._autoScrollSelectionDragInterval) {
                clearInterval(that._autoScrollSelectionDragInterval);

                if (!that.editing.isEditing) {
                    that._recycle();
                }
            }
        }
    }, {
        key: '_dragSelection',
        value: function _dragSelection(event) {
            var that = this;

            if (that.selection.mode !== 'extended' || that.selection.allowDragSelection === false) {
                return;
            }

            if (!that._dragSelectionStartDataField && !that._dragSelectionStartRow) {
                return;
            }

            if (that.selection.allowCellSelection && that._dragSelectionStartDataField && !that._columnResizeLine && !that._dragSelectionStartDataField.startsWith('_') && that._dragSelectionStartRow && !that._rowResizeLine) {
                var elements = document.elementsFromPoint(event.clientX, event.clientY);
                var columnDataField = null;

                for (var i = 0; i < elements.length; i++) {
                    var element = elements[i];

                    if (element.getAttribute('data-field')) {
                        columnDataField = element.getAttribute('data-field');
                        break;
                    }
                }

                var row = null;

                for (var _i8 = 0; _i8 < elements.length; _i8++) {
                    var _element2 = elements[_i8];

                    if (_element2.getAttribute('data-id')) {
                        row = _element2.row;
                        break;
                    }
                }

                if (columnDataField && row) {
                    that._selectCellsRange(that._dragSelectionStartRow, row, that._dragSelectionStartDataField, columnDataField);
                }

                if (that.selection.allowDragSelectionAutoScroll) {
                    if (that._autoScrollSelectionDragInterval) {
                        clearInterval(that._autoScrollSelectionDragInterval);
                    }

                    that.selection.isDragging = true;

                    that._autoScrollSelectionDragInterval = setInterval(function () {
                        var rect = that.$.scrollView.getBoundingClientRect();

                        if (event.clientX <= rect.left + 20) {
                            that.scrollLeft -= 15;
                        } else if (event.clientX >= rect.left + rect.width - 20) {
                            that.scrollLeft += 15;
                        }

                        if (event.clientY <= rect.top + 20) {
                            that.scrollTop -= 15;
                        } else if (event.clientY >= rect.top + rect.height - 20) {
                            that.scrollTop += 15;
                        }
                    }, 5);
                }
                return;
            }

            if (that._dragSelectionStartRow && !that._rowResizeLine && (that.selection.allowRowSelection && !that._dragSelectionStartDataField.startsWith('_') || that.selection.allowRowHeaderSelection && that._dragSelectionStartDataField.startsWith('_'))) {
                var _elements2 = document.elementsFromPoint(event.clientX, event.clientY);
                var _row3 = null;

                for (var _i9 = 0; _i9 < _elements2.length; _i9++) {
                    var _element3 = _elements2[_i9];

                    if (_element3.getAttribute('data-id')) {
                        _row3 = _element3.row;
                        if (!_row3 && _element3.cell) {
                            _row3 = _element3.cell.row;
                        }
                        break;
                    }
                }

                if (_row3) {
                    that._selectRowsRange(that._dragSelectionStartRow, _row3);
                }

                if (that._autoScrollSelectionDragInterval) {
                    clearInterval(that._autoScrollSelectionDragInterval);
                }

                that.selection.isDragging = true;

                that._autoScrollSelectionDragInterval = setInterval(function () {
                    var rect = that.$.scrollView.getBoundingClientRect();

                    if (event.clientY <= rect.top + 20) {
                        that.scrollTop -= 15;
                    } else if (event.clientY >= rect.top + rect.height - 20) {
                        that.scrollTop += 15;
                    }
                }, 5);
            } else if (that._dragSelectionStartDataField && !that._columnResizeLine && !that._dragSelectionStartDataField.startsWith('_') && that.selection.allowColumnHeaderSelection) {
                var _elements3 = document.elementsFromPoint(event.clientX, event.clientY);
                var _columnDataField = null;

                for (var _i10 = 0; _i10 < _elements3.length; _i10++) {
                    var _element4 = _elements3[_i10];

                    if (_element4.getAttribute('data-field')) {
                        _columnDataField = _element4.getAttribute('data-field');
                        break;
                    }
                }

                if (_columnDataField) {
                    that._selectColumnsRange(that._dragSelectionStartDataField, _columnDataField);
                }

                if (that._autoScrollSelectionDragInterval) {
                    clearInterval(that._autoScrollSelectionDragInterval);
                }

                that.selection.isDragging = true;

                that._autoScrollSelectionDragInterval = setInterval(function () {
                    var rect = that.$.scrollView.getBoundingClientRect();

                    if (event.clientX <= rect.left + 20) {
                        that.scrollLeft -= 15;
                    } else if (event.clientX >= rect.left + rect.width - 20) {
                        that.scrollLeft += 15;
                    }
                }, 5);
            }
        }

        // PUBLIC API

    }, {
        key: 'select',
        value: function select(id, dataField) {
            var that = this;

            that._setSelection(id, dataField);
        }
    }, {
        key: 'unselect',
        value: function unselect(id, dataField) {
            var that = this;

            if (that._selection) {
                if (that._selection.rows && that._selection.rows[id]) {
                    delete that._selection.rows[id];
                }

                if (that._selection.columns && that._selection.columns[dataField]) {
                    delete that._selection.columns[dataField];
                }

                if (that._selection.cells) {
                    if (that._selection.cells['row' + id]) {
                        delete that._selection.cells['row' + id][dataField];

                        if (Object.getOwnPropertyNames(that._selection.cells['row' + id]).length === 1) {
                            delete that._selection.cells['row' + id];
                        }
                    }

                    if (that._selection.cells['column' + dataField]) {
                        delete that._selection.cells['column' + dataField][id];

                        if (Object.getOwnPropertyNames(that._selection.cells['column' + dataField]).length === 1) {
                            delete that._selection.cells['column' + dataField];
                        }
                    }
                }
            }
        }
    }, {
        key: 'getSelection',
        value: function getSelection() {
            var that = this;
            var rows = null;
            var columns = null;
            var cells = null;
            var focused = null;

            if (that._selection.rows && Object.keys(that._selection.rows).length > 0) {
                var rowKeys = Object.keys(that._selection.rows);

                rows = [];

                for (var i = 0; i < rowKeys.length; i++) {
                    var rowKey = rowKeys[i];

                    rows.push({ id: rowKey, row: that.rowById[rowKey] });
                }
            }

            if (that._selection.columns && Object.keys(that._selection.columns).length > 0) {
                var columnKeys = Object.keys(that._selection.columns);

                columns = [];

                for (var _i11 = 0; _i11 < columnKeys.length; _i11++) {
                    var columnKey = columnKeys[_i11];

                    columns.push({ dataField: columnKey, column: that.columnByDataField[columnKey] });
                }
            }

            if (that._selection.cells) {
                for (var propertyName in that._selection.cells) {
                    if (propertyName.startsWith('row')) {
                        var id = propertyName.replace('row', '');
                        var dataField = null;

                        for (var columnDataField in that._selection.cells[propertyName]) {
                            dataField = columnDataField.replace('column', '');

                            if (!cells) {
                                cells = [];
                            }

                            cells.push({ id: id, dataField: dataField, column: that.columnByDataField[dataField], row: that.rowById[id] });
                        }
                    }
                }
            }

            if (that._selection.focusedCell) {
                focused = { id: that._selection.focusedCell.row.id, dataField: that._selection.focusedCell.column.dataField };
            }

            return {
                rows: rows,
                columns: columns,
                cells: cells,
                focused: focused
            };
        }
    }, {
        key: 'clearSelection',
        value: function clearSelection() {
            var that = this;

            that._selection.rows = [];
            that._selection.columns = [];
            that._selection.cells = [];

            that._recycle();
        }
    }, {
        key: '_getSelectionCellValues',
        value: function _getSelectionCellValues() {
            var that = this;

            if (that._selection.selectionRect) {
                return that._selection.selectionRect.cellValues;
            }

            if (that._selection.rows.length > 0) {
                var cellValues = [];

                for (var id in that._selection.rows) {
                    var row = that.rowById[id];

                    for (var j = 0; j < that.columns.length; j++) {
                        var column = that.columns[j];

                        if (!column) {
                            continue;
                        }

                        if (!cellValues[id]) {
                            cellValues[id] = [];
                        }

                        cellValues[id][column.dataField] = row.data[column.dataField];
                    }
                }

                return cellValues;
            }

            if (that._selection.columns.length > 0) {
                var _cellValues = [];

                for (var dataField in that._selection.columns) {
                    var _column6 = that.columnByDataField[dataField];

                    if (!_column6) {
                        continue;
                    }

                    for (var _j2 = 0; _j2 < that._recyclingRows.length; _j2++) {
                        var _row4 = that._recyclingRows[_j2];

                        if (!_row4) {
                            continue;
                        }

                        if (!_cellValues[_row4.id]) {
                            _cellValues[_row4.id] = [];
                        }

                        _cellValues[_row4.id][_column6.dataField] = _row4.data[_column6.dataField];
                    }
                }

                return _cellValues;
            }
        }
    }, {
        key: '_clipboardHandler',
        value: function _clipboardHandler(key, event) {
            var that = this;

            if (that.clipboard.enabled) {
                if (event.ctrlKey && (key === 'c' || key === 'x')) {
                    var values = that._getSelectionCellValues();

                    var clipboard = '';
                    var rows = Object.keys(values).length;
                    var rowIndex = 0;

                    for (var row in values) {
                        var clipboardLine = '';
                        var cols = Object.keys(values[row]).length;
                        var colIndex = 0;

                        for (var column in values[row]) {
                            var value = values[row][column];

                            clipboardLine += value;
                            colIndex++;

                            if (colIndex < cols) {
                                clipboardLine += '\t';
                            }
                        }

                        clipboard += clipboardLine;
                        rowIndex++;

                        if (rowIndex < rows) {
                            clipboard += '\r\n';
                        }

                        if (key === 'x') {
                            //if (selection.cells) {
                            //    that.beginUpdate();

                            //    for (let i = 0; i < selection.cells.length; i++) {
                            //        const cell = selection.cells[i];
                            //        const row = that.rowById[cell.id];

                            //        if (row) {
                            //            const rowCell = row.getCell(cell.dataField);

                            //            rowCell.value = null;
                            //        }
                            //    }

                            //    that.endUpdate(false);
                            //    that._recycle();
                            //}
                        }
                    }

                    navigator.clipboard.writeText(clipboard).then(function () {
                        /* clipboard successfully set */
                    }, function () {
                        /* clipboard write failed */
                    });
                }

                if (event.ctrlKey && key === 'v') {
                    navigator.clipboard.readText().then(function (text) {
                        var clipboardValues = [];
                        //const clipboard = text;
                        var rows = text.split('\r');

                        for (var i = 0; i < rows.length; i++) {
                            var _row5 = rows[i];
                            var cells = _row5.split('\t');

                            var data = {};

                            for (var j = 0; j < cells.length; j++) {
                                data[j] = cells[j].trim();
                            }

                            clipboardValues[i] = data;
                        }

                        var selectionRect = that._selection.selectionRect;

                        if (selectionRect) {
                            that._pasteSelectedCells({
                                row: selectionRect.row,
                                endRow: selectionRect.endDragRow,
                                column: selectionRect.column,
                                endColumn: selectionRect.endColumn
                            }, clipboardValues);
                        } else {
                            var minRow = null;
                            var maxRow = null;

                            for (var id in that._selection.rows) {
                                var _row6 = that.rowById[id];

                                if (!minRow) {
                                    minRow = _row6;
                                }

                                if (!maxRow) {
                                    maxRow = _row6;
                                }

                                if (minRow.visibleIndex > _row6.visibleIndex) {
                                    minRow = _row6;
                                }

                                if (maxRow.visibleIndex < _row6.visibleIndex) {
                                    maxRow = _row6;
                                }
                            }

                            if (minRow && maxRow) {
                                that._pasteSelectedCells({
                                    row: minRow,
                                    endRow: maxRow,
                                    column: that.columns[0],
                                    endColumn: that.columns[that.columns.length - 1]
                                }, clipboardValues);
                            }
                        }
                    });
                }
            }
        }
        /**
        * KeyDown handler.
        */

    }, {
        key: '_keyDownHandler',
        value: function _keyDownHandler(event) {
            var that = this;

            if (that.onKey) {
                that.onKey(event);

                if (event.defaultPrevented) {
                    return;
                }
            }

            var key = event.key;

            if (that.disabled) {
                return;
            }

            if (that.dataSource.length === 0 || that.disabled || that.displayLoadingIndicator) {
                return;
            }

            that._refreshCellSelectionRect();

            var selection = that.getSelection();
            var focused = selection.focused;

            if (!selection.focused) {
                return;
            }

            var parentCell = that._getParentCell(that.rowById[focused.id], focused.dataField);

            if (parentCell) {
                //const cell = parentCell.row.getCell(parentCell.column.dataField);

                if (key === 'ArrowLeft') {
                    focused.id = parentCell.row.id;
                    focused.dataField = parentCell.column.dataField;
                } else if (key === 'ArrowRight') {
                    focused.id = parentCell.row.id;
                    focused.dataField = parentCell.endColumn.dataField;
                } else if (key === 'ArrowUp') {
                    focused.id = parentCell.row.id;
                    focused.dataField = parentCell.column.dataField;
                } else if (key === 'ArrowDown') {
                    focused.id = parentCell.endRow.id;
                    focused.dataField = parentCell.column.dataField;
                }
            }

            if (that._selection.selectionRect && event.shiftKey && !event.ctrlKey) {
                if (that._selection.selectionRect.endRow) {
                    focused.id = that._selection.selectionRect.endRow.id;
                }

                if (that._selection.selectionRect.endColumn) {
                    focused.dataField = that._selection.selectionRect.endColumn.dataField;
                }
            } else if (that.selection.allowRowSelection && !that.selection.allowCellSelection && that._rangeSelectionEndRow !== undefined) {
                focused.id = that._rangeSelectionEndRow.id;
            }

            that._clipboardHandler(key, event);

            if (event.ctrlKey && key !== 'x' && key !== 'c' && key !== 'v' && key !== 'Control' || key === 'Tab') {
                that._selection.rows = [];
                that._selection.columns = [];
                that._selection.cells = [];
            }

            if (key === 'Escape') {
                that.closeMenu();
                that.cancelEdit();
                that._setSelection(focused.id, focused.dataField, event);
                return;
            }

            if (that.hasMenu()) {
                return;
            }

            if (event.altKey) {
                if (key === 'ArrowDown') {
                    var column = that.columnByDataField[focused.dataField];

                    if (column) {
                        column.showActionButton = true;
                        column.onAction();

                        if (that.menu) {
                            that.menu.querySelector('jqx-menu').focus();
                            that.menu.querySelector('jqx-menu').$.dispatch(event);
                        }
                    }
                } else if (key === 'ArrowUp') {
                    that.closeMenu();
                }

                if (key.toLowerCase() === 's') {
                    var _column7 = that.columnByDataField[focused.dataField];

                    if (_column7) {
                        if (!_column7.sorted) {
                            that.sortBy(_column7.dataField, 'asc');
                        } else if (_column7.sortOrder === 'asc') {
                            that.sortBy(_column7.dataField, 'desc');
                        } else {
                            that.sortBy(_column7.dataField, null);
                        }
                    }
                }

                if (key.toLowerCase() === 'g') {
                    var _column8 = that.columnByDataField[focused.dataField];

                    if (_column8) {
                        _column8.group = !_column8.group;
                    }
                }
                return;
            }

            var selectAndUpdate = function selectAndUpdate(id, dataField) {
                requestAnimationFrame(function () {
                    if (that.selection.mode !== 'extended') {
                        that.clearSelection();
                    }

                    that.beginUpdate();

                    that._setSelection(id, dataField, event);
                    that.ensureVisible(id, dataField);

                    that.endUpdate(false);
                    that._recycle();
                });
                event.stopPropagation();
                event.preventDefault(); //prevent window scrolling
            };

            switch (key) {
                case 'Tab':
                    {
                        var _column9 = !event.shiftKey ? that.nextColumn(focused.dataField) : that.prevColumn(focused.dataField);

                        if (_column9) {
                            that._selection.focusedCell = that.rowById[focused.id].getCell(_column9.dataField);
                            that._setSelection(focused.id, _column9.dataField, event);
                            that.focus();
                            event.stopPropagation();
                            event.preventDefault();
                        } else {
                            var row = !event.shiftKey ? that.nextRow(focused.id) : that.prevRow(focused.id);
                            var dataField = !event.shiftKey ? that.firstColumn().dataField : that.lastColumn().dataField;

                            if (that.editing.addNewRow.autoCreate && !event.shiftKey && focused.id === that.lastRow().id) {
                                that.addUnboundRow(1);
                                row = that.lastRow();
                            }

                            if (!row) {
                                return;
                            }

                            if (event.shiftKey) {
                                that._selection.focusedCell = null;
                            }

                            selectAndUpdate(row.id, dataField);
                        }

                        break;
                    }
                case ' ':
                case 'F2':
                    {
                        var _row7 = that.rowById[focused.id];

                        if (!_row7 || that.editing.editCell) {
                            return;
                        }

                        that._beginEdit(_row7, focused.dataField);
                        break;
                    }
                case 'Delete':
                case 'Backspace':
                    {
                        var _row8 = that.rowById[focused.id];

                        if (!_row8 || that.editing.editCell) {
                            return;
                        }

                        var rowCell = _row8.getCell(focused.dataField);
                        var value = rowCell.value;

                        if (selection.cells) {
                            that.beginUpdate();

                            for (var i = 0; i < selection.cells.length; i++) {
                                var cell = selection.cells[i];
                                var _row9 = that.rowById[cell.id];

                                if (_row9) {
                                    var _rowCell = _row9.getCell(cell.dataField);

                                    _rowCell.value = null;
                                }
                            }

                            that.endUpdate(false);
                            that._recycle();
                        }

                        if (key === 'Backspace') {
                            that._beginEdit(_row8, focused.dataField);
                            rowCell.canNotify = false;
                            rowCell.value = value;
                            rowCell.canNotify = true;
                        }

                        break;
                    }
                default:
                    {
                        if (that.editing.enabled && !that.editing.editCell && !event.ctrlKey && !event.altKey) {
                            var _row10 = that.rowById[focused.id];

                            if (!_row10) {
                                return;
                            }

                            if (['F1', 'F2', 'F3', 'F4', 'F5', 'F6', 'F7', 'F8', 'F9', 'F10', 'F11', 'F12', 'Shift', 'Up', 'Down', 'Left', 'Right', 'Control', 'F2', 'Esc', ' ', 'Home', 'End', 'PageUp', 'PageDown'].indexOf(key) >= 0) {
                                return;
                            }

                            that._beginEdit(_row10, focused.dataField);

                            setTimeout(function () {
                                if (that.editing.editCell) {
                                    that.editing.editCell.editor.instance.setValue(key);
                                }
                            }, 50);
                        }
                        break;
                    }
                case 'Home':
                    {
                        var _row11 = that.firstRow();

                        if (!_row11) {
                            return;
                        }

                        selectAndUpdate(_row11.id, focused.dataField);
                        break;
                    }
                case 'End':
                    {
                        var _row12 = that.lastRow();

                        if (!_row12) {
                            return;
                        }

                        selectAndUpdate(_row12.id, focused.dataField);
                        break;
                    }
                case 'PageUp':
                    {
                        var rows = that._recyclingRows;
                        var _row13 = that.rowById[focused.id];
                        var index = rows.indexOf(_row13);

                        for (var _i12 = index; _i12 >= 0; _i12--) {
                            var currentRow = rows[_i12];

                            if (_row13.top - currentRow.top >= that.$.scrollView.offsetHeight) {
                                selectAndUpdate(currentRow.id, focused.dataField);
                                return;
                            }
                        }

                        selectAndUpdate(that.firstRow().id, focused.dataField);
                        break;
                    }
                case 'PageDown':
                    {
                        var _rows = that._recyclingRows;
                        var _row14 = that.rowById[focused.id];
                        var _index = _rows.indexOf(_row14);

                        for (var _i13 = _index; _i13 < _rows.length; _i13++) {
                            var _currentRow = _rows[_i13];

                            if (_currentRow.top - _row14.top >= that.$.scrollView.offsetHeight) {
                                selectAndUpdate(_currentRow.id, focused.dataField);
                                return;
                            }
                        }

                        selectAndUpdate(that.lastRow().id, focused.dataField);
                        break;
                    }
                case 'ArrowDown':
                case 'Enter':
                    {
                        var _row15 = !event.ctrlKey ? that.nextRow(focused.id) : that.lastRow();

                        if (that.editing.addNewRow.autoCreate && key === 'Enter' && focused.id === that.lastRow().id) {
                            that.addUnboundRow(1);
                            _row15 = that.lastRow();
                        }

                        if (!_row15) {
                            return;
                        }

                        selectAndUpdate(_row15.id, focused.dataField);
                        break;
                    }
                case 'ArrowUp':
                    {
                        var _row16 = !event.ctrlKey ? that.prevRow(focused.id) : that.firstRow();

                        if (!_row16) {
                            return;
                        }

                        selectAndUpdate(_row16.id, focused.dataField);
                        break;
                    }
                case 'ArrowRight':
                    {
                        var _row17 = that.rowById[focused.id];

                        if (false === _row17.leaf) {
                            if (!_row17.expanded) {
                                _row17.expand();
                                return;
                            } else {
                                var firstChildRow = that.nextRow(focused.id);

                                if (firstChildRow) {
                                    selectAndUpdate(firstChildRow.id, focused.dataField);
                                    return;
                                }
                            }
                        }

                        var _column10 = !event.ctrlKey ? that.nextColumn(focused.dataField) : that.lastColumn();

                        if (!_column10) {
                            return;
                        }

                        selectAndUpdate(focused.id, _column10.dataField);
                        break;
                    }
                case 'ArrowLeft':
                    {
                        var _row18 = that.rowById[focused.id];

                        if (false === _row18.leaf) {
                            if (_row18.expanded) {
                                _row18.collapse();
                            } else if (_row18.parent) {
                                selectAndUpdate(_row18.parent.id, focused.dataField);
                            }
                            return;
                        } else if (_row18.leaf === true && _row18.parent) {
                            selectAndUpdate(_row18.parent.id, focused.dataField);
                            return;
                        }

                        var _column11 = !event.ctrlKey ? that.prevColumn(focused.dataField) : that.firstColumn();

                        if (!_column11) {
                            return;
                        }

                        selectAndUpdate(focused.id, _column11.dataField);
                        break;
                    }
            }

            if (['Shift', 'Up', 'Down', 'Left', 'Right', 'Control', 'F2', 'Esc', ' ', 'Home', 'End', 'PageUp', 'PageDown'].indexOf(key) < 0) {
                return;
            }

            event.stopPropagation();
            event.preventDefault(); //prevent window scrolling
        }
    }, {
        key: 'firstRow',
        value: function firstRow() {
            var that = this;
            var rows = that._recyclingRows;

            if (rows && rows.length > 0) {
                if (!rows[0].autoGenerated) {
                    return rows[0];
                } else {
                    for (var i = 0; i < rows.length; i++) {
                        if (!rows[i].autoGenerated) {
                            return rows[i];
                        }
                    }
                }
            }

            return null;
        }
    }, {
        key: 'lastRow',
        value: function lastRow() {
            var that = this;
            var rows = that._recyclingRows;

            if (rows && rows.length > 0) {
                var row = rows[rows.length - 1];

                if (!row.autoGenerated) {
                    return row;
                } else {
                    for (var i = rows.length - 1; i >= 0; i--) {
                        if (!rows[i].autoGenerated) {
                            return rows[i];
                        }
                    }
                }
            }

            return null;
        }
    }, {
        key: 'nextRow',
        value: function nextRow(id) {
            var that = this;
            var rows = that._recyclingRows;
            var row = that.rowById[id];
            var index = rows.indexOf(row);

            if (index >= 0 && rows[index + 1] && !rows[index + 1].autoGenerated) {
                return rows[index + 1];
            }

            return null;
        }
    }, {
        key: 'prevRow',
        value: function prevRow(id) {
            var that = this;
            var rows = that._recyclingRows;
            var row = that.rowById[id];
            var index = rows.indexOf(row);

            if (index >= 0 && rows[index - 1] && !rows[index - 1].autoGenerated) {
                return rows[index - 1];
            }

            return null;
        }
    }, {
        key: 'firstColumn',
        value: function firstColumn() {
            var that = this;
            var columns = that.columns;

            if (columns && columns.length > 0) {
                return columns[0];
            }

            return null;
        }
    }, {
        key: 'lastColumn',
        value: function lastColumn() {
            var that = this;
            var columns = that.columns;

            if (columns && columns.length > 0) {
                return columns[columns.length - 1];
            }

            return null;
        }
    }, {
        key: 'nextColumn',
        value: function nextColumn(dataField) {
            var that = this;
            var columns = that.columns;
            var column = that.columnByDataField[dataField];
            var index = columns.indexOf(column);

            if (columns[index + 1]) {
                return columns[index + 1];
            }

            return null;
        }
    }, {
        key: 'prevColumn',
        value: function prevColumn(dataField) {
            var that = this;
            var columns = that.columns;
            var column = that.columnByDataField[dataField];
            var index = columns.indexOf(column);

            if (columns[index - 1]) {
                return columns[index - 1];
            }

            return null;
        }
    }, {
        key: 'ensureVisible',
        value: function ensureVisible(id, dataField) {
            var that = this;

            var vScrollBar = that._scrollView.vScrollBar;
            var hScrollBar = that._scrollView.hScrollBar;

            var row = that.rowById[id];
            var column = that.columnByDataField[dataField];

            var ensureRowVisible = function ensureRowVisible(row) {
                if (!row) {
                    return;
                }

                var index = row.visibleIndex;

                if (index === -1) {
                    return;
                }

                if (row.top + row.height + hScrollBar.offsetHeight + that.__frozenNearHeight >= that._scrollView.scrollTop + that.$.scrollView.offsetHeight - that.__frozenFarHeight) {
                    that._scrollView.scrollTop = row.top + row.height;
                }

                if (row.top <= that._scrollView.scrollTop) {
                    that._scrollView.scrollTop = row.top;
                }

                if (index === 0) {
                    that._scrollView.scrollTop = 0;
                } else if (index === that.dataSource.length - 1) {
                    that._scrollView.scrollTop = that._scrollView.scrollHeight;
                }
            };

            ensureRowVisible(row);

            var ensureColumnVisible = function ensureColumnVisible(column) {
                if (!dataField) {
                    return;
                }

                var index = column.visibleIndex;

                if (index === -1) {
                    return;
                }

                if (column.left + column.computedWidth + vScrollBar.offsetWidth >= that._scrollView.scrollLeft + that._clientSize.width) {
                    that._scrollView.scrollLeft = that._scrollView.scrollLeft + column.computedWidth;
                }

                if (column.left <= that._scrollView.scrollLeft) {
                    that._scrollView.scrollLeft = column.left;
                }

                if (index === 0) {
                    that._scrollView.scrollLeft = 0;
                } else if (index === that.columns.length - 1) {
                    that._scrollView.scrollLeft = that._scrollView.scrollWidth;
                }
            };

            ensureColumnVisible(column);
        }

        /*
        * KeyUp handler.
        */

    }, {
        key: '_keyUpHandler',
        value: function _keyUpHandler() /*event*/{
            var that = this;

            if (!that._focused) {
                return;
            }
        }
    }]);
    return Select;
}());