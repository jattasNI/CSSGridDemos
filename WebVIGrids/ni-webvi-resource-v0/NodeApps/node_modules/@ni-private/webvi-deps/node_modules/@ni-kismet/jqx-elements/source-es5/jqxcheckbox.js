'use strict';

/**
* CheckBox custom element.
*/
JQX('jqx-check-box', function (_JQX$ToggleButton) {
    babelHelpers.inherits(CheckBox, _JQX$ToggleButton);

    function CheckBox() {
        babelHelpers.classCallCheck(this, CheckBox);
        return babelHelpers.possibleConstructorReturn(this, (CheckBox.__proto__ || Object.getPrototypeOf(CheckBox)).apply(this, arguments));
    }

    babelHelpers.createClass(CheckBox, [{
        key: 'template',


        /** CheckBox's Html template. */
        value: function template() {
            return '<div id=\'container\' class=\'jqx-container\'>\n                 <div class =\'jqx-overlay\'></div>\n                 <span id=\'checkBoxInput\' class =\'jqx-input\'></span>\n                 <span id=\'checkBoxLabel\' inner-h-t-m-l=\'[[innerHTML]]\' class =\'jqx-label\'><content></content></span>\n                 <input id=\'hiddenInput\' class =\'jqx-hidden-input\' type=\'hidden\'>\n               </div>';
        }
    }, {
        key: '_focusHandler',
        value: function _focusHandler() {
            var that = this;

            that.$.setAttributeValue('focus', true);
        }
    }, {
        key: '_blurHandler',
        value: function _blurHandler() {
            var that = this;

            that.$.setAttributeValue('focus', false);
        }
    }, {
        key: '_mouseEnterHandler',
        value: function _mouseEnterHandler() {
            var that = this;

            that.$.setAttributeValue('hover', true);
        }
    }, {
        key: '_mouseLeaveHandler',
        value: function _mouseLeaveHandler() {
            var that = this;

            that.$.setAttributeValue('hover', false);
        }

        /** Called when the element is ready. Used for one-time configuration of the CheckBox. */

    }, {
        key: 'ready',
        value: function ready() {
            var that = this;

            babelHelpers.get(CheckBox.prototype.__proto__ || Object.getPrototypeOf(CheckBox.prototype), 'ready', this).call(this);

            if (that.indeterminate) {
                that._valueCashe = that.checked;
                that.checked = null;
            }

            that._updateHidenInputNameAndValue();
        }

        /**
        * Updates CheckBox when a property is changed.
        * @param {string} propertyName The name of the property.
        * @param {number/string} oldValue The previously entered value.
        * @param {number/string} newValue The new entered value.
        */

    }, {
        key: 'propertyChangedHandler',
        value: function propertyChangedHandler(propertyName, oldValue, newValue) {
            babelHelpers.get(CheckBox.prototype.__proto__ || Object.getPrototypeOf(CheckBox.prototype), 'propertyChangedHandler', this).call(this, propertyName, oldValue, newValue);

            var that = this;

            that._updateContentProperties();

            switch (propertyName) {
                case 'indeterminate':
                    if (newValue) {
                        that._valueCashe = that.checked;
                        that.checked = null;
                    } else {
                        that.checked = that._valueCashe;
                    }
                    that._updateHidenInputNameAndValue();
                    break;
                case 'value':
                    that._updateHidenInputNameAndValue();
                    break;
                case 'checked':
                    that._updateHidenInputNameAndValue();
                    break;
                case 'name':
                    that._updateHidenInputName();
                    break;
            }
        }

        /** Changes the check state on click. */

    }, {
        key: '_documentUpHandler',
        value: function _documentUpHandler(event) {
            var that = this,
                target = that.enableShadowDOM ? event.originalEvent.composedPath()[0] : event.originalEvent.target;

            if (!that._pressed) {
                return;
            }

            that._pressed = false;
            that.$.setAttributeValue('active', false);

            if (that.disabled || that.readonly || that.checkMode === 'input' && target !== that.$.checkBoxInput || that.checkMode === 'label' && target !== that.$.checkBoxLabel) {
                return;
            }

            if (that.clickMode === 'press') {
                event.preventDefault();
                event.stopPropagation();
                return;
            }

            that._changeCheckState('pointer');
            that.focus();
            that._handleTextSelection();
            that._updateHidenInputNameAndValue();
        }

        /** Changes the check state on mouse down. */

    }, {
        key: '_downHandler',
        value: function _downHandler(event) {
            var that = this,
                target = that.enableShadowDOM ? event.originalEvent.composedPath()[0] : event.originalEvent.target;

            if (that.disabled || that.readonly || that.checkMode === 'input' && target !== that.$.checkBoxInput || that.checkMode === 'label' && target !== that.$.checkBoxLabel) {
                return;
            }

            that.$.setAttributeValue('active', true);

            if (that.hasRippleAnimation) {
                var rect = that.$.checkBoxInput.getBoundingClientRect(),
                    windowScrollX = window.scrollX || window.pageXOffset,
                    windowScrollY = window.scrollY || window.pageYOffset;

                JQX.Utilities.Animation.Ripple.animate(that.$.checkBoxInput, rect.left + rect.width / 2 + windowScrollX, rect.top + rect.height / 2 + windowScrollY);
            }

            that._pressed = true;

            if (that.clickMode === 'press' || that.clickMode === 'pressAndRelease') {
                that._changeCheckState('pointer');
                that.$.fireEvent('click');
                that.focus();
                that._updateHidenInputNameAndValue();
            }
        }
    }], [{
        key: 'properties',

        // CheckBox's properties.
        get: function get() {
            return {
                'checkMode': {
                    value: 'both',
                    allowedValues: ['both', 'input', 'label'],
                    type: 'string'
                },
                'type': {
                    value: 'checkbox',
                    type: 'string',
                    defaultReflectToAttribute: true,
                    readonly: true
                }
            };
        }
    }, {
        key: 'listeners',
        get: function get() {
            return {
                'down': '_downHandler',
                'document.up': '_documentUpHandler',
                'checkBoxInput.mouseenter': '_mouseEnterHandler',
                'checkBoxInput.mouseleave': '_mouseLeaveHandler',
                'focus': '_focusHandler',
                'blur': '_blurHandler'
            };
        }

        /**
        * CSS files needed for the element (ShadowDOM)
        */

    }, {
        key: 'styleUrls',
        get: function get() {
            return ['jqx.checkbox.css'];
        }
    }]);
    return CheckBox;
}(JQX.ToggleButton));