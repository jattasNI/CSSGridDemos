import { RenderEngine } from '../../Framework/niRenderEngine.js';
import { WebApplicationModelsService as webApplicationModelsService } from '../../Framework/niWebApplicationModelService.js';
window.testHelpers = window.testHelpers || {};
window.testHelpers.getWasmPath = function () {
    return Object.keys(window.__karma__.files).find((file) => {
        return file.toUpperCase().endsWith('.WASM');
    });
};
window.testHelpers.createLocalWebAppTestHelper = function () {
    'use strict';
    const htmlFixtureContainerId = 'html-fixture-container';
    const frontPanelElementName = 'ni-front-panel';
    let webAppElement, webAppModel, viElement, htmlContainer, viName, viaCodePath, htmlFixturePath;
    const sequence = [];
    let seqCounter = 0;
    const installLocalWebAppFixture = function () {
        webAppElement = document.createElement('ni-web-application');
        webAppElement.engine = 'VIREO';
        webAppElement.location = 'BROWSER';
        webAppElement.disableAutoStart = false;
        webAppElement.vireoSource = viaCodePath;
        webAppElement.wasmUrl = window.testHelpers.getWasmPath();
        viElement = document.createElement('ni-virtual-instrument');
        viElement.viName = viName;
        webAppElement.addEventListener('service-state-changed', webAppStateListener);
        webAppElement.appendChild(viElement);
        document.body.appendChild(webAppElement);
    };
    const webAppStateListener = function (evt) {
        if (seqCounter >= sequence.length) {
            return;
        }
        const waitingState = sequence[seqCounter];
        if (evt.detail.serviceState === waitingState.name) {
            seqCounter += 1;
            waitingState.callback();
        }
    };
    const removeLocalWebAppFixture = function (done) {
        webAppElement.removeEventListener('service-state-changed', webAppStateListener);
        webAppElement.remove();
        testHelpers.runAsyncScheduler(done);
    };
    const sharedTemplate = document.createElement('template');
    const installHtmlFixture = function (responseText) {
        sharedTemplate.innerHTML = responseText;
        const style = sharedTemplate.content.querySelector('style[ni-autogenerated-style-id]');
        const frontPanel = sharedTemplate.content.querySelector(frontPanelElementName);
        htmlContainer = document.createElement('div');
        htmlContainer.id = htmlFixtureContainerId;
        htmlContainer.appendChild(style);
        htmlContainer.appendChild(frontPanel);
        document.body.appendChild(htmlContainer);
    };
    const removeHtmlFixture = function (done) {
        const removeHtmlWork = function () {
            if (htmlContainer !== undefined) {
                htmlContainer.remove();
                testHelpers.runAsyncScheduler(done);
            }
        };
        if (RenderEngine.isFrameRequested) {
            RenderEngine.waitForFrameUpdate().then(() => {
                removeHtmlWork();
            });
        }
        else {
            removeHtmlWork();
        }
    };
    const getWebAppElement = function () {
        return webAppElement;
    };
    const getWebAppModel = function () {
        if (webAppModel === undefined) {
            webAppModel = webApplicationModelsService.getModel(webAppElement);
        }
        return webAppModel;
    };
    const getVireoInstance = function () {
        const model = getWebAppModel();
        return model.updateService.vireo;
    };
    const getVIElement = function () {
        return viElement;
    };
    const setupWebApp = function (virtualInstrumentName, viaPath, htmlPath) {
        viName = virtualInstrumentName;
        viaCodePath = viaPath;
        htmlFixturePath = htmlPath;
    };
    const cleanupWebApp = function (done) {
        removeHtmlFixture(function () {
            removeLocalWebAppFixture(done);
        });
    };
    const onWebAppState = function (waitingState, fnCallback) {
        const stateInfo = {};
        stateInfo.name = waitingState;
        stateInfo.callback = fnCallback;
        sequence.push(stateInfo);
    };
    const runTest = function () {
        const fixtureRequest = new Request(htmlFixturePath);
        fetch(fixtureRequest).then(function (response) {
            return response.text();
        }).then(function (responseText) {
            installLocalWebAppFixture();
            installHtmlFixture(responseText);
        });
    };
    return {
        getWebAppElement: getWebAppElement,
        getVIElement: getVIElement,
        setupWebApp: setupWebApp,
        cleanupWebApp: cleanupWebApp,
        getVireoInstance: getVireoInstance,
        getWebAppModel: getWebAppModel,
        onWebAppState: onWebAppState,
        runTest: runTest
    };
};
//# sourceMappingURL=webAppLocalTestHelper.js.map